window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:622933,title:"Find dead code in JavaScript\u002FCSS projects",description:"Here are some techniques that I use to find unused code to delete so I keep my projects healthy....",readable_publish_date:"Mar 2",slug:"find-dead-code-in-javascript-css-projects-5f3l",path:"\u002Fpioug\u002Ffind-dead-code-in-javascript-css-projects-5f3l",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F622933.png",canonical_url:c,created_at:"2021-03-02T15:07:13Z",edited_at:"2021-03-03T02:07:44Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:2,tag_list:"javascript, css, maintenance",tags:["javascript","css","maintenance"],body_html:"\u003Cp\u003EHere are some techniques that I use to find unused code to delete so I keep my projects healthy.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"es-modules\" href=\"#es-modules\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  ES Modules\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThe following modules can find unused files and \u003Ccode\u003Eexport\u003C\u002Fcode\u003E statements:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ffind-unused-exports\"\u003Ehttps:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ffind-unused-exports\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Funimported\"\u003Ehttps:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Funimported\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThey all have CLI that can be invoked via \u003Ccode\u003Enpx\u003C\u002Fcode\u003E. They require little to no configuration. They don't depend on any sort of bundling tools, so they can be used in most JS projects.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI find the detection reliable. In the worst-case scenario, a bundler can detect when a file or an export is missing at build time.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"eslint\" href=\"#eslint\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  ESLint\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThe following ESLint rules help me finding unused code:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-constant-condition\"\u003Ehttps:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-constant-condition\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unused-vars\"\u003Ehttps:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unused-vars\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unreachable\"\u003Ehttps:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unreachable\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIt's safe to delete everything that ESLint has detected. The configuration \u003Ccode\u003E\"eslint:recommended\"\u003C\u002Fcode\u003E enables those rules.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"css\" href=\"#css\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  CSS\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFor stylesheets, I use this module to find unused CSS selectors:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fpurgecss\"\u003Ehttps:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fpurgecss\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EI assume the reliability depends on the flavor of your code. I used it in AngularJS projects and got a couple of false positives. However, it does help me to identify which areas of the codebase have been neglected.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"nodemodules\" href=\"#nodemodules\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  node_modules\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Cem\u003EBased on my experience and understanding of \u003Ccode\u003Epackage-lock.json\u003C\u002Fcode\u003E using npm v6\u003C\u002Fem\u003E, re-creating the lockfile (without necessarily updating \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E) can tidy the dependency tree of a project:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E\u003Cspan class=\"nb\"\u003Erm\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-rf\u003C\u002Fspan\u003E node_modules package-lock.json\nnpm \u003Cspan class=\"nb\"\u003Einstall\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EInstalling modules starting from \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E will get you the most updated dependencies (both direct and transitive). When you add or update modules of a project, transitive dependencies are not always updated since they can still satisfy the new constraints. So updating everything may dedupe packages as the likelihood of shared modules increase.\u003C\u002Fp\u003E\n\n\u003Cp\u003ERe-creating a lockfile is risky. It is worth reviewing the diff to understand which packages have changed.\u003C\u002Fp\u003E\n\n",body_markdown:"Here are some techniques that I use to find unused code to delete so I keep my projects healthy.\n\n# ES Modules\n\nThe following modules can find unused files and `export` statements:\n\n- https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ffind-unused-exports\n- https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Funimported\n\nThey all have CLI that can be invoked via `npx`. They require little to no configuration. They don't depend on any sort of bundling tools, so they can be used in most JS projects.\n\nI find the detection reliable. In the worst-case scenario, a bundler can detect when a file or an export is missing at build time.\n\n# ESLint\n\nThe following ESLint rules help me finding unused code:\n\n- https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-constant-condition\n- https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unused-vars\n- https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-unreachable\n\nIt's safe to delete everything that ESLint has detected. The configuration `\"eslint:recommended\"` enables those rules.\n\n## CSS\n\nFor stylesheets, I use this module to find unused CSS selectors:\n\n- https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fpurgecss\n\nI assume the reliability depends on the flavor of your code. I used it in AngularJS projects and got a couple of false positives. However, it does help me to identify which areas of the codebase have been neglected.\n\n# node_modules\n\n_Based on my experience and understanding of `package-lock.json` using npm v6_, re-creating the lockfile (without necessarily updating `package.json`) can tidy the dependency tree of a project:\n\n```sh\nrm -rf node_modules package-lock.json\nnpm install\n```\n\nInstalling modules starting from `package.json` will get you the most updated dependencies (both direct and transitive). When you add or update modules of a project, transitive dependencies are not always updated since they can still satisfy the new constraints. So updating everything may dedupe packages as the likelihood of shared modules increase.\n\nRe-creating a lockfile is risky. It is worth reviewing the diff to understand which packages have changed.",user:{name:"Gilles",username:e,twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--K9Q03CKh--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F583270\u002F12256879-06bf-420f-8661-4abe5c431364.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4GU8Mzws--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F583270\u002F12256879-06bf-420f-8661-4abe5c431364.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fpioug\u002F622933",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-03-02T16:47:47Z","https:\u002F\u002Fdev.to\u002Fpioug\u002Ffind-dead-code-in-javascript-css-projects-5f3l",10,"pioug"));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:626722,title:"Mongoose One-to-Many Relationship Example",description:"https:\u002F\u002Floizenai.com\u002Fmongoose-one-to-many-relationship-example\u002F   Tutorial: \"Mongoose One-to-Many Rel...",readable_publish_date:"Mar 5",slug:"mongoose-one-to-many-relationship-example-3oce",path:"\u002Floizenai\u002Fmongoose-one-to-many-relationship-example-3oce",url:d,comments_count:0,public_reactions_count:e,collection_id:a,published_timestamp:b,positive_reactions_count:e,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F626722.png",canonical_url:d,created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:8,tag_list:"mongoose, onetomany, node",tags:["mongoose","onetomany","node"],body_html:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fmongoose-one-to-many-relationship-example\u002F\"\u003Ehttps:\u002F\u002Floizenai.com\u002Fmongoose-one-to-many-relationship-example\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ETutorial: \"Mongoose One-to-Many Relationship Example - Mongodb One-to-Many Relationship Example\"\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn the tutorial, we will show you how to develop One-to-Many related document with NodeJs\u002FExpress, MongoDB using Mongoose.\u003C\u002Fp\u003E\n\n\u003Ch2 id=\"objective-mongoose-one-to-many-relationship-example\"\u003EObjective - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn the tutorial, we show how to develop One-to-Many related documents with NodeJS\u002FExpress, MongoDB. Project structure:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\u002Fnodejs-restapi-mongodb\n    \u002Fapp\n        \u002Fconfig\n            mongodb.config.js\n        \u002Fcontrollers\n            companies.controller.js\n            products.controller.js\n        \u002Fmodels\n            company.model.js\n            product.model.js\n        \u002Froutes\n            companies.routes.js\n            products.routes.js\n    \u002Fnode_modules\n    package.json\n    server.js\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"one-to-many-related-models\"\u003EOne-to-Many related models - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFor working with related documents, we use the \u003Cstrong\u003EObjectId\u003C\u002Fstrong\u003E schema field.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECompanySchema:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n    name: String,\n    street: String,\n    phone: String\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProductSchema:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst ProductSchema = mongoose.Schema({\n    code: String,\n    name: String,\n    details: String,\n    company : { type: Schema.Types.ObjectId, ref: 'Company' }\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cp\u003EWe can save the references to the related document by assigning the \u003Cstrong\u003E_id\u003C\u002Fstrong\u003E value:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n  var apple = new Company({ \n    name: 'Apple', \n    street: 'Cupertino, CA 95014', \n    phone: '1-408-996-1010' \n  });\n\n  apple.save(function (err) {\n    if(err) return console.error(err.stack)\n    \n    console.log(\"Apple company is added\")\n    \n    \u002F\u002FApple now exists, so lets create a Product\n    var iphone7 = new Product({\n      code: \"A-123\",\n      name: \"Iphone7\",\n      details: \"Price: 649.00 USD &amp; FREE shipping\",\n      company: apple._id\n    });\n\n    iphone7.save(function (err) {\n      if(err) return console.error(err.stack)\n      \n      console.log(\"Iphone 7 is added\")\n    });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cp\u003EWe use \u003Ccode\u003Epopulate()\u003C\u002Fcode\u003E to get the Company information in Product:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n    Product.findOne({ name: req.params.productName })\n    .populate('company')\n    .exec(function (err, product) {\n        if (err){\n            \u002F\u002F handle error here\n            ...\n        }\n                    \n        res.send(product);\n    });\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cp\u003EWe didn't add our products to companies, how to get all products by a particular company?\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne way, we create a references array field of products in CompanySchema as below:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n    name: String,\n    street: String,\n    phone: String,\n    products : [{ type: Schema.Types.ObjectId, ref: 'Product' }]\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cp\u003EBUT What is problem? - We have two places where the information relating companies and products needs to be maintained.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWhat is the better solution?\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E-&gt; We get the \u003Cstrong\u003E_id\u003C\u002Fstrong\u003E of our company, then use \u003Ccode\u003Efind()\u003C\u002Fcode\u003E to search for this in the company field across all products.\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nProduct.find({ company : req.params.companyId })\n.exec(function (err, products) {\n    if (err){\n        \u002F\u002F handle error here\n        ...\n    }\n                \n    res.send(products);\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"create-node-js-express-project\"\u003ECreate a NodeJS\u002FExpress project - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFollowing below guide:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fozenero.com\u002Fnode-js\u002Fcrud-restapis-with-nodejs-express-mongodb\"\u003ECrud RestAPIs with NodeJS\u002FExpress, MongoDB using Mongoose\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESee dependencies in 'package.json' file:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n  \"dependencies\": {\n    \"body-parser\": \"^1.18.2\",\n    \"express\": \"^4.16.3\",\n    \"mongoose\": \"^5.0.13\",\n    \"npm\": \"^5.8.0\"\n  }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"create-mongoose-model-schema\"\u003ECreate Mongoose Model Schema\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECompanySchema:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n    name: String,\n    street: String,\n    phone: String,\n    products : [{ type: Schema.Types.ObjectId, ref: 'Product' }]\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProductSchema :\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst ProductSchema = mongoose.Schema({\n    code: String,\n    name: String,\n    details: String,\n    company : { type: Schema.Types.ObjectId, ref: 'Company' }\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"node-js-express-restapi-router\"\u003ENodejs Express RestAPI Route - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECompany Routes :\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nmodule.exports = function(app) {\n\n    var companies = require('..\u002Fcontrollers\u002Fcompanies.controller.js')\n    \n    app.get('\u002Fapi\u002Fcompanies\u002Finit', companies.init);\n    app.get('\u002Fapi\u002Fcompanies', companies.findAll);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProduct Routes :\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nmodule.exports = function(app) {\n    var products = require('..\u002Fcontrollers\u002Fproducts.controller.js');\n    \n    app.get('\u002Fapi\u002Fproducts', products.findAll);\n            \n    \u002F\u002F Find a single Product by Name\n    app.get('\u002Fapi\u002Fproducts\u002F:productName', products.findByName);\n    \n    \u002F\u002F Find all Products of a Company\n    app.get('\u002Fapi\u002Fproducts\u002Fcompany\u002F:companyId', products.findByCompanyId);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"node-js-express-restapi-controller\"\u003ENodejs Express RestAPI Controller\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECompany Controllers :\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\n\nexports.init = (req, res) =&gt; {\n  var apple = new Company({ \n    name: 'Apple', \n    street: 'Cupertino, CA 95014', \n    phone: '1-408-996-1010' \n  });\n\n  apple.save(function (err) {\n    if(err) return console.error(err.stack)\n    \n    console.log(\"Apple company is added\")\n    \n    \u002F\u002FApple now exists, so lets create a Product\n    var iphone7 = new Product({\n      code: \"A-123\",\n      name: \"Iphone7\",\n      details: \"Price: 649.00 USD &amp; FREE shipping\",\n      company: apple._id\n    });\n\n    iphone7.save(function (err) {\n      if(err) return console.error(err.stack)\n      \n      console.log(\"Iphone 7 is added\")\n    });\n    \n    var iPadPro = new Product({\n      code: \"A-456\",\n      name: \"IPadPro\",\n      details: \"Price: 417.67 USD &amp; FREE shipping\",\n      company: apple._id\n    });\n    \n    iPadPro.save(function(err){\n        if(err) return console.error(err.stack)\n        \n        console.log(\"IPadPro is added\");\n    });\n    \n  });\n  \n  \n  var samsung = new Company({ \n        name: 'Samsung', \n        street: 'Seocho District, Seoul, South Korea', \n        phone: '+82-2-2053-3000'\n    });\n  \n  samsung.save(function(err){\n    if(err) return console.error(err.stack)\n    \n    console.log(\"Samsung company is added\")\n    \n    \u002F\u002F Samsung now exists, so lets create a Product\n    var galaxyJ7 = new Product({\n      code: \"S-012\",\n      name: \"GalaxyJ7\",\n      details: \"Price: 219.00 USD &amp; FREE shipping\",\n      company: samsung._id  \n    });\n    \n    galaxyJ7.save(function(err){\n        if(err) return console.error(err.stack)\n        console.log(\"GalaxyJ7 is added\")\n    });\n    \n    var galaxyTabA = new Product({\n      code: \"S-456\",\n      name: \"GalaxyTabA\",\n      details: \"Price: 299.99 USD &amp; FREE shipping\",\n      company: samsung._id\n    });\n    \n    galaxyTabA.save(function(err){\n        if(err) return console.error(err.stack)\n        console.log(\"GalaxyTabA is added\")\n    })\n  });\n  \n  res.send(\"Done Initial Data!\");\n}\n\nexports.findAll = (req, res) =&gt; {\n    Company.find()\n    .then(products =&gt; {\n        res.send(products);\n    }).catch(err =&gt; {\n        res.status(500).send({\n            message: err.message\n        });\n    });\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProduct Controllers :\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\n\nexports.findAll = (req, res) =&gt; {\n    \n    Product.find()\n    .then(products =&gt; {\n        res.send(products);\n    }).catch(err =&gt; {\n        res.status(500).send({\n            message: err.message\n        });\n    });\n};\n\n\u002F\u002F Find a Products by Name\nexports.findByName = (req, res) =&gt; {\n    Product.findOne({ name: req.params.productName })\n    .populate('company')\n    .exec(function (err, product) {\n        if (err){\n            if(err.kind === 'ObjectId') {\n                return res.status(404).send({\n                    message: \"Products not found with given name \" + req.params.productName\n                });                \n            }\n            return res.status(500).send({\n                message: \"Error retrieving Products with given Company Id \" + req.params.productName\n            });\n        }\n                    \n        res.send(product);\n    });\n};\n\n\u002F\u002F Find all products by a CompanyId\nexports.findByCompanyId = (req, res) =&gt; {\n    Product.find({ company : req.params.companyId })\n    .exec(function (err, products) {\n        if (err){\n            if(err.kind === 'ObjectId') {\n                return res.status(404).send({\n                    message: \"Products not found with given Company Id \" + req.params.companyId\n                });                \n            }\n            return res.status(500).send({\n                message: \"Error retrieving Products with given Company Id \" + req.params.companyId\n            });\n        }\n                    \n        res.send(products);\n    });\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Ch2 id=\"node-js-run-check-results\"\u003ERun &amp; Check results - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERun MongDB server by commandline:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\\MongoDB\\Server\\3.6\\bin&gt;mongod.exe\n2018-04-11T03:11:42.209+0700 I CONTROL  [initandlisten] MongoDB starting : pid=2432 port=27017 dbpath=C:\\data\\db\\ 64-bit host=LOI-COMPUTER\n2018-04-11T03:11:42.211+0700 I CONTROL  [initandlisten] targetMinOS: Windows 7\u002FWindows Server 2008 R2\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] db version v3.6.3\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] git version: 9586e557d54ef70f9ca4b43c26892cd55257e1a5\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.1u-fips  22 Sep 2016\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] allocator: tcmalloc\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cp\u003ERun NodeJS\u002FExpress application:\u003C\u002Fp\u003E\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\\nodejs-restapi-mongodb&gt;node server.js\nApp listening at http:\u002F\u002F:::8081\nSuccessfully connected to MongoDB.\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EInitial data\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E-&gt; \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fcompanies\u002Finit\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E[caption id=\"attachment_4820\" align=\"alignnone\" width=\"705\"]\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BDg-nJqJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNode.js-Mongodb-One-to-many-Related-Document-Initial-Data.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BDg-nJqJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNode.js-Mongodb-One-to-many-Related-Document-Initial-Data.png\" alt=\"Node.js Mongodb One-to-many Related Document Initial Data - Mongoose One-to-Many Relationship Example\" width=\"705\" height=\"387\" class=\"size-full wp-image-4820\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E Node.js Mongodb One-to-many Related Document Initial Data[\u002Fcaption]\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EGet all Companies:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E-&gt; \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fcompanies\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E[caption id=\"attachment_4821\" align=\"alignnone\" width=\"452\"]\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xChBHJ5G--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Company.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xChBHJ5G--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Company.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Company - Mongoose One-to-Many Relationship Example\" width=\"452\" height=\"341\" class=\"size-full wp-image-4821\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E Nodejs Mongodb One-to-many Related Document Find All Company[\u002Fcaption]\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EGet all Products\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E-&gt; \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E[caption id=\"attachment_4822\" align=\"alignnone\" width=\"440\"]\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--0VdM7EbT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Product.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--0VdM7EbT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Product.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Product - Mongoose One-to-Many Relationship Example\" width=\"440\" height=\"547\" class=\"size-full wp-image-4822\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E Nodejs Mongodb One-to-many Related Document Find All Product[\u002Fcaption]\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFind Product by Name:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E-&gt; \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproduct\u002FIphone7\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E[caption id=\"attachment_4823\" align=\"alignnone\" width=\"410\"]\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kSbvxFvJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-Many-Related-Document-Find-Product-By-Name-Polulate-Company.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kSbvxFvJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-Many-Related-Document-Find-Product-By-Name-Polulate-Company.png\" alt=\"Nodejs Mongodb One-to-Many Related Document Find Product By Name Polulate Company - Mongoose One-to-Many Relationship Example\" width=\"410\" height=\"313\" class=\"size-full wp-image-4823\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E Nodejs Mongodb One-to-Many Related Document Find Product By Name Polulate Company[\u002Fcaption]\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFind Products by Company Id:\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E-&gt; \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproducts\u002Fcompany\u002F5acd590b203d8e1ac01cb184\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E[caption id=\"attachment_4824\" align=\"alignnone\" width=\"532\"]\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vANSyFgD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Products-By-Company-ID.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vANSyFgD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Products-By-Company-ID.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Products By Company ID\" width=\"532\" height=\"371\" class=\"size-full wp-image-4824\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E Nodejs Mongodb One-to-many Related Document Find All Products By Company ID[\u002Fcaption]\u003C\u002Fp\u003E\n\n\u003Ch2 id=\"read-more\"\u003ERead More\u003C\u002Fh2\u003E\n\n\nRelated posts:\n\u003Chr\u003E\n\u003Cul class=\"ul-loizenai-pre-related-post\"\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fsequelize-one-to-many-create-example\u002F\"\u003ESequelize One to Many Create Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fmongoose-relationships-many-to-many\u002F\"\u003EMongoose Relationship Many to Many\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fspring-boot-one-to-many\u002F\"\u003ESpring Boot One-to-Many Relationship Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-10-nodejs-mongodb-crud-restapi-example\u002F\"\u003EAngular 10 Node.js MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-8-nodejs-mongodb-crud-example\u002F\"\u003EAngular 8 Nodejs MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-9-nodejs-mongodb-crud-example\u002F\"\u003EAngular 9 Node.js MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003Cul\u003E\n\u003Cli\u003EReference Link: \u003Ca href=\"https:\u002F\u002Fmongoosejs.com\u002Fdocs\u002Fpopulate.html\"\u003EMongoose Association\u003C\u002Fa\u003E\n\u003Ch2\u003ESourcecode\u003C\u002Fh2\u003E\n\u003Cp class=\"sourcecode-lzai\"\u003E\n\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNode.js-MongoDB-One-to-Many-Example.zip\"\u003ENode.js-MongoDB-One-to-Many-Example\u003C\u002Fa\u003E\n\u003C\u002Fp\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n",body_markdown:"https:\u002F\u002Floizenai.com\u002Fmongoose-one-to-many-relationship-example\u002F\n\n- Tutorial: \"Mongoose One-to-Many Relationship Example - Mongodb One-to-Many Relationship Example\"\n\nIn the tutorial, we will show you how to develop One-to-Many related document with NodeJs\u002FExpress, MongoDB using Mongoose.\n\n\u003C!--more--\u003E\n\u003Ch2 id=\"objective-mongoose-one-to-many-relationship-example\"\u003EObjective - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\nIn the tutorial, we show how to develop One-to-Many related documents with NodeJS\u002FExpress, MongoDB. Project structure:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\u002Fnodejs-restapi-mongodb\n\t\u002Fapp\n\t\t\u002Fconfig\n\t\t\tmongodb.config.js\n\t\t\u002Fcontrollers\n\t\t\tcompanies.controller.js\n\t\t\tproducts.controller.js\n\t\t\u002Fmodels\n\t\t\tcompany.model.js\n\t\t\tproduct.model.js\n\t\t\u002Froutes\n\t\t\tcompanies.routes.js\n\t\t\tproducts.routes.js\n\t\u002Fnode_modules\n\tpackage.json\n\tserver.js\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"one-to-many-related-models\"\u003EOne-to-Many related models - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\nFor working with related documents, we use the \u003Cstrong\u003EObjectId\u003C\u002Fstrong\u003E schema field.\n\n- CompanySchema:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n\tname: String,\n    street: String,\n    phone: String\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n- ProductSchema:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst ProductSchema = mongoose.Schema({\n    code: String,\n    name: String,\n\tdetails: String,\n\tcompany : { type: Schema.Types.ObjectId, ref: 'Company' }\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\nWe can save the references to the related document by assigning the \u003Cstrong\u003E_id\u003C\u002Fstrong\u003E value:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n  var apple = new Company({ \n\tname: 'Apple', \n\tstreet: 'Cupertino, CA 95014', \n\tphone: '1-408-996-1010' \n  });\n\n  apple.save(function (err) {\n    if(err) return console.error(err.stack)\n\t\n\tconsole.log(\"Apple company is added\")\n\t\n    \u002F\u002FApple now exists, so lets create a Product\n    var iphone7 = new Product({\n\t  code: \"A-123\",\n\t  name: \"Iphone7\",\n\t  details: \"Price: 649.00 USD & FREE shipping\",\n\t  company: apple._id\n    });\n\n    iphone7.save(function (err) {\n\t  if(err) return console.error(err.stack)\n\t  \n\t  console.log(\"Iphone 7 is added\")\n    });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\nWe use \u003Ccode\u003Epopulate()\u003C\u002Fcode\u003E to get the Company information in Product:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\tProduct.findOne({ name: req.params.productName })\n\t.populate('company')\n\t.exec(function (err, product) {\n\t\tif (err){\n\t\t\t\u002F\u002F handle error here\n\t\t\t...\n\t\t}\n\t\t\t\t\t\n\t\tres.send(product);\n\t});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\nWe didn't add our products to companies, how to get all products by a particular company?\n\nOne way, we create a references array field of products in CompanySchema as below:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n\tname: String,\n    street: String,\n    phone: String,\n\tproducts : [{ type: Schema.Types.ObjectId, ref: 'Product' }]\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\nBUT What is problem? - We have two places where the information relating companies and products needs to be maintained.\n\n\u003Cstrong\u003EWhat is the better solution?\u003C\u002Fstrong\u003E\n\n-\u003E We get the \u003Cstrong\u003E_id\u003C\u002Fstrong\u003E of our company, then use \u003Ccode\u003Efind()\u003C\u002Fcode\u003E to search for this in the company field across all products.\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nProduct.find({ company : req.params.companyId })\n.exec(function (err, products) {\n\tif (err){\n\t\t\u002F\u002F handle error here\n\t\t...\n\t}\n\t\t\t\t\n\tres.send(products);\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"create-node-js-express-project\"\u003ECreate a NodeJS\u002FExpress project - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\nFollowing below guide:\n\u003Ca href=\"https:\u002F\u002Fozenero.com\u002Fnode-js\u002Fcrud-restapis-with-nodejs-express-mongodb\"\u003ECrud RestAPIs with NodeJS\u002FExpress, MongoDB using Mongoose\u003C\u002Fa\u003E\n\nSee dependencies in 'package.json' file:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n  \"dependencies\": {\n    \"body-parser\": \"^1.18.2\",\n    \"express\": \"^4.16.3\",\n    \"mongoose\": \"^5.0.13\",\n    \"npm\": \"^5.8.0\"\n  }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"create-mongoose-model-schema\"\u003ECreate Mongoose Model Schema\u003C\u002Fh2\u003E\n- CompanySchema:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst CompanySchema = mongoose.Schema({\n\tname: String,\n    street: String,\n    phone: String,\n\tproducts : [{ type: Schema.Types.ObjectId, ref: 'Product' }]\n});\n\nmodule.exports = mongoose.model('Company', CompanySchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n- ProductSchema :\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst mongoose = require('mongoose'), Schema = mongoose.Schema;\n\nconst ProductSchema = mongoose.Schema({\n    code: String,\n    name: String,\n\tdetails: String,\n\tcompany : { type: Schema.Types.ObjectId, ref: 'Company' }\n});\n\nmodule.exports = mongoose.model('Product', ProductSchema);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"node-js-express-restapi-router\"\u003ENodejs Express RestAPI Route - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\n- Company Routes :\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nmodule.exports = function(app) {\n\n\tvar companies = require('..\u002Fcontrollers\u002Fcompanies.controller.js')\n\t\n\tapp.get('\u002Fapi\u002Fcompanies\u002Finit', companies.init);\n\tapp.get('\u002Fapi\u002Fcompanies', companies.findAll);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n- Product Routes :\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nmodule.exports = function(app) {\n    var products = require('..\u002Fcontrollers\u002Fproducts.controller.js');\n\t\n\tapp.get('\u002Fapi\u002Fproducts', products.findAll);\n\t\t\t\n\t\u002F\u002F Find a single Product by Name\n    app.get('\u002Fapi\u002Fproducts\u002F:productName', products.findByName);\n\t\n\t\u002F\u002F Find all Products of a Company\n    app.get('\u002Fapi\u002Fproducts\u002Fcompany\u002F:companyId', products.findByCompanyId);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"node-js-express-restapi-controller\"\u003ENodejs Express RestAPI Controller\u003C\u002Fh2\u003E\n- Company Controllers :\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\n\nexports.init = (req, res) =&gt; {\n  var apple = new Company({ \n\tname: 'Apple', \n\tstreet: 'Cupertino, CA 95014', \n\tphone: '1-408-996-1010' \n  });\n\n  apple.save(function (err) {\n    if(err) return console.error(err.stack)\n\t\n\tconsole.log(\"Apple company is added\")\n\t\n    \u002F\u002FApple now exists, so lets create a Product\n    var iphone7 = new Product({\n\t  code: \"A-123\",\n\t  name: \"Iphone7\",\n\t  details: \"Price: 649.00 USD & FREE shipping\",\n\t  company: apple._id\n    });\n\n    iphone7.save(function (err) {\n\t  if(err) return console.error(err.stack)\n\t  \n\t  console.log(\"Iphone 7 is added\")\n    });\n\t\n\tvar iPadPro = new Product({\n\t  code: \"A-456\",\n\t  name: \"IPadPro\",\n\t  details: \"Price: 417.67 USD & FREE shipping\",\n\t  company: apple._id\n\t});\n\t\n\tiPadPro.save(function(err){\n\t\tif(err) return console.error(err.stack)\n\t\t\n\t\tconsole.log(\"IPadPro is added\");\n\t});\n\t\n  });\n  \n  \n  var samsung = new Company({ \n\t\tname: 'Samsung', \n\t\tstreet: 'Seocho District, Seoul, South Korea', \n\t\tphone: '+82-2-2053-3000'\n\t});\n  \n  samsung.save(function(err){\n\tif(err) return console.error(err.stack)\n\t\n\tconsole.log(\"Samsung company is added\")\n\t\n\t\u002F\u002F Samsung now exists, so lets create a Product\n\tvar galaxyJ7 = new Product({\n\t  code: \"S-012\",\n\t  name: \"GalaxyJ7\",\n\t  details: \"Price: 219.00 USD & FREE shipping\",\n\t  company: samsung._id\t\n\t});\n\t\n\tgalaxyJ7.save(function(err){\n\t\tif(err) return console.error(err.stack)\n\t\tconsole.log(\"GalaxyJ7 is added\")\n\t});\n\t\n\tvar galaxyTabA = new Product({\n\t  code: \"S-456\",\n\t  name: \"GalaxyTabA\",\n\t  details: \"Price: 299.99 USD & FREE shipping\",\n\t  company: samsung._id\n\t});\n\t\n\tgalaxyTabA.save(function(err){\n\t\tif(err) return console.error(err.stack)\n\t\tconsole.log(\"GalaxyTabA is added\")\n\t})\n  });\n  \n  res.send(\"Done Initial Data!\");\n}\n\nexports.findAll = (req, res) =&gt; {\n\tCompany.find()\n    .then(products =&gt; {\n        res.send(products);\n    }).catch(err =&gt; {\n        res.status(500).send({\n            message: err.message\n        });\n    });\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n- Product Controllers :\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\nconst Company = require('..\u002Fmodels\u002Fcompany.model.js');\nconst Product = require('..\u002Fmodels\u002Fproduct.model.js');\n\nexports.findAll = (req, res) =&gt; {\n\t\n\tProduct.find()\n    .then(products =&gt; {\n        res.send(products);\n    }).catch(err =&gt; {\n        res.status(500).send({\n            message: err.message\n        });\n    });\n};\n\n\u002F\u002F Find a Products by Name\nexports.findByName = (req, res) =&gt; {\n\tProduct.findOne({ name: req.params.productName })\n\t.populate('company')\n\t.exec(function (err, product) {\n\t\tif (err){\n\t\t\tif(err.kind === 'ObjectId') {\n\t\t\t\treturn res.status(404).send({\n\t\t\t\t\tmessage: \"Products not found with given name \" + req.params.productName\n\t\t\t\t});                \n\t\t\t}\n\t\t\treturn res.status(500).send({\n\t\t\t\tmessage: \"Error retrieving Products with given Company Id \" + req.params.productName\n\t\t\t});\n\t\t}\n\t\t\t\t\t\n\t\tres.send(product);\n\t});\n};\n\n\u002F\u002F Find all products by a CompanyId\nexports.findByCompanyId = (req, res) =&gt; {\n\tProduct.find({ company : req.params.companyId })\n\t.exec(function (err, products) {\n\t\tif (err){\n\t\t\tif(err.kind === 'ObjectId') {\n\t\t\t\treturn res.status(404).send({\n\t\t\t\t\tmessage: \"Products not found with given Company Id \" + req.params.companyId\n\t\t\t\t});                \n\t\t\t}\n\t\t\treturn res.status(500).send({\n\t\t\t\tmessage: \"Error retrieving Products with given Company Id \" + req.params.companyId\n\t\t\t});\n\t\t}\n\t\t\t\t\t\n\t\tres.send(products);\n\t});\n};\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Ch2 id=\"node-js-run-check-results\"\u003ERun & Check results - Mongoose One-to-Many Relationship Example\u003C\u002Fh2\u003E\nRun MongDB server by commandline:\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\\MongoDB\\Server\\3.6\\bin\u003Emongod.exe\n2018-04-11T03:11:42.209+0700 I CONTROL  [initandlisten] MongoDB starting : pid=2432 port=27017 dbpath=C:\\data\\db\\ 64-bit host=LOI-COMPUTER\n2018-04-11T03:11:42.211+0700 I CONTROL  [initandlisten] targetMinOS: Windows 7\u002FWindows Server 2008 R2\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] db version v3.6.3\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] git version: 9586e557d54ef70f9ca4b43c26892cd55257e1a5\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] OpenSSL version: OpenSSL 1.0.1u-fips  22 Sep 2016\n2018-04-11T03:11:42.212+0700 I CONTROL  [initandlisten] allocator: tcmalloc\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\nRun NodeJS\u002FExpress application:\n\n\u003Cpre\u003E\u003Ccode class=\"language-javascript\"\u003E\n\\nodejs-restapi-mongodb\u003Enode server.js\nApp listening at http:\u002F\u002F:::8081\nSuccessfully connected to MongoDB.\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n- Initial data\n\n-\u003E \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fcompanies\u002Finit\u003C\u002Fcode\u003E\n\n[caption id=\"attachment_4820\" align=\"alignnone\" width=\"705\"]\u003Cimg src=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNode.js-Mongodb-One-to-many-Related-Document-Initial-Data.png\" alt=\"Node.js Mongodb One-to-many Related Document Initial Data - Mongoose One-to-Many Relationship Example\" width=\"705\" height=\"387\" class=\"size-full wp-image-4820\" \u002F\u003E Node.js Mongodb One-to-many Related Document Initial Data[\u002Fcaption]\n\n- Get all Companies:\n\n-\u003E \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fcompanies\u003C\u002Fcode\u003E\n\n[caption id=\"attachment_4821\" align=\"alignnone\" width=\"452\"]\u003Cimg src=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Company.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Company - Mongoose One-to-Many Relationship Example\" width=\"452\" height=\"341\" class=\"size-full wp-image-4821\" \u002F\u003E Nodejs Mongodb One-to-many Related Document Find All Company[\u002Fcaption]\n\n- Get all Products\n\n-\u003E \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproducts\u003C\u002Fcode\u003E\n\n[caption id=\"attachment_4822\" align=\"alignnone\" width=\"440\"]\u003Cimg src=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Product.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Product - Mongoose One-to-Many Relationship Example\" width=\"440\" height=\"547\" class=\"size-full wp-image-4822\" \u002F\u003E Nodejs Mongodb One-to-many Related Document Find All Product[\u002Fcaption]\n\n- Find Product by Name:\n\n-\u003E \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproduct\u002FIphone7\u003C\u002Fcode\u003E\n\n[caption id=\"attachment_4823\" align=\"alignnone\" width=\"410\"]\u003Cimg src=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-Many-Related-Document-Find-Product-By-Name-Polulate-Company.png\" alt=\"Nodejs Mongodb One-to-Many Related Document Find Product By Name Polulate Company - Mongoose One-to-Many Relationship Example\" width=\"410\" height=\"313\" class=\"size-full wp-image-4823\" \u002F\u003E Nodejs Mongodb One-to-Many Related Document Find Product By Name Polulate Company[\u002Fcaption]\n\n- Find Products by Company Id:\n\n-\u003E \u003Ccode\u003Elocalhost:8081\u002Fapi\u002Fproducts\u002Fcompany\u002F5acd590b203d8e1ac01cb184\u003C\u002Fcode\u003E\n\n[caption id=\"attachment_4824\" align=\"alignnone\" width=\"532\"]\u003Cimg src=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNodejs-Mongodb-One-to-many-Related-Document-Find-All-Products-By-Company-ID.png\" alt=\"Nodejs Mongodb One-to-many Related Document Find All Products By Company ID\" width=\"532\" height=\"371\" class=\"size-full wp-image-4824\" \u002F\u003E Nodejs Mongodb One-to-many Related Document Find All Products By Company ID[\u002Fcaption]\n\u003Ch2 id=\"read-more\"\u003ERead More\u003C\u002Fh2\u003E\n\u003Cdiv class=\"div-loizenai-pre-related-post\"\u003E\nRelated posts:\n\u003Chr\u003E\n\u003Cul class=\"ul-loizenai-pre-related-post\"\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fsequelize-one-to-many-create-example\u002F\"\u003ESequelize One to Many Create Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fmongoose-relationships-many-to-many\u002F\"\u003EMongoose Relationship Many to Many\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fspring-boot-one-to-many\u002F\"\u003ESpring Boot One-to-Many Relationship Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-10-nodejs-mongodb-crud-restapi-example\u002F\"\u003EAngular 10 Node.js MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-8-nodejs-mongodb-crud-example\u002F\"\u003EAngular 8 Nodejs MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fangular-9-nodejs-mongodb-crud-example\u002F\"\u003EAngular 9 Node.js MongoDB CRUD Example\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fdiv\u003E\n\n- Reference Link: \u003Ca href=\"https:\u002F\u002Fmongoosejs.com\u002Fdocs\u002Fpopulate.html\"\u003EMongoose Association\u003C\u002Fa\u003E\n\u003Ch2\u003ESourcecode\u003C\u002Fh2\u003E\n\u003Cp class=\"sourcecode-lzai\"\u003E\n\u003Ca href=\"https:\u002F\u002Floizenai.com\u002Fwp-content\u002Fuploads\u002F2021\u002F01\u002FNode.js-MongoDB-One-to-Many-Example.zip\"\u003ENode.js-MongoDB-One-to-Many-Example\u003C\u002Fa\u003E\n\u003C\u002Fp\u003E",user:{name:c,username:c,twitter_username:a,github_username:c,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VRQs0www--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F523168\u002Fbe2e4d7b-d729-4241-96f0-a5a3313a9319.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_OWYyMXP--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F523168\u002Fbe2e4d7b-d729-4241-96f0-a5a3313a9319.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Floizenai\u002F626722",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-03-05T15:24:54Z","loizenai","https:\u002F\u002Fdev.to\u002Floizenai\u002Fmongoose-one-to-many-relationship-example-3oce",5));
__NUXT_JSONP__("/articles/theguild_/775260", (function(a,b,c,d,e){c.type_of="article";c.id=775260;c.title="WhatsApp Clone using Angular, GraphQL, Apollo, TypeScript and PostgreSQL";c.description="An open-source full-stack example app made with Angular 7.2, TypeScript, GraphQL Subscriptions, GraphQL Code Generator, GraphQL Modules, PostgreSQL and TypeORM.";c.readable_publish_date="Jul 29";c.slug="whatsapp-clone-using-angular-graphql-apollo-typescript-and-postgresql-51jf";c.path="\u002Fthe-guild\u002Fwhatsapp-clone-using-angular-graphql-apollo-typescript-and-postgresql-51jf";c.url="https:\u002F\u002Fdev.to\u002Fthe-guild\u002Fwhatsapp-clone-using-angular-graphql-apollo-typescript-and-postgresql-51jf";c.comments_count=3;c.public_reactions_count=d;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=d;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--R31pqW1t--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql\u002Fcover.jpeg";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--97E2KeTe--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql\u002Fcover.jpeg";c.canonical_url="https:\u002F\u002Fthe-guild.dev\u002Fblog\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql";c.created_at=b;c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at="2021-07-30T19:26:23Z";c.reading_time_minutes=5;c.tag_list="whatsappclone, angular, graphql, apollo";c.tags=["whatsappclone","angular","graphql","apollo"];c.body_html="\u003Cblockquote\u003E\n\u003Cp\u003EThis article was published on 2019-02-25 by \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fniccolobelli\"\u003ENiccolo Belli\u003C\u002Fa\u003E @ \u003Ca href=\"https:\u002F\u002Fthe-guild.dev\u002F\"\u003EThe Guild Blog\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EYou might have seen it around already — an open-source WhatsApp Clone tutorial; a project which was originally started in 2015 by \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Furigo\"\u003EUrigo\u003C\u002Fa\u003E based on \u003Ca href=\"https:\u002F\u002Fangular-meteor.com\u002Ftutorials\u002Fwhatsapp2-tutorial\"\u003EAngular-Meteor\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fionicframework.com\u002F\"\u003EIonic\u003C\u002Fa\u003E, and have been throughout different incarnations ever since.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou may have also noticed that we recently published a new \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fblog\u002Fwhatsapp-clone-react-hooks-graphql-typescript-and-postgresql\"\u003EReact version\u003C\u002Fa\u003E of the Whatsapp Clone tutorial.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis time around, I’m happy to announce that a new version of the WhatsApp Clone is here, and it’s based on Angular 7.2, Angular CLI 7.3.2, Material-UI, TypeScript, Apollo, GraphQL-Subscriptions, \u003Ca href=\"https:\u002F\u002Fgraphql-code-generator.com\"\u003EGraphQL Code Generator\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fgraphql-modules.com\"\u003EGraphQL Modules\u003C\u002Fa\u003E, PostgreSQL and TypeORM, full with step by step guides to teach you every step of the way.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Ftortilla.academy\u002FUrigo\u002Fwhatsapp-textrepo-angularcli-express\"\u003E\u003Cstrong\u003EClick mme to go to the tutorial page\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LHVyGhjD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql\u002Fapp.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LHVyGhjD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql\u002Fapp.gif\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"what-is-it-good-for\" href=\"#what-is-it-good-for\"\u003E\n  \u003C\u002Fa\u003E\n  What is it good for?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThis app was built with all the latest and hottest technologies out there. The purpose is simple — it should be a guideline for building a proper app, thus we thought very carefully about the design patterns and architecture used in it, plus, we made sure to cover all communication methods with a GraphQL-back-end in different variations (query, mutation, subscription). This way whenever you’re looking to start a new app, maintain an existing one or upgrade your dev-stack, the WhatsApp-clone can be a great source to start with! It’s full stack and has a complete flow.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"why-did-we-choose-this-devstack\" href=\"#why-did-we-choose-this-devstack\"\u003E\n  \u003C\u002Fa\u003E\n  Why did we choose this dev-stack?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EAngular, GraphQL, Apollo, PostgreSQL and TypeScript for obvious reasons — they are backed by a strong ecosystem that grows rapidly. These technologies can be used in endless variations, and there’s no one way which is the most right of doing so, but we chose a way that makes the most sense for us and that we truly believe in when it comes to building apps. We’ve connected it all with TypeORM, GraphQL-Code-Generator, GraphQL-Modules for the following reasons:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  The GraphQL back-end was implemented using \u003Cstrong\u003EGraphQL-Modules\u003C\u002Fstrong\u003E where logic was splitted into feature based modules. GraphQL-Modules is a library which provides you with the ability to manage and maintain your GraphQL schema in a scalable and reusable way. Not once nor twice I have seen people who struggle with that and get tangled upon their own creation, and with GraphQL-Modules where you have a very defined structure, this problem can be easily solved. You can read more in \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fblog\u002Fgraphql-modules\"\u003Ethis series of 7 blog posts about it\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E  Every GraphQL\u002FTypeScript definition was automatically generated with GraphQL-Code-Generator using a single command call. There’s no need to maintain the same thing twice if it already exists in one way or another. This way you don’t have to write TypeScript type definitions for your all your server responses, you get ready-to-use — fully typed Angular services, GraphQL resolvers and GraphQL types.\u003C\u002Fli\u003E\n\u003Cli\u003E  The new version of Angular 7.2 was used with the Angular Material UI and Angular CLI 7.3.2 (and we’ll keep updating the tutorial with the latest versions)\u003C\u002Fli\u003E\n\u003Cli\u003E  We used TypeORM to correctly split the logic of the entities in the database and define the relationships between them. ORMs are controversial these days, but they can help a lot in some cases and we thought a good example could be valuable to the community.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"what-to-expect\" href=\"#what-to-expect\"\u003E\n  \u003C\u002Fa\u003E\n  What to expect?\n\u003C\u002Fh1\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  Basic authentication.\u003C\u002Fli\u003E\n\u003Cli\u003E  Image uploading with \u003Ca href=\"https:\u002F\u002Fcloudinary.com\u002F\"\u003ECloudinary\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E  Live updates with GraphQL Subscriptions.\u003C\u002Fli\u003E\n\u003Cli\u003E  Zero latency even on the slowest network thanks to Apollo’s Cache\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThe tutorial goes through every aspect of building the app, starting from the very basics. We will start building a very simple server with a fake db, then we will introduce Authentication, Subscriptions, a real database backed by PostgreSQL and TypeORM plus advanced tooling like GraphQL Code Generator and GraphQL Modules.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis can be extremely useful for those who have little to no background in one of the technologies in our dev-stack.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"whats-next\" href=\"#whats-next\"\u003E\n  \u003C\u002Fa\u003E\n  What’s next?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ERight now we implemented a simple REST-based \u003Ca href=\"http:\u002F\u002Fwww.passportjs.org\u002F\"\u003EPassport\u003C\u002Fa\u003E authentication, but we already have PRs for \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Faccounts-js\u002Faccounts\"\u003EAccounts-JS\u003C\u002Fa\u003E based authentication which will use the GraphQL endpoint instead of traditional REST ones. An additional chapter about Pagination is also expected, as well as a “Performance” chapter tackling the N+1 problem with GraphQL. Our backend has been designed to handle way more features than the ones currently implemented, so be ready because features like the Whatsapp blue ticks are going to land on our clone very soon.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"keep-up-to-date\" href=\"#keep-up-to-date\"\u003E\n  \u003C\u002Fa\u003E\n  Keep up to date\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThis tutorial was written using \u003Ca href=\"https:\u002F\u002Ftortilla.academy\u002F\"\u003ETortilla — the Tutorial framework\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis means that we will keep upgrading the tutorial with the latest versions of Angular and the other libraries, and instead of doing the same tutorial all over again, you will get a \u003Ca href=\"https:\u002F\u002Ftortilla.academy\u002FUrigo\u002Fwhatsapp-textrepo-angularcli-express\u002Fmaster\u002F1.4.0\u002Fdiff\u002F2.0.0\"\u003Egit-diff\u003C\u002Fa\u003E of how to upgrade the existing tutorial! We care about your time as a developer.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"influence\" href=\"#influence\"\u003E\n  \u003C\u002Fa\u003E\n  Influence\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EWe want to hear your opinions!\u003C\u002Fp\u003E\n\n\u003Cp\u003EShould we choose another library and technology over another? Could we write the code better\u002Fcleaner? Should we add a specific feature to the app? We want to hear it all!\u003C\u002Fp\u003E\n\n\u003Cp\u003EPlease tell us now so we could integrate your feedback on the tutorial itself!\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe keep evolving the stack and as the tutorial is based on git commits, we can create the same clone with different tech-stacks and compare them on this real app using code diffs.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESoon we will also release yet another version of the Whatsapp Clone, using \u003Ca href=\"https:\u002F\u002Fionicframework.com\u002F\"\u003EIonic\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fstenciljs.com\u002F\"\u003EStencil\u003C\u002Fa\u003E and Web Components.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you are good at creating screencast and videos, we would love your help in creating videos for some of the chapters.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEverything is completely free and open source, and we want your help and (\u003Cstrong\u003Enot financial\u003C\u002Fstrong\u003E) contribution!\u003C\u002Fp\u003E\n\n\u003Cp\u003EBest place would be to open an issue or create a PR on the repositories:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  Server — \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FUrigo\u002FWhatsApp-Clone-server\"\u003EUrigo\u002FWhatsApp-Clone-Server\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E  Client — \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FUrigo\u002Fwhatsapp-client-angularcli-material\"\u003EUrigo\u002FWhatsApp-Clone-Client-Angular\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAgain, all types of feedback is welcome, write freely!\u003C\u002Fp\u003E\n\n\u003Cp\u003ESee you in the tutorial!\u003C\u002Fp\u003E\n\n";c.body_markdown="\u003E This article was published on 2019-02-25 by [Niccolo Belli](https:\u002F\u002Ftwitter.com\u002Fniccolobelli) @ [The Guild Blog](https:\u002F\u002Fthe-guild.dev\u002F)\n\nYou might have seen it around already — an open-source WhatsApp Clone tutorial; a project which was originally started in 2015 by [Urigo](https:\u002F\u002Fgithub.com\u002Furigo) based on [Angular-Meteor](https:\u002F\u002Fangular-meteor.com\u002Ftutorials\u002Fwhatsapp2-tutorial) and [Ionic](https:\u002F\u002Fionicframework.com\u002F), and have been throughout different incarnations ever since.\n\nYou may have also noticed that we recently published a new [React version](\u002Fblog\u002Fwhatsapp-clone-react-hooks-graphql-typescript-and-postgresql) of the Whatsapp Clone tutorial.\n\nThis time around, I’m happy to announce that a new version of the WhatsApp Clone is here, and it’s based on Angular 7.2, Angular CLI 7.3.2, Material-UI, TypeScript, Apollo, GraphQL-Subscriptions, [GraphQL Code Generator](https:\u002F\u002Fgraphql-code-generator.com), [GraphQL Modules](https:\u002F\u002Fgraphql-modules.com), PostgreSQL and TypeORM, full with step by step guides to teach you every step of the way.\n\n[**Click mme to go to the tutorial page**](https:\u002F\u002Ftortilla.academy\u002FUrigo\u002Fwhatsapp-textrepo-angularcli-express)\n\n![](https:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fwhatsapp-clone-apollo-angular-graphql-typescript-and-postgresql\u002Fapp.gif)\n\n# What is it good for?\n\nThis app was built with all the latest and hottest technologies out there. The purpose is simple — it should be a guideline for building a proper app, thus we thought very carefully about the design patterns and architecture used in it, plus, we made sure to cover all communication methods with a GraphQL-back-end in different variations (query, mutation, subscription). This way whenever you’re looking to start a new app, maintain an existing one or upgrade your dev-stack, the WhatsApp-clone can be a great source to start with! It’s full stack and has a complete flow.\n\n# Why did we choose this dev-stack?\n\nAngular, GraphQL, Apollo, PostgreSQL and TypeScript for obvious reasons — they are backed by a strong ecosystem that grows rapidly. These technologies can be used in endless variations, and there’s no one way which is the most right of doing so, but we chose a way that makes the most sense for us and that we truly believe in when it comes to building apps. We’ve connected it all with TypeORM, GraphQL-Code-Generator, GraphQL-Modules for the following reasons:\n\n*   The GraphQL back-end was implemented using **GraphQL-Modules** where logic was splitted into feature based modules. GraphQL-Modules is a library which provides you with the ability to manage and maintain your GraphQL schema in a scalable and reusable way. Not once nor twice I have seen people who struggle with that and get tangled upon their own creation, and with GraphQL-Modules where you have a very defined structure, this problem can be easily solved. You can read more in [this series of 7 blog posts about it](\u002Fblog\u002Fgraphql-modules).\n*   Every GraphQL\u002FTypeScript definition was automatically generated with GraphQL-Code-Generator using a single command call. There’s no need to maintain the same thing twice if it already exists in one way or another. This way you don’t have to write TypeScript type definitions for your all your server responses, you get ready-to-use — fully typed Angular services, GraphQL resolvers and GraphQL types.\n*   The new version of Angular 7.2 was used with the Angular Material UI and Angular CLI 7.3.2 (and we’ll keep updating the tutorial with the latest versions)\n*   We used TypeORM to correctly split the logic of the entities in the database and define the relationships between them. ORMs are controversial these days, but they can help a lot in some cases and we thought a good example could be valuable to the community.\n\n# What to expect?\n\n*   Basic authentication.\n*   Image uploading with [Cloudinary](https:\u002F\u002Fcloudinary.com\u002F).\n*   Live updates with GraphQL Subscriptions.\n*   Zero latency even on the slowest network thanks to Apollo’s Cache\n\nThe tutorial goes through every aspect of building the app, starting from the very basics. We will start building a very simple server with a fake db, then we will introduce Authentication, Subscriptions, a real database backed by PostgreSQL and TypeORM plus advanced tooling like GraphQL Code Generator and GraphQL Modules.\n\nThis can be extremely useful for those who have little to no background in one of the technologies in our dev-stack.\n\n# What’s next?\n\nRight now we implemented a simple REST-based [Passport](http:\u002F\u002Fwww.passportjs.org\u002F) authentication, but we already have PRs for [Accounts-JS](https:\u002F\u002Fgithub.com\u002Faccounts-js\u002Faccounts) based authentication which will use the GraphQL endpoint instead of traditional REST ones. An additional chapter about Pagination is also expected, as well as a “Performance” chapter tackling the N+1 problem with GraphQL. Our backend has been designed to handle way more features than the ones currently implemented, so be ready because features like the Whatsapp blue ticks are going to land on our clone very soon.\n\n# Keep up to date\n\nThis tutorial was written using [Tortilla — the Tutorial framework](https:\u002F\u002Ftortilla.academy\u002F).\n\nThis means that we will keep upgrading the tutorial with the latest versions of Angular and the other libraries, and instead of doing the same tutorial all over again, you will get a [git-diff](https:\u002F\u002Ftortilla.academy\u002FUrigo\u002Fwhatsapp-textrepo-angularcli-express\u002Fmaster\u002F1.4.0\u002Fdiff\u002F2.0.0) of how to upgrade the existing tutorial! We care about your time as a developer.\n\n# Influence\n\nWe want to hear your opinions!\n\nShould we choose another library and technology over another? Could we write the code better\u002Fcleaner? Should we add a specific feature to the app? We want to hear it all!\n\nPlease tell us now so we could integrate your feedback on the tutorial itself!\n\nWe keep evolving the stack and as the tutorial is based on git commits, we can create the same clone with different tech-stacks and compare them on this real app using code diffs.\n\nSoon we will also release yet another version of the Whatsapp Clone, using [Ionic](https:\u002F\u002Fionicframework.com\u002F), [Stencil](https:\u002F\u002Fstenciljs.com\u002F) and Web Components.\n\nIf you are good at creating screencast and videos, we would love your help in creating videos for some of the chapters.\n\nEverything is completely free and open source, and we want your help and (**not financial**) contribution!\n\nBest place would be to open an issue or create a PR on the repositories:\n\n*   Server — [Urigo\u002FWhatsApp-Clone-Server](https:\u002F\u002Fgithub.com\u002FUrigo\u002FWhatsApp-Clone-server)\n*   Client — [Urigo\u002FWhatsApp-Clone-Client-Angular](https:\u002F\u002Fgithub.com\u002FUrigo\u002Fwhatsapp-client-angularcli-material)\n\nAgain, all types of feedback is welcome, write freely!\n\nSee you in the tutorial!\n ";c.user={name:"TheGuildBot",username:"theguild_",twitter_username:a,github_username:"theguild-bot",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6o2-5Fur--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F671966\u002Fdb54b8e2-d3ac-4a20-87b1-fb08f11b24c4.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--f3AUn2a7--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F671966\u002Fdb54b8e2-d3ac-4a20-87b1-fb08f11b24c4.png"};c.organization={name:"The Guild",username:e,slug:e,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HhnjNNuO--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4467\u002Fa1694e21-840c-4bdb-beaa-8d63d8255b8b.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FHaFJPvk--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4467\u002Fa1694e21-840c-4bdb-beaa-8d63d8255b8b.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-07-29T10:06:56Z",{},6,"the-guild")));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:706351,title:"React Clean Architecture",description:"Hello Developers! Many of us use various design patterns with React Development to make React Apps mo...",readable_publish_date:"May 23",slug:"react-clean-architecture-114f",path:"\u002Fkpiteng\u002Freact-clean-architecture-114f",url:b,comments_count:5,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6nxx0dwy--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fj0n9nxt1ds3g6c1gs335.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--O7t_rV3M--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fj0n9nxt1ds3g6c1gs335.jpg",canonical_url:b,created_at:"2021-05-23T13:00:23Z",edited_at:"2021-06-08T16:00:58Z",crossposted_at:a,published_at:d,last_comment_at:"2021-10-14T14:13:37Z",reading_time_minutes:4,tag_list:"reactnative, react, javascript, typescript",tags:["reactnative","react","javascript","typescript"],body_html:"\u003Cp\u003EHello Developers! Many of us use various design patterns with React Development to make React Apps more clean, clearly understandable, and more structured. But still we are facing issues with coding standards, we changed at one place and it breaks at another place. Is there any resolution for this? Yes, Try React Clean Architecture!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EQuick Highlights\u003C\u002Fstrong\u003E  - React Clean Architecture - which makes your code more structured, clean and anyone can easily take over your code and start working with you. So Let’s continue next. Which include everything API, State Management (Redux, Redux Saga),\u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fstorybook-design-share-component\"\u003EStorybook\u003C\u002Fa\u003E, Utilities, Component\u002FContainer and you can add more relevant features in defined structure hierarchy.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"react-clean-architecture-covered-\" href=\"#react-clean-architecture-covered-\"\u003E\n  \u003C\u002Fa\u003E\n  React Clean Architecture Covered -\n\u003C\u002Fh1\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Ereact-clean-architecture\n├── android\n├── ios\n├── src\n│   ├── application\n│   │   ├── common\n│   │   ├── filters\n│   │   ├── logger\n│   │   ├── models\n│   │   ├── persist\n│   │   ├── plugins\n│   │   ├── store\n│   ├── infrastructure\n│   │   ├── api(services)\n│   │   ├── components (common components)\n│   ├── presentation\n│   │   ├── container\n│   │   ├── component\n├── index.js\n├── package.json\n└── README.md\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch1\u003E\n  \u003Ca name=\"application-\" href=\"#application-\"\u003E\n  \u003C\u002Fa\u003E\n  Application -\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EApplication directory contains the State Management and Common utilities functions and constants. For State Management - I have used Redux Rematch, you can use Redux, Redux Saga,\u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fmobx-state-tree\"\u003EMobX\u003C\u002Fa\u003E State Management. For Common - I have used Fonts, Colours, Global Constants and Common Functions.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet’s check some parts of Rematch and Understand what it does and what it means.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"store-\" href=\"#store-\"\u003E\n  \u003C\u002Fa\u003E\n  Store -\n\u003C\u002Fh3\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# Store\u002Findex.js \n\nimport { init } from '@rematch\u002Fcore';\nimport logger from 'redux-logger';\n\nimport * as models from '..\u002Fmodels';\nimport { loadingPlugin } from '..\u002Fplugins';\nimport { persistPlugin } from '..\u002Fpersist';\n\nexport default init({\n  models,\n  plugins: [loadingPlugin, persistPlugin],\n  redux: {\n    middlewares: [logger],\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHere, I am initialize Redux Store, to initialize Redux Store we require models, plugins, middleware (optional).\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"plugins-\" href=\"#plugins-\"\u003E\n  \u003C\u002Fa\u003E\n  PlugIns -\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EPlugIns itself means to add some value to Redux Store.Here, we are using Loading PlugIns means it will show loading indicator while API is fetching data. So we can show Loader to user, once data is fetched Loading plugin update loading State and based on that we can hide loaders in components.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport createLoadingPlugin from '@rematch\u002Floading';\n\nexport const loadingPlugin = createLoadingPlugin({\n  whitelist: ['ToDo\u002FfetchTasks'],\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"persists-\" href=\"#persists-\"\u003E\n  \u003C\u002Fa\u003E\n  Persists -\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EPersist itself means to Persist something, Here, it will persist Rematch Store. To create persist store it will take few argument, key, whitelist (model - save in persist store), blacklist (model - not saved in persist store), version - help while upgrading application, storage - AsyncStorage (store persist store in AsyncStorage), transform - contains - filters which applied while persist store.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport AsyncStorage from '@react-native-community\u002Fasync-storage';\nimport createRematchPersist from '@rematch\u002Fpersist';\nimport { AllFilters } from '..\u002Ffilters';\n\nexport const persistPlugin = createRematchPersist({\n  key: 'root',\n  whitelist: ['ToDo'],\n  version: 1,\n  storage: AsyncStorage,\n  transforms: AllFilters,\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"models-\" href=\"#models-\"\u003E\n  \u003C\u002Fa\u003E\n  Models -\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EModels will contain State, Reducer, Effect (Actions).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport { List } from '..\u002F..\u002Finfrastructure\u002Fapi\u002Fapi';\nexport const ToDo = {\n  state: {\n    arrTasks: [],\n    arrAPITasks: [],\n    totalTasks: 3,\n  },\n  reducers: {\n    setTasks(state, payload) {\n      return {\n        ...state,\n        arrTasks: payload,\n      };\n    },\n    setAPITasks(state, payload) {\n      return {\n        ...state,\n        arrAPITasks: payload,\n      };\n    },\n    clear() {\n      return {\n        arrBeneficiary: [],\n      };\n    },\n  },\n  effects: (dispatch) =&gt; ({\n    async fetchTasks() {\n      try {\n        dispatch.ToDo.setTasks([\n            {\n                taskID: 1,\n                taskName: 'Task #1',\n            }\n        ]);\n      } catch (error) {\n      }\n    },\n    async fetchTasksFromServer() {\n      try {\n        const response = await List.getListData().toPromise();\n        dispatch.ToDo.setAPITasks(response);\n      } catch (error) {\n      }\n    },\n  }),\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"filters-\" href=\"#filters-\"\u003E\n  \u003C\u002Fa\u003E\n  Filters -\n\u003C\u002Fh3\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport { createBlacklistFilter } from 'redux-persist-transform-filter';\n\nconst toDoFilter = createBlacklistFilter('ToDo', ['totalTasks']);\n\nexport const AllFilters = [toDoFilter];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"common-\" href=\"#common-\"\u003E\n  \u003C\u002Fa\u003E\n  Common -\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EHere, You can define your Global Constant, Common Files - Fonts, FontSize, Device Specification, Colors many more as per custom solution.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eexports.globalVars = {\n    userSalt: 'TOHV7eOQRAXmbe433BilgtJeCkugs1rgvZ',\n    currentCountryCode: '',\n};\nexport const BaseURL = \"https:\u002F\u002Fjsonplaceholder.typicode.com\u002F\";\nexport const TaskList = 'todos\u002F';\nexport const apiVersion = 'events\u002F';\nexport const Authsecret = '';\nexport const timeoutDuration = 30000;\n\n\u002F\u002F Error Messages\nexport const errorEncountered = 'Error was encountered processing this request';\nexport const timeoutMessage =\n    \"We are unable to fetch data at this time, kindly check your internet connection and we'll reconnect you.\";\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERead \u003Ca href=\"https:\u002F\u002Fkpiteng.com\u002Fblogs\u002Fjavascript-tips-tricks-best-practices\"\u003EBest JavaScript Coding Practices\u003C\u002Fa\u003E \u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"infrastructure-\" href=\"#infrastructure-\"\u003E\n  \u003C\u002Fa\u003E\n  Infrastructure -\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EInfrastructure contains API (Services) Files, API Handlers, Common Components like Loader, Common TextField, Buttons, etc. Here, I have used AXIOS, you can use JavaScript Fetch and create your API Wrapper class here.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet’s check some parts of Insfrastructure and Understand what it does and what it means.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERead More About - \u003Ca href=\"https:\u002F\u002Fkpiteng.com\u002Fblogs\u002Fintroducing-zero-bundle-size-react-server-components\"\u003EZero Bundle Size - React Server Components\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"api-services-\" href=\"#api-services-\"\u003E\n  \u003C\u002Fa\u003E\n  API (Services) -\n\u003C\u002Fh3\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# api\u002Fapi\u002FList.js\n\nimport APIHandler from '..\u002FAPIHandler';\nimport * as Globals from '..\u002F..\u002F..\u002Fapplication\u002Fcommon\u002FGlobals';\n\nexport default {\n  getListData: () =&gt; APIHandler.get(Globals.TaskList),\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# api\u002FAPIHandler.js\n\nimport { Alert } from 'react-native';\nimport { Observable, throwError, from } from 'rxjs';\nimport {\n  mergeMap, retryWhen, take, delay, catchError, map,\n} from 'rxjs\u002Foperators';\nimport axios, { AxiosPromise } from 'axios';\nimport * as Globals from '..\u002F..\u002Fapplication\u002Fcommon\u002FGlobals';\n\nasync function handleRequest(req) {\n  const ts = new Date().getTime();\n  req.headers.Accept = 'application\u002Fjson';\n  req.headers.timestamp = ts;\n  return req;\n}\n\nexport default {\n  post: (url: string, data: any, options?: any) =&gt; processApiRequest(\n    axios.post(\n      options &amp;&amp; options.fullPath ? url : Globals.BaseURL + url,\n      data,\n      { timeout: Globals.timeoutDuration },\n      options &amp;&amp; { headers: options },\n    ),\n  ),\n  get: (url: string, options?: any, data?: any) =&gt; {\n    data = data ? (data instanceof Object &amp;&amp; !Object.keys(data).length ? null : data) : null;\n    const config = data\n      ? { headers: options, data, timeout: Globals.timeoutDuration }\n      : { headers: options, data: '', timeout: Globals.timeoutDuration };\n    return processApiRequest(\n      axios.get(options &amp;&amp; options.fullPath ? url : Globals.BaseURL + url, config),\n    );\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"components-common-components-\" href=\"#components-common-components-\"\u003E\n  \u003C\u002Fa\u003E\n  Components (Common Components) -\n\u003C\u002Fh3\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# components\u002FLoader\u002Findex.js\n\nimport React, { Component } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport Styles from '.\u002FStyles';\n\nfunction Loader(props)  {\n    const { loading } = props;\n    if (loading) {\n        return (\n            &lt;View style={Styles.loaderWrapper}&gt;\n                &lt;ActivityIndicator size=\"large\" \u002F&gt;\n            &lt;\u002FView&gt;\n        ) \n    } else {\n        &lt;View \u002F&gt;\n    }    \n}\n\nexport default Loader;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch1\u003E\n  \u003Ca name=\"presentation-\" href=\"#presentation-\"\u003E\n  \u003C\u002Fa\u003E\n  Presentation -\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EPresentation contains Component\u002FContainer. Component return design of your component, While Container contain wrapper of Component, HOC Wrapper Of Connect (Redux) to use Redux Store | Props into Components.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet’s check some parts of Component\u002FContainer, what it does and what it means.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"containercomponents-\" href=\"#containercomponents-\"\u003E\n  \u003C\u002Fa\u003E\n  Container\u002FComponents -\n\u003C\u002Fh3\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# component\u002FToDo\u002Findex.js\n\nimport React from 'react';\nimport { SafeAreaView } from 'react-native';\nimport TaskListContainer from '..\u002F..\u002Fcontainer\u002FToDo\u002FTaskListContainer';\nimport Styles from '.\u002FStyles';\n\nfunction ToDoManagement() {\n    return (\n        &lt;SafeAreaView style={Styles.container}&gt;\n            &lt;TaskListContainer \u002F&gt;\n        &lt;\u002FSafeAreaView&gt;\n    );\n}\n\nexport default ToDoManagement;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# container\u002FToDo\u002FTaskListContainer.js\n\nimport { connect } from 'react-redux';\nimport TaskListComponent from '..\u002F..\u002Fcomponent\u002FToDo\u002FTaskListComponent';\n\nconst mapStateToProps = ({ ToDo, loading }) =&gt; ({\n    arrTasks: ToDo.arrTasks,\n    loading: loading.effects.ToDo.fetchTasks,\n  });\n\n  const mapDispatchToProps = ({ \n      ToDo: { \n        fetchTasks,\n        fetchTasksFromServer,\n      } \n    }) =&gt; ({\n        fetchTasks: () =&gt; fetchTasks(),\n        fetchTasksFromServer: () =&gt; fetchTasksFromServer()\n  });\n\n  export default connect(mapStateToProps, mapDispatchToProps)(TaskListComponent);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E# component\u002FToDo\u002FTaskListComponent.js\n\nimport React, { useEffect } from 'react';\nimport { SafeAreaView, FlatList } from 'react-native';\nimport TaskItemContainer from '..\u002F..\u002Fcontainer\u002FToDo\u002FTaskItemContainer';\n\nfunction TaskListComponent(props) {\n    useEffect(() =&gt; {\n        props.fetchTasks();\n        props.fetchTasksFromServer();\n    }, [])\n    return (\n        &lt;FlatList\n            data={props.arrTasks}\n            renderItem={({ item, index }) =&gt;\n                &lt;TaskItemContainer\n                    {...item}\n                \u002F&gt;}\n        \u002F&gt;\n    );\n}\n\nexport default TaskListComponent;\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fkpiteng\u002Freact-clean-architecture\"\u003EDownload React Clean Architecture Source Code!\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThanks for reading Article!\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EKPITENG | DIGITAL TRANSFORMATION\u003Cbr\u003E\n\u003Ca href=\"http:\u002F\u002Fwww.kpiteng.com\u002Fblogs\"\u003Ewww.kpiteng.com\u002Fblogs\u003C\u002Fa\u003E | \u003Ca href=\"mailto:hello@kpiteng.com\"\u003Ehello@kpiteng.com\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"Hello Developers! Many of us use various design patterns with React Development to make React Apps more clean, clearly understandable, and more structured. But still we are facing issues with coding standards, we changed at one place and it breaks at another place. Is there any resolution for this? Yes, Try React Clean Architecture!\n\n**Quick Highlights**  - React Clean Architecture - which makes your code more structured, clean and anyone can easily take over your code and start working with you. So Let’s continue next. Which include everything API, State Management (Redux, Redux Saga),[Storybook](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fstorybook-design-share-component), Utilities, Component\u002FContainer and you can add more relevant features in defined structure hierarchy.\n\n#React Clean Architecture Covered -\n\n```\nreact-clean-architecture\n├── android\n├── ios\n├── src\n│   ├── application\n│   │   ├── common\n│   │   ├── filters\n│   │   ├── logger\n│   │   ├── models\n│   │   ├── persist\n│   │   ├── plugins\n│   │   ├── store\n│   ├── infrastructure\n│   │   ├── api(services)\n│   │   ├── components (common components)\n│   ├── presentation\n│   │   ├── container\n│   │   ├── component\n├── index.js\n├── package.json\n└── README.md\n```\n#Application -\nApplication directory contains the State Management and Common utilities functions and constants. For State Management - I have used Redux Rematch, you can use Redux, Redux Saga,[MobX](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fmobx-state-tree) State Management. For Common - I have used Fonts, Colours, Global Constants and Common Functions.\n\nLet’s check some parts of Rematch and Understand what it does and what it means.\n\n###Store -\n\n```\n# Store\u002Findex.js \n\nimport { init } from '@rematch\u002Fcore';\nimport logger from 'redux-logger';\n\nimport * as models from '..\u002Fmodels';\nimport { loadingPlugin } from '..\u002Fplugins';\nimport { persistPlugin } from '..\u002Fpersist';\n\nexport default init({\n  models,\n  plugins: [loadingPlugin, persistPlugin],\n  redux: {\n    middlewares: [logger],\n  },\n});\n```\nHere, I am initialize Redux Store, to initialize Redux Store we require models, plugins, middleware (optional).\n\n###PlugIns -\nPlugIns itself means to add some value to Redux Store.Here, we are using Loading PlugIns means it will show loading indicator while API is fetching data. So we can show Loader to user, once data is fetched Loading plugin update loading State and based on that we can hide loaders in components.\n\n```\nimport createLoadingPlugin from '@rematch\u002Floading';\n\nexport const loadingPlugin = createLoadingPlugin({\n  whitelist: ['ToDo\u002FfetchTasks'],\n});\n```\n\n###Persists -\nPersist itself means to Persist something, Here, it will persist Rematch Store. To create persist store it will take few argument, key, whitelist (model - save in persist store), blacklist (model - not saved in persist store), version - help while upgrading application, storage - AsyncStorage (store persist store in AsyncStorage), transform - contains - filters which applied while persist store.\n\n```\nimport AsyncStorage from '@react-native-community\u002Fasync-storage';\nimport createRematchPersist from '@rematch\u002Fpersist';\nimport { AllFilters } from '..\u002Ffilters';\n\nexport const persistPlugin = createRematchPersist({\n  key: 'root',\n  whitelist: ['ToDo'],\n  version: 1,\n  storage: AsyncStorage,\n  transforms: AllFilters,\n});\n```\n\n###Models -\nModels will contain State, Reducer, Effect (Actions).\n```\nimport { List } from '..\u002F..\u002Finfrastructure\u002Fapi\u002Fapi';\nexport const ToDo = {\n  state: {\n    arrTasks: [],\n    arrAPITasks: [],\n    totalTasks: 3,\n  },\n  reducers: {\n    setTasks(state, payload) {\n      return {\n        ...state,\n        arrTasks: payload,\n      };\n    },\n    setAPITasks(state, payload) {\n      return {\n        ...state,\n        arrAPITasks: payload,\n      };\n    },\n    clear() {\n      return {\n        arrBeneficiary: [],\n      };\n    },\n  },\n  effects: (dispatch) =\u003E ({\n    async fetchTasks() {\n      try {\n        dispatch.ToDo.setTasks([\n            {\n                taskID: 1,\n                taskName: 'Task #1',\n            }\n        ]);\n      } catch (error) {\n      }\n    },\n    async fetchTasksFromServer() {\n      try {\n        const response = await List.getListData().toPromise();\n        dispatch.ToDo.setAPITasks(response);\n      } catch (error) {\n      }\n    },\n  }),\n};\n```\n###Filters -\n```\nimport { createBlacklistFilter } from 'redux-persist-transform-filter';\n\nconst toDoFilter = createBlacklistFilter('ToDo', ['totalTasks']);\n\nexport const AllFilters = [toDoFilter];\n```\n\n###Common -\nHere, You can define your Global Constant, Common Files - Fonts, FontSize, Device Specification, Colors many more as per custom solution.\n```\nexports.globalVars = {\n    userSalt: 'TOHV7eOQRAXmbe433BilgtJeCkugs1rgvZ',\n    currentCountryCode: '',\n};\nexport const BaseURL = \"https:\u002F\u002Fjsonplaceholder.typicode.com\u002F\";\nexport const TaskList = 'todos\u002F';\nexport const apiVersion = 'events\u002F';\nexport const Authsecret = '';\nexport const timeoutDuration = 30000;\n\n\u002F\u002F Error Messages\nexport const errorEncountered = 'Error was encountered processing this request';\nexport const timeoutMessage =\n    \"We are unable to fetch data at this time, kindly check your internet connection and we'll reconnect you.\";\n\n```\n\n\u003E Read [Best JavaScript Coding Practices](https:\u002F\u002Fkpiteng.com\u002Fblogs\u002Fjavascript-tips-tricks-best-practices) \n\n#Infrastructure -\nInfrastructure contains API (Services) Files, API Handlers, Common Components like Loader, Common TextField, Buttons, etc. Here, I have used AXIOS, you can use JavaScript Fetch and create your API Wrapper class here.\n\nLet’s check some parts of Insfrastructure and Understand what it does and what it means.\n\u003E Read More About - [Zero Bundle Size - React Server Components](https:\u002F\u002Fkpiteng.com\u002Fblogs\u002Fintroducing-zero-bundle-size-react-server-components)\n\n###API (Services) -\n```\n# api\u002Fapi\u002FList.js\n\nimport APIHandler from '..\u002FAPIHandler';\nimport * as Globals from '..\u002F..\u002F..\u002Fapplication\u002Fcommon\u002FGlobals';\n\nexport default {\n  getListData: () =\u003E APIHandler.get(Globals.TaskList),\n};\n```\n\n```\n# api\u002FAPIHandler.js\n\nimport { Alert } from 'react-native';\nimport { Observable, throwError, from } from 'rxjs';\nimport {\n  mergeMap, retryWhen, take, delay, catchError, map,\n} from 'rxjs\u002Foperators';\nimport axios, { AxiosPromise } from 'axios';\nimport * as Globals from '..\u002F..\u002Fapplication\u002Fcommon\u002FGlobals';\n\nasync function handleRequest(req) {\n  const ts = new Date().getTime();\n  req.headers.Accept = 'application\u002Fjson';\n  req.headers.timestamp = ts;\n  return req;\n}\n\nexport default {\n  post: (url: string, data: any, options?: any) =\u003E processApiRequest(\n    axios.post(\n      options && options.fullPath ? url : Globals.BaseURL + url,\n      data,\n      { timeout: Globals.timeoutDuration },\n      options && { headers: options },\n    ),\n  ),\n  get: (url: string, options?: any, data?: any) =\u003E {\n    data = data ? (data instanceof Object && !Object.keys(data).length ? null : data) : null;\n    const config = data\n      ? { headers: options, data, timeout: Globals.timeoutDuration }\n      : { headers: options, data: '', timeout: Globals.timeoutDuration };\n    return processApiRequest(\n      axios.get(options && options.fullPath ? url : Globals.BaseURL + url, config),\n    );\n  },\n};\n```\n\n###Components (Common Components) -\n```\n# components\u002FLoader\u002Findex.js\n\nimport React, { Component } from 'react';\nimport { View, ActivityIndicator } from 'react-native';\nimport Styles from '.\u002FStyles';\n\nfunction Loader(props)  {\n    const { loading } = props;\n    if (loading) {\n        return (\n            \u003CView style={Styles.loaderWrapper}\u003E\n                \u003CActivityIndicator size=\"large\" \u002F\u003E\n            \u003C\u002FView\u003E\n        ) \n    } else {\n        \u003CView \u002F\u003E\n    }    \n}\n\nexport default Loader;\n```\n#Presentation -\nPresentation contains Component\u002FContainer. Component return design of your component, While Container contain wrapper of Component, HOC Wrapper Of Connect (Redux) to use Redux Store | Props into Components.\n\nLet’s check some parts of Component\u002FContainer, what it does and what it means.\n\n###Container\u002FComponents -\n```\n# component\u002FToDo\u002Findex.js\n\nimport React from 'react';\nimport { SafeAreaView } from 'react-native';\nimport TaskListContainer from '..\u002F..\u002Fcontainer\u002FToDo\u002FTaskListContainer';\nimport Styles from '.\u002FStyles';\n\nfunction ToDoManagement() {\n    return (\n        \u003CSafeAreaView style={Styles.container}\u003E\n            \u003CTaskListContainer \u002F\u003E\n        \u003C\u002FSafeAreaView\u003E\n    );\n}\n\nexport default ToDoManagement;\n```\n```\n# container\u002FToDo\u002FTaskListContainer.js\n\nimport { connect } from 'react-redux';\nimport TaskListComponent from '..\u002F..\u002Fcomponent\u002FToDo\u002FTaskListComponent';\n\nconst mapStateToProps = ({ ToDo, loading }) =\u003E ({\n    arrTasks: ToDo.arrTasks,\n    loading: loading.effects.ToDo.fetchTasks,\n  });\n  \n  const mapDispatchToProps = ({ \n      ToDo: { \n        fetchTasks,\n        fetchTasksFromServer,\n      } \n    }) =\u003E ({\n        fetchTasks: () =\u003E fetchTasks(),\n        fetchTasksFromServer: () =\u003E fetchTasksFromServer()\n  });\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(TaskListComponent);\n```\n```\n# component\u002FToDo\u002FTaskListComponent.js\n\nimport React, { useEffect } from 'react';\nimport { SafeAreaView, FlatList } from 'react-native';\nimport TaskItemContainer from '..\u002F..\u002Fcontainer\u002FToDo\u002FTaskItemContainer';\n\nfunction TaskListComponent(props) {\n    useEffect(() =\u003E {\n        props.fetchTasks();\n        props.fetchTasksFromServer();\n    }, [])\n    return (\n        \u003CFlatList\n            data={props.arrTasks}\n            renderItem={({ item, index }) =\u003E\n                \u003CTaskItemContainer\n                    {...item}\n                \u002F\u003E}\n        \u002F\u003E\n    );\n}\n\nexport default TaskListComponent;\n\n```\n\u003E [Download React Clean Architecture Source Code!](https:\u002F\u002Fgithub.com\u002Fkpiteng\u002Freact-clean-architecture)\n\n**Thanks for reading Article!**\n\nKPITENG | DIGITAL TRANSFORMATION\nwww.kpiteng.com\u002Fblogs | hello@kpiteng.com\n\n",user:{name:e,username:e,twitter_username:"kpitengineer",github_username:a,website_url:"https:\u002F\u002Fkpiteng.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kO068XOh--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F626376\u002Fe53cf965-83b1-4503-9b80-e95e5f7f770b.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XYbeeuKv--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F626376\u002Fe53cf965-83b1-4503-9b80-e95e5f7f770b.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkpiteng\u002F706351",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fkpiteng\u002Freact-clean-architecture-114f",270,"2021-05-23T13:34:03Z","kpiteng"));
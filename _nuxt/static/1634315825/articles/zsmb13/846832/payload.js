__NUXT_JSONP__("/articles/zsmb13/846832", (function(a,b,c,d,e){c.type_of="article";c.id=846832;c.title="All About Opt-In Annotations";c.description="The opt-in mechanism in Kotlin allows you to mark APIs that should be used carefully -- or perhaps...";c.readable_publish_date="Sep 30";c.slug="all-about-opt-in-annotations-5h6c";c.path="\u002Fzsmb13\u002Fall-about-opt-in-annotations-5h6c";c.url="https:\u002F\u002Fdev.to\u002Fzsmb13\u002Fall-about-opt-in-annotations-5h6c";c.comments_count=0;c.public_reactions_count=d;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=d;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zbKifjEj--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F9rjq4wtzbaztuuoqxkwi.jpg";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fjPdGLMm--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F9rjq4wtzbaztuuoqxkwi.jpg";c.canonical_url="https:\u002F\u002Fzsmb.co\u002Fopt-in-annotations\u002F";c.created_at=b;c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=11;c.tag_list="android, kotlin, api, library";c.tags=["android","kotlin","api","library"];c.body_html="\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Fopt-in-requirements.html\"\u003Eopt-in mechanism in Kotlin\u003C\u002Fa\u003E allows you to mark APIs that should be used carefully -- or perhaps not at all. If you mark a declaration (a class, a function, a property, anything really) as \u003Cem\u003Eopt-in required\u003C\u002Fem\u003E, using it will produce a warning or error in the code, prompting the user to explicitly opt in to using it. This can guarantee that there has been a conscious decision made about using the API on the use site.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EThis is \u003Cem\u003Every\u003C\u002Fem\u003E similar to how you deprecate declarations to prevent people from using them. You can read more about deprecations in \u003Ca href=\"https:\u002F\u002Fzsmb.co\u002Fmaintaining-compatibility-in-kotlin-libraries\u002F#deprecation\"\u003EMaintaining Compatibility in Kotlin Libraries\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EOpt-in APIs are really useful if you're building libraries, but it also applies if you want to control the visibility and usages of APIs within any multi-module project. You also have to know how to interact with opt-in APIs correctly as a user.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this article, we'll look at everything you need to know about opt-in APIs:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#creating-opt-in-apis\"\u003EHow to create them\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#using-opt-in-apis\"\u003EHow to use them\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#use-cases-and-conventions\"\u003EReal life use cases and useful conventions\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAnd we'll also touch on some auxiliary topics around opt-in:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#java-interop\"\u003EJava interop\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#opt-in-on-android\"\u003EAndroid usage\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#api-verification\"\u003EAPI verification\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWe have a lot of ground to cover, so let's get started. Feel free to use the links above to jump around to different parts of this guide!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"creating-optin-apis\" href=\"#creating-optin-apis\"\u003E\n  \u003C\u002Fa\u003E\n  Creating Opt-In APIs\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFirst, let's see how you can create APIs that will require their users to opt-in to using them. This is done in two steps:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreating an opt-in marker annotation\u003C\u002Fli\u003E\n\u003Cli\u003EMarking APIs as opt-in required\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"creating-an-optin-marker-annotation\" href=\"#creating-an-optin-marker-annotation\"\u003E\n  \u003C\u002Fa\u003E\n  Creating an Opt-in Marker Annotation\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ETo create an opt-in marker annotation, create a new \u003Ccode\u003Eannotation class\u003C\u002Fcode\u003E and annotate it with \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-requires-opt-in\u002F\"\u003E\u003Ccode\u003ERequiresOptIn\u003C\u002Fcode\u003E\u003C\u002Fa\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Epackage\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ecom.example.lib.core\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nd\"\u003E@RequiresOptIn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Elevel\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003ERequiresOptIn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003ELevel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EWARNING\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Emessage\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"This is an experimental API. It may be changed or removed in the future.\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eannotation\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003EExperimentalLibraryApi\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis annotation has very similar properties to the \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-deprecated\u002F\"\u003E\u003Ccode\u003E@Deprecated\u003C\u002Fcode\u003E\u003C\u002Fa\u003E annotation. Let's review what they are.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst, you can set a severity \u003Ccode\u003Elevel\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003EWARNING\u003C\u002Fcode\u003E will show a yellow warning on the call site and a warning during compilation. This is a \"soft\" warning, as it can be ignored and the code will still compile.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003EERROR\u003C\u002Fcode\u003E will cause a \"hard\" compilation error on the call site. Anyone using an API that has this opt-in level \u003Cem\u003Emust\u003C\u002Fem\u003E explicitly opt-in to using it, otherwise their code won't compile.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EYou can also set a \u003Ccode\u003Emessage\u003C\u002Fcode\u003E that describes what the given opt-in marker annotation indicates. For this example, we're creating an annotation to mark APIs that are still experimental in a library, but are expected to become stable in later versions.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ENote that marking experimental APIs is just one use case for opt-in annotations. See the \u003Ca href=\"#use-cases-and-conventions\"\u003EUse Cases and Conventions\u003C\u002Fa\u003E below for other examples.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EYou'll notice that the usage of the \u003Ccode\u003ERequiresOptIn\u003C\u002Fcode\u003E annotation itself also produces the warning. This is because the opt-in system of the Kotlin Standard Library itself is still experimental. You can track the development progress \u003Ca href=\"https:\u002F\u002Fyoutrack.jetbrains.com\u002Fissue\u002FKT-22956\"\u003Eon this YouTrack issue\u003C\u002Fa\u003E -- it's currently expected to become stable in Kotlin 1.7. \u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EWhile this system might not be officially stable, it's already being widely used across popular Kotlin libraries.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ETo make that warning go away, you'll have to \u003Cem\u003Eopt in to using Kotlin's opt-in system\u003C\u002Fem\u003E. You can do so by adding the following code to your module's build configuration, which adds an argument to the Kotlin compiler doing exactly that: opting in to opt-in.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight groovy\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EwithType\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eorg\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ejetbrains\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ekotlin\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Egradle\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EKotlinCompile\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E).\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eall\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EkotlinOptions\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EfreeCompilerArgs\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s1\"\u003E'-Xopt-in=kotlin.RequiresOptIn'\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"marking-apis-as-optin-required\" href=\"#marking-apis-as-optin-required\"\u003E\n  \u003C\u002Fa\u003E\n  Marking APIs as Opt-in Required\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWith the marker annotation created, you can now mark pieces of API as experimental! For example, you can annotate a function like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@ExperimentalLibraryApi\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ECalling this function will now produce a warning on the call site:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IgeasGRt--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fht9koh4wo9ww1bck28xw.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IgeasGRt--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fht9koh4wo9ww1bck28xw.png\" alt=\"Warning on the call site of the function\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can also place these markers on larger scopes. For example, you can mark an entire class:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@ExperimentalLibraryApi\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003EStack\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003EInt\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Epop\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E():\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003EInt\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWith this in place, any usage of the class' APIs (as well as the usage of the type itself) will produce warnings:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--32BYPP4T--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgoyhvpk3wx0zrwydnaiu.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--32BYPP4T--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgoyhvpk3wx0zrwydnaiu.png\" alt=\"Warnings on the call site of the class\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's see how you can handle these on the call site.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"using-optin-apis\" href=\"#using-optin-apis\"\u003E\n  \u003C\u002Fa\u003E\n  Using Opt-In APIs\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThere are several ways of making the warnings and errors produced by calling opt-in APIs go away. Let's see when you want to use each of them.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"propagating-the-optin-requirement\" href=\"#propagating-the-optin-requirement\"\u003E\n  \u003C\u002Fa\u003E\n  Propagating the Opt-in Requirement\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EOne way to use an opt-in API is to mark the code that's calling it with the same opt-in annotation, propagating the requirement further:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@ExperimentalLibraryApi\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EanotherExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis allows you to use other APIs that are marked with the same annotation within the implementation of this function. However, anyone using \u003Cem\u003Ethis\u003C\u002Fem\u003E function will now have to deal with the opt-in requirement as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is useful within your own code to make sure that you don't accidentally create stable APIs that rely on experimental APIs in their implementation. If something relies on an experimental declaration, it too should likely be experimental.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHowever, you shouldn't do this in client code, as that'd just be putting off the issue. Instead, you want to actually opt in there. We'll look at this next.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"opting-in-an-entire-module\" href=\"#opting-in-an-entire-module\"\u003E\n  \u003C\u002Fa\u003E\n  Opting in an Entire Module\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EIf you want to enable all usages of a certain kind of opt-in API in a module, you can use the same \u003Ccode\u003E-Xopt-in\u003C\u002Fcode\u003E compiler option that you used to opt in to using opt-in earlier, but provide the specific annotation as the value.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis configuration allows all usages of our experimental APIs within its module:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight groovy\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EwithType\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eorg\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ejetbrains\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ekotlin\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Egradle\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EKotlinCompile\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E).\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eall\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EkotlinOptions\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EfreeCompilerArgs\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s1\"\u003E'-Xopt-in=com.example.lib.core.ExperimentalLibraryApi'\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYou should use this with care, as enabling a certain opt-in API module-wide can lead to creating lots of usages of that API accidentally. Since there are no warnings in the code this way, you can easily miss these usages.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOn the other hand, this fits certain \u003Ca href=\"#use-cases-and-conventions\"\u003Euse cases\u003C\u002Fa\u003E really well, such as opting in to using internal APIs that are shared between different modules of the same library.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"opting-in-locally\" href=\"#opting-in-locally\"\u003E\n  \u003C\u002Fa\u003E\n  Opting in Locally\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EA more precise approach is opting in locally. You can do this for each usage of opt-in APIs, using the \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-opt-in\u002F\"\u003E\u003Ccode\u003EOptIn\u003C\u002Fcode\u003E\u003C\u002Fa\u003E annotation:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EclientCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nd\"\u003E@OptIn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EInternalMyLibraryApi\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYou'll notice that the usage of the \u003Ccode\u003EOptIn\u003C\u002Fcode\u003E annotation itself also produces the warning. This, again, is due to the system itself being experimental. Interestingly, you have to opt in to \u003Ccode\u003Ekotlin.RequiresOptIn\u003C\u002Fcode\u003E in this case as well:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight groovy\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EwithType\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eorg\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ejetbrains\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ekotlin\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Egradle\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Etasks\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EKotlinCompile\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E).\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eall\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EkotlinOptions\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EfreeCompilerArgs\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s1\"\u003E'-Xopt-in=kotlin.RequiresOptIn'\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWith the configuration above, you can now freely use \u003Ccode\u003EOptIn\u003C\u002Fcode\u003E to suppress opt-in related warnings and errors. This comes with the benefit that each usage of opt-in APIs will be clearly visible in the code thanks to the \u003Ccode\u003EOptIn\u003C\u002Fcode\u003E annotation being present on the use site.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can opt-in at the statement level, like seen above, but also in broader scopes, such as for an entire function:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@OptIn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EInternalMyLibraryApi\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EclientCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOr even an entire file, using an \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Fannotations.html#annotation-use-site-targets\"\u003Eannotation use-site target\u003C\u002Fa\u003E, \u003Ccode\u003E@file:\u003C\u002Fcode\u003E :\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"err\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Efile\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EOptIn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EInternalMyLibraryApi\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EfirstFunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EsecondFunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENext, let's expand beyond using these annotations to mark experimental APIs, and see what other scenarios they can be useful in.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"use-cases-and-conventions\" href=\"#use-cases-and-conventions\"\u003E\n  \u003C\u002Fa\u003E\n  Use Cases and Conventions\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESome of the best examples of opt-in APIs are in first-party Kotlin libraries. A great example is the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FKotlin\u002Fkotlinx.coroutines\"\u003Ekotlinx.coroutines\u003C\u002Fa\u003E library, which uses four different opt-in marker annotations across its API. \u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EThe annotation naming conventions used in this library are also widely adopted in other libraries. You should consider aligning your own opt-in usages with this as well.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EThese opt-in annotations all follow the \u003Ccode\u003E[Prefix][LibraryName]Api\u003C\u002Fcode\u003E pattern, and each prefix carries different semantics. Let's see what each of them mean:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-experimental-coroutines-api\u002F\"\u003E\u003Ccode\u003EExperimentalCoroutinesApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E: Perhaps the most frequently used convention, it marks APIs that are not stable yet. These might have known issues or ongoing design discussions that can change the API or its behaviour in the future.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-internal-coroutines-api\u002F\"\u003E\u003Ccode\u003EInternalCoroutinesApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E: Marks APIs that are only exposed for cross-module usage within a single library group, and should not be relied on by end users. They should be considered \u003Ccode\u003Einternal\u003C\u002Fcode\u003E and can change or be removed at any time. See \u003Ca href=\"https:\u002F\u002Fzsmb.co\u002Ftalks\u002Fmastering-api-visibility\u002F\"\u003EMastering API Visibility in Kotlin\u003C\u002Fa\u003E for a detailed example of how to use these.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-obsolete-coroutines-api\u002F\"\u003E\u003Ccode\u003EObsoleteCoroutinesApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E: A more niche marker than previous ones, this marks APIs that should not be used anymore. However, they are not deprecated yet, as they don't have replacements ready that users could migrate to.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-delicate-coroutines-api\u002F\"\u003E\u003Ccode\u003EDelicateCoroutinesApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E: Another niche convention, delicate APIs should only be used in very specific situations, and users should make sure they understand the implications of using such APIs.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EOn Android, Google's own Jetpack libraries also make generous use of opt-in APIs. In the \u003Ca href=\"https:\u002F\u002Fandroid.googlesource.com\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main\u002Fdocs\u002Fapi_guidelines.md#experimental-api\"\u003EAPI guidelines document for Jetpack\u003C\u002Fa\u003E, using opt-in annotations is the recommended way of \"annotating API surfaces as unstable\".\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs a result, you'll see lots of these annotations when interacting with Jetpack libraries. They are especially widespread in Jetpack Compose libraries, given that the framework is still very new. Some common examples of these:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fruntime\u002FInternalComposeApi\"\u003E\u003Ccode\u003EInternalComposeApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fruntime\u002FExperimentalComposeApi\"\u003E\u003Ccode\u003EExperimentalComposeApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FInternalFoundationApi\"\u003E\u003Ccode\u003EInternalFoundationApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FExperimentalFoundationApi\"\u003E\u003Ccode\u003EExperimentalFoundationApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fmaterial\u002FExperimentalMaterialApi\"\u003E\u003Ccode\u003EExperimentalMaterialApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftext\u002FInternalTextApi\"\u003E\u003Ccode\u003EInternalTextApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftext\u002FExperimentalTextApi\"\u003E\u003Ccode\u003EExperimentalTextApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002FInternalComposeUiApi\"\u003E\u003Ccode\u003EInternalComposeUiApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002FExperimentalComposeUiApi\"\u003E\u003Ccode\u003EExperimentalComposeUiApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftest\u002FInternalTestApi\"\u003E\u003Ccode\u003EInternalTestApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftest\u002FExperimentalTestApi\"\u003E\u003Ccode\u003EExperimentalTestApi\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E... and more!\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAs you can see, these usually come in pairs, and a separate pair is created for each of the different Compose packages.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThey are generally not documented in Kdoc, but you can find out what their purpose is by reading the provided \u003Ccode\u003Emessage\u003C\u002Fcode\u003E. A good place to do this is on \u003Ca href=\"https:\u002F\u002Fcs.android.com\u002F\"\u003Ecs.android.com\u003C\u002Fa\u003E. For example, you can find the sources of \u003Ccode\u003EInternalFoundationApi\u003C\u002Fcode\u003E \u003Ca href=\"https:\u002F\u002Fcs.android.com\u002Fandroidx\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main:compose\u002Ffoundation\u002Ffoundation\u002Fsrc\u002FcommonMain\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FInternalFoundationApi.kt\"\u003Ehere\u003C\u002Fa\u003E, and the sources of \u003Ccode\u003EExperimentalFoundationApi\u003C\u002Fcode\u003E \u003Ca href=\"https:\u002F\u002Fcs.android.com\u002Fandroidx\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main:compose\u002Ffoundation\u002Ffoundation\u002Fsrc\u002FcommonMain\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FExperimentalFoundationApi.kt\"\u003Ehere\u003C\u002Fa\u003E, in the same package.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThey, of course, follow the conventions layed out by \u003Cem\u003Ekotlinx.coroutines\u003C\u002Fem\u003E above.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"java-interop\" href=\"#java-interop\"\u003E\n  \u003C\u002Fa\u003E\n  Java Interop\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EUntil now, we've discussed using Kotlin's own opt-in annotations: \u003Ccode\u003Ekotlin.RequiresOptIn\u003C\u002Fcode\u003E and \u003Ccode\u003Ekotlin.OptIn\u003C\u002Fcode\u003E. Usages of these are verified by the Kotlin compiler, which produces warnings and errors around them as needed.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn most cases, the API marked with opt-in annotations is public, but the annotation being present deters clients from using it. However, when Java source code uses these APIs, they'll only see it as regular public API. The Java compiler does not understand or respect these opt-in requirements.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can either ignore this and accept that Java users (if they exist) will be able to access these APIs freely, and not be warned at all, or you can take extra steps to make sure that Java clients don't access opt-in APIs accidentally.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne solution is to mark your opt-in declarations with \u003Ca href=\"https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin.jvm\u002F-jvm-synthetic\u002F\"\u003E\u003Ccode\u003E@JvmSynthetic\u003C\u002Fcode\u003E\u003C\u002Fa\u003E as well. Synthetic declarations are inaccessible from Java source code, preventing all Java usages of these APIs (with no way to opt-in).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight kotlin\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@JvmSynthetic\u003C\u002Fspan\u003E\n\u003Cspan class=\"nd\"\u003E@ExperimentalLibraryApi\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efun\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EsomeExperimentalApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you're on Android, keep reading for another one.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"optin-on-android\" href=\"#optin-on-android\"\u003E\n  \u003C\u002Fa\u003E\n  Opt-In on Android\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAndroid is now officially \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fkotlin\u002Ffirst\"\u003EKotlin-first\u003C\u002Fa\u003E, but Java is also still a fully-supported language on the platform. To work around the Java compatibility issue described above, Android has its own set of opt-in annotations (\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fannotation\u002FRequiresOptIn\"\u003E\u003Ccode\u003Eandroidx.annotation.RequiresOptIn\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fannotation\u002FOptIn\"\u003E\u003Ccode\u003Eandroidx.annotation.OptIn\u003C\u002Fcode\u003E\u003C\u002Fa\u003E), which can be used the exact same way as described earlier for the Kotlin annotations.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe difference is in how these are verified. Instead of the Kotlin compiler performing the checks, verifying these Android-specific annotations is up to the \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fstudio\u002Fwrite\u002Flint\"\u003EAndroid Lint tool\u003C\u002Fa\u003E. As Lint checks are performed on the \u003Ca href=\"https:\u002F\u002Fplugins.jetbrains.com\u002Fdocs\u002Fintellij\u002Fuast.html\"\u003EUAST (Unified Abstract Syntax Tree)\u003C\u002Fa\u003E, these annotations are verified not only in Kotlin, but also in Java code. This means that the opt-in marker annotation, its usage, and the code using the opt-in APIs can all be in either language.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo use these annotations in your project, you need to add a dependency on the \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fjetpack\u002Fandroidx\u002Freleases\u002Fannotation\"\u003E\u003Ccode\u003Eannotation-experimental\u003C\u002Fcode\u003E artifact\u003C\u002Fa\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight groovy\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003Edependencies\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Eimplementation\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"androidx.annotation:annotation-experimental:1.1.0\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E   \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENote that you can still use the Kotlin opt-in system on Android, you'll just miss out on Java support.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"api-verification\" href=\"#api-verification\"\u003E\n  \u003C\u002Fa\u003E\n  API Verification\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIf you mark some pieces of public API in your module as experimental or internal using Opt-In annotations, you will probably want to ignore them when checking for changes (especially breaking changes) in your public API.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA common tool you can use for Kotlin projects is the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FKotlin\u002Fbinary-compatibility-validator\"\u003EBinary compatibility validator\u003Cbr\u003E\nplugin\u003C\u002Fa\u003E. This plugin calls annotations that mark API that shouldn't be considered public \"non-public markers\".\u003C\u002Fp\u003E\n\n\u003Cp\u003EThese can be configured in the plugin's configuration block by adding the fully qualified names of the marker annotations to \u003Ccode\u003EnonPublicMarkers\u003C\u002Fcode\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight groovy\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003EapiValidation\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"cm\"\u003E\u002F**\n     * Set of annotations that exclude API from being public.\n     * Typically, it is all kinds of `@InternalApi` annotations \n     * that mark effectively private API that cannot be actually \n     * private for technical reasons.\n     *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EnonPublicMarkers\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"s2\"\u003E\"com.example.lib.core.ExperimentalLibraryApi\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"s2\"\u003E\"com.example.lib.core.InternalLibraryApi\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAPIs annotated with non-public markers will be excluded from the API dumps of the validator plugin (they won't show up in the generated \u003Ccode\u003E.api\u003C\u002Fcode\u003E files).\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThat's -- hopefully -- everything you'd ever want to know about opt-in annotations, and more. With this, you should now be ready to use these annotations in your own library or multi-module projects as well, whether you just need to interact with experimental APIs while building your apps or create your own opt-in APIs.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks to \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fstewemetal\"\u003EIstván Juhos\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Farnogiu\"\u003EArnaud Giuliani\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Ftkuenneth\"\u003EThomas Künneth\u003C\u002Fa\u003E, and \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fbrwngrldev\"\u003EAnnyce Davis\u003C\u002Fa\u003E for taking an early look and reviewing this post :)\u003C\u002Fp\u003E\n\n\u003Cp\u003EFollow me \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fzsmb13\"\u003E@zsmb13 on Twitter\u003C\u002Fa\u003E to keep in touch and get notified of similar posts!\u003C\u002Fp\u003E\n\n";c.body_markdown="The [opt-in mechanism in Kotlin](https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Fopt-in-requirements.html) allows you to mark APIs that should be used carefully -- or perhaps not at all. If you mark a declaration (a class, a function, a property, anything really) as *opt-in required*, using it will produce a warning or error in the code, prompting the user to explicitly opt in to using it. This can guarantee that there has been a conscious decision made about using the API on the use site.\n\n\u003E This is *very* similar to how you deprecate declarations to prevent people from using them. You can read more about deprecations in [Maintaining Compatibility in Kotlin Libraries](https:\u002F\u002Fzsmb.co\u002Fmaintaining-compatibility-in-kotlin-libraries\u002F#deprecation).\n\nOpt-in APIs are really useful if you're building libraries, but it also applies if you want to control the visibility and usages of APIs within any multi-module project. You also have to know how to interact with opt-in APIs correctly as a user.\n\nIn this article, we'll look at everything you need to know about opt-in APIs:\n- [How to create them](#creating-opt-in-apis)\n- [How to use them](#using-opt-in-apis)\n- [Real life use cases and useful conventions](#use-cases-and-conventions)\n\nAnd we'll also touch on some auxiliary topics around opt-in:\n- [Java interop](#java-interop)\n- [Android usage](#opt-in-on-android)\n- [API verification](#api-verification)\n\nWe have a lot of ground to cover, so let's get started. Feel free to use the links above to jump around to different parts of this guide!\n\n## Creating Opt-In APIs\n\nFirst, let's see how you can create APIs that will require their users to opt-in to using them. This is done in two steps:\n\n1. Creating an opt-in marker annotation\n2. Marking APIs as opt-in required\n\n#### Creating an Opt-in Marker Annotation\n\nTo create an opt-in marker annotation, create a new `annotation class` and annotate it with [`RequiresOptIn`](https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-requires-opt-in\u002F):\n\n```kotlin\npackage com.example.lib.core\n\n@RequiresOptIn(\n    level = RequiresOptIn.Level.WARNING,\n    message = \"This is an experimental API. It may be changed or removed in the future.\"\n)\npublic annotation class ExperimentalLibraryApi\n```\n\nThis annotation has very similar properties to the [`@Deprecated`](https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-deprecated\u002F) annotation. Let's review what they are.\n\nFirst, you can set a severity `level`:\n- `WARNING` will show a yellow warning on the call site and a warning during compilation. This is a \"soft\" warning, as it can be ignored and the code will still compile.\n- `ERROR` will cause a \"hard\" compilation error on the call site. Anyone using an API that has this opt-in level *must* explicitly opt-in to using it, otherwise their code won't compile.\n\nYou can also set a `message` that describes what the given opt-in marker annotation indicates. For this example, we're creating an annotation to mark APIs that are still experimental in a library, but are expected to become stable in later versions.\n\n\u003E Note that marking experimental APIs is just one use case for opt-in annotations. See the [Use Cases and Conventions](#use-cases-and-conventions) below for other examples.\n\nYou'll notice that the usage of the `RequiresOptIn` annotation itself also produces the warning. This is because the opt-in system of the Kotlin Standard Library itself is still experimental. You can track the development progress [on this YouTrack issue](https:\u002F\u002Fyoutrack.jetbrains.com\u002Fissue\u002FKT-22956) -- it's currently expected to become stable in Kotlin 1.7. \n\n\u003E While this system might not be officially stable, it's already being widely used across popular Kotlin libraries.\n\nTo make that warning go away, you'll have to *opt in to using Kotlin's opt-in system*. You can do so by adding the following code to your module's build configuration, which adds an argument to the Kotlin compiler doing exactly that: opting in to opt-in.\n\n```groovy\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\n    kotlinOptions {\n        freeCompilerArgs += [\n            '-Xopt-in=kotlin.RequiresOptIn',\n        ]\n    }\n}\n```\n\n\n#### Marking APIs as Opt-in Required\n\nWith the marker annotation created, you can now mark pieces of API as experimental! For example, you can annotate a function like this:\n\n```kotlin\n@ExperimentalLibraryApi\npublic fun someExperimentalApi()\n```\n\nCalling this function will now produce a warning on the call site:\n\n![Warning on the call site of the function](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fht9koh4wo9ww1bck28xw.png)\n\nYou can also place these markers on larger scopes. For example, you can mark an entire class:\n\n```kotlin\n@ExperimentalLibraryApi\nclass Stack {\n    fun push(data: Int)\n    fun pop(): Int\n}\n```\n\nWith this in place, any usage of the class' APIs (as well as the usage of the type itself) will produce warnings:\n\n![Warnings on the call site of the class](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgoyhvpk3wx0zrwydnaiu.png)\n\nLet's see how you can handle these on the call site.\n\n## Using Opt-In APIs\n\nThere are several ways of making the warnings and errors produced by calling opt-in APIs go away. Let's see when you want to use each of them.\n\n#### Propagating the Opt-in Requirement\n\nOne way to use an opt-in API is to mark the code that's calling it with the same opt-in annotation, propagating the requirement further:\n\n```kotlin\n@ExperimentalLibraryApi\npublic fun anotherExperimentalApi() {\n    someExperimentalApi()\n}\n```\n\nThis allows you to use other APIs that are marked with the same annotation within the implementation of this function. However, anyone using _this_ function will now have to deal with the opt-in requirement as well.\n\nThis is useful within your own code to make sure that you don't accidentally create stable APIs that rely on experimental APIs in their implementation. If something relies on an experimental declaration, it too should likely be experimental.\n\nHowever, you shouldn't do this in client code, as that'd just be putting off the issue. Instead, you want to actually opt in there. We'll look at this next.\n\n#### Opting in an Entire Module\n  \nIf you want to enable all usages of a certain kind of opt-in API in a module, you can use the same `-Xopt-in` compiler option that you used to opt in to using opt-in earlier, but provide the specific annotation as the value.\n\nThis configuration allows all usages of our experimental APIs within its module:\n\n```groovy\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\n    kotlinOptions {\n        freeCompilerArgs += [\n            '-Xopt-in=com.example.lib.core.ExperimentalLibraryApi',\n        ]\n    }\n}\n```\n\nYou should use this with care, as enabling a certain opt-in API module-wide can lead to creating lots of usages of that API accidentally. Since there are no warnings in the code this way, you can easily miss these usages.\n\nOn the other hand, this fits certain [use cases](#use-cases-and-conventions) really well, such as opting in to using internal APIs that are shared between different modules of the same library.\n\n#### Opting in Locally\n\nA more precise approach is opting in locally. You can do this for each usage of opt-in APIs, using the [`OptIn`](https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin\u002F-opt-in\u002F) annotation:\n\n```kotlin\npublic fun clientCode() {\n    @OptIn(InternalMyLibraryApi::class)\n    someExperimentalApi()\n}\n```\n\nYou'll notice that the usage of the `OptIn` annotation itself also produces the warning. This, again, is due to the system itself being experimental. Interestingly, you have to opt in to `kotlin.RequiresOptIn` in this case as well:\n\n```groovy\ntasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {\n    kotlinOptions {\n        freeCompilerArgs += [\n            '-Xopt-in=kotlin.RequiresOptIn',\n        ]\n    }\n}\n```\n\nWith the configuration above, you can now freely use `OptIn` to suppress opt-in related warnings and errors. This comes with the benefit that each usage of opt-in APIs will be clearly visible in the code thanks to the `OptIn` annotation being present on the use site.\n\nYou can opt-in at the statement level, like seen above, but also in broader scopes, such as for an entire function:\n\n```kotlin\n@OptIn(InternalMyLibraryApi::class)\npublic fun clientCode() {\n    someExperimentalApi()\n    someExperimentalApi()\n}\n```\n\nOr even an entire file, using an [annotation use-site target](https:\u002F\u002Fkotlinlang.org\u002Fdocs\u002Fannotations.html#annotation-use-site-targets), `@file:` :\n\n```kotlin\n@file:OptIn(InternalMyLibraryApi::class)\n\npublic fun firstFunction() {\n    someExperimentalApi()\n}\n\npublic fun secondFunction() {\n    someExperimentalApi()\n}\n```\n\nNext, let's expand beyond using these annotations to mark experimental APIs, and see what other scenarios they can be useful in.\n\n## Use Cases and Conventions\n\nSome of the best examples of opt-in APIs are in first-party Kotlin libraries. A great example is the [kotlinx.coroutines](https:\u002F\u002Fgithub.com\u002FKotlin\u002Fkotlinx.coroutines) library, which uses four different opt-in marker annotations across its API. \n\n\u003E The annotation naming conventions used in this library are also widely adopted in other libraries. You should consider aligning your own opt-in usages with this as well.\n\nThese opt-in annotations all follow the `[Prefix][LibraryName]Api` pattern, and each prefix carries different semantics. Let's see what each of them mean:\n\n- [`ExperimentalCoroutinesApi`](https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-experimental-coroutines-api\u002F): Perhaps the most frequently used convention, it marks APIs that are not stable yet. These might have known issues or ongoing design discussions that can change the API or its behaviour in the future.\n- [`InternalCoroutinesApi`](https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-internal-coroutines-api\u002F): Marks APIs that are only exposed for cross-module usage within a single library group, and should not be relied on by end users. They should be considered `internal` and can change or be removed at any time. See [Mastering API Visibility in Kotlin](https:\u002F\u002Fzsmb.co\u002Ftalks\u002Fmastering-api-visibility\u002F) for a detailed example of how to use these.\n- [`ObsoleteCoroutinesApi`](https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-obsolete-coroutines-api\u002F): A more niche marker than previous ones, this marks APIs that should not be used anymore. However, they are not deprecated yet, as they don't have replacements ready that users could migrate to.\n- [`DelicateCoroutinesApi`](https:\u002F\u002Fkotlin.github.io\u002Fkotlinx.coroutines\u002Fkotlinx-coroutines-core\u002Fkotlinx.coroutines\u002F-delicate-coroutines-api\u002F): Another niche convention, delicate APIs should only be used in very specific situations, and users should make sure they understand the implications of using such APIs.\n\nOn Android, Google's own Jetpack libraries also make generous use of opt-in APIs. In the [API guidelines document for Jetpack](https:\u002F\u002Fandroid.googlesource.com\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main\u002Fdocs\u002Fapi_guidelines.md#experimental-api), using opt-in annotations is the recommended way of \"annotating API surfaces as unstable\".\n\nAs a result, you'll see lots of these annotations when interacting with Jetpack libraries. They are especially widespread in Jetpack Compose libraries, given that the framework is still very new. Some common examples of these:\n\n- [`InternalComposeApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fruntime\u002FInternalComposeApi) and [`ExperimentalComposeApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fruntime\u002FExperimentalComposeApi)\n- [`InternalFoundationApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FInternalFoundationApi) and[`ExperimentalFoundationApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FExperimentalFoundationApi)\n- [`ExperimentalMaterialApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fmaterial\u002FExperimentalMaterialApi)\n- [`InternalTextApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftext\u002FInternalTextApi) and [`ExperimentalTextApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftext\u002FExperimentalTextApi)\n- [`InternalComposeUiApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002FInternalComposeUiApi) and [`ExperimentalComposeUiApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002FExperimentalComposeUiApi)\n- [`InternalTestApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftest\u002FInternalTestApi) and [`ExperimentalTestApi`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Fui\u002Ftest\u002FExperimentalTestApi)\n- ... and more!\n\nAs you can see, these usually come in pairs, and a separate pair is created for each of the different Compose packages.\n\nThey are generally not documented in Kdoc, but you can find out what their purpose is by reading the provided `message`. A good place to do this is on [cs.android.com](https:\u002F\u002Fcs.android.com\u002F). For example, you can find the sources of `InternalFoundationApi` [here](https:\u002F\u002Fcs.android.com\u002Fandroidx\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main:compose\u002Ffoundation\u002Ffoundation\u002Fsrc\u002FcommonMain\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FInternalFoundationApi.kt), and the sources of `ExperimentalFoundationApi` [here](https:\u002F\u002Fcs.android.com\u002Fandroidx\u002Fplatform\u002Fframeworks\u002Fsupport\u002F+\u002Fandroidx-main:compose\u002Ffoundation\u002Ffoundation\u002Fsrc\u002FcommonMain\u002Fkotlin\u002Fandroidx\u002Fcompose\u002Ffoundation\u002FExperimentalFoundationApi.kt), in the same package.\n\nThey, of course, follow the conventions layed out by *kotlinx.coroutines* above.\n\n## Java Interop\n\nUntil now, we've discussed using Kotlin's own opt-in annotations: `kotlin.RequiresOptIn` and `kotlin.OptIn`. Usages of these are verified by the Kotlin compiler, which produces warnings and errors around them as needed.\n\nIn most cases, the API marked with opt-in annotations is public, but the annotation being present deters clients from using it. However, when Java source code uses these APIs, they'll only see it as regular public API. The Java compiler does not understand or respect these opt-in requirements.\n\nYou can either ignore this and accept that Java users (if they exist) will be able to access these APIs freely, and not be warned at all, or you can take extra steps to make sure that Java clients don't access opt-in APIs accidentally.\n\nOne solution is to mark your opt-in declarations with [`@JvmSynthetic`](https:\u002F\u002Fkotlinlang.org\u002Fapi\u002Flatest\u002Fjvm\u002Fstdlib\u002Fkotlin.jvm\u002F-jvm-synthetic\u002F) as well. Synthetic declarations are inaccessible from Java source code, preventing all Java usages of these APIs (with no way to opt-in).\n\n```kotlin\n@JvmSynthetic\n@ExperimentalLibraryApi\npublic fun someExperimentalApi()\n```\n\nIf you're on Android, keep reading for another one.\n\n## Opt-In on Android\n\nAndroid is now officially [Kotlin-first](https:\u002F\u002Fdeveloper.android.com\u002Fkotlin\u002Ffirst), but Java is also still a fully-supported language on the platform. To work around the Java compatibility issue described above, Android has its own set of opt-in annotations ([`androidx.annotation.RequiresOptIn`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fannotation\u002FRequiresOptIn) and [`androidx.annotation.OptIn`](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fkotlin\u002Fandroidx\u002Fannotation\u002FOptIn)), which can be used the exact same way as described earlier for the Kotlin annotations.\n\nThe difference is in how these are verified. Instead of the Kotlin compiler performing the checks, verifying these Android-specific annotations is up to the [Android Lint tool](https:\u002F\u002Fdeveloper.android.com\u002Fstudio\u002Fwrite\u002Flint). As Lint checks are performed on the [UAST (Unified Abstract Syntax Tree)](https:\u002F\u002Fplugins.jetbrains.com\u002Fdocs\u002Fintellij\u002Fuast.html), these annotations are verified not only in Kotlin, but also in Java code. This means that the opt-in marker annotation, its usage, and the code using the opt-in APIs can all be in either language.\n\nTo use these annotations in your project, you need to add a dependency on the [`annotation-experimental` artifact](https:\u002F\u002Fdeveloper.android.com\u002Fjetpack\u002Fandroidx\u002Freleases\u002Fannotation):\n\n```groovy\ndependencies {\n    implementation(\"androidx.annotation:annotation-experimental:1.1.0\")\n}\t\n```\n\nNote that you can still use the Kotlin opt-in system on Android, you'll just miss out on Java support.\n\n## API Verification\n\nIf you mark some pieces of public API in your module as experimental or internal using Opt-In annotations, you will probably want to ignore them when checking for changes (especially breaking changes) in your public API.\n\nA common tool you can use for Kotlin projects is the [Binary compatibility validator\nplugin](https:\u002F\u002Fgithub.com\u002FKotlin\u002Fbinary-compatibility-validator). This plugin calls annotations that mark API that shouldn't be considered public \"non-public markers\".\n\nThese can be configured in the plugin's configuration block by adding the fully qualified names of the marker annotations to `nonPublicMarkers`:\n\n```groovy\napiValidation {\n    \u002F**\n     * Set of annotations that exclude API from being public.\n     * Typically, it is all kinds of `@InternalApi` annotations \n     * that mark effectively private API that cannot be actually \n     * private for technical reasons.\n     *\u002F\n    nonPublicMarkers += [\n        \"com.example.lib.core.ExperimentalLibraryApi\",\n        \"com.example.lib.core.InternalLibraryApi\",\n    ]\n}\n```\n\nAPIs annotated with non-public markers will be excluded from the API dumps of the validator plugin (they won't show up in the generated `.api` files).\n\n## Conclusion\n\nThat's -- hopefully -- everything you'd ever want to know about opt-in annotations, and more. With this, you should now be ready to use these annotations in your own library or multi-module projects as well, whether you just need to interact with experimental APIs while building your apps or create your own opt-in APIs.\n\nThanks to [István Juhos](https:\u002F\u002Ftwitter.com\u002Fstewemetal), [Arnaud Giuliani](https:\u002F\u002Ftwitter.com\u002Farnogiu), [Thomas Künneth](https:\u002F\u002Ftwitter.com\u002Ftkuenneth), and [Annyce Davis](https:\u002F\u002Ftwitter.com\u002Fbrwngrldev) for taking an early look and reviewing this post :)\n\nFollow me [@zsmb13 on Twitter](https:\u002F\u002Ftwitter.com\u002Fzsmb13) to keep in touch and get notified of similar posts!\n\n";c.user={name:"Márton Braun",username:e,twitter_username:e,github_username:a,website_url:"https:\u002F\u002Fzsmb.co\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs---cKEDUW6--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F573503\u002F8c864b9c-99a5-441e-bb89-7612b1391357.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs---S6YA-il--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F573503\u002F8c864b9c-99a5-441e-bb89-7612b1391357.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-09-30T16:32:34Z",{},19,"zsmb13")));
window.__NUXT__=(function(a,b,c,d,e,f,g){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:625610,title:"How I built a Simple Sprint Dashboard with AWS Amplify",description:"This article first appeared in Hashnode           Intro   This is how I built a simple sprint...",readable_publish_date:"Mar 4",slug:"how-i-built-a-simple-sprint-dashboard-with-aws-amplify-7fj",path:"\u002Faws-builders\u002Fhow-i-built-a-simple-sprint-dashboard-with-aws-amplify-7fj",url:c,comments_count:14,public_reactions_count:d,collection_id:a,published_timestamp:e,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--K4N4YM6t--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F3xbhmo7wvrvih1eho9y1.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yaaPvKun--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F3xbhmo7wvrvih1eho9y1.png",canonical_url:c,created_at:"2021-03-04T15:05:41Z",edited_at:"2021-08-06T12:41:28Z",crossposted_at:a,published_at:e,last_comment_at:"2021-03-15T18:42:20Z",reading_time_minutes:6,tag_list:"aws, serverless, amplify, showdev",tags:["aws","serverless","amplify",f],body_html:"\u003Cp\u003E\u003Cem\u003EThis article first appeared in \u003Ca href=\"https:\u002F\u002Fpubudu.hashnode.dev\u002Fsimple-sprint-dashboard-with-aws-amplify\"\u003EHashnode\u003C\u002Fa\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"intro\" href=\"#intro\"\u003E\n  \u003C\u002Fa\u003E\n  Intro\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is how I built a simple sprint dashboard using VueJS and used Amplify for backend, frontend, CI\u002FCD, and for custom domain set up as well. In this post, I would like to share my experience using Amplify and some key lessons learned ;)\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is the first time I used Amplify as well as GraphQL and I was so impressed with the ease of use of Amplify to rapidly build an application. However, there are some limitations I experienced, which I will discuss further in this post.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the frontend part, I have used the free VueJS theme from  \u003Ca href=\"https:\u002F\u002Fwww.creative-tim.com\u002Fproduct\u002Fvue-argon-dashboard\"\u003ECreative Tim\u003C\u002Fa\u003E and modified as I need . Most of the project setup was done using  \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Fcli\"\u003EAmplify CLI\u003C\u002Fa\u003E, but I have to manually set up a few configurations in AWS console where Amplify doesn't support yet.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"features\" href=\"#features\"\u003E\n  \u003C\u002Fa\u003E\n  Features\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"authentication-and-user-management\" href=\"#authentication-and-user-management\"\u003E\n  \u003C\u002Fa\u003E\n  Authentication and User Management\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFor the authentication, I have used amplify auth API. However, I didn't use the UI presets from Amplify but created custom UI components for login, forgot password, etc. Amplify support Cognito out of the box and it was really easy to configure. I used Cognito user pools to create and authenticate users. I created two user groups - \u003Cstrong\u003EUsers\u003C\u002Fstrong\u003E and \u003Cstrong\u003EAdmins\u003C\u002Fstrong\u003E. Registration is not open for public, so admin should create an account for user. \u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce the admin created an account for the user, there will be an email sending out with a temporary password (Cognito invite flow). User will be asked to reset the password in their first login.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ijvxhuVs--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473360825\u002FXYYIoJIAc.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ijvxhuVs--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473360825\u002FXYYIoJIAc.png\" alt=\"verify-account.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EI have created functionality to change the password for logged in user as well as forgot password feature for not loggedin users which use Amplify Auth API under the hood.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"dashboard-backlog-tickets-sprints\" href=\"#dashboard-backlog-tickets-sprints\"\u003E\n  \u003C\u002Fa\u003E\n  Dashboard, Backlog, Tickets, Sprints\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOnce user logged in, they have access to the dashboard which has summarized data about the current sprint and his\u002Fher own tasks. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5KNxDHdX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473127444\u002FKwO0z4yZA.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5KNxDHdX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473127444\u002FKwO0z4yZA.png\" alt=\"dashboard.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThey can add, edit, move tickets between sprints. Also, users can move the tickets between different stages of the current sprint, namely - todo, in progress, review, testing, and done.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yFmuDuLn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473950802\u002FI_r8bBSVC.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yFmuDuLn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473950802\u002FI_r8bBSVC.png\" alt=\"current-sprint.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo store all these data, I used  \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Flib\u002Fgraphqlapi\u002Fgetting-started\u002Fq\u002Fplatform\u002Fjs\"\u003EAmplify GraphQL API\u003C\u002Fa\u003E. Setting this up is a matter of minutes using Amplify CLI and documentation has good examples of how to model the data structure with different relationships. Once we provide our GraphQL schema, Amplify will automatically create all the DynamoDB tables, indexes, GSIs and it also generates all the code we need to communicate with GraphQL service (queries, mutations and subscriptions). This is really handy and I only had to do a minor modification to the generated code. \u003C\u002Fp\u003E\n\n\u003Cp\u003EHere is my graphql definition which has 1:many and many:many relationships.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Etype User @model \n{\n  id: ID!\n  firstname: String\n  lastname: String\n  department: String\n  designation: String\n  verified: Boolean\n}\n\ntype Sprint @model {\n  id: ID!\n  title: String!\n  description: String\n  startAt: Int!\n  endAt: Int!\n  isCurrent: Boolean!\n  archived: Boolean!\n  createdBy: User! @connection\n  tickets: [SprintTickets] @connection(keyName: \"bySprint\", fields: [\"id\"])\n}\n\ntype Ticket @model {\n  id: ID!\n  title: String!\n  description: String\n  points: Int\n  priority: String!\n  type: String!\n  status: String!\n  reportBy: User! @connection\n  assignee: User  @connection\n  sprints: [SprintTickets] @connection(keyName: \"byTicket\", fields: [\"id\"])\n}\n\ntype SprintTickets\n  @model(queries:null)\n  @key(name: \"bySprint\", fields: [\"sprintId\", \"ticketId\"])\n  @key(name: \"byTicket\", fields: [\"ticketId\", \"sprintId\"]) {\n  id: ID!\n  sprintId: ID!\n  ticketId: ID!\n  ticket: Ticket! @connection(fields: [\"ticketId\"])\n  sprint: Sprint! @connection(fields: [\"sprintId\"])\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"admin-specific-features\" href=\"#admin-specific-features\"\u003E\n  \u003C\u002Fa\u003E\n  Admin specific features\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAdmin users have more functionality than normal users. They can create new users and promote existing users as admins as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VB3Z4q2W--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614475315094\u002FTt0hUlYgj.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VB3Z4q2W--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614475315094\u002FTt0hUlYgj.png\" alt=\"users-list.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo restrict this functionality, I have used  \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fauth\u002Fadmin#admin-queries-api\"\u003EAdmin Queries API\u003C\u002Fa\u003E. Amplify provides set of HTTP APIs to interact with Cognito user pools for example to create user, delete user, get all users etc. It is possible to allow access to these APIs only to certain user groups in the Cognito pool easily (in our case, only to 'Admin' users).\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdmins also can create sprints, close sprints, edit sprints. To restrict normal users perform these activities, I simply use the user group values provided by \u003Ccode\u003EAuth.currentAuthenticatedUser()\u003C\u002Fcode\u003E method.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"lambda-triggers\" href=\"#lambda-triggers\"\u003E\n  \u003C\u002Fa\u003E\n  Lambda Triggers\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELambda triggers are a great way to set up custom functionality in authentication flow. Amplify provides this with few simple configuration options.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this project, I have set up post-confirmation trigger. When the user confirms his\u002Fher account, I add the user to the 'Users' group.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"hub\" href=\"#hub\"\u003E\n  \u003C\u002Fa\u003E\n  Hub\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI found this feature really interesting where we need to communicate with different components of the same application. Hub is a simple pub-sub implementation provided by Amplify out of the box. \u003C\u002Fp\u003E\n\n\u003Cp\u003EOne of the instances I used Hub in this project, is to fetch data from API when tickets are moved between sprints. It was easy to set up dispatchers and listeners with channels without complex parent-child reactive communications in Vue.\u003C\u002Fp\u003E\n\n\u003Cp\u003EDispatcher:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EHub.dispatch(\"SprintsChannel\", {\n  event: \"ticketMoved\",\n  data: {},\n  message: \"\",\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EListener:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EHub.listen(\"SprintsChannel\", (data) =&gt; {\n  if (data.payload.event == \"ticketMoved\") {\n    this.fetchData();\n    this.fetchBacklogTickets();\n  }\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"continuous-deployment\" href=\"#continuous-deployment\"\u003E\n  \u003C\u002Fa\u003E\n  Continuous Deployment\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWe can easily set up CD functionality in Amplify console. Here, for this project, I have set up CD, where each time I pushed to 'master' branch of the repository, it will build both frontend and backend and deploys automatically.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe nice thing is we can set up different branches for different environments easily. This will be quite handy when we have prod, testing, staging environments, so we can deploy to separate frontends\u002Fbackends with different branches.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"custom-domains\" href=\"#custom-domains\"\u003E\n  \u003C\u002Fa\u003E\n  Custom Domains\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFor this project, I used a custom domain \u003Ca href=\"https:\u002F\u002Fdashboard.pubudu.dev\"\u003Ehttps:\u002F\u002Fdashboard.pubudu.dev\u003C\u002Fa\u003E. This can be arranged in Amplify console with few clicks. Amplify by default provides a domain but we can always add our own.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"demo\" href=\"#demo\"\u003E\n  \u003C\u002Fa\u003E\n  Demo\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou may create an account and play around with my project. Login with the below Admin credentials and create your own user, and promote the newly created user as an admin to use the full functionality.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdashboard.pubudu.dev\"\u003Ehttps:\u002F\u002Fdashboard.pubudu.dev\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Eusername: \u003Ca href=\"mailto:pubudusj@gmail.com\"\u003Epubudusj@gmail.com\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Epassword: admin123#$\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EYou can find the source code here in  \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fpubudusj\u002Fsprint-dashboard\"\u003EGithub\u003C\u002Fa\u003E .\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"list-of-functionality\" href=\"#list-of-functionality\"\u003E\n  \u003C\u002Fa\u003E\n  List of functionality\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ELogin, verify account, forgot password\u003C\u002Fli\u003E\n\u003Cli\u003EView Dashboard, current sprint, backlog, passed sprints\u003C\u002Fli\u003E\n\u003Cli\u003ECreate, edit, close sprints (admin only)\u003C\u002Fli\u003E\n\u003Cli\u003ECreate, edit tickets\u003C\u002Fli\u003E\n\u003Cli\u003EMove tickets between sprints, backlog\u003C\u002Fli\u003E\n\u003Cli\u003EMove tickets of the current sprint to different stages.\u003C\u002Fli\u003E\n\u003Cli\u003EModify own profile information, password change\u003C\u002Fli\u003E\n\u003Cli\u003ECreate (invite) a user (admin only)\u003C\u002Fli\u003E\n\u003Cli\u003EPromote normal user to admin (admin only)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"some-key-points-to-note-lesson-learned\" href=\"#some-key-points-to-note-lesson-learned\"\u003E\n  \u003C\u002Fa\u003E\n  Some key points to note (Lesson learned)\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003EAlthough it is a best practice to use a single table in DynamoDB, Amplify\u002FGraphQL api doesn't support it yet. But it creates a \u003Ccode\u003E__typename\u003C\u002Fcode\u003E column in all the tables which seems to be a sign that this will be supported soon (?)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EInvite user functionality is not yet available with Amplify by default. Here, I had to use a custom method to use Cognito's \u003Ccode\u003EadminCreateUser\u003C\u002Fcode\u003E functionality in Admin Queries. Also, when user first login, his\u002Fher account will be in \u003Ccode\u003ENEW_PASSWORD_REQUIRED\u003C\u002Fcode\u003E state which is not considered as a confirmed user (yet). So, I had to check for this state and provide the password change form to the user to update the password in the first login.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003ESince user invite functionality is not yet available with Amplify, I had to modify the user invite message in Cognito manually.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAs of now, we can grant permission to a specific user group to access all the admin APIs. We cannot specify\u002Frestrict different user groups for different APIs.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EWhen we have many-to-many relationships in our data models, it will be messy to use only two tables. So, best option is to use 3rd table to maintain the relationship. I used  \u003Ccode\u003ESprintTickets\u003C\u002Fcode\u003E DynamoDB table for this purpose and \u003Ccode\u003E@model(queries:null)\u003C\u002Fcode\u003E flag in the definition as this table is not used to query directly.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"useful-linksresources\" href=\"#useful-linksresources\"\u003E\n  \u003C\u002Fa\u003E\n  Useful Links\u002FResources\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Fstart\u002Fq\u002Fintegration\u002Fvue\"\u003EAmplify &amp; VueJS example application\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Flib\u002Fq\u002Fplatform\u002Fjs\"\u003EAmplify libraries for javascript\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fc\u002Fnaderdabit\"\u003ENarder Dabit's youtube channel with lot of Amplify resources\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Famplify\u002Fblog\u002F\"\u003EAWS Amplify blog posts\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"feedback\" href=\"#feedback\"\u003E\n  \u003C\u002Fa\u003E\n  Feedback\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI would like you to play around with my project and provide feedback. I am not so strong in the frontend, so I believe there are definitely better ways to implement these features. :)\u003C\u002Fp\u003E\n\n\u003Cp\u003EKeep building... Keep sharing..!\u003C\u002Fp\u003E\n\n",body_markdown:"_This article first appeared in [Hashnode](https:\u002F\u002Fpubudu.hashnode.dev\u002Fsimple-sprint-dashboard-with-aws-amplify)_\n\n## Intro\n\nThis is how I built a simple sprint dashboard using VueJS and used Amplify for backend, frontend, CI\u002FCD, and for custom domain set up as well. In this post, I would like to share my experience using Amplify and some key lessons learned ;)\n\nThis is the first time I used Amplify as well as GraphQL and I was so impressed with the ease of use of Amplify to rapidly build an application. However, there are some limitations I experienced, which I will discuss further in this post.\n\nFor the frontend part, I have used the free VueJS theme from  [Creative Tim](https:\u002F\u002Fwww.creative-tim.com\u002Fproduct\u002Fvue-argon-dashboard) and modified as I need . Most of the project setup was done using  [Amplify CLI](https:\u002F\u002Fdocs.amplify.aws\u002Fcli), but I have to manually set up a few configurations in AWS console where Amplify doesn't support yet.\n\n\n## Features\n\n### Authentication and User Management\n\nFor the authentication, I have used amplify auth API. However, I didn't use the UI presets from Amplify but created custom UI components for login, forgot password, etc. Amplify support Cognito out of the box and it was really easy to configure. I used Cognito user pools to create and authenticate users. I created two user groups - **Users** and **Admins**. Registration is not open for public, so admin should create an account for user. \n\nOnce the admin created an account for the user, there will be an email sending out with a temporary password (Cognito invite flow). User will be asked to reset the password in their first login.\n\n![verify-account.png](https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473360825\u002FXYYIoJIAc.png)\n\nI have created functionality to change the password for logged in user as well as forgot password feature for not loggedin users which use Amplify Auth API under the hood.\n\n\n### Dashboard, Backlog, Tickets, Sprints\n\nOnce user logged in, they have access to the dashboard which has summarized data about the current sprint and his\u002Fher own tasks. \n\n![dashboard.png](https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473127444\u002FKwO0z4yZA.png)\n\nThey can add, edit, move tickets between sprints. Also, users can move the tickets between different stages of the current sprint, namely - todo, in progress, review, testing, and done.\n\n![current-sprint.png](https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614473950802\u002FI_r8bBSVC.png)\n\nTo store all these data, I used  [Amplify GraphQL API](https:\u002F\u002Fdocs.amplify.aws\u002Flib\u002Fgraphqlapi\u002Fgetting-started\u002Fq\u002Fplatform\u002Fjs). Setting this up is a matter of minutes using Amplify CLI and documentation has good examples of how to model the data structure with different relationships. Once we provide our GraphQL schema, Amplify will automatically create all the DynamoDB tables, indexes, GSIs and it also generates all the code we need to communicate with GraphQL service (queries, mutations and subscriptions). This is really handy and I only had to do a minor modification to the generated code. \n\nHere is my graphql definition which has 1:many and many:many relationships.\n\n```\ntype User @model \n{\n  id: ID!\n  firstname: String\n  lastname: String\n  department: String\n  designation: String\n  verified: Boolean\n}\n\ntype Sprint @model {\n  id: ID!\n  title: String!\n  description: String\n  startAt: Int!\n  endAt: Int!\n  isCurrent: Boolean!\n  archived: Boolean!\n  createdBy: User! @connection\n  tickets: [SprintTickets] @connection(keyName: \"bySprint\", fields: [\"id\"])\n}\n\ntype Ticket @model {\n  id: ID!\n  title: String!\n  description: String\n  points: Int\n  priority: String!\n  type: String!\n  status: String!\n  reportBy: User! @connection\n  assignee: User  @connection\n  sprints: [SprintTickets] @connection(keyName: \"byTicket\", fields: [\"id\"])\n}\n\ntype SprintTickets\n  @model(queries:null)\n  @key(name: \"bySprint\", fields: [\"sprintId\", \"ticketId\"])\n  @key(name: \"byTicket\", fields: [\"ticketId\", \"sprintId\"]) {\n  id: ID!\n  sprintId: ID!\n  ticketId: ID!\n  ticket: Ticket! @connection(fields: [\"ticketId\"])\n  sprint: Sprint! @connection(fields: [\"sprintId\"])\n}\n``` \n\n\n### Admin specific features\n\nAdmin users have more functionality than normal users. They can create new users and promote existing users as admins as well.\n\n![users-list.png](https:\u002F\u002Fcdn.hashnode.com\u002Fres\u002Fhashnode\u002Fimage\u002Fupload\u002Fv1614475315094\u002FTt0hUlYgj.png)\n\nTo restrict this functionality, I have used  [Admin Queries API](https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fauth\u002Fadmin#admin-queries-api). Amplify provides set of HTTP APIs to interact with Cognito user pools for example to create user, delete user, get all users etc. It is possible to allow access to these APIs only to certain user groups in the Cognito pool easily (in our case, only to 'Admin' users).\n\nAdmins also can create sprints, close sprints, edit sprints. To restrict normal users perform these activities, I simply use the user group values provided by `Auth.currentAuthenticatedUser()` method.\n\n### Lambda Triggers\n\n\nLambda triggers are a great way to set up custom functionality in authentication flow. Amplify provides this with few simple configuration options.\n\nIn this project, I have set up post-confirmation trigger. When the user confirms his\u002Fher account, I add the user to the 'Users' group.\n\n\n### Hub\n\nI found this feature really interesting where we need to communicate with different components of the same application. Hub is a simple pub-sub implementation provided by Amplify out of the box. \n\nOne of the instances I used Hub in this project, is to fetch data from API when tickets are moved between sprints. It was easy to set up dispatchers and listeners with channels without complex parent-child reactive communications in Vue.\n\nDispatcher:\n```\nHub.dispatch(\"SprintsChannel\", {\n  event: \"ticketMoved\",\n  data: {},\n  message: \"\",\n});\n``` \n\nListener:\n\n```\nHub.listen(\"SprintsChannel\", (data) =\u003E {\n  if (data.payload.event == \"ticketMoved\") {\n    this.fetchData();\n    this.fetchBacklogTickets();\n  }\n});\n``` \n\n### Continuous Deployment\n\nWe can easily set up CD functionality in Amplify console. Here, for this project, I have set up CD, where each time I pushed to 'master' branch of the repository, it will build both frontend and backend and deploys automatically.\n\nThe nice thing is we can set up different branches for different environments easily. This will be quite handy when we have prod, testing, staging environments, so we can deploy to separate frontends\u002Fbackends with different branches.\n\n### Custom Domains\n\nFor this project, I used a custom domain https:\u002F\u002Fdashboard.pubudu.dev. This can be arranged in Amplify console with few clicks. Amplify by default provides a domain but we can always add our own.\n\n## Demo\n\nYou may create an account and play around with my project. Login with the below Admin credentials and create your own user, and promote the newly created user as an admin to use the full functionality.\n\n\n- https:\u002F\u002Fdashboard.pubudu.dev\n- username: pubudusj@gmail.com\n- password: admin123#$\n\nYou can find the source code here in  [Github](https:\u002F\u002Fgithub.com\u002Fpubudusj\u002Fsprint-dashboard) .\n\n\n### List of functionality\n\n- Login, verify account, forgot password\n- View Dashboard, current sprint, backlog, passed sprints\n- Create, edit, close sprints (admin only)\n- Create, edit tickets\n- Move tickets between sprints, backlog\n- Move tickets of the current sprint to different stages.\n- Modify own profile information, password change\n- Create (invite) a user (admin only)\n- Promote normal user to admin (admin only)\n\n\n## Some key points to note (Lesson learned)\n\n- Although it is a best practice to use a single table in DynamoDB, Amplify\u002FGraphQL api doesn't support it yet. But it creates a `__typename` column in all the tables which seems to be a sign that this will be supported soon (?)\n\n- Invite user functionality is not yet available with Amplify by default. Here, I had to use a custom method to use Cognito's `adminCreateUser` functionality in Admin Queries. Also, when user first login, his\u002Fher account will be in `NEW_PASSWORD_REQUIRED` state which is not considered as a confirmed user (yet). So, I had to check for this state and provide the password change form to the user to update the password in the first login.\n\n- Since user invite functionality is not yet available with Amplify, I had to modify the user invite message in Cognito manually.\n\n- As of now, we can grant permission to a specific user group to access all the admin APIs. We cannot specify\u002Frestrict different user groups for different APIs.\n\n- When we have many-to-many relationships in our data models, it will be messy to use only two tables. So, best option is to use 3rd table to maintain the relationship. I used  `SprintTickets` DynamoDB table for this purpose and `@model(queries:null)` flag in the definition as this table is not used to query directly.\n\n## Useful Links\u002FResources\n\n-  [Amplify & VueJS example application](https:\u002F\u002Fdocs.amplify.aws\u002Fstart\u002Fq\u002Fintegration\u002Fvue) \n-  [Amplify libraries for javascript](https:\u002F\u002Fdocs.amplify.aws\u002Flib\u002Fq\u002Fplatform\u002Fjs) \n-  [Narder Dabit's youtube channel with lot of Amplify resources](https:\u002F\u002Fwww.youtube.com\u002Fc\u002Fnaderdabit) \n-  [AWS Amplify blog posts](https:\u002F\u002Faws.amazon.com\u002Famplify\u002Fblog\u002F) \n\n \n## Feedback\n\nI would like you to play around with my project and provide feedback. I am not so strong in the frontend, so I believe there are definitely better ways to implement these features. :)\n\nKeep building... Keep sharing..!\n",user:{name:"Pubudu Jayawardana",username:b,twitter_username:b,github_username:b,website_url:"https:\u002F\u002Fpubudu.dev\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--m-P1cPaZ--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F353213\u002Fdadcca32-1581-4aec-bcbd-625554ed3cfb.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xaWN9iyr--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F353213\u002Fdadcca32-1581-4aec-bcbd-625554ed3cfb.png"},organization:{name:"AWS Community Builders ",username:g,slug:g,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zmOZQNzv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vWmcJ-ty--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"},flare_tag:{name:f,bg_color_hex:"#091b47",text_color_hex:"#b2ffe1"}}},serverRendered:true,routePath:"\u002Farticles\u002Fpubudusj\u002F625610",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"pubudusj","https:\u002F\u002Fdev.to\u002Faws-builders\u002Fhow-i-built-a-simple-sprint-dashboard-with-aws-amplify-7fj",144,"2021-03-04T15:33:02Z","showdev","aws-builders"));
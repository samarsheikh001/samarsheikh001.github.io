window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:724777,title:"Beginner's Guide to Running Rust on AWS Lambda",description:"A start-to-finish tutorial demonstrating how to build a simple AWS Lambda written in Rust and manage its deployment with AWS CDK.",readable_publish_date:"Jun 13",slug:"beginner-s-guide-to-running-rust-on-aws-lambda-277n",path:"\u002Fnicholaschiasson\u002Fbeginner-s-guide-to-running-rust-on-aws-lambda-277n",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UvJqfEhU--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F20zgz7h9f0a8qyh1zr22.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--jpl6bYJE--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F20zgz7h9f0a8qyh1zr22.png",canonical_url:c,created_at:"2021-06-11T02:29:14Z",edited_at:"2021-07-07T17:19:46Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:10,tag_list:"rust, serverless, lambda, cdk",tags:["rust","serverless","lambda","cdk"],body_html:"\u003Cp\u003EA common behaviour that I witness with people making a journey toward proficiency with the Rust programming language is the desire to start using the language for everything. It's true that the language certainly has many merits and seems well adaptable to different application domains, and this reality is only being strengthened by the continuous growth in maturity of the language and its community. However, as a professional it is still crucially important to have a good sense for what the best tool is for the given job, rather than blindly choosing your favourite. You don't want to introduce more complexity than necessary into a project and you certainly don't want to advocate for a practice which could lead your team to a dead end. Rust may be a great programming language, but one must use discretion when deciding to apply it to a problem.\u003C\u002Fp\u003E\n\n\u003Cp\u003EToday, I don't care about being quite so professional. I'll be the first to admit that I am becoming a prime example of the kind of enthusiast I just finished describing. So in this article, I'm going to indulge that wide eyed fascination that you and I may share for this shiny programming language. We're going to explore a domain shaped perfectly for — perhaps even intended exclusively for — interpreted runtime languages, and we're going to wedge Rust in there and make it fit too. Today, I'm going to show you an absolute minimal but complete demonstration of deploying Rust as a serverless function, specifically with AWS Lambda.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore jumping in, it's worth mentioning that my introduction has been perhaps an exaggeration. I have made it sound as if Rust does not belong in the realm of serverless and that this is unmarked territory, but who am I to say that Rust isn't in fact the \u003Cem\u003Eperfect\u003C\u002Fem\u003E tool for serverless? To my knowledge, serverless Rust too has grown in maturity over the last couple of years. What this article is going to present is certainly not any ground breaking discovery, but instead what I believe should be an excellent resource for people having no idea where to start for deploying Rust in AWS Lambda. So without further ado, let's go ahead and build the project.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--eKfwECUN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fikjs1ibfm9ocjooc2j8j.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--eKfwECUN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fikjs1ibfm9ocjooc2j8j.png\" alt=\"Rust plus AWS Lambda\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"prerequisites\" href=\"#prerequisites\"\u003E\n  \u003C\u002Fa\u003E\n  Prerequisites\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo follow along with this tutorial, you will need the following:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fcli\u002F\"\u003EAWS Command Line Interface\u003C\u002Fa\u003E installed and configured with security credentials for your AWS account\u002Fuser. At the time of writing, I am using version \u003Ccode\u003E1.19.88\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fen\u002F\"\u003ENodeJS\u003C\u002Fa\u003E. At the time of writing, I am using version \u003Ccode\u003E14.17.0\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fcdk\u002F\"\u003EAWS CDK\u003C\u002Fa\u003E. At the time of writing, I am using version \u003Ccode\u003E1.107.0\u003C\u002Fcode\u003E.\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ccode\u003Enpm i -g aws-cdk\u003C\u002Fcode\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.rust-lang.org\u002F\"\u003ERust\u003C\u002Fa\u003E. At the time of writing, I am using version \u003Ccode\u003E1.52.1\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"creating-a-fresh-cdk-project\" href=\"#creating-a-fresh-cdk-project\"\u003E\n  \u003C\u002Fa\u003E\n  Creating a Fresh CDK Project\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe first thing we need to do is create the project. Even though this is supposed to be about our Rust lambda, CDK is going to be at the core of our project and the lambda code will exist within it. It is of course possible to structure things differently, for example by keeping the lambda code and CDK separate, but for this tutorial we will keep things simple.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the command-line, make a directory for the new project.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E\u003Cspan class=\"nb\"\u003Emkdir \u003C\u002Fspan\u003Etutorial-rust-lambda\n\u003Cspan class=\"nb\"\u003Ecd \u003C\u002Fspan\u003Etutorial-rust-lambda\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EUse the CDK CLI to initialize a new project. We will use Typescript.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecdk init app \u003Cspan class=\"nt\"\u003E--language\u003C\u002Fspan\u003E typescript\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOne extra thing I like to do in Typescript projects before getting started is to set an output directory for compiled scripts. In the \u003Ccode\u003Etsconfig.json\u003C\u002Fcode\u003E file, add to the \u003Ccode\u003EcompilerOptions\u003C\u002Fcode\u003E object. This will help keep the clutter away from our source files. Also update the \u003Ccode\u003Eexclude\u003C\u002Fcode\u003E field to ignore our output directory.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight diff\"\u003E\u003Ccode\u003E\u003Cspan class=\"p\"\u003E20c20,21\n\u003C\u002Fspan\u003E\u003Cspan class=\"gd\"\u003E&lt;     \"typeRoots\": [\".\u002Fnode_modules\u002F@types\"]\n--------\n\u003C\u002Fspan\u003E\u003Cspan class=\"gi\"\u003E&gt;     \"typeRoots\": [\".\u002Fnode_modules\u002F@types\"],\n&gt;     \"outDir\": \"dist\"\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E22c23\n\u003C\u002Fspan\u003E\u003Cspan class=\"gd\"\u003E&lt;   \"exclude\": [\"cdk.out\"]\n--------\n\u003C\u002Fspan\u003E\u003Cspan class=\"gi\"\u003E&gt;   \"exclude\": [\"cdk.out\", \"dist\"]\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHaving created the project, we can now prepare for development by starting up the Typescript compiler watch agent. The project's \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E will come with an NPM run-script for this.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Enpm run watch\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFinally, to work with CDK the way we intend to, you must perform what is called bootstrapping. This is because we will be packaging the lambda as an asset. You can read more about CDK bootstrapping \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fcdk\u002Flatest\u002Fguide\u002Fbootstrapping.html\"\u003Ehere\u003C\u002Fa\u003E. Find your AWS account ID and choose an AWS region and then run the following, substituting those values:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecdk bootstrap aws:\u002F\u002F\u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003EAWS_ACCOUNT_ID\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\u002F\u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003EAWS_DEFAULT_REGION\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"writing-a-lambda-function-in-rust\" href=\"#writing-a-lambda-function-in-rust\"\u003E\n  \u003C\u002Fa\u003E\n  Writing a Lambda Function in Rust\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe're going to write an incredibly simple Rust program which will receive an event of an expected format (a JSON string with a \"name\" field) and respond with \"Hello {name}\". The code is nearly identical to \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fawslabs\u002Faws-lambda-rust-runtime\u002Fblob\u002Fmaster\u002Flambda-runtime\u002Fexamples\u002Fbasic.rs\"\u003Ethe basic example\u003C\u002Fa\u003E from the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fawslabs\u002Faws-lambda-rust-runtime\"\u003Eaws-lambda-rust-runtime\u003C\u002Fa\u003E repository.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst, let's setup our Rust project within our CDK project. Again, your lambda code does not need to reside within your CDK project. If your lambda code scales into a large project you could instead package it and publish it to AWS S3 and reference that S3 object from CDK, but for this demo we are doing things the more straightforward way.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecargo new lambda\u002Fhello\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENext, we will add some dependencies to the project required to build our Rust code as an AWS Lambda function. Open \u003Ccode\u003Elambda\u002Fhello\u002FCargo.toml\u003C\u002Fcode\u003E in your editor and add the following under \u003Ccode\u003E[dependencies]\u003C\u002Fcode\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight toml\"\u003E\u003Ccode\u003E\u003Cspan class=\"py\"\u003Elambda_runtime\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"0.3.0\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Elog\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"0.4.14\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Eserde\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"1.0.126\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Esimple_logger\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"1.11.0\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Etokio\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"1.6.1\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENext, we'll write our \u003Ccode\u003Elambda\u002Fhello\u002Fsrc\u002Fmain.rs\u003C\u002Fcode\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"c\"\u003E\u002F\u002F This example requires the following input to succeed:\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F { \"name\": \"some name\" }\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Elambda_runtime\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::{\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehandler_fn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EContext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EError\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ELevelFilter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Eserde\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::{\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EDeserialize\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ESerialize\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Esimple_logger\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ESimpleLogger\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F This is also a made-up example. Requests come into the runtime as unicode\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F strings in json format, which can map to any structure that implements `serde::Deserialize`\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F The runtime pays no attention to the contents of the request payload.\u003C\u002Fspan\u003E\n\u003Cspan class=\"nd\"\u003E#[derive(Deserialize)]\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ERequest\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F This is a made-up example of what a response structure may look like.\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F There is no restriction on what it can be. The runtime requires responses\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F to be serialized into json. The runtime pays no attention\u003C\u002Fspan\u003E\n\u003Cspan class=\"c\"\u003E\u002F\u002F\u002F to the contents of the response payload.\u003C\u002Fspan\u003E\n\u003Cspan class=\"nd\"\u003E#[derive(Serialize)]\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResponse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ereq_id\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Emsg\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nd\"\u003E#[tokio::main]\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003E-&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResult\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EError\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c\"\u003E\u002F\u002F required to enable CloudWatch error logging by the runtime\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c\"\u003E\u002F\u002F can be replaced with any other method of initializing `log`\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nn\"\u003ESimpleLogger\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Enew\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E.with_level\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003ELevelFilter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EInfo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E.init\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E.unwrap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Efunc\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Ehandler_fn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Emy_handler\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nn\"\u003Elambda_runtime\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Erun\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Efunc\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003E.await\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E?\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EOk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(())\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Epub\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecrate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Emy_handler\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ERequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ectx\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EContext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003E-&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResult\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EResponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EError\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c\"\u003E\u002F\u002F extract some useful info from the request\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ename\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"py\"\u003E.name\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c\"\u003E\u002F\u002F prepare the response\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eresp\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResponse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ereq_id\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ectx\u003C\u002Fspan\u003E\u003Cspan class=\"py\"\u003E.request_id\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Emsg\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nd\"\u003Eformat!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Hello {}!\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c\"\u003E\u002F\u002F return `Response` (it will be serialized to JSON automatically by the runtime)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EOk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eresp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFinally, try building with cargo to make sure everything works.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E\u003Cspan class=\"nb\"\u003Epushd \u003C\u002Fspan\u003Elambda\u002Fhello\ncargo build\n\u003Cspan class=\"nb\"\u003Epopd\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"infra-as-code\" href=\"#infra-as-code\"\u003E\n  \u003C\u002Fa\u003E\n  Infra as Code\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow we can start developing the blueprint for the application's infrastructure. CDK is incredibly powerful and gives you the tools to build complex applications in AWS using high level constructs, but for our needs, we only want to create a simple lambda function.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe'll start by installing the lambda library dependency. Keep in mind, you probably don't need to specify the version as I am doing here, but it may help to keep all of your CDK library dependency versions aligned and avoid incompatibilities.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Enpm i @aws-cdk\u002Faws-lambda@1.107.0\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENext, in the file representing our CloudFormation stack \u003Ccode\u003Elib\u002Ftutorial-rust-lambda-stack.ts\u003C\u002Fcode\u003E, we're going to instantiate a lambda function.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecdk\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E@aws-cdk\u002Fcore\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elambda\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E@aws-cdk\u002Faws-lambda\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETutorialRustLambdaStack\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EStack\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econstructor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Escope\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EConstruct\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"kr\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eprops\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E?:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EStackProps\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Esuper\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Escope\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eprops\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etarget\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Ex86_64-unknown-linux-musl\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ehello\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elambda\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003EFunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EHelloHandler\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"na\"\u003Ecode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elambda\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfromAsset\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Elambda\u002Fhello\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"na\"\u003Ebundling\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"na\"\u003Ecommand\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\n            \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Ebash\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E-c\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E`rustup target add \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Etarget\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E &amp;&amp; cargo build --release --target \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Etarget\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E &amp;&amp; cp target\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Etarget\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\u002Frelease\u002Fhello \u002Fasset-output\u002Fbootstrap`\u003C\u002Fspan\u003E\n          \u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E\n          \u003Cspan class=\"na\"\u003Eimage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EDockerImage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfromRegistry\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Erust:1.52-slim\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E}),\u003C\u002Fspan\u003E\n      \u003Cspan class=\"na\"\u003EfunctionName\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Ehello\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"na\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"na\"\u003Eruntime\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elambda\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ERuntime\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EPROVIDED_AL2\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELet's unpack some of that, because there are some interesting things going on here. When we create the function, we pass some options to configure it. We name the function with the \u003Ccode\u003EfunctionName\u003C\u002Fcode\u003E option, we set the handler function with the \u003Ccode\u003Ehandler\u003C\u002Fcode\u003E option (this is actually unnecessary for us because of how custom runtimes work), and we specify the runtime with the \u003Ccode\u003Eruntime\u003C\u002Fcode\u003E option.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETypically, you might see something more specific as the runtime, like \u003Ccode\u003ENODEJS_12_X\u003C\u002Fcode\u003E or \u003Ccode\u003EGO_1_X\u003C\u002Fcode\u003E, but for a custom runtime, a runtime in which you can provide your own binary, we use the \u003Ccode\u003EPROVIDED_AL\u003C\u002Fcode\u003E or \u003Ccode\u003EPROVIDED_AL2\u003C\u002Fcode\u003E. \u003Ccode\u003EAL\u003C\u002Fcode\u003E here is short for Amazon Linux.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENotice the \u003Ccode\u003Ecode\u003C\u002Fcode\u003E option. This option is arguably the most important one, as it lets the developer indicate how CDK provides the actual code or binary for the function to execute. We're using the \u003Ccode\u003ECode\u003C\u002Fcode\u003E class' static method \u003Ccode\u003EfromAsset\u003C\u002Fcode\u003E to create a bundle with our binary. With this approach, we can specify a path to a directory or zip file. We give the path to our Rust project source root, and then pass some additional options. By using the \u003Ccode\u003Ebundling\u003C\u002Fcode\u003E option, we are telling the asset provider to create our asset with a docker container. The bundling options are somewhat powerful, allowing you to specify the image to use, docker entrypoint, command, volumes, and some other things. We only need to specify the image and command.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe use the official rust image. This will take additional time on your first run since the image must be pulled. For the command, we instruct the docker runtime to install a new rust target (so we can run the binary on Amazon Linux 2), to build the source, and then we copy the binary file to \u003Ccode\u003E\u002Fasset-output\u002Fbootstrap\u003C\u002Fcode\u003E. This output file is what the lambda custom runtime expects to exist when it is invoked.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt this point, you should be able to deploy the lambda. This command may take some time, as the docker image must be pulled (first time only), the crates.io index must be updated, and the lambda must be built (only when you make changes). There could be possible optimization for this step by removing the build process from CDK and perhaps supplying your own Dockerfile for CDK to build with the new target added, but I will leave that for you to explore. The deploy will also prompt the user about IAM policy and statement changes. You can accept these and then the deployment should complete and your lambda function will be live.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecdk deploy\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELet's go ahead and test the lambda now. We can do this from the command line using the AWS CLI.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Eaws lambda invoke \u003Cspan class=\"nt\"\u003E--function-name\u003C\u002Fspan\u003E hello \u003Cspan class=\"nt\"\u003E--payload\u003C\u002Fspan\u003E \u003Cspan class=\"s1\"\u003E'{\"name\":\"Nick\"}'\u003C\u002Fspan\u003E output.json\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow if you look at the contents of \u003Ccode\u003Eoutput.json\u003C\u002Fcode\u003E, you should see a nice message.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E\u003Cspan class=\"nb\"\u003Ecat \u003C\u002Fspan\u003Eoutput.json\n\u003Cspan class=\"c\"\u003E# {\"req_id\":\"88226fb0-670c-4f0e-b772-7e677ccec71d\",\"msg\":\"Hello Nick!\"}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"adapting-the-lambda-into-an-api-endpoint\" href=\"#adapting-the-lambda-into-an-api-endpoint\"\u003E\n  \u003C\u002Fa\u003E\n  Adapting the Lambda into an API Endpoint\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo get a glimpse of just how easy CDK makes it to build and connect the components of your application, let's take this lambda one step further by giving it an actual event source. We'll tell CDK to create an API gateway which proxies all requests to the lambda, and we'll simply modify the lambda to respond with some of the data coming in from the request context.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's start with the lambda modification. First, we'll need to update our dependencies again inside \u003Ccode\u003Elambda\u002Fhello\u002FCargo.toml\u003C\u002Fcode\u003E. We can remove the \u003Ccode\u003Eserde\u003C\u002Fcode\u003E dependency and add the following:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight toml\"\u003E\u003Ccode\u003E\u003Cspan class=\"py\"\u003Eaws_lambda_events\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"0.4.0\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Ehttp\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"0.2.4\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe're integrating a nice third party library here, \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FLegNeato\u002Faws-lambda-events\"\u003Eaws-lambda-events\u003C\u002Fa\u003E, which provides serializable Rust structs for the various AWS event definitions.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow we can update our lambda code. At the top of \u003Ccode\u003Elambda\u002Fhello\u002Fsrc\u002Fmain.rs\u003C\u002Fcode\u003E, at some new \u003Ccode\u003Euse\u003C\u002Fcode\u003E statements to bring the API Gateway event definitions into scope, as well as some other things we'll need. Again, you can remove the \u003Ccode\u003Euse serde\u003C\u002Fcode\u003E as well.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Eaws_lambda_events\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Eapigw\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::{\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EApiGatewayProxyRequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EApiGatewayProxyResponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Eaws_lambda_events\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Eencodings\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EBody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ehttp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Eheader\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EHeaderMap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ERemove the struct definitions we previously had for \u003Ccode\u003ERequest\u003C\u002Fcode\u003E and \u003Ccode\u003EResponse\u003C\u002Fcode\u003E, and replace any references to those by \u003Ccode\u003EApiGatewayProxyRequest\u003C\u002Fcode\u003E and \u003Ccode\u003EApiGatewayProxyResponse\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFinally, update the \u003Ccode\u003Emy_handler\u003C\u002Fcode\u003E function to build an \u003Ccode\u003EApiGatewayProxyResponse\u003C\u002Fcode\u003E to return, instead of our old \u003Ccode\u003EResponse\u003C\u002Fcode\u003E. We'll take the URL path from the request context and return that with some text in the response body.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Epub\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecrate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Emy_handler\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EApiGatewayProxyRequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ectx\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EContext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003E-&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResult\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EApiGatewayProxyResponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EError\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c\"\u003E\u002F\u002F extract some useful info from the request\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Epath\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"py\"\u003E.path\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E.unwrap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c\"\u003E\u002F\u002F prepare the response\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eresp\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EApiGatewayProxyResponse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Estatus_code\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E200\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Eheaders\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003EHeaderMap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Enew\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Emulti_value_headers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003EHeaderMap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Enew\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ebody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003ESome\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003EBody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003EText\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Eformat!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Hello from '{}'\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Epath\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))),\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Eis_base64_encoded\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003ESome\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c\"\u003E\u002F\u002F return `Response` (it will be serialized to JSON automatically by the runtime)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EOk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eresp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EMoving back to Typescript land, we will need to add a new dependency to create API Gateway resources.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Enpm i @aws-cdk\u002Faws-apigateway@1.107.0\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe'll then import that library at the top of our \u003Ccode\u003Elib\u002Ftutorial-rust-lambda-stack.ts\u003C\u002Fcode\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eapigw\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E@aws-cdk\u002Faws-apigateway\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAnd finally, we will instantiate a new API Gateway Lambda Rest API resource after our lambda function definition. We will pass to it our lambda function as the handler.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Egw\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eapigw\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ELambdaRestApi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Ethis\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EHelloEndpoint\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"na\"\u003Ehandler\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ehello\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOnce again, we can now deploy our CDK application.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecdk deploy\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAnd this time to test, we will copy the API Gateway endpoint URL from the output of our CDK deploy. At the very end of the CDK command line output, you should see the second last section called \u003Ccode\u003EOutputs\u003C\u002Fcode\u003E. In that section, there should be an output value for your URL. For example, it should looks something like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E ✅  TutorialRustLambdaStack\n\nOutputs:\nTutorialRustLambdaStack.HelloEndpointB03699DE = https:\u002F\u002F0448ubzy8d.execute-api.ca-central-1.amazonaws.com\u002Fprod\u002F\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ECopy that URL and then we can make a request to it with any path we want and we should receive a nice response from our lambda.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ecurl \u003Cspan class=\"nt\"\u003E-sL\u003C\u002Fspan\u003E https:\u002F\u002F0448ubzy8d.execute-api.ca-central-1.amazonaws.com\u002Fprod\u002Fthe\u002Ftest\u002Fpath\n\u003Cspan class=\"c\"\u003E# Hello from '\u002Fthe\u002Ftest\u002Fpath'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAnd there we have it. With essentially one more line of code we added an API Gateway to direct traffic to our lambda, a lambda which is running our Rust code. Now go, go off and build incredible serverless application components with the power of Rust! 🦀\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yAY713WQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frhjgme1fdw5348i66plj.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yAY713WQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frhjgme1fdw5348i66plj.png\" alt=\"Ferris the crab\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Beginner's Guide to Running Rust on AWS Lambda\npublished: true\ndescription: A start-to-finish tutorial demonstrating how to build a simple AWS Lambda written in Rust and manage its deployment with AWS CDK.\ntags: rust, serverless, lambda, cdk\ncover_image: https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F20zgz7h9f0a8qyh1zr22.png\n---\n\nA common behaviour that I witness with people making a journey toward proficiency with the Rust programming language is the desire to start using the language for everything. It's true that the language certainly has many merits and seems well adaptable to different application domains, and this reality is only being strengthened by the continuous growth in maturity of the language and its community. However, as a professional it is still crucially important to have a good sense for what the best tool is for the given job, rather than blindly choosing your favourite. You don't want to introduce more complexity than necessary into a project and you certainly don't want to advocate for a practice which could lead your team to a dead end. Rust may be a great programming language, but one must use discretion when deciding to apply it to a problem.\n\nToday, I don't care about being quite so professional. I'll be the first to admit that I am becoming a prime example of the kind of enthusiast I just finished describing. So in this article, I'm going to indulge that wide eyed fascination that you and I may share for this shiny programming language. We're going to explore a domain shaped perfectly for — perhaps even intended exclusively for — interpreted runtime languages, and we're going to wedge Rust in there and make it fit too. Today, I'm going to show you an absolute minimal but complete demonstration of deploying Rust as a serverless function, specifically with AWS Lambda.\n\nBefore jumping in, it's worth mentioning that my introduction has been perhaps an exaggeration. I have made it sound as if Rust does not belong in the realm of serverless and that this is unmarked territory, but who am I to say that Rust isn't in fact the _perfect_ tool for serverless? To my knowledge, serverless Rust too has grown in maturity over the last couple of years. What this article is going to present is certainly not any ground breaking discovery, but instead what I believe should be an excellent resource for people having no idea where to start for deploying Rust in AWS Lambda. So without further ado, let's go ahead and build the project.\n\n![Rust plus AWS Lambda](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fikjs1ibfm9ocjooc2j8j.png)\n\n## Prerequisites\n\nTo follow along with this tutorial, you will need the following:\n\n- [AWS Command Line Interface](https:\u002F\u002Faws.amazon.com\u002Fcli\u002F) installed and configured with security credentials for your AWS account\u002Fuser. At the time of writing, I am using version `1.19.88`.\n- [NodeJS](https:\u002F\u002Fnodejs.org\u002Fen\u002F). At the time of writing, I am using version `14.17.0`.\n- [AWS CDK](https:\u002F\u002Faws.amazon.com\u002Fcdk\u002F). At the time of writing, I am using version `1.107.0`.\n  - `npm i -g aws-cdk`\n- [Rust](https:\u002F\u002Fwww.rust-lang.org\u002F). At the time of writing, I am using version `1.52.1`.\n\n## Creating a Fresh CDK Project\n\nThe first thing we need to do is create the project. Even though this is supposed to be about our Rust lambda, CDK is going to be at the core of our project and the lambda code will exist within it. It is of course possible to structure things differently, for example by keeping the lambda code and CDK separate, but for this tutorial we will keep things simple.\n\nIn the command-line, make a directory for the new project.\n\n```bash\nmkdir tutorial-rust-lambda\ncd tutorial-rust-lambda\n```\n\nUse the CDK CLI to initialize a new project. We will use Typescript.\n\n```bash\ncdk init app --language typescript\n```\n\nOne extra thing I like to do in Typescript projects before getting started is to set an output directory for compiled scripts. In the `tsconfig.json` file, add to the `compilerOptions` object. This will help keep the clutter away from our source files. Also update the `exclude` field to ignore our output directory.\n\n```diff\n20c20,21\n\u003C     \"typeRoots\": [\".\u002Fnode_modules\u002F@types\"]\n---\n\u003E     \"typeRoots\": [\".\u002Fnode_modules\u002F@types\"],\n\u003E     \"outDir\": \"dist\"\n22c23\n\u003C   \"exclude\": [\"cdk.out\"]\n---\n\u003E   \"exclude\": [\"cdk.out\", \"dist\"]\n```\n\nHaving created the project, we can now prepare for development by starting up the Typescript compiler watch agent. The project's `package.json` will come with an NPM run-script for this.\n\n```bash\nnpm run watch\n```\n\nFinally, to work with CDK the way we intend to, you must perform what is called bootstrapping. This is because we will be packaging the lambda as an asset. You can read more about CDK bootstrapping [here](https:\u002F\u002Fdocs.aws.amazon.com\u002Fcdk\u002Flatest\u002Fguide\u002Fbootstrapping.html). Find your AWS account ID and choose an AWS region and then run the following, substituting those values:\n\n```bash\ncdk bootstrap aws:\u002F\u002F{AWS_ACCOUNT_ID}\u002F{AWS_DEFAULT_REGION}\n```\n\n## Writing a Lambda Function in Rust\n\nWe're going to write an incredibly simple Rust program which will receive an event of an expected format (a JSON string with a \"name\" field) and respond with \"Hello {name}\". The code is nearly identical to [the basic example](https:\u002F\u002Fgithub.com\u002Fawslabs\u002Faws-lambda-rust-runtime\u002Fblob\u002Fmaster\u002Flambda-runtime\u002Fexamples\u002Fbasic.rs) from the [aws-lambda-rust-runtime](https:\u002F\u002Fgithub.com\u002Fawslabs\u002Faws-lambda-rust-runtime) repository.\n\nFirst, let's setup our Rust project within our CDK project. Again, your lambda code does not need to reside within your CDK project. If your lambda code scales into a large project you could instead package it and publish it to AWS S3 and reference that S3 object from CDK, but for this demo we are doing things the more straightforward way.\n\n```bash\ncargo new lambda\u002Fhello\n```\n\nNext, we will add some dependencies to the project required to build our Rust code as an AWS Lambda function. Open `lambda\u002Fhello\u002FCargo.toml` in your editor and add the following under `[dependencies]`:\n\n```toml\nlambda_runtime = \"0.3.0\"\nlog = \"0.4.14\"\nserde = \"1.0.126\"\nsimple_logger = \"1.11.0\"\ntokio = \"1.6.1\"\n```\n\nNext, we'll write our `lambda\u002Fhello\u002Fsrc\u002Fmain.rs`.\n\n```rust\n\u002F\u002F This example requires the following input to succeed:\n\u002F\u002F { \"name\": \"some name\" }\n\nuse lambda_runtime::{handler_fn, Context, Error};\nuse log::LevelFilter;\nuse serde::{Deserialize, Serialize};\nuse simple_logger::SimpleLogger;\n\n\u002F\u002F\u002F This is also a made-up example. Requests come into the runtime as unicode\n\u002F\u002F\u002F strings in json format, which can map to any structure that implements `serde::Deserialize`\n\u002F\u002F\u002F The runtime pays no attention to the contents of the request payload.\n#[derive(Deserialize)]\nstruct Request {\n    name: String,\n}\n\n\u002F\u002F\u002F This is a made-up example of what a response structure may look like.\n\u002F\u002F\u002F There is no restriction on what it can be. The runtime requires responses\n\u002F\u002F\u002F to be serialized into json. The runtime pays no attention\n\u002F\u002F\u002F to the contents of the response payload.\n#[derive(Serialize)]\nstruct Response {\n    req_id: String,\n    msg: String,\n}\n\n#[tokio::main]\nasync fn main() -\u003E Result\u003C(), Error\u003E {\n    \u002F\u002F required to enable CloudWatch error logging by the runtime\n    \u002F\u002F can be replaced with any other method of initializing `log`\n    SimpleLogger::new().with_level(LevelFilter::Info).init().unwrap();\n\n    let func = handler_fn(my_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n}\n\npub(crate) async fn my_handler(event: Request, ctx: Context) -\u003E Result\u003CResponse, Error\u003E {\n    \u002F\u002F extract some useful info from the request\n    let name = event.name;\n\n    \u002F\u002F prepare the response\n    let resp = Response {\n        req_id: ctx.request_id,\n        msg: format!(\"Hello {}!\", name),\n    };\n\n    \u002F\u002F return `Response` (it will be serialized to JSON automatically by the runtime)\n    Ok(resp)\n}\n```\n\nFinally, try building with cargo to make sure everything works.\n\n```bash\npushd lambda\u002Fhello\ncargo build\npopd\n```\n\n## Infra as Code\n\nNow we can start developing the blueprint for the application's infrastructure. CDK is incredibly powerful and gives you the tools to build complex applications in AWS using high level constructs, but for our needs, we only want to create a simple lambda function.\n\nWe'll start by installing the lambda library dependency. Keep in mind, you probably don't need to specify the version as I am doing here, but it may help to keep all of your CDK library dependency versions aligned and avoid incompatibilities.\n\n```bash\nnpm i @aws-cdk\u002Faws-lambda@1.107.0\n```\n\nNext, in the file representing our CloudFormation stack `lib\u002Ftutorial-rust-lambda-stack.ts`, we're going to instantiate a lambda function.\n\n```typescript\nimport * as cdk from '@aws-cdk\u002Fcore';\nimport * as lambda from '@aws-cdk\u002Faws-lambda';\n\nexport class TutorialRustLambdaStack extends cdk.Stack {\n  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    const target = 'x86_64-unknown-linux-musl';\n    const hello = new lambda.Function(this, 'HelloHandler', {\n      code: lambda.Code.fromAsset('lambda\u002Fhello', {\n        bundling: {\n          command: [\n            'bash', '-c',\n            `rustup target add ${target} && cargo build --release --target ${target} && cp target\u002F${target}\u002Frelease\u002Fhello \u002Fasset-output\u002Fbootstrap`\n          ],\n          image: cdk.DockerImage.fromRegistry('rust:1.52-slim')\n        }\n      }),\n      functionName: 'hello',\n      handler: 'main',\n      runtime: lambda.Runtime.PROVIDED_AL2\n    });\n  }\n}\n```\n\nLet's unpack some of that, because there are some interesting things going on here. When we create the function, we pass some options to configure it. We name the function with the `functionName` option, we set the handler function with the `handler` option (this is actually unnecessary for us because of how custom runtimes work), and we specify the runtime with the `runtime` option.\n\nTypically, you might see something more specific as the runtime, like `NODEJS_12_X` or `GO_1_X`, but for a custom runtime, a runtime in which you can provide your own binary, we use the `PROVIDED_AL` or `PROVIDED_AL2`. `AL` here is short for Amazon Linux.\n\nNotice the `code` option. This option is arguably the most important one, as it lets the developer indicate how CDK provides the actual code or binary for the function to execute. We're using the `Code` class' static method `fromAsset` to create a bundle with our binary. With this approach, we can specify a path to a directory or zip file. We give the path to our Rust project source root, and then pass some additional options. By using the `bundling` option, we are telling the asset provider to create our asset with a docker container. The bundling options are somewhat powerful, allowing you to specify the image to use, docker entrypoint, command, volumes, and some other things. We only need to specify the image and command.\n\nWe use the official rust image. This will take additional time on your first run since the image must be pulled. For the command, we instruct the docker runtime to install a new rust target (so we can run the binary on Amazon Linux 2), to build the source, and then we copy the binary file to `\u002Fasset-output\u002Fbootstrap`. This output file is what the lambda custom runtime expects to exist when it is invoked.\n\nAt this point, you should be able to deploy the lambda. This command may take some time, as the docker image must be pulled (first time only), the crates.io index must be updated, and the lambda must be built (only when you make changes). There could be possible optimization for this step by removing the build process from CDK and perhaps supplying your own Dockerfile for CDK to build with the new target added, but I will leave that for you to explore. The deploy will also prompt the user about IAM policy and statement changes. You can accept these and then the deployment should complete and your lambda function will be live.\n\n```bash\ncdk deploy\n```\n\nLet's go ahead and test the lambda now. We can do this from the command line using the AWS CLI.\n\n```bash\naws lambda invoke --function-name hello --payload '{\"name\":\"Nick\"}' output.json\n```\n\nNow if you look at the contents of `output.json`, you should see a nice message.\n\n```bash\ncat output.json\n# {\"req_id\":\"88226fb0-670c-4f0e-b772-7e677ccec71d\",\"msg\":\"Hello Nick!\"}\n```\n\n## Adapting the Lambda into an API Endpoint\n\nTo get a glimpse of just how easy CDK makes it to build and connect the components of your application, let's take this lambda one step further by giving it an actual event source. We'll tell CDK to create an API gateway which proxies all requests to the lambda, and we'll simply modify the lambda to respond with some of the data coming in from the request context.\n\nLet's start with the lambda modification. First, we'll need to update our dependencies again inside `lambda\u002Fhello\u002FCargo.toml`. We can remove the `serde` dependency and add the following:\n\n```toml\naws_lambda_events = \"0.4.0\"\nhttp = \"0.2.4\"\n```\n\nWe're integrating a nice third party library here, [aws-lambda-events](https:\u002F\u002Fgithub.com\u002FLegNeato\u002Faws-lambda-events), which provides serializable Rust structs for the various AWS event definitions.\n\nNow we can update our lambda code. At the top of `lambda\u002Fhello\u002Fsrc\u002Fmain.rs`, at some new `use` statements to bring the API Gateway event definitions into scope, as well as some other things we'll need. Again, you can remove the `use serde` as well.\n\n```rust\nuse aws_lambda_events::event::apigw::{ApiGatewayProxyRequest, ApiGatewayProxyResponse};\nuse aws_lambda_events::encodings::Body;\nuse http::header::HeaderMap;\n```\n\nRemove the struct definitions we previously had for `Request` and `Response`, and replace any references to those by `ApiGatewayProxyRequest` and `ApiGatewayProxyResponse`.\n\nFinally, update the `my_handler` function to build an `ApiGatewayProxyResponse` to return, instead of our old `Response`. We'll take the URL path from the request context and return that with some text in the response body.\n\n```rust\npub(crate) async fn my_handler(event: ApiGatewayProxyRequest, _ctx: Context) -\u003E Result\u003CApiGatewayProxyResponse, Error\u003E {\n    \u002F\u002F extract some useful info from the request\n    let path = event.path.unwrap();\n\n    \u002F\u002F prepare the response\n    let resp = ApiGatewayProxyResponse {\n        status_code: 200,\n        headers: HeaderMap::new(),\n        multi_value_headers: HeaderMap::new(),\n        body: Some(Body::Text(format!(\"Hello from '{}'\", path))),\n        is_base64_encoded: Some(false),\n    };\n\n    \u002F\u002F return `Response` (it will be serialized to JSON automatically by the runtime)\n    Ok(resp)\n}\n```\n\nMoving back to Typescript land, we will need to add a new dependency to create API Gateway resources.\n\n```bash\nnpm i @aws-cdk\u002Faws-apigateway@1.107.0\n```\n\nWe'll then import that library at the top of our `lib\u002Ftutorial-rust-lambda-stack.ts`.\n\n```typescript\nimport * as apigw from '@aws-cdk\u002Faws-apigateway';\n```\n\nAnd finally, we will instantiate a new API Gateway Lambda Rest API resource after our lambda function definition. We will pass to it our lambda function as the handler.\n\n```typescript\nconst gw = new apigw.LambdaRestApi(this, 'HelloEndpoint', {\n  handler: hello\n});\n```\n\nOnce again, we can now deploy our CDK application.\n\n```bash\ncdk deploy\n```\n\nAnd this time to test, we will copy the API Gateway endpoint URL from the output of our CDK deploy. At the very end of the CDK command line output, you should see the second last section called `Outputs`. In that section, there should be an output value for your URL. For example, it should looks something like this:\n\n```\n ✅  TutorialRustLambdaStack\n\nOutputs:\nTutorialRustLambdaStack.HelloEndpointB03699DE = https:\u002F\u002F0448ubzy8d.execute-api.ca-central-1.amazonaws.com\u002Fprod\u002F\n```\n\nCopy that URL and then we can make a request to it with any path we want and we should receive a nice response from our lambda.\n\n```bash\ncurl -sL https:\u002F\u002F0448ubzy8d.execute-api.ca-central-1.amazonaws.com\u002Fprod\u002Fthe\u002Ftest\u002Fpath\n# Hello from '\u002Fthe\u002Ftest\u002Fpath'\n```\n\nAnd there we have it. With essentially one more line of code we added an API Gateway to direct traffic to our lambda, a lambda which is running our Rust code. Now go, go off and build incredible serverless application components with the power of Rust! 🦀\n\n![Ferris the crab](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frhjgme1fdw5348i66plj.png)",user:{name:"Nicholas Omer Chiasson",username:e,twitter_username:"nichobicholas",github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--S7MHbKYX--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F116250\u002F97c59937-699b-4687-b797-edacfa68e7ec.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iQ8kCpan--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F116250\u002F97c59937-699b-4687-b797-edacfa68e7ec.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fnicholaschiasson\u002F724777",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-06-13T18:37:11Z","https:\u002F\u002Fdev.to\u002Fnicholaschiasson\u002Fbeginner-s-guide-to-running-rust-on-aws-lambda-277n",41,"nicholaschiasson"));
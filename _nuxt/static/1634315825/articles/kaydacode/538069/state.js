window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315825",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:538069,title:"Technical Debt, Maintenance and Buy-In ",description:"As technologists - we can mostly agree on the importance of clearing out looming technical debt, maintaining project things like framework upgrades and more, but how do you go about it when your management is pushing back? How can you ensure you're helping your code survive the long-haul when time and time again features are the driving force. Let's chat.",readable_publish_date:"Dec 15 '20",slug:"technical-debt-maintenance-and-buy-in-2409",path:"\u002Fkaydacode\u002Ftechnical-debt-maintenance-and-buy-in-2409",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HaYeUUyu--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fa3jzu051zo6kdcoevu85.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--v8lYySUk--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fa3jzu051zo6kdcoevu85.jpg",canonical_url:c,created_at:"2020-12-10T02:22:09Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:4,tag_list:"maintenance, architecture",tags:["maintenance","architecture"],body_html:"\u003Cp\u003ERecently I did a blog about managing technical debt mountain and how to go about addressing it. You can read \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fkaydacode\u002Fchipping-away-at-technical-debt-335a\"\u003EChipping Away at Technical Debt Here.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThat lead into a small discussion on Twitter about getting buy-in from product or higher-ups when feature development continually takes precedence. \u003C\u002Fp\u003E\n\n\n\u003Cblockquote class=\"ltag__twitter-tweet\" data-url=\"https:\u002F\u002Ftwitter.com\u002Fioloro\u002Fstatus\u002F1336460803508109312\"\u003E\n\n  \u003Cdiv class=\"ltag__twitter-tweet__main\" data-url=\"https:\u002F\u002Ftwitter.com\u002Fioloro\u002Fstatus\u002F1336460803508109312\"\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__header\"\u003E\n      \u003Cimg class=\"ltag__twitter-tweet__profile-image\" src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8gDcsK_u--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F1207262974462705667\u002F3g7jk_PZ_normal.jpg\" alt=\"John Marc Hickey profile image\" loading=\"lazy\"\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__full-name\"\u003E\n        John Marc Hickey\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__username\"\u003E\n        @ioloro\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__twitter-logo\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ir1kO05j--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg\" alt=\"twitter logo\" loading=\"lazy\"\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__body\"\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fkaydacode\"\u003E@kaydacode\u003C\u002Fa\u003E Love the write up! Would love a companion article: “How to convince your managers to prioritize technical debt”\u003Cbr\u003E\u003Cbr\u003ENot right now, but in the past convincing someone with competing priorities to pause and rework something has been a challenge.\n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__date\"\u003E\n      00:01 AM - 09 Dec 2020\n    \u003C\u002Fdiv\u003E\n\n\n    \u003Cdiv class=\"ltag__twitter-tweet__actions\"\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Ftweet?in_reply_to=1336460803508109312\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fFnoeFxk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg\" alt=\"Twitter reply action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Fretweet?tweet_id=1336460803508109312\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--k6dcrOn8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg\" alt=\"Twitter retweet action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Flike?tweet_id=1336460803508109312\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--SRQc9lOp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg\" alt=\"Twitter like action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003EI had to do some thinking, and reflection if I'm being honest. I've certainly run into this in the past, but remembering the details of a so-common occurrence was difficult. Once memories started flowing back, I had to then think about, was that the right approach? If faced with this situation now, what would I do?\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore you go out swinging to your leaders, take a moment and think about what needs to be done. Here's a summarized checklist from the original post, but please go read it when you're ready to start tackling this debt! \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EDefine Scope\u003C\u002Fli\u003E\n\u003Cli\u003EPlan of Attack\u003C\u002Fli\u003E\n\u003Cli\u003EAttack!\u003C\u002Fli\u003E\n\u003Cli\u003EMaintenance\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EOnce you have scope defined, you can start on your plan of attack, by playing off the below scenarios that fit your situation.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs an example, we'll use a basic hotel booking app. The code in finding a competitive rate for a hotel has proven to be buggy in the past, and it's so old that it's using outdated frameworks. But the effort to update it has been too large to prioritize, so in the debt pile it sits.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"when-management-doesnt-care\" href=\"#when-management-doesnt-care\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  When management doesn't care\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is probably worst case scenario, because it signifies there's more serious problems on the team. Another topic for another day perhaps. When you're faced with leaders that don't care about technical debt or project maintenance - you need to sell it, pitch it. This is where talking with money and hours comes in. \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cp\u003EIdentify the risks\u002Ffacts.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EWith lack of tests, and a code structure that's untestable, we will not be able to easily catch bugs before entering production.\u003C\u002Fli\u003E\n\u003Cli\u003EOutdated frameworks pose a security risk, with known vulnerabilities.\u003C\u002Fli\u003E\n\u003Cli\u003EMaintainability is decreasing with each patch.\u003C\u002Fli\u003E\n\u003Cli\u003EScope is increasing with each patch.\u003C\u002Fli\u003E\n\u003Cli\u003EWe risk losing customers over a poor experience, what if it double books, or doesn't book, or leaves a customer stranded with problems. \u003C\u002Fli\u003E\n\u003Cli\u003EWith previous bug fixes, we've spent about 30 hours maintaining this code in the last month alone. That effort grows with each patch as scope increases.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\n\u003Cp\u003EIdentify the solution.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EA complete refactor of this code would take about x amount of time with n developers dedicated full time.\u003C\u002Fli\u003E\n\u003Cli\u003ERefactoring this code will allow frameworks to be updated, removing security vulnerabilities.\u003C\u002Fli\u003E\n\u003Cli\u003EIt would also allow the architecture to be fixed and we can add automated testing, ensuring that our core functionality will not break with each release. \u003C\u002Fli\u003E\n\u003Cli\u003EWith tests, we'd catch problems before shipping software.\u003C\u002Fli\u003E\n\u003Cli\u003EThis code becomes incredibly more maintainable and saves hundreds of developer hours in the future because the risks have been mitigated. \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThat's a pretty convincing argument. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe entire point is to provide quantitive metrics and the outcome in quantitive metrics where possible. You have to hit the company in the wallet. Paying for extra development hours or losing customers are both things that will hurt business.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's also up to every maintainer on your project to push in the right direction. If your lead dev\u002Fteam lead\u002Ftrusted senior dev(s) is dragging their feet, you're not going to get the buy in that you're looking for. Again, larger problems. But even in the worst environments - if everyone is sticking to their guns, someone has to give in sometime. :) \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"when-theres-no-time-not-a-priority\" href=\"#when-theres-no-time-not-a-priority\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  When there's no time \u002F not a priority\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis started out as two separate scenarios, but they're so close, we're gonna group them together. If you're behind on features, it can be hard to find the time to fit in these maintenance tasks. Likewise, if everything else seems to be a priority, it's difficult to get these menial tasks to the forefront. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBring addressing technical debt up early and often. If you see a break coming up between features, bring it up. Work with your leaders to come up with a plan to tackle it. 10-25% of the sprint to focus on technical debt might be a solution. One rotating \"maintainer\" that only focuses on technical debt is another. Or one sprint a quarter or two, that will focus solely on technical debt. The good news is, your leaders care, but the follow up is find a compromise that can prioritize features\u002Fenhancements while not leaving the rest of your project behind.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"wrap-up\" href=\"#wrap-up\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Wrap up\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIt's difficult to navigate these scenarios when technical debt mountain is running the show - SO if you're in a position, try to work in a plan with your leaders before you reach the point of no return. Otherwise, apply pressure often and frequently, like a wound. If all else fails, time to find some leaders that will care what their developers have to say. Whew, spicy. 🥵 \u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Technical Debt, Maintenance and Buy-In \npublished: true\ndescription: As technologists - we can mostly agree on the importance of clearing out looming technical debt, maintaining project things like framework upgrades and more, but how do you go about it when your management is pushing back? How can you ensure you're helping your code survive the long-haul when time and time again features are the driving force. Let's chat.\ntags: maintenance, architecture\ncover_image: https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fa3jzu051zo6kdcoevu85.jpg\n---\n\nRecently I did a blog about managing technical debt mountain and how to go about addressing it. You can read [Chipping Away at Technical Debt Here.](https:\u002F\u002Fdev.to\u002Fkaydacode\u002Fchipping-away-at-technical-debt-335a)\n\nThat lead into a small discussion on Twitter about getting buy-in from product or higher-ups when feature development continually takes precedence. \n\n{% twitter 1336460803508109312 %}\n\nI had to do some thinking, and reflection if I'm being honest. I've certainly run into this in the past, but remembering the details of a so-common occurrence was difficult. Once memories started flowing back, I had to then think about, was that the right approach? If faced with this situation now, what would I do?\n\nBefore you go out swinging to your leaders, take a moment and think about what needs to be done. Here's a summarized checklist from the original post, but please go read it when you're ready to start tackling this debt! \n\n1. Define Scope\n2. Plan of Attack\n3. Attack!\n4. Maintenance\n\nOnce you have scope defined, you can start on your plan of attack, by playing off the below scenarios that fit your situation.\n\nAs an example, we'll use a basic hotel booking app. The code in finding a competitive rate for a hotel has proven to be buggy in the past, and it's so old that it's using outdated frameworks. But the effort to update it has been too large to prioritize, so in the debt pile it sits.\n\n## When management doesn't care\nThis is probably worst case scenario, because it signifies there's more serious problems on the team. Another topic for another day perhaps. When you're faced with leaders that don't care about technical debt or project maintenance - you need to sell it, pitch it. This is where talking with money and hours comes in. \n\n* Identify the risks\u002Ffacts.\n - With lack of tests, and a code structure that's untestable, we will not be able to easily catch bugs before entering production.\n - Outdated frameworks pose a security risk, with known vulnerabilities.\n - Maintainability is decreasing with each patch.\n - Scope is increasing with each patch.\n - We risk losing customers over a poor experience, what if it double books, or doesn't book, or leaves a customer stranded with problems. \n - With previous bug fixes, we've spent about 30 hours maintaining this code in the last month alone. That effort grows with each patch as scope increases.\n\n* Identify the solution.\n - A complete refactor of this code would take about x amount of time with n developers dedicated full time.\n - Refactoring this code will allow frameworks to be updated, removing security vulnerabilities.\n - It would also allow the architecture to be fixed and we can add automated testing, ensuring that our core functionality will not break with each release. \n - With tests, we'd catch problems before shipping software.\n - This code becomes incredibly more maintainable and saves hundreds of developer hours in the future because the risks have been mitigated. \n\nThat's a pretty convincing argument. \n\nThe entire point is to provide quantitive metrics and the outcome in quantitive metrics where possible. You have to hit the company in the wallet. Paying for extra development hours or losing customers are both things that will hurt business.\n\nIt's also up to every maintainer on your project to push in the right direction. If your lead dev\u002Fteam lead\u002Ftrusted senior dev(s) is dragging their feet, you're not going to get the buy in that you're looking for. Again, larger problems. But even in the worst environments - if everyone is sticking to their guns, someone has to give in sometime. :) \n\n## When there's no time \u002F not a priority\nThis started out as two separate scenarios, but they're so close, we're gonna group them together. If you're behind on features, it can be hard to find the time to fit in these maintenance tasks. Likewise, if everything else seems to be a priority, it's difficult to get these menial tasks to the forefront. \n\nBring addressing technical debt up early and often. If you see a break coming up between features, bring it up. Work with your leaders to come up with a plan to tackle it. 10-25% of the sprint to focus on technical debt might be a solution. One rotating \"maintainer\" that only focuses on technical debt is another. Or one sprint a quarter or two, that will focus solely on technical debt. The good news is, your leaders care, but the follow up is find a compromise that can prioritize features\u002Fenhancements while not leaving the rest of your project behind.\n\n##Wrap up\nIt's difficult to navigate these scenarios when technical debt mountain is running the show - SO if you're in a position, try to work in a plan with your leaders before you reach the point of no return. Otherwise, apply pressure often and frequently, like a wound. If all else fails, time to find some leaders that will care what their developers have to say. Whew, spicy. 🥵 \n",user:{name:"Kim Arnett ",username:e,twitter_username:e,github_username:"karnett",website_url:"http:\u002F\u002Fkimarnett.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iIz5eyaJ--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F2857\u002Faec6d4ba-b8c3-442f-b954-24c9932ddf30.JPG",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BnI3wDik--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F2857\u002Faec6d4ba-b8c3-442f-b954-24c9932ddf30.JPG"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkaydacode\u002F538069",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2020-12-15T02:22:12Z","https:\u002F\u002Fdev.to\u002Fkaydacode\u002Ftechnical-debt-maintenance-and-buy-in-2409",15,"kaydacode"));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:502582,title:"Custom role based access in Nest.js, MongoDB",description:"Here, we have four roles: Sme, Sponsor, Admin, Operations.Initially, we had only 3 roles.Operations r...",readable_publish_date:"Oct 31 '20",slug:"custom-role-based-access-in-nest-js-mongodb-5b3b",path:"\u002Fkrishnakurtakoti\u002Fcustom-role-based-access-in-nest-js-mongodb-5b3b",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F502582.png",canonical_url:c,created_at:"2020-10-31T06:13:52Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:6,tag_list:"nestjs, mongodb, typescript, mongoose",tags:["nestjs","mongodb","typescript","mongoose"],body_html:"\u003Cp\u003EHere, we have four roles: Sme, Sponsor, Admin, Operations.Initially, we had only 3 roles.Operations role was added later and Operations user has permissions similar to the Admin user.In the code, we had to replace every instance of \u003Cstrong\u003Eif (user.type == USER_TYPES.ADMIN)\u003C\u002Fstrong\u003E with \u003Cstrong\u003Eif (user.type == USER_TYPES.ADMIN || user.type == USER_TYPES.OPERATIONS)\u003C\u002Fstrong\u003E.As this is time consuming and we can also miss many instances, we have created a roles module. In the roles module,the roles are defined along with their respective permissions as seen in Code (Part-III). Based on the permissions for each role, we will evaluate the authorization for the user in each of our controller methods.If the user has access, only then he will be granted the resources.\u003Cbr\u003E\n\u003Cstrong\u003ECode (Part-I):\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003Cem\u003Esrc\u002Fcommon\u002Fconstants\u002Fenum.ts\u003C\u002Fem\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"runkit-element\"\u003E\n  \u003Ccode style=\"display: none\"\u003E\n    \n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n\n  \u003C\u002Fcode\u003E\n  \u003Ccode style=\"display: none;\"\u003E\n    export enum USER_TYPES {\n  SME = \"Sme\",\n  SPONSOR = \"Sponsor\",\n  ADMIN = \"Admin\",\n  OPERATIONS_TEAM = \"Operations\"\n}\n\n\u002F\u002FrolesAccessAction \nexport enum ROLES_ACCESS_ACTION {\n  USERS_CONTROLLER_FINDLIST_OPERATIONS = \"users.controller.findList_operations\",\n  USERS_CONTROLLER_FINDLIST_ADMIN = \"users.controller.findList_admin\",\n  USERS_CONTROLLER_FIND_ONE = \"users.controller.findOne\",\n  USERS_CONTROLLER_KYC_FILTER = \"users.controller.findListFilterKYCStatus\",\n  USERS_CONTROLLER_USER_STATUS_FILTER = \"users.controller.findListFilterUserStatus\",\n  USERS_CONTROLLER_USER_UPDATE = \"users.controller.update\",\n  USERS_CONTROLLER_DELETE = \"users.controller.delete\",\n  USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR = \"users.service.checkForUpdateStatusError\",\n  USERS_SERVICE_CREATE = \"users.service.create\",\n  USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE = \"users.service.updateUserCrmIdAndEntityDetailCode\",\n  REMARKS_CONTROLLER_CREATE = \"remarks.controller.create\",\n  REMARKS_CONTROLLER_FINDLIST = \"remarks.controller.findList\",\n  REMARKS_CONTROLLER_FINDLIST_SME = \"remarks.controller.findList_sme\",\n  REMARKS_CONTROLLER_FINDLIST_SPONSOR = \"remarks.controller.findList_sponsor\",\n  SME_PROJECT_CONTROLLER_FINDLIST = \"sme-project.controller.findList\",\n  SME_PROJECT_CONTROLLER_FINDONE = \"sme-project.controller.findOne\",\n  SME_PROJECT_CONTROLLER_RECOMMENDED_PROJECTS = \"sme-project.controller.getRecommendedProjects\",\n  SME_PROJECT_CONTROLLER_CREATE = \"sme-project.controller.create\",\n  SME_PROJECT_CONTROLLER_SPONSOR_FILTER = \"sme-project.controller.projectSponsorFilter\",\n  SME_PROJECT_CONTROLLER_UPDATE = \"sme-project.controller.update\",\n  BID_DETAILS_CONTROLLER_FINDLIST = \"bid-details.controller.findList\",\n  BID_DETAILS_CONTROLLER_FINDLIST_SME = \"bid-details.controller.findList_sme\",\n  BID_DETAILS_CONTROLLER_FINDLIST_SPONSOR = \"bid-details.controller.findList_sponsor\",\n  BID_DETAILS_CONTROLLER_CREATE =  \"bid-details.controller.create\",\n  BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS = \"bid-details.controller.completeBidProcess\",\n  BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT = \"bid-details.controller.rejectAllBidsDeleteProject\",\n  BID_DETAILS_CONTROLLER_UPDATE = \"bid-details.controller.update\",\n  BID_DETAILS_CONTROLLER_UPDATE_SPONSOR = \"bid-details.controller.update_sponsor\",\n  BID_DETAILS_SERVICE_CALCULATE_BID_DETAILS = \"bid-details.controller.calculatebiddetails\",\n  BID_DETAILS_CONTROLLER_CREATE_TRANSACTION = \"bid-details.controller.createTransaction\"\n  \u002F\u002FBID_DETAILS_CONTROLLER_GET_FUNDED_PROJECTS = \"bid-details.controller.getfundedProjects\"\n}\n\n  \u003C\u002Fcode\u003E\n\u003C\u002Fdiv\u003E\n\u003Cbr\u003E\nAbove, we have defined the rolesAction for each of the methods in our project.The convention used here is the controller\u002Fservice name of the file followed by method name. For example, USERS_CONTROLLER_FINDLIST_OPERATIONS = \"users.controller.findList_operations\", we have users.controller as the controller name followed by method name as findList.\u003Cbr\u003E\n\u003Cstrong\u003ECode (Part-II):\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003Cem\u003Esrc\u002Fusers\u002Fusers.controller.ts\u003C\u002Fem\u003E\u003Cbr\u003E\n\u003Cdiv class=\"runkit-element\"\u003E\n  \u003Ccode style=\"display: none\"\u003E\n    \n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n\n  \u003C\u002Fcode\u003E\n  \u003Ccode style=\"display: none;\"\u003E\n    \nimport {\n  Body,\n  Controller,\n  Param,\n  Post,\n  UseGuards,\n  Get,\n  Request,\n  Query,\n  Put,\n  NotFoundException,\n  Delete,\n  BadRequestException,\n} from \"@nestjs\u002Fcommon\";\nimport { UsersService } from \".\u002Fusers.service\";\nimport {\n  CreateUserDto,\n  UpdateUserDto,\n  UserDto,\n  CloseAccount,\n} from \".\u002Fobjects\u002Fcreate-user.dto\";\nimport { abstractBaseControllerFactory } from \"..\u002Fcommon\u002Fbase\u002Fbase.controller\";\nimport { LoggedInToken } from \".\u002Fobjects\u002Flogin-user.dto\";\nimport {\n  BASEROUTES,\n  USER_TYPES,\n  KYC_VERIFICATION_STATUS,\n  USER_STATUS,\n  ROLES_ACCESS_ACTION,\n} from \"..\u002Fcommon\u002Fconstants\u002Fenum\";\nimport { JwtAuthGuard } from \"..\u002Fauth\u002Fauth.guard\";\nimport {\n  RequestUser,\n  LastUpdatedTime,\n  IdOrCodeParser,\n} from \"..\u002Fcommon\u002Futils\u002Fcontroller.decorator\";\nimport {\n  UNKNOWN_PARAM,\n  NOT_FOUND,\n  PAGE_NOT_FOUND_404,\n  NEW_PASSWORD_AND_CONFIRM_NEW_PASSWORD_ERROR,\n  USERNAME_OR_PASSWORD_INCORRECT,\n  CURRENT_PASSWORD_AND_NEW_PASSWORD_ERROR,\n  KYC_PENDING_STATUS_CHANGE_ERROR,\n  KYC_APPROVED_STATUS_CHANGE_ERROR,\n  KYC_REJECTED_STATUS_CHANGE_ERROR,\n  USER_ACTIVE_STATUS_CHANGE_ERROR,\n  USER_CLOSED_STATUS_CHANGE_ERROR,\n  USER_IN_REVIEW_STATUS_CHANGE_ERROR,\n  USER_KYC_INCOMPLETE_STATUS_CHANGE_ERROR,\n  ONLY_FOR_ADMIN,\n} from \"..\u002Fcommon\u002Fconstants\u002Fstring\";\nimport { plainToClass } from \"class-transformer\";\nimport { success } from \"..\u002Fcommon\u002Fbase\u002FhttpResponse.interface\";\nimport { AbstractClassTransformerPipe } from \"..\u002Fcommon\u002Fpipes\u002Fclass-transformer.pipe\";\nimport { normalizeObject } from \"..\u002Fcommon\u002Futils\u002Fhelper\";\nimport * as _ from \"lodash\";\nimport { InjectModel } from \"@nestjs\u002Fmongoose\";\nimport { Model } from \"mongoose\";\nimport { IUser, User } from \".\u002Fobjects\u002Fuser.schema\";\nimport { CrmService } from \".\u002Fcrm\u002Fcrm.service\";\nimport { KycPendingEmail } from \".\u002Fobjects\u002Fuser.registered.email\";\nimport { EmailDto } from \"..\u002Femail\u002Fobjects\u002Femail.dto\";\nimport { normalizePaginateResult } from \"..\u002Fcommon\u002Finterfaces\u002Fpagination\";\nimport { RolesService } from \"..\u002Froles\u002Froles.service\";\n\nconst BaseController = abstractBaseControllerFactory({\n  DTO: UserDto,\n  DisabledRoutes: [\n    BASEROUTES.PATCH,\n    \u002F\u002F, BASEROUTES.DETELEONE\n  ],\n});\n\n@Controller(\"users\")\nexport class UsersController extends BaseController {\n  constructor(\n    private usersService: UsersService,\n    private crmService: CrmService,\n    @InjectModel(\"User\") private readonly usersModel: Model,\n    private rolesservice: RolesService\n  ) {\n    super(usersService);\n  }\n\n@UseGuards(JwtAuthGuard)\n  @Get()\n  async findList(@Request() req, @Query() query, @RequestUser() user) {\n   let _user = await this.rolesservice.findOneByQuery({roleName: user.type})\n    \u002F\u002F if(user.type == USER_TYPES.OPERATIONS_TEAM){\n    let hasAccessOperations = _user.rolesAccessAction.some(\n      (e) =&gt; e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_OPERATIONS\n    );\n    let hasAccessAdmin = _user.rolesAccessAction.some(\n      (e) =&gt; e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_ADMIN\n    );\nif(hasAccessOperations) {\n  console.log('userstype', user.type, _user, hasAccessOperations, hasAccessAdmin)\n  let t = { $or: [{ type: USER_TYPES.SME }, { type: USER_TYPES.SPONSOR }] };\n  return await super.findList(req, { ...query, ...t });\n}\n\u002F\u002Fif (user.isAdmin) {\n  if (hasAccessAdmin){\n  \u002F\u002F &lt;--- only admin can see the user lists\n  return await super.findList(req, { ...query });\n}\nthrow new NotFoundException();\n\n}\n\n@UseGuards(JwtAuthGuard)\n  @Get(\":idOrCode\")\n  async findOne(\n    @IdOrCodeParser(\"idOrCode\") idOrCode: string,\n    @RequestUser() user\n  ) {\n    let _user = await this.rolesservice.findOneByQuery({roleName: user.type});\n    console.log('userstype', user.type, _user)\n    let hasAccess = _user.rolesAccessAction.some(\n      (e) =&gt; e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE\n    );\nif (hasAccess || user.code === idOrCode || user.id === idOrCode) {\n  \u002F\u002F &lt;--- only admin or the same person can view a profile\n  return await super.findOne(idOrCode);\n}\nthrow new NotFoundException();\n\n}\n\n@UseGuards(JwtAuthGuard)\n  @Post(\"filter\u002FkycFilter\")\n  async findListFilterKYCStatus(\n    @Request() req,\n    @Query() query,\n    @RequestUser() user,\n    @Body() body: { isProfileCompleted: number }\n  ) {\n    let t = { $or: [{ type: USER_TYPES.SME }, { type: USER_TYPES.SPONSOR }] };\n    \u002F\u002Fif (user.type == USER_TYPES.ADMIN) {\n      let _user = await this.rolesservice.findOneByQuery({roleName: user.type});\n      console.log('userstype', user.type, _user)\n      let hasAccess = _user.rolesAccessAction.some(\n        (e) =&gt; e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER\n      );\n     \u002F\u002F console.log('userstype', user.type, _user, hasAccess)\n   if(hasAccess) {\n    var options = {\n        limit: 30,\n        page: 1,\n        sort: \"_id\",\n        skip: query.page ? (query.page - 1) : 0\n      };\n  \u002F\u002F &lt;--- only admin and Sponsor can see all the USER lists\n  console.log(\"filterrrrrrrrrrr\", query, query.page, body.isProfileCompleted);\n\n  let d = await this.usersModel.find(\n    { \"verification.isProfileCompleted\": body.isProfileCompleted, ...t },\n    {},\n    { sort: { _id: 1 }, skip: options.skip * options.limit, limit: options.limit, projection: {} }\n  );\n  let dCount = await this.usersModel.count(\n    { \"verification.isProfileCompleted\": body.isProfileCompleted }\n  );\n  console.log(d.length, dCount);\n  await d.map((data) =&gt; {\n    return plainToClass(UserDto, data, { excludeExtraneousValues: true });\n  });\n  let pagination = normalizePaginateResult({\n    total: dCount,\u002F\u002Fd.length,\n    limit: options.limit,\n    page: options.page,\n    pages: d.pages,\n  });\n\n  return success({ d, pagination });\n}\nthrow new NotFoundException();\n\n}\n\n  \u003C\u002Fcode\u003E\n\u003C\u002Fdiv\u003E\n\u003Cbr\u003E\nIn the 3 methods listed above, findList, findOne, findListFilterKYCStatus, we are checking if the user has access\u002Fauthorization.For the method findListFilterKYCStatus \u003Cstrong\u003Elet hasAccess = _user.rolesAccessAction.some(\u003Cbr\u003E\n        (e) =&gt; e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER\u003Cbr\u003E\n      );\u003C\u002Fstrong\u003E , we are checking if the user has \u003Cstrong\u003EROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER\u003C\u002Fstrong\u003E listed in his roles Schema as shown below in the file.Here, only users of type \u003Cstrong\u003EUSER_TYPES.OPERATIONS_TEAM\u003C\u002Fstrong\u003E and \u003Cstrong\u003EUSER_TYPES.ADMIN\u003C\u002Fstrong\u003E have the permissions and only they are allowed access to the findListFilterKYCStatus() method. \u003Cbr\u003E\nCode (Part-III):\u003Cbr\u003E\n\u003Cem\u003Esrc\u002Froles\u002Froles.controller.ts\u003C\u002Fem\u003E\u003Cbr\u003E\n\u003Cdiv class=\"runkit-element\"\u003E\n  \u003Ccode style=\"display: none\"\u003E\n    \n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n\n  \u003C\u002Fcode\u003E\n  \u003Ccode style=\"display: none;\"\u003E\n    \nimport { RolesDto, CreateRolesDto } from '.\u002Fobjects\u002Froles.dto';\nimport { abstractBaseControllerFactory } from '..\u002Fcommon\u002Fbase\u002Fbase.controller';\nimport { BASEROUTES, USER_TYPES, ROLES_ACCESS_ACTION } from '..\u002Fcommon\u002Fconstants\u002Fenum';\nimport { RolesService } from '.\u002Froles.service';\nimport { JwtAuthGuard } from '..\u002Fauth\u002Fauth.guard';\nimport {\n  Controller,\n  Get,\n  UseGuards,\n  Request,\n  Query,\n  Put,\n  Body,\n  Post,\n  BadRequestException,\n  NotFoundException,\n  Delete,\n} from \"@nestjs\u002Fcommon\";\nimport { AbstractClassTransformerPipe } from '..\u002Fcommon\u002Fpipes\u002Fclass-transformer.pipe';\nimport { RequestUser } from '..\u002Fcommon\u002Futils\u002Fcontroller.decorator';\nimport { plainToClass } from 'class-transformer';\nimport { success } from '..\u002Fcommon\u002Fbase\u002FhttpResponse.interface';\n\nconst BaseController = abstractBaseControllerFactory({\n    DTO: RolesDto,\n    \u002F\u002FTodo: Remove after creating records in Db.\n    CreateDTO: CreateRolesDto,\n    DisabledRoutes: [\n      \u002F\u002FTodo: Uncomment BASEROUTES.CREATE after creating records in Db.\n      \u002F\u002F BASEROUTES.CREATE,\n     \u002F\u002F BASEROUTES.DETELEONE,\n  BASEROUTES.PATCH,\n \u002F\u002F BASEROUTES.UPDATEONE,\n],\n\n});\n\n@UseGuards(JwtAuthGuard)\n@Controller('roles')\nexport class RolesController extends BaseController {\n    constructor(private rolesservice: RolesService) {\n        super(rolesservice);\n      }\n      @Post()\n      public async create(\n        @Request() req,\n        @Body(AbstractClassTransformerPipe(CreateRolesDto)) body: any,\n        @Query() query,\n        @RequestUser() user\n      ) {\n         switch(body.roleName){\n           case USER_TYPES.ADMIN:\n             body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_ADMIN,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_STATUS_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_UPDATE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_DELETE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CREATE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE_TRANSACTION\n             ];\n             break;\n           case USER_TYPES.OPERATIONS_TEAM:\n            body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_OPERATIONS,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_STATUS_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_UPDATE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_DELETE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CREATE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE_TRANSACTION\n            ];\n             break;\n           case USER_TYPES.SME:\n            body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST_SME,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST_SME\n            ];\n         break;\n       case USER_TYPES.SPONSOR:\n        body.rolesAccessAction = [\n          ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n          ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST_SPONSOR,\n          ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n          ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n          ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_RECOMMENDED_PROJECTS,\n          ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_SPONSOR_FILTER,\n          ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST_SPONSOR,\n          ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE,\n          ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE_SPONSOR,\n          ROLES_ACCESS_ACTION.BID_DETAILS_SERVICE_CALCULATE_BID_DETAILS\n        ];\n         break; \n      } \n      let roles =  await this.rolesservice.create(body);\n      const _data = plainToClass(RolesDto, roles, { excludeExtraneousValues: true });\n      return success(_data);\n  }\n\n}\n\n\n  \u003C\u002Fcode\u003E\n\u003C\u002Fdiv\u003E\n\u003Cbr\u003E\nThe role's permissions are stored in the backend (MongoDB)\u003Cbr\u003E\nCode (Part-IV):\u003Cbr\u003E\n\u003Cem\u003Esrc\u002Froles\u002Fobjects\u002Froles.schema.ts\u003C\u002Fem\u003E\u003Cbr\u003E\n\u003Cdiv class=\"runkit-element\"\u003E\n  \u003Ccode style=\"display: none\"\u003E\n    \n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n\n  \u003C\u002Fcode\u003E\n  \u003Ccode style=\"display: none;\"\u003E\n    \nimport { Schema } from \"mongoose\";\nimport { createModel, Entity, IEntity } from \"..\u002F..\u002Fcommon\u002Fbase\u002Fbase.model\";\n\nexport class Roles extends Entity {\n  roleName: string;\n  roleCode: string;\n  type: string;\n  rolesAccessAction: string[];\n}\n\nexport interface IRoles extends Roles, IEntity {\n  id: string;\n}\n\nexport const RolesSchema: Schema = createModel(\"AdminRoles\", {\n  roleName: { type: String, required: true },\n  roleCode: { type: String, required: true },\n  type: { type: String, required: true},\n  rolesAccessAction: [\n    {\n      type: String,\n    },\n  ]\n});\n\n  \u003C\u002Fcode\u003E\n\u003C\u002Fdiv\u003E\n\u003Cbr\u003E\nThis is how custom role based access is implemented without any 3rd party libraries.\u003Cbr\u003E\nSource code: [Link] \u003Ca href=\"https:\u002F\u002Fgitlab.com\u002Fadh.ranjan\u002Fnestjs\"\u003Ehttps:\u002F\u002Fgitlab.com\u002Fadh.ranjan\u002Fnestjs\u003C\u002Fa\u003E\n\n",body_markdown:"Here, we have four roles: Sme, Sponsor, Admin, Operations.Initially, we had only 3 roles.Operations role was added later and Operations user has permissions similar to the Admin user.In the code, we had to replace every instance of **if (user.type == USER_TYPES.ADMIN)** with **if (user.type == USER_TYPES.ADMIN || user.type == USER_TYPES.OPERATIONS)**.As this is time consuming and we can also miss many instances, we have created a roles module. In the roles module,the roles are defined along with their respective permissions as seen in Code (Part-III). Based on the permissions for each role, we will evaluate the authorization for the user in each of our controller methods.If the user has access, only then he will be granted the resources.\n**Code (Part-I):**\n*src\u002Fcommon\u002Fconstants\u002Fenum.ts*\n{% runkit\n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n%}\n\nexport enum USER_TYPES {\n  SME = \"Sme\",\n  SPONSOR = \"Sponsor\",\n  ADMIN = \"Admin\",\n  OPERATIONS_TEAM = \"Operations\"\n}\n\n\n\u002F\u002FrolesAccessAction \nexport enum ROLES_ACCESS_ACTION {\n  USERS_CONTROLLER_FINDLIST_OPERATIONS = \"users.controller.findList_operations\",\n  USERS_CONTROLLER_FINDLIST_ADMIN = \"users.controller.findList_admin\",\n  USERS_CONTROLLER_FIND_ONE = \"users.controller.findOne\",\n  USERS_CONTROLLER_KYC_FILTER = \"users.controller.findListFilterKYCStatus\",\n  USERS_CONTROLLER_USER_STATUS_FILTER = \"users.controller.findListFilterUserStatus\",\n  USERS_CONTROLLER_USER_UPDATE = \"users.controller.update\",\n  USERS_CONTROLLER_DELETE = \"users.controller.delete\",\n  USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR = \"users.service.checkForUpdateStatusError\",\n  USERS_SERVICE_CREATE = \"users.service.create\",\n  USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE = \"users.service.updateUserCrmIdAndEntityDetailCode\",\n  REMARKS_CONTROLLER_CREATE = \"remarks.controller.create\",\n  REMARKS_CONTROLLER_FINDLIST = \"remarks.controller.findList\",\n  REMARKS_CONTROLLER_FINDLIST_SME = \"remarks.controller.findList_sme\",\n  REMARKS_CONTROLLER_FINDLIST_SPONSOR = \"remarks.controller.findList_sponsor\",\n  SME_PROJECT_CONTROLLER_FINDLIST = \"sme-project.controller.findList\",\n  SME_PROJECT_CONTROLLER_FINDONE = \"sme-project.controller.findOne\",\n  SME_PROJECT_CONTROLLER_RECOMMENDED_PROJECTS = \"sme-project.controller.getRecommendedProjects\",\n  SME_PROJECT_CONTROLLER_CREATE = \"sme-project.controller.create\",\n  SME_PROJECT_CONTROLLER_SPONSOR_FILTER = \"sme-project.controller.projectSponsorFilter\",\n  SME_PROJECT_CONTROLLER_UPDATE = \"sme-project.controller.update\",\n  BID_DETAILS_CONTROLLER_FINDLIST = \"bid-details.controller.findList\",\n  BID_DETAILS_CONTROLLER_FINDLIST_SME = \"bid-details.controller.findList_sme\",\n  BID_DETAILS_CONTROLLER_FINDLIST_SPONSOR = \"bid-details.controller.findList_sponsor\",\n  BID_DETAILS_CONTROLLER_CREATE =  \"bid-details.controller.create\",\n  BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS = \"bid-details.controller.completeBidProcess\",\n  BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT = \"bid-details.controller.rejectAllBidsDeleteProject\",\n  BID_DETAILS_CONTROLLER_UPDATE = \"bid-details.controller.update\",\n  BID_DETAILS_CONTROLLER_UPDATE_SPONSOR = \"bid-details.controller.update_sponsor\",\n  BID_DETAILS_SERVICE_CALCULATE_BID_DETAILS = \"bid-details.controller.calculatebiddetails\",\n  BID_DETAILS_CONTROLLER_CREATE_TRANSACTION = \"bid-details.controller.createTransaction\"\n  \u002F\u002FBID_DETAILS_CONTROLLER_GET_FUNDED_PROJECTS = \"bid-details.controller.getfundedProjects\"\n}\n{% endrunkit %}\nAbove, we have defined the rolesAction for each of the methods in our project.The convention used here is the controller\u002Fservice name of the file followed by method name. For example, USERS_CONTROLLER_FINDLIST_OPERATIONS = \"users.controller.findList_operations\", we have users.controller as the controller name followed by method name as findList.\n**Code (Part-II):**\n*src\u002Fusers\u002Fusers.controller.ts*\n{% runkit\n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n%}\nimport {\n  Body,\n  Controller,\n  Param,\n  Post,\n  UseGuards,\n  Get,\n  Request,\n  Query,\n  Put,\n  NotFoundException,\n  Delete,\n  BadRequestException,\n} from \"@nestjs\u002Fcommon\";\nimport { UsersService } from \".\u002Fusers.service\";\nimport {\n  CreateUserDto,\n  UpdateUserDto,\n  UserDto,\n  CloseAccount,\n} from \".\u002Fobjects\u002Fcreate-user.dto\";\nimport { abstractBaseControllerFactory } from \"..\u002Fcommon\u002Fbase\u002Fbase.controller\";\nimport { LoggedInToken } from \".\u002Fobjects\u002Flogin-user.dto\";\nimport {\n  BASEROUTES,\n  USER_TYPES,\n  KYC_VERIFICATION_STATUS,\n  USER_STATUS,\n  ROLES_ACCESS_ACTION,\n} from \"..\u002Fcommon\u002Fconstants\u002Fenum\";\nimport { JwtAuthGuard } from \"..\u002Fauth\u002Fauth.guard\";\nimport {\n  RequestUser,\n  LastUpdatedTime,\n  IdOrCodeParser,\n} from \"..\u002Fcommon\u002Futils\u002Fcontroller.decorator\";\nimport {\n  UNKNOWN_PARAM,\n  NOT_FOUND,\n  PAGE_NOT_FOUND_404,\n  NEW_PASSWORD_AND_CONFIRM_NEW_PASSWORD_ERROR,\n  USERNAME_OR_PASSWORD_INCORRECT,\n  CURRENT_PASSWORD_AND_NEW_PASSWORD_ERROR,\n  KYC_PENDING_STATUS_CHANGE_ERROR,\n  KYC_APPROVED_STATUS_CHANGE_ERROR,\n  KYC_REJECTED_STATUS_CHANGE_ERROR,\n  USER_ACTIVE_STATUS_CHANGE_ERROR,\n  USER_CLOSED_STATUS_CHANGE_ERROR,\n  USER_IN_REVIEW_STATUS_CHANGE_ERROR,\n  USER_KYC_INCOMPLETE_STATUS_CHANGE_ERROR,\n  ONLY_FOR_ADMIN,\n} from \"..\u002Fcommon\u002Fconstants\u002Fstring\";\nimport { plainToClass } from \"class-transformer\";\nimport { success } from \"..\u002Fcommon\u002Fbase\u002FhttpResponse.interface\";\nimport { AbstractClassTransformerPipe } from \"..\u002Fcommon\u002Fpipes\u002Fclass-transformer.pipe\";\nimport { normalizeObject } from \"..\u002Fcommon\u002Futils\u002Fhelper\";\nimport * as _ from \"lodash\";\nimport { InjectModel } from \"@nestjs\u002Fmongoose\";\nimport { Model } from \"mongoose\";\nimport { IUser, User } from \".\u002Fobjects\u002Fuser.schema\";\nimport { CrmService } from \".\u002Fcrm\u002Fcrm.service\";\nimport { KycPendingEmail } from \".\u002Fobjects\u002Fuser.registered.email\";\nimport { EmailDto } from \"..\u002Femail\u002Fobjects\u002Femail.dto\";\nimport { normalizePaginateResult } from \"..\u002Fcommon\u002Finterfaces\u002Fpagination\";\nimport { RolesService } from \"..\u002Froles\u002Froles.service\";\n\nconst BaseController = abstractBaseControllerFactory\u003Cany\u003E({\n  DTO: UserDto,\n  DisabledRoutes: [\n    BASEROUTES.PATCH,\n    \u002F\u002F, BASEROUTES.DETELEONE\n  ],\n});\n\n@Controller(\"users\")\nexport class UsersController extends BaseController {\n  constructor(\n    private usersService: UsersService,\n    private crmService: CrmService,\n    @InjectModel(\"User\") private readonly usersModel: Model\u003CIUser\u003E,\n    private rolesservice: RolesService\n  ) {\n    super(usersService);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get()\n  async findList(@Request() req, @Query() query, @RequestUser() user) {\n   let _user = await this.rolesservice.findOneByQuery({roleName: user.type})\n    \u002F\u002F if(user.type == USER_TYPES.OPERATIONS_TEAM){\n    let hasAccessOperations = _user.rolesAccessAction.some(\n      (e) =\u003E e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_OPERATIONS\n    );\n    let hasAccessAdmin = _user.rolesAccessAction.some(\n      (e) =\u003E e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_ADMIN\n    );\n    \n    if(hasAccessOperations) {\n      console.log('userstype', user.type, _user, hasAccessOperations, hasAccessAdmin)\n      let t = { $or: [{ type: USER_TYPES.SME }, { type: USER_TYPES.SPONSOR }] };\n      return await super.findList(req, { ...query, ...t });\n    }\n    \u002F\u002Fif (user.isAdmin) {\n      if (hasAccessAdmin){\n      \u002F\u002F \u003C--- only admin can see the user lists\n      return await super.findList(req, { ...query });\n    }\n    throw new NotFoundException();\n  }\n\n\n @UseGuards(JwtAuthGuard)\n  @Get(\":idOrCode\")\n  async findOne(\n    @IdOrCodeParser(\"idOrCode\") idOrCode: string,\n    @RequestUser() user\n  ) {\n    let _user = await this.rolesservice.findOneByQuery({roleName: user.type});\n    console.log('userstype', user.type, _user)\n    let hasAccess = _user.rolesAccessAction.some(\n      (e) =\u003E e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE\n    );\n  \n    if (hasAccess || user.code === idOrCode || user.id === idOrCode) {\n      \u002F\u002F \u003C--- only admin or the same person can view a profile\n      return await super.findOne(idOrCode);\n    }\n    throw new NotFoundException();\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Post(\"filter\u002FkycFilter\")\n  async findListFilterKYCStatus(\n    @Request() req,\n    @Query() query,\n    @RequestUser() user,\n    @Body() body: { isProfileCompleted: number }\n  ) {\n    let t = { $or: [{ type: USER_TYPES.SME }, { type: USER_TYPES.SPONSOR }] };\n    \u002F\u002Fif (user.type == USER_TYPES.ADMIN) {\n      let _user = await this.rolesservice.findOneByQuery({roleName: user.type});\n      console.log('userstype', user.type, _user)\n      let hasAccess = _user.rolesAccessAction.some(\n        (e) =\u003E e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER\n      );\n     \u002F\u002F console.log('userstype', user.type, _user, hasAccess)\n   if(hasAccess) {\n    var options = {\n        limit: 30,\n        page: 1,\n        sort: \"_id\",\n        skip: query.page ? (query.page - 1) : 0\n      };\n      \n      \u002F\u002F \u003C--- only admin and Sponsor can see all the USER lists\n      console.log(\"filterrrrrrrrrrr\", query, query.page, body.isProfileCompleted);\n     \n      let d = await this.usersModel.find(\n        { \"verification.isProfileCompleted\": body.isProfileCompleted, ...t },\n        {},\n        { sort: { _id: 1 }, skip: options.skip * options.limit, limit: options.limit, projection: {} }\n      );\n      let dCount = await this.usersModel.count(\n        { \"verification.isProfileCompleted\": body.isProfileCompleted }\n      );\n      console.log(d.length, dCount);\n      await d.map((data) =\u003E {\n        return plainToClass(UserDto, data, { excludeExtraneousValues: true });\n      });\n      let pagination = normalizePaginateResult({\n        total: dCount,\u002F\u002Fd.length,\n        limit: options.limit,\n        page: options.page,\n        pages: d.pages,\n      });\n\n      return success({ d, pagination });\n    }\n    throw new NotFoundException();\n  }\n{% endrunkit %}\nIn the 3 methods listed above, findList, findOne, findListFilterKYCStatus, we are checking if the user has access\u002Fauthorization.For the method findListFilterKYCStatus **let hasAccess = _user.rolesAccessAction.some(\n        (e) =\u003E e === ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER\n      );** , we are checking if the user has **ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER** listed in his roles Schema as shown below in the file.Here, only users of type **USER_TYPES.OPERATIONS_TEAM** and **USER_TYPES.ADMIN** have the permissions and only they are allowed access to the findListFilterKYCStatus() method. \nCode (Part-III):\n*src\u002Froles\u002Froles.controller.ts*\n{% runkit\n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n%}\nimport { RolesDto, CreateRolesDto } from '.\u002Fobjects\u002Froles.dto';\nimport { abstractBaseControllerFactory } from '..\u002Fcommon\u002Fbase\u002Fbase.controller';\nimport { BASEROUTES, USER_TYPES, ROLES_ACCESS_ACTION } from '..\u002Fcommon\u002Fconstants\u002Fenum';\nimport { RolesService } from '.\u002Froles.service';\nimport { JwtAuthGuard } from '..\u002Fauth\u002Fauth.guard';\nimport {\n  Controller,\n  Get,\n  UseGuards,\n  Request,\n  Query,\n  Put,\n  Body,\n  Post,\n  BadRequestException,\n  NotFoundException,\n  Delete,\n} from \"@nestjs\u002Fcommon\";\nimport { AbstractClassTransformerPipe } from '..\u002Fcommon\u002Fpipes\u002Fclass-transformer.pipe';\nimport { RequestUser } from '..\u002Fcommon\u002Futils\u002Fcontroller.decorator';\nimport { plainToClass } from 'class-transformer';\nimport { success } from '..\u002Fcommon\u002Fbase\u002FhttpResponse.interface';\n\n\nconst BaseController = abstractBaseControllerFactory\u003Cany\u003E({\n    DTO: RolesDto,\n    \u002F\u002FTodo: Remove after creating records in Db.\n    CreateDTO: CreateRolesDto,\n    DisabledRoutes: [\n      \u002F\u002FTodo: Uncomment BASEROUTES.CREATE after creating records in Db.\n      \u002F\u002F BASEROUTES.CREATE,\n     \u002F\u002F BASEROUTES.DETELEONE,\n  \n      BASEROUTES.PATCH,\n     \u002F\u002F BASEROUTES.UPDATEONE,\n    ],\n  });\n\n@UseGuards(JwtAuthGuard)\n@Controller('roles')\nexport class RolesController extends BaseController {\n    constructor(private rolesservice: RolesService) {\n        super(rolesservice);\n      }\n      @Post()\n      public async create(\n        @Request() req,\n        @Body(AbstractClassTransformerPipe(CreateRolesDto)) body: any,\n        @Query() query,\n        @RequestUser() user\n      ) {\n         switch(body.roleName){\n           case USER_TYPES.ADMIN:\n             body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_ADMIN,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_STATUS_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_UPDATE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_DELETE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CREATE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE_TRANSACTION\n             ];\n             break;\n           case USER_TYPES.OPERATIONS_TEAM:\n            body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FINDLIST_OPERATIONS,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_FIND_ONE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_KYC_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_STATUS_FILTER,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_USER_UPDATE,\n              ROLES_ACCESS_ACTION.USERS_CONTROLLER_DELETE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CHECK_FOR_UPDATE_STATUS_ERROR,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_CREATE,\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_COMPLETE_BID_PROCESS,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_REJECT_ALL_BIDS_DELETE_PROJECT,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE_TRANSACTION\n            ];\n             break;\n           case USER_TYPES.SME:\n            body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST_SME,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST_SME\n            ];\n           \n             break;\n           case USER_TYPES.SPONSOR:\n            body.rolesAccessAction = [\n              ROLES_ACCESS_ACTION.USERS_SERVICE_UPDATE_USER_CRMID_AND_ENTITYDETAILCODE,\n              ROLES_ACCESS_ACTION.REMARKS_CONTROLLER_FINDLIST_SPONSOR,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDLIST,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_FINDONE,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_RECOMMENDED_PROJECTS,\n              ROLES_ACCESS_ACTION.SME_PROJECT_CONTROLLER_SPONSOR_FILTER,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_FINDLIST_SPONSOR,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_CREATE,\n              ROLES_ACCESS_ACTION.BID_DETAILS_CONTROLLER_UPDATE_SPONSOR,\n              ROLES_ACCESS_ACTION.BID_DETAILS_SERVICE_CALCULATE_BID_DETAILS\n            ];\n             break; \n          } \n          let roles =  await this.rolesservice.create(body);\n          const _data = plainToClass(RolesDto, roles, { excludeExtraneousValues: true });\n          return success(_data);\n      }\n}\n\n{% endrunkit %}\nThe role's permissions are stored in the backend (MongoDB)\nCode (Part-IV):\n*src\u002Froles\u002Fobjects\u002Froles.schema.ts*\n{% runkit\n\u002F\u002F hidden setup JavaScript code goes in this preamble area\nconst hiddenVar = 42\n%}\nimport { Schema } from \"mongoose\";\nimport { createModel, Entity, IEntity } from \"..\u002F..\u002Fcommon\u002Fbase\u002Fbase.model\";\n\nexport class Roles extends Entity {\n  roleName: string;\n  roleCode: string;\n  type: string;\n  rolesAccessAction: string[];\n}\n\nexport interface IRoles extends Roles, IEntity {\n  id: string;\n}\n\nexport const RolesSchema: Schema = createModel(\"AdminRoles\", {\n  roleName: { type: String, required: true },\n  roleCode: { type: String, required: true },\n  type: { type: String, required: true},\n  rolesAccessAction: [\n    {\n      type: String,\n    },\n  ]\n});\n{% endrunkit %}\nThis is how custom role based access is implemented without any 3rd party libraries.\nSource code: [Link] https:\u002F\u002Fgitlab.com\u002Fadh.ranjan\u002Fnestjs",user:{name:"Krishna Kurtakoti",username:e,twitter_username:"KurtakotiG",github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--StOVj_13--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F376617\u002Fa80c611f-bcdc-47de-a558-eff950ef49a0.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rusPqhB8--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F376617\u002Fa80c611f-bcdc-47de-a558-eff950ef49a0.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkrishnakurtakoti\u002F502582",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2020-10-31T06:47:16Z","https:\u002F\u002Fdev.to\u002Fkrishnakurtakoti\u002Fcustom-role-based-access-in-nest-js-mongodb-5b3b",7,"krishnakurtakoti"));
window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:675942,title:"Site Reliability Engineering (SRE) Best Practices",description:"What is Site Reliability Engineering (SRE)?   The site reliability engineering (SRE) conce...",readable_publish_date:"Apr 23",slug:"site-reliability-engineering-sre-best-practices-1e5e",path:"\u002Finfracloud\u002Fsite-reliability-engineering-sre-best-practices-1e5e",url:"https:\u002F\u002Fdev.to\u002Finfracloud\u002Fsite-reliability-engineering-sre-best-practices-1e5e",comments_count:1,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F675942.png",canonical_url:"https:\u002F\u002Fwww.infracloud.io\u002Fblogs\u002Fsre-best-practices\u002F",created_at:b,edited_at:"2021-04-23T06:43:32Z",crossposted_at:a,published_at:b,last_comment_at:"2021-04-23T15:37:10Z",reading_time_minutes:8,tag_list:"sre, devops, systems",tags:["sre","devops","systems"],body_html:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BBpk52Gd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjie5qtei8pjafbfvpuxd.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BBpk52Gd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjie5qtei8pjafbfvpuxd.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-is-site-reliability-engineering-sre\" href=\"#what-is-site-reliability-engineering-sre\"\u003E\n  \u003C\u002Fa\u003E\n  What is Site Reliability Engineering (SRE)?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe site reliability engineering (SRE) concept originated at Google. The idea is closely related to the principles of DevOps. It’s an approach to IT operations. SRE teams use the software to manage systems, solve problems, and automate operations tasks.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESRE teams take the tasks that IT operations teams have done, often manually, and instead give them to engineers or ops teams who use tools and automation to solve problems and manage production systems.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s a valuable practice while creating scalable and highly reliable software systems. It helps organizations manage massive infrastructure through code, which is more scalable and sustainable for system admins managing hundreds of thousands of machines.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"why-is-sre-important-and-what-makes-a-good-sre-team\" href=\"#why-is-sre-important-and-what-makes-a-good-sre-team\"\u003E\n  \u003C\u002Fa\u003E\n  Why is SRE Important? And What Makes a Good SRE Team?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESRE acts like a bridge between software engineering and IT operations and fills the gap between them. Pretty much everywhere, SRE comes into play when it comes to preparing for failures in production systems. It ensures that the organization’s systems are scalable, reliable, predictable, and automated. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESRE also sets Service Level Indicators (SLIs), Service Level Objectives (SLOs), Service Level Agreement (SLA) that defines the real numbers on performance, the objectives your team must hit to meet that agreement, and how reliable the systems need to be for the end-users.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe primary goal of SRE is to improve performance and operational efficiency.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, an SRE is not just \"an ops person who codes.\" Instead, the SRE is another member of the development team with a different set of skills, particularly around deployment, configuration management, monitoring, metrics, etc. Just as an engineer developing a nice look and feel for an application must know how data is fetched from a data store, an SRE is not solely responsible for these areas. The entire team works together to deliver a product that can be easily updated, managed, and monitored.\u003Cbr\u003E\nThe need for a site reliability engineer naturally comes about when a team is implementing DevOps, but realizes they are asking too much of the developers and need a specialist for what the ops team used to handle.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore we dig deeper into SRE and how SREs work with the development team, we need to understand how site reliability engineering functions within the DevOps paradigm.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"how-sre-works-with-devops\" href=\"#how-sre-works-with-devops\"\u003E\n  \u003C\u002Fa\u003E\n  How SRE Works with DevOps?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAt its core, site reliability engineering is an implementation of the DevOps paradigm. Just as continuous integration and continuous delivery are applications of DevOps principles to software release, SRE is an application of these same principles to software reliability.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere are a wide variety of ways to define DevOps. Still, the traditional model is where the development (“devs”) and operations (“ops”) teams are separated, leading to the team that writes code not being responsible for how it works when customers start using it. The development team would “throw the code over the wall” to the operations team to install and support.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAccording to Google’s approach, you can use SRE to adopt DevOps principles in the organization better and measure your implementation’s success.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo better understand how to combine the two, consider the following principles:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EReduce organizational silos\u003C\u002Fstrong\u003E: SRE helps by sharing ownership across developers and operations teams. This is one of the main principles of a DevOps philosophy. When SREs focus on improving the detection of issues and applications’ performance, operations teams can focus on managing infrastructure, and developers can focus on feature improvements.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EAccept failure as normal\u003C\u002Fstrong\u003E: Like DevOps, SREs don’t pass the blame for failures and production incidents between the IT teams. No-blame postmortems are an SRE best practice that ensures that all incidents are used as learning opportunities. When the possibility of failure is normalized, teams can take more significant risks, potentially leading to greater innovations without fear of excessive setbacks or downtime.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EImplement gradual change\u003C\u002Fstrong\u003E: Like DevOps, SRE also encourages continuous improvement through change. SRE requires the changes to be small and frequent. As a result, any negative repercussions are less impactful, and low-risk enhancements can be readily tested and implemented. \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELeveraging tooling and automation\u003C\u002Fstrong\u003E: While DevOps encourages automation and technology adoption, SRE is focused on embracing consistent technologies and information access across the IT teams. This makes it easier to manage operations and reduces the chance of issues created by technological incompatibilities. This standardization also helps ensure that members across a team can collaborate better since tooling is uniform and is less likely to require specialized skill sets that some members lack.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMeasure everything\u003C\u002Fstrong\u003E: SRE combines metrics with feedback loops to measure operations and identify opportunities for improvement. It also builds in slack for risk and manual operations as needed, making it more predictable through measurement. By applying metrics data, teams can set appropriate targets while maintaining reasonable expectations of performance. \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENow that we know why SRE is important let’s move on to the SRE best practices you must follow while embracing the SRE culture.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"sre-best-practices\" href=\"#sre-best-practices\"\u003E\n  \u003C\u002Fa\u003E\n  SRE Best Practices\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhen implementing SRE, it may take you some time to refine your strategy and customize practices to meet your operational needs. To help speed up this process, consider the following SRE principles and best practices.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"1-error-budgets\" href=\"#1-error-budgets\"\u003E\n  \u003C\u002Fa\u003E\n  1. Error Budgets\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIn a nutshell, an error budget is the amount of error that your service can accumulate over a certain period of time before your users start being unhappy. You can think of it as the pain tolerance for your users but applied to a particular dimension of your service: availability, latency, and so forth.\u003Cbr\u003E\nTo calculate the error budget, we have to use the SLI equation:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003ESLI = [Good events \u002F Valid events] x 100\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow the percentage is expressed as SLI, and once you define an objective for each of those SLIs, that is your service-level objective (SLO), and the error budget is the remainder, up to 100.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, imagine that you’re measuring the availability of your home page. The availability is measured by the number of requests responded with an error, divided by all the valid requests the home page receives, expressed as a percentage. If you decide that the objective of that availability is  99.9%, the error budget is 0.1%. You can serve up to 0.1% of errors (preferably a bit less than 0.1%), and users will happily continue using the service.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETake a look at this table to see how percentage converts to time:\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EReliability level\u003C\u002Fth\u003E\n\u003Cth\u003EPer year\u003C\u002Fth\u003E\n\u003Cth\u003EPer quarter\u003C\u002Fth\u003E\n\u003Cth\u003EPer 30 days\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E90%\u003C\u002Ftd\u003E\n\u003Ctd\u003E36.5 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E9 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E3 days\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E95%\u003C\u002Ftd\u003E\n\u003Ctd\u003E18.25 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E4.5 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E1.5 days\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99%\u003C\u002Ftd\u003E\n\u003Ctd\u003E3.65 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E21.6 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E7.2 hours\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99.5%\u003C\u002Ftd\u003E\n\u003Ctd\u003E1.83 days\u003C\u002Ftd\u003E\n\u003Ctd\u003E10.8 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E3.6 hours\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99.9%\u003C\u002Ftd\u003E\n\u003Ctd\u003E8.76 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E2.16 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E43.2 minutes\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99.95%\u003C\u002Ftd\u003E\n\u003Ctd\u003E4.38 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E1.08 hours\u003C\u002Ftd\u003E\n\u003Ctd\u003E21.6 minutes\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99.99%\u003C\u002Ftd\u003E\n\u003Ctd\u003E52.6 minutes\u003C\u002Ftd\u003E\n\u003Ctd\u003E12.96 minutes\u003C\u002Ftd\u003E\n\u003Ctd\u003E4.32 minutes\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E99.999%\u003C\u002Ftd\u003E\n\u003Ctd\u003E5.26 minutes\u003C\u002Ftd\u003E\n\u003Ctd\u003E1.30 minutes\u003C\u002Ftd\u003E\n\u003Ctd\u003E25.9 seconds\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EAt first glance, error budgets don’t seem that important. They’re just another metric IT and DevOps need to track to make sure everything’s running smoothly, right?\u003Cbr\u003E\nThe answer, fortunately, is no. Error budgets aren’t just a convenient way to make sure you’re meeting contractual promises. The new updates are usually frozen if the team exhaust their error budget for a particular quarter. They’re also an opportunity for development teams to innovate and take risks. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"2-define-slos-like-a-user\" href=\"#2-define-slos-like-a-user\"\u003E\n  \u003C\u002Fa\u003E\n  2. Define SLOs Like a User\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EMeasure availability and performance in terms that matter to an end-user. Service Level Objectives or SLOs are the fundamental basis of all Site Reliability Engineering. You can’t have error budgets, prioritize development work, or do timely and effective incident management without them.\u003Cbr\u003E\nSLOs should specify how they’re measured and the conditions under which they’re valid. Read more about Service Level Objectives \u003Ca href=\"https:\u002F\u002Fsre.google\u002Fsre-book\u002Fservice-level-objectives\u002F\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EService Level Indicators (SLIs)\u003C\u002Fstrong\u003E: A carefully defined quantitative measure of some aspect of the level of service provided, such as throughput, latency. It also:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDirectly measurable &amp; observable by the users.\u003C\u002Fli\u003E\n\u003Cli\u003EThis could represent the user’s experience.\u003C\u002Fli\u003E\n\u003Cli\u003EIn simple words, this talks about what exactly you are going to measure.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EService Level Objectives (SLOs)\u003C\u002Fstrong\u003E: A target value or range of values for a service level measured by SLI. It also:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDefines how the service should perform from the perspective of the user (measured via SLI). In simple words, how good should services be? A threshold beyond which an improvement of the service is required.\u003C\u002Fli\u003E\n\u003Cli\u003EThe point at which the users may consider opening up a support ticket.\u003C\u002Fli\u003E\n\u003Cli\u003EDriven by business requirements, not just current performance.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EService Level Agreements (SLAs)\u003C\u002Fstrong\u003E: SLAs are:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EA business contract to provide a customer some form of compensation if the service did not meet expectations.\u003C\u002Fli\u003E\n\u003Cli\u003EIn simple words, SLO + consequences.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"3-monitoring-errors-and-availability\" href=\"#3-monitoring-errors-and-availability\"\u003E\n  \u003C\u002Fa\u003E\n  3. Monitoring Errors and Availability\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETo identify performance errors and maintain service availability, SRE teams need to see what’s going on in their systems. Monitoring is required to verify an application\u002Fsystem is behaving as expected. This means a service, meeting specific goals, and understanding what happens when a change is made. Moreover, we want to know before the customer.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"4-efficiently-planning-capacity\" href=\"#4-efficiently-planning-capacity\"\u003E\n  \u003C\u002Fa\u003E\n  4. Efficiently Planning Capacity\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOrganizations need to plan for things like organic growth, which could be increased product adoptions, inorganic growth, which comes from sudden jumps in demand due to feature launches, marketing campaigns, etc. That will consume more resources (like outages on Black Friday or Cyber Monday). To prepare for these events, you’ll need to forecast the demand and plan time for acquisition.\u003C\u002Fp\u003E\n\n\u003Cp\u003EImportant facets of capacity planning include regular load testing and accurate provisioning. Regular load testing allows you to see how your system operates under the average strain of daily users. Also, adding capacity in any form can be expensive, so knowing where you need additional resources is the key.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"5-paying-attention-to-change-management\" href=\"#5-paying-attention-to-change-management\"\u003E\n  \u003C\u002Fa\u003E\n  5. Paying Attention to Change Management\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAt many organizations, most outages are caused by changes to a live system, whether that’s going to a new binary push or a new configuration push.\u003Cbr\u003E\nEvery little change impacts the business. Therefore, analyze each change for the risk it carries. It should be supervised. Consider the impact of the long haul changes by seeing the big picture, not just how they can affect the system today.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo ensure that nothing unexpected occurs during the change, it must be monitored either by the engineer performing the rollout stage or preferably a demonstrably reliable monitoring system. If unexpected behavior is detected, roll back first and diagnose afterward to minimize Mean Time to Recovery (MTTR).\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"6-blameless-postmortem\" href=\"#6-blameless-postmortem\"\u003E\n  \u003C\u002Fa\u003E\n  6. Blameless Postmortem\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EA truly blameless postmortem culture helps to build a more reliable system in organizations. Postmortems should be blameless and focus on process and technology, not people.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAssume the people involved in an incident are intelligent, are well-intentioned, and were making the best choices they could given the information they had available at the time. Pinning an incident on one person or a group of people is counterproductive. It creates an environment where people are afraid to take risks, innovate, and problem solve.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFailures will happen. There’s no way around it. But, by having a good incident resolution and retrospective practice in place, failures can be beneficial. It uncovers areas to focus on to improve resiliency. As long as you learn from an incident, you’ve made progress.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"7-toil-management\" href=\"#7-toil-management\"\u003E\n  \u003C\u002Fa\u003E\n  7. Toil Management\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOne of the main focuses of SRE is automation. Toil is a waste of precious engineering time, and by SREs creating frameworks, processes, internal tooling\u002Fbuilding tooling to eliminate it, engineers can get back to innovating.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis blog post attempted to cover the fundamental concepts and practices required to build a successful SRE team. If you’re planning to adopt SRE culture in your project\u002Forganization, train your team, follow the best practices, and trust the process. You won’t achieve 100% perfection. That’s a myth. But you will make things a lot streamlined  and get as close to perfection as possible.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHope this blog post was helpful to you. Please let us know your thoughts in the comments below. Start a conversation on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Finfracloudio\"\u003ETwitter\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fwww.linkedin.com\u002Fcompany\u002Finfracloudio\u002F\"\u003ELinkedIn\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"references\" href=\"#references\"\u003E\n  \u003C\u002Fa\u003E\n  References\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsre.google\u002Fsre-book\u002Fservice-best-practices\u002F\"\u003Ehttps:\u002F\u002Fsre.google\u002Fsre-book\u002Fservice-best-practices\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fopensource.com\u002Farticle\u002F18\u002F10\u002Fsre-startup\"\u003Ehttps:\u002F\u002Fopensource.com\u002Farticle\u002F18\u002F10\u002Fsre-startup\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fstackpulse.com\u002Fblog\u002Fsite-reliability-engineering-sre-what-why-and-5-best-practices\u002F\"\u003Ehttps:\u002F\u002Fstackpulse.com\u002Fblog\u002Fsite-reliability-engineering-sre-what-why-and-5-best-practices\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.usenix.org\u002Fblog\u002Fwhat-is-sre-how-does-it-relate-to-devops-lisa18\"\u003Ehttps:\u002F\u002Fwww.usenix.org\u002Fblog\u002Fwhat-is-sre-how-does-it-relate-to-devops-lisa18\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.bmc.com\u002Fblogs\u002Fsre-vs-devops\u002F\"\u003Ehttps:\u002F\u002Fwww.bmc.com\u002Fblogs\u002Fsre-vs-devops\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fcloud.google.com\u002Fblog\u002Fproducts\u002Fmanagement-tools\u002Fsre-error-budgets-and-maintenance-windows\"\u003Ehttps:\u002F\u002Fcloud.google.com\u002Fblog\u002Fproducts\u002Fmanagement-tools\u002Fsre-error-budgets-and-maintenance-windows\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.atlassian.com\u002Fincident-management\u002Fkpis\u002Ferror-budget\"\u003Ehttps:\u002F\u002Fwww.atlassian.com\u002Fincident-management\u002Fkpis\u002Ferror-budget\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdevopsinstitute.com\u002Fchoosing-the-right-service-level-indicators\u002F\"\u003Ehttps:\u002F\u002Fdevopsinstitute.com\u002Fchoosing-the-right-service-level-indicators\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.observability.splunk.com\u002Fen_us\u002Finfrastructure-monitoring\u002Fguide-to-sre-and-the-four-golden-signals-of-monitoring.html\"\u003Ehttps:\u002F\u002Fwww.observability.splunk.com\u002Fen_us\u002Finfrastructure-monitoring\u002Fguide-to-sre-and-the-four-golden-signals-of-monitoring.html\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.enov8.com\u002Fblog\u002Fsite-reliability-engineering-sre-top-10-best-practice\u002F\"\u003Ehttps:\u002F\u002Fwww.enov8.com\u002Fblog\u002Fsite-reliability-engineering-sre-top-10-best-practice\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.blameless.com\u002Fblog\u002F5-best-practices-nailing-postmortems\"\u003Ehttps:\u002F\u002Fwww.blameless.com\u002Fblog\u002F5-best-practices-nailing-postmortems\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n",body_markdown:"![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjie5qtei8pjafbfvpuxd.png)\n\n## What is Site Reliability Engineering (SRE)?\n\nThe site reliability engineering (SRE) concept originated at Google. The idea is closely related to the principles of DevOps. It’s an approach to IT operations. SRE teams use the software to manage systems, solve problems, and automate operations tasks.\n\nSRE teams take the tasks that IT operations teams have done, often manually, and instead give them to engineers or ops teams who use tools and automation to solve problems and manage production systems.\n\nIt’s a valuable practice while creating scalable and highly reliable software systems. It helps organizations manage massive infrastructure through code, which is more scalable and sustainable for system admins managing hundreds of thousands of machines.\n## Why is SRE Important? And What Makes a Good SRE Team?\n\nSRE acts like a bridge between software engineering and IT operations and fills the gap between them. Pretty much everywhere, SRE comes into play when it comes to preparing for failures in production systems. It ensures that the organization’s systems are scalable, reliable, predictable, and automated. \n\nSRE also sets Service Level Indicators (SLIs), Service Level Objectives (SLOs), Service Level Agreement (SLA) that defines the real numbers on performance, the objectives your team must hit to meet that agreement, and how reliable the systems need to be for the end-users.\n\nThe primary goal of SRE is to improve performance and operational efficiency.\n\nSo, an SRE is not just \"an ops person who codes.\" Instead, the SRE is another member of the development team with a different set of skills, particularly around deployment, configuration management, monitoring, metrics, etc. Just as an engineer developing a nice look and feel for an application must know how data is fetched from a data store, an SRE is not solely responsible for these areas. The entire team works together to deliver a product that can be easily updated, managed, and monitored.\nThe need for a site reliability engineer naturally comes about when a team is implementing DevOps, but realizes they are asking too much of the developers and need a specialist for what the ops team used to handle.\n\nBefore we dig deeper into SRE and how SREs work with the development team, we need to understand how site reliability engineering functions within the DevOps paradigm.\n\n## How SRE Works with DevOps?\n\nAt its core, site reliability engineering is an implementation of the DevOps paradigm. Just as continuous integration and continuous delivery are applications of DevOps principles to software release, SRE is an application of these same principles to software reliability.\n\nThere are a wide variety of ways to define DevOps. Still, the traditional model is where the development (“devs”) and operations (“ops”) teams are separated, leading to the team that writes code not being responsible for how it works when customers start using it. The development team would “throw the code over the wall” to the operations team to install and support.\n\nAccording to Google’s approach, you can use SRE to adopt DevOps principles in the organization better and measure your implementation’s success.\n\nTo better understand how to combine the two, consider the following principles:\n\n* **Reduce organizational silos**: SRE helps by sharing ownership across developers and operations teams. This is one of the main principles of a DevOps philosophy. When SREs focus on improving the detection of issues and applications’ performance, operations teams can focus on managing infrastructure, and developers can focus on feature improvements.\n* **Accept failure as normal**: Like DevOps, SREs don’t pass the blame for failures and production incidents between the IT teams. No-blame postmortems are an SRE best practice that ensures that all incidents are used as learning opportunities. When the possibility of failure is normalized, teams can take more significant risks, potentially leading to greater innovations without fear of excessive setbacks or downtime.\n* **Implement gradual change**: Like DevOps, SRE also encourages continuous improvement through change. SRE requires the changes to be small and frequent. As a result, any negative repercussions are less impactful, and low-risk enhancements can be readily tested and implemented. \n* **Leveraging tooling and automation**: While DevOps encourages automation and technology adoption, SRE is focused on embracing consistent technologies and information access across the IT teams. This makes it easier to manage operations and reduces the chance of issues created by technological incompatibilities. This standardization also helps ensure that members across a team can collaborate better since tooling is uniform and is less likely to require specialized skill sets that some members lack.\n* **Measure everything**: SRE combines metrics with feedback loops to measure operations and identify opportunities for improvement. It also builds in slack for risk and manual operations as needed, making it more predictable through measurement. By applying metrics data, teams can set appropriate targets while maintaining reasonable expectations of performance. \n\nNow that we know why SRE is important let’s move on to the SRE best practices you must follow while embracing the SRE culture.\n\n## SRE Best Practices\n\nWhen implementing SRE, it may take you some time to refine your strategy and customize practices to meet your operational needs. To help speed up this process, consider the following SRE principles and best practices.\n\n### 1. Error Budgets\n\nIn a nutshell, an error budget is the amount of error that your service can accumulate over a certain period of time before your users start being unhappy. You can think of it as the pain tolerance for your users but applied to a particular dimension of your service: availability, latency, and so forth.\nTo calculate the error budget, we have to use the SLI equation:\n```\nSLI = [Good events \u002F Valid events] x 100\n```\nNow the percentage is expressed as SLI, and once you define an objective for each of those SLIs, that is your service-level objective (SLO), and the error budget is the remainder, up to 100.\n\nFor example, imagine that you’re measuring the availability of your home page. The availability is measured by the number of requests responded with an error, divided by all the valid requests the home page receives, expressed as a percentage. If you decide that the objective of that availability is  99.9%, the error budget is 0.1%. You can serve up to 0.1% of errors (preferably a bit less than 0.1%), and users will happily continue using the service.\n\nTake a look at this table to see how percentage converts to time:\n\n|Reliability level|Per year|Per quarter|Per 30 days|\n|-|-|-|-|\n|90%|36.5 days|9 days|3 days|\n|95%|18.25 days|4.5 days|1.5 days|\n|99%|3.65 days|21.6 hours|7.2 hours|\n|99.5%|1.83 days|10.8 hours|3.6 hours|\n|99.9%|8.76 hours|2.16 hours|43.2 minutes|\n|99.95%|4.38 hours|1.08 hours|21.6 minutes|\n|99.99%|52.6 minutes|12.96 minutes|4.32 minutes|\n|99.999%|5.26 minutes|1.30 minutes|25.9 seconds|\n\nAt first glance, error budgets don’t seem that important. They’re just another metric IT and DevOps need to track to make sure everything’s running smoothly, right?\nThe answer, fortunately, is no. Error budgets aren’t just a convenient way to make sure you’re meeting contractual promises. The new updates are usually frozen if the team exhaust their error budget for a particular quarter. They’re also an opportunity for development teams to innovate and take risks. \n\n### 2. Define SLOs Like a User\n\nMeasure availability and performance in terms that matter to an end-user. Service Level Objectives or SLOs are the fundamental basis of all Site Reliability Engineering. You can’t have error budgets, prioritize development work, or do timely and effective incident management without them.\nSLOs should specify how they’re measured and the conditions under which they’re valid. Read more about Service Level Objectives [here](https:\u002F\u002Fsre.google\u002Fsre-book\u002Fservice-level-objectives\u002F).\n\n**Service Level Indicators (SLIs)**: A carefully defined quantitative measure of some aspect of the level of service provided, such as throughput, latency. It also:\n  * Directly measurable & observable by the users.\n  * This could represent the user’s experience.\n  * In simple words, this talks about what exactly you are going to measure.\n\n**Service Level Objectives (SLOs)**: A target value or range of values for a service level measured by SLI. It also:\n  * Defines how the service should perform from the perspective of the user (measured via SLI). In simple words, how good should services be? A threshold beyond which an improvement of the service is required.\n  * The point at which the users may consider opening up a support ticket.\n  * Driven by business requirements, not just current performance.\n\n**Service Level Agreements (SLAs)**: SLAs are:\n  * A business contract to provide a customer some form of compensation if the service did not meet expectations.\n  * In simple words, SLO + consequences.\n\n### 3. Monitoring Errors and Availability\n\nTo identify performance errors and maintain service availability, SRE teams need to see what’s going on in their systems. Monitoring is required to verify an application\u002Fsystem is behaving as expected. This means a service, meeting specific goals, and understanding what happens when a change is made. Moreover, we want to know before the customer.\n\n### 4. Efficiently Planning Capacity\n\nOrganizations need to plan for things like organic growth, which could be increased product adoptions, inorganic growth, which comes from sudden jumps in demand due to feature launches, marketing campaigns, etc. That will consume more resources (like outages on Black Friday or Cyber Monday). To prepare for these events, you’ll need to forecast the demand and plan time for acquisition.\n\nImportant facets of capacity planning include regular load testing and accurate provisioning. Regular load testing allows you to see how your system operates under the average strain of daily users. Also, adding capacity in any form can be expensive, so knowing where you need additional resources is the key.\n\n### 5. Paying Attention to Change Management\n\nAt many organizations, most outages are caused by changes to a live system, whether that’s going to a new binary push or a new configuration push.\nEvery little change impacts the business. Therefore, analyze each change for the risk it carries. It should be supervised. Consider the impact of the long haul changes by seeing the big picture, not just how they can affect the system today.\n\nTo ensure that nothing unexpected occurs during the change, it must be monitored either by the engineer performing the rollout stage or preferably a demonstrably reliable monitoring system. If unexpected behavior is detected, roll back first and diagnose afterward to minimize Mean Time to Recovery (MTTR).\n\n### 6. Blameless Postmortem\n\nA truly blameless postmortem culture helps to build a more reliable system in organizations. Postmortems should be blameless and focus on process and technology, not people.\n\nAssume the people involved in an incident are intelligent, are well-intentioned, and were making the best choices they could given the information they had available at the time. Pinning an incident on one person or a group of people is counterproductive. It creates an environment where people are afraid to take risks, innovate, and problem solve.\n\nFailures will happen. There’s no way around it. But, by having a good incident resolution and retrospective practice in place, failures can be beneficial. It uncovers areas to focus on to improve resiliency. As long as you learn from an incident, you’ve made progress.\n\n### 7. Toil Management\n\nOne of the main focuses of SRE is automation. Toil is a waste of precious engineering time, and by SREs creating frameworks, processes, internal tooling\u002Fbuilding tooling to eliminate it, engineers can get back to innovating.\n\n## Conclusion\n\nThis blog post attempted to cover the fundamental concepts and practices required to build a successful SRE team. If you’re planning to adopt SRE culture in your project\u002Forganization, train your team, follow the best practices, and trust the process. You won’t achieve 100% perfection. That’s a myth. But you will make things a lot streamlined  and get as close to perfection as possible.\n\nHope this blog post was helpful to you. Please let us know your thoughts in the comments below. Start a conversation on [Twitter](https:\u002F\u002Ftwitter.com\u002Finfracloudio) and [LinkedIn](https:\u002F\u002Fwww.linkedin.com\u002Fcompany\u002Finfracloudio\u002F)\n\n### References\n* https:\u002F\u002Fsre.google\u002Fsre-book\u002Fservice-best-practices\u002F\n* https:\u002F\u002Fopensource.com\u002Farticle\u002F18\u002F10\u002Fsre-startup\n* https:\u002F\u002Fstackpulse.com\u002Fblog\u002Fsite-reliability-engineering-sre-what-why-and-5-best-practices\u002F\n* https:\u002F\u002Fwww.usenix.org\u002Fblog\u002Fwhat-is-sre-how-does-it-relate-to-devops-lisa18\n* https:\u002F\u002Fwww.bmc.com\u002Fblogs\u002Fsre-vs-devops\u002F\n* https:\u002F\u002Fcloud.google.com\u002Fblog\u002Fproducts\u002Fmanagement-tools\u002Fsre-error-budgets-and-maintenance-windows\n* https:\u002F\u002Fwww.atlassian.com\u002Fincident-management\u002Fkpis\u002Ferror-budget\n* https:\u002F\u002Fdevopsinstitute.com\u002Fchoosing-the-right-service-level-indicators\u002F\n* https:\u002F\u002Fwww.observability.splunk.com\u002Fen_us\u002Finfrastructure-monitoring\u002Fguide-to-sre-and-the-four-golden-signals-of-monitoring.html\n* https:\u002F\u002Fwww.enov8.com\u002Fblog\u002Fsite-reliability-engineering-sre-top-10-best-practice\u002F\n* https:\u002F\u002Fwww.blameless.com\u002Fblog\u002F5-best-practices-nailing-postmortems\n\n",user:{name:"Rayan Das",username:"rayandas",twitter_username:a,github_username:"ryand91",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZsHHtOay--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F255393\u002F1288b26c-f0ea-4dc9-8b42-1277346f889f.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OgsiXBNR--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F255393\u002F1288b26c-f0ea-4dc9-8b42-1277346f889f.jpeg"},organization:{name:"InfraCloud Technologies",username:d,slug:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--JWLVHedr--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2341\u002Fce0cd413-808c-4464-bb0a-ffa4ca2b8558.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--H-a56GR4--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2341\u002Fce0cd413-808c-4464-bb0a-ffa4ca2b8558.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Frayandas\u002F675942",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-23T06:35:56Z",24,"infracloud"));
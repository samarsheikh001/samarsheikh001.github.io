window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:702452,title:"Introduction to Big O notation and Time Complexity in JavaScript",description:"Big O notation and time complexity are fundamental concepts in computer science.",readable_publish_date:"May 20",slug:"introduction-to-big-o-notation-and-time-complexity-in-javascript-2m5j",path:"\u002Fwnxn\u002Fintroduction-to-big-o-notation-and-time-complexity-in-javascript-2m5j",url:b,comments_count:2,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ItLGONbB--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F56a7pf3j2ojpywz8exjr.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5DAM_DXc--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F56a7pf3j2ojpywz8exjr.png",canonical_url:b,created_at:"2021-05-19T04:44:41Z",edited_at:"2021-06-03T10:01:36Z",crossposted_at:a,published_at:d,last_comment_at:"2021-05-23T05:18:04Z",reading_time_minutes:7,tag_list:"computerscience, algorithms, datastructures, javascript",tags:["computerscience","algorithms","datastructures","javascript"],body_html:"\u003Ch1\u003E\n  \u003Ca name=\"table-of-contents\" href=\"#table-of-contents\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Contents\n\u003C\u002Fh1\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"#whatisbigo\"\u003EWhat's Big O\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#timecomplexity\"\u003ETime Complexity\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#rules\"\u003EThe Rule Book of Big O\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#summary\"\u003ESummary\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"whats-big-o\" href=\"#whats-big-o\"\u003E\n  \u003C\u002Fa\u003E\n  What's Big O? \u003Ca name=\"whatisbigo\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EBig O notation and time complexity are fundamental concepts in computer science.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBig O is a way of describing the efficiency of algorithms without getting too mired in the details. It describes how the time (or the number of operations needed) it takes to run grows as the size of the input grows.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EBig O notation helps us answer the question, \"How do our functions or algorithms behave\u002Fscale when the size of the inputs increases significantly?\"\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThe idea here is that we care about things with a difference in an order of magnitude. For example, given the same amount of inputs, I don't really care if my algorithm runs for 100ms versus 105ms, we care if it runs for 100ms vs 10 seconds (a large, noticeable difference).\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen measuring Big O, we just take the important stuff. For example, O(4+2n) can just be simplified to O(n), we can take away the 'minor details' such as the constant + 4 and even the coefficient, which don't make a lot of difference when things are in large scale. \u003C\u002Fp\u003E\n\n\u003Cp\u003EI like to think of Big O as a tool in the back of my mind that helps me grasp the \"Big Picture\", giving an idea of how efficient the code or algorithms are.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1ZEp0eRr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvgjoxb9gdq6dvyqaq2wp.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1ZEp0eRr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvgjoxb9gdq6dvyqaq2wp.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EBig-O Complexity Chart from \u003Ca href=\"https:\u002F\u002Fwww.bigocheatsheet.com\u002F\"\u003EBig-O Cheat Sheet\u003C\u002Fa\u003E\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"time-complexity\" href=\"#time-complexity\"\u003E\n  \u003C\u002Fa\u003E\n  Time complexity \u003Ca name=\"timecomplexity\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ETime complexity is a way of showing how the runtime of a function increases as the size of the input increases. It describes the amount of computer time it takes to run a function.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere are many different types of time complexity and these are some of them.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EConstant time, O(1) - If we are doing things that only require one step or when there are no loops, then the complexity is O(1).\u003C\u002Fli\u003E\n\u003Cli\u003ELinear time, O(n) - Loops such as for loops and while loops, something that causes the runtime to increase at magnitude proportional to the input size. E.g. an array of 100 items results in 100 loops.\u003C\u002Fli\u003E\n\u003Cli\u003EQuadratic time, O(n²) - Two nested loops of the same input. Similarly, if we have three nested loops, then the time complexity is cubic time, O(n³).\n\n\u003Cul\u003E\n\u003Cli\u003EExample algorithms with quadratic time: \u003Cstrong\u003EBubble sort\u003C\u002Fstrong\u003E, \u003Cstrong\u003EInsertion sort\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ELogarithmic time, O(log n) - When a divide-and-conquer strategy is used, it's said to be O(log n). In logarithmic time, the increase in time decreases as the input increases.\n\n\u003Cul\u003E\n\u003Cli\u003EExample algorithms with logarithmic time: \u003Cstrong\u003EBinary search\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EFactorial time, O(n!) - It's the most expensive one. We are adding a nested loop for every elements.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EThere are some basic rules to remember when considering the Big O for an algorithm or code.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"the-rule-book-of-big-o\" href=\"#the-rule-book-of-big-o\"\u003E\n  \u003C\u002Fa\u003E\n  The Rule Book of Big O \u003Ca name=\"rules\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Col\u003E\n\u003Cli\u003EWorst Case\u003C\u002Fli\u003E\n\u003Cli\u003ERemove Constants\u003C\u002Fli\u003E\n\u003Cli\u003EDifferent terms for inputs\u003C\u002Fli\u003E\n\u003Cli\u003EDrop Non-Dominant Terms\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"rule-1-worst-case\" href=\"#rule-1-worst-case\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cstrong\u003ERule 1: Worst Case\u003C\u002Fstrong\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAlways consider the worst-case scenario. Even if the loop breaks earlier, it does not matter, we always take the Big O in the worst-case scenario. We can't just assume that things are always going well, even though sometimes our function can just run for an O(1). As shown in the example below, sometimes the item we want is located at the index of 0, and we finish off early, but it's still considered as O(n).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EcarArr\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EHonda\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EBMW\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EAudi\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EToyota\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EProton\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003ENissan\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EMazda\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfindCar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Erunning\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`Found \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n          \u003Cspan class=\"k\"\u003Ebreak\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003EfindCar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcarArr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EHonda\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Still O(n), even though it just took 1 iteration.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"rule-2-remove-constants\" href=\"#rule-2-remove-constants\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cstrong\u003ERule 2: Remove Constants\u003C\u002Fstrong\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIn this example, we are creating an input with a length we've defined (10), and pass it to the function. Inside the function, we create an array called \u003Ccode\u003EmeaningLessArr\u003C\u002Fcode\u003E with a length based on the input argument. We have two console.log and a loop to loop for two times the length of the input. \u003C\u002Fp\u003E\n\n\u003Cp\u003EVariable assignment of \u003Ccode\u003EmeaningLessArr\u003C\u002Fcode\u003E is ignored in this example but it doesn't matter much because, in the end, our goal is to remove the constants.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EremoveConstantsExample\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EarrInput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmeaningLessArr\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EArray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E({\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EarrInput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}).\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Efill\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E😄\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F O(n)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EmeaningLessArr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F O(1)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EmeaningLessArr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F O(1)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Run for double the times\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EarrInput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`i is \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F O(2n)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EArray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E({\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E10\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003EremoveConstantsExample\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F O(n + 2 + 2n)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cul\u003E\n\u003Cli\u003EO(3n + 2) is simplified to O(3n + 1). This is because O(any constant) is simplified to O(1). O(2) is simplified to O(1), O(100) → O(1), O(3333) → O(1), and so on.\u003C\u002Fli\u003E\n\u003Cli\u003EO(3n + 1) is then simplified to O(n + 1) by removing the coefficient. The key here is that, whether it is 3n, or 4n, or 5n, they are all \u003Cstrong\u003Elinear\u003C\u002Fstrong\u003E, we can simplify them to just n. We do not particularly care about \u003Cstrong\u003E\u003Cem\u003Ehow steep the line is\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E, we care about \u003Cstrong\u003E\u003Cem\u003Ehow it increases\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E, is it increasing linearly, exponentially, or what.\u003C\u002Fli\u003E\n\u003Cli\u003EAnd finally, it is simplified to O(n) after dropping the constant 1, as 1 does not have an effect when the input is large.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"rule-3-different-terms-for-inputs\" href=\"#rule-3-different-terms-for-inputs\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cstrong\u003ERule 3: Different terms for inputs\u003C\u002Fstrong\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWhen we have multiple inputs or multiple arguments, we give a unique term for each of them, as they are separate inputs with different sizes. In other words, the complexity depends on two independent factors. In the example below, n and m represent the sizes of two different inputs.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ElogTwoArrays\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ^ The Big O is O(n + m)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003ELet's look at another example with nested loops. We have two similar functions that do similar things. The difference is that the \u003Ccode\u003EmakeTuples()\u003C\u002Fcode\u003E takes one argument while \u003Ccode\u003EmakeTuplesTwo()\u003C\u002Fcode\u003E takes two arguments. Thus, we can say that \u003Ccode\u003EmakeTuples()\u003C\u002Fcode\u003E depends on \u003Cstrong\u003Eone\u003C\u002Fstrong\u003E independent factor while \u003Ccode\u003EmakeTuplesTwo()\u003C\u002Fcode\u003E depends on two independent factors.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eemojis\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E😄\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E🚗\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmakeTuples\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etuples\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Earr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Earr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Etuples\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etuples\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EmakeTuples\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E));\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F [\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [1, 1], [1, 2], [1, 3],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [2, 1], [2, 2], [2, 3],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [3, 1], [3, 2], [3, 3],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ]\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ^ For this example, it's O(n^2) - Quadratic Time\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmakeTuplesTwo\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EmakeTuplesTwo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eemojis\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E));\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F [\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [1, '😄'], [1, '🚗'],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [2, '😄'], [2, '🚗'],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [3, '😄'], [3, '🚗']\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ]\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F This example would be O(n•m)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003ELet's do a quick exercise! What's the Big O for the function below?\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eemojis\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E😄\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E🚗\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ElogFirstArrThenMakeTuples\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EforEach\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfirstItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsecondItem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ElogFirstArrThenMakeTuples\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eemojis\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E));\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F 1 2 3\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F [\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [1, '😄'], [1, '🚗'],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [2, '😄'], [2, '🚗'],\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F   [3, '😄'], [3, '🚗']\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F ]\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EThe answer is O(n + nm)! Even better, we can say it is O(nm). This is because we can simplify things here. By expressing O(n + nm) as O(n(1+m)), we can now see the 1+m. 1+m can be simplified to just m. Therefore, after the simplification, we get O(nm).\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere are some great threads to dive deep about O(m+n) and O(nm):\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fcs.stackexchange.com\u002Fquestions\u002F9523\u002Fis-omn-considered-linear-or-quadratic-growth\"\u003EIs O(mn) considered \"linear\" or \"quadratic\" growth?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F23896399\u002Fdifference-between-omn-and-omn\"\u003EDifference between O(m+n) and O(mn)?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EPrecise definition of Big O:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fxlinux.nist.gov\u002Fdads\u002FHTML\u002FbigOnotation.html\"\u003Ebig-O notation\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"rule-4-drop-nondominant-terms\" href=\"#rule-4-drop-nondominant-terms\"\u003E\n  \u003C\u002Fa\u003E\n  Rule 4: Drop Non-Dominant Terms\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EActually, if you understand the concept of simplification like simplifying O(n+nm) to become O(nm) in the exercise above, then you probably already understand this rule. It's basically the same idea.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAgain, if we have something like \u003Clink rel=\"stylesheet\" media=\"screen\" href=\"https:\u002F\u002Fdev.to\u002Fassets\u002Fkatex-b38dec7d8f0ca2014e94b7c93001c29446e6d400c81dc7047fc9cbf2e3952156.css\"\u003E\n\n\u003Cspan class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmsup\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003Cmo\u003E+\u003C\u002Fmo\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003EO(n^2 + n)\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8141079999999999em;\"\u003E\u003Cspan style=\"top:-3.063em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mbin\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fspan\u003E\n, it can be simplified to \n\u003Cspan class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmsup\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003EO(n^2)\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8141079999999999em;\"\u003E\u003Cspan style=\"top:-3.063em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fspan\u003E\n by dropping the + n. \u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex-display\"\u003E\u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\" display=\"block\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmsup\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003Cmo\u003E+\u003C\u002Fmo\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003Cmo\u003E→\u003C\u002Fmo\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E[\u003C\u002Fmo\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmo\u003E+\u003C\u002Fmo\u003E\u003Cmn\u003E1\u003C\u002Fmn\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003Cmo stretchy=\"false\"\u003E]\u003C\u002Fmo\u003E\u003Cmo\u003E→\u003C\u002Fmo\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmsup\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003E\n O(n^2 + n) → O[n(n + 1)] → O(n^2)\n\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8641079999999999em;\"\u003E\u003Cspan style=\"top:-3.113em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mbin\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mrel\"\u003E→\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mbin\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)]\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mrel\"\u003E→\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8641079999999999em;\"\u003E\u003Cspan style=\"top:-3.113em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOr we can imagine when n is large, then the + n probably does not give a lot of effects. In this case, n² is the \u003Cstrong\u003Edominant term\u003C\u002Fstrong\u003E, the \u003Cstrong\u003Ebig and important term\u003C\u002Fstrong\u003E, while + n is not. We ignore the little parts and focus on the big parts. \u003C\u002Fp\u003E\n\n\u003Cp\u003EFor equation \n\u003Cspan class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003Cmi\u003Ex\u003C\u002Fmi\u003E\u003Cmtext\u003E²\u003C\u002Fmtext\u003E\u003Cmo\u003E+\u003C\u002Fmo\u003E\u003Cmi\u003Ex\u003C\u002Fmi\u003E\u003Cmo\u003E+\u003C\u002Fmo\u003E\u003Cmn\u003E30\u003C\u002Fmn\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003E2x² + x + 30\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003Ex\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E²\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mbin\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\"\u003Ex\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mbin\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E30\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fspan\u003E\n, let's try plugging in some numbers.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EPlug in 3, we get 18 + 3 + 30.\u003C\u002Fli\u003E\n\u003Cli\u003EPlug in 10, we get 200 + 10 + 30.\u003C\u002Fli\u003E\n\u003Cli\u003EPlug in 500, we get 500000 + 500 + 30.\u003C\u002Fli\u003E\n\u003Cli\u003EPlug in 100000, we get 20,000,000,000 + 100000 + 30.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThe Big O for this mathematic equation would be \n\u003Cspan class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmi\u003EO\u003C\u002Fmi\u003E\u003Cmo stretchy=\"false\"\u003E(\u003C\u002Fmo\u003E\u003Cmsup\u003E\u003Cmi\u003En\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003Cmo stretchy=\"false\"\u003E)\u003C\u002Fmo\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003EO(n^2)\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord mathnormal\" style=\"margin-right:0.02778em;\"\u003EO\u003C\u002Fspan\u003E\u003Cspan class=\"mopen\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8141079999999999em;\"\u003E\u003Cspan style=\"top:-3.063em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mclose\"\u003E)\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fspan\u003E\n. Not only we can remove the constant and coefficient by applying the rule we learned before, we can also drop the + x as this term is not the 'big' one.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEssentially, \n\u003Cspan class=\"katex-element\"\u003E\n  \u003Cspan class=\"katex\"\u003E\u003Cspan class=\"katex-mathml\"\u003E\u003Cmath xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1998\u002FMath\u002FMathML\"\u003E\u003Csemantics\u003E\u003Cmrow\u003E\u003Cmsup\u003E\u003Cmi\u003Ex\u003C\u002Fmi\u003E\u003Cmn\u003E2\u003C\u002Fmn\u003E\u003C\u002Fmsup\u003E\u003C\u002Fmrow\u003E\u003Cannotation encoding=\"application\u002Fx-tex\"\u003Ex^2\u003C\u002Fannotation\u003E\u003C\u002Fsemantics\u003E\u003C\u002Fmath\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"katex-html\" aria-hidden=\"true\"\u003E\u003Cspan class=\"base\"\u003E\u003Cspan class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"mord\"\u003E\u003Cspan class=\"mord mathnormal\"\u003Ex\u003C\u002Fspan\u003E\u003Cspan class=\"msupsub\"\u003E\u003Cspan class=\"vlist-t\"\u003E\u003Cspan class=\"vlist-r\"\u003E\u003Cspan class=\"vlist\" style=\"height:0.8141079999999999em;\"\u003E\u003Cspan style=\"top:-3.063em;margin-right:0.05em;\"\u003E\u003Cspan class=\"pstrut\" style=\"height:2.7em;\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"sizing reset-size6 size3 mtight\"\u003E\u003Cspan class=\"mord mtight\"\u003E2\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\u003C\u002Fspan\u003E\n\u003C\u002Fspan\u003E\n is the one that contributes to the huge gap so we take it as the Big O.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"summary\" href=\"#summary\"\u003E\n  \u003C\u002Fa\u003E\n  Summary \u003Ca name=\"summary\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh1\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EBig O does not matter a lot when inputs are not sufficiently large. If a function is written to only accept a fixed small amount of data, then we don't particularly care about the time &amp; space complexity in this case. Also in some scenarios, for example, O(n) might be more efficient than O(1) depending on the inputs.\u003C\u002Fli\u003E\n\u003Cli\u003EEverything comes at a cost. Sometimes writing efficient code results in code that is hard to read, and vice versa. The goal is to strike a balance between code efficiency and readability, depending on problems and situations.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThanks to all who read this post.\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Introduction to Big O notation and Time Complexity in JavaScript\npublished: true\ndescription: Big O notation and time complexity are fundamental concepts in computer science.\ntags: computerscience, algorithms, datastructures, javascript\ncover_image: https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F56a7pf3j2ojpywz8exjr.png\n---\n# Table of Contents\n1. [What's Big O](#whatisbigo)\n2. [Time Complexity](#timecomplexity)\n3. [The Rule Book of Big O](#rules)\n4. [Summary](#summary)\n\n# What's Big O? \u003Ca name=\"whatisbigo\"\u003E\u003C\u002Fa\u003E\n\nBig O notation and time complexity are fundamental concepts in computer science.\n\nBig O is a way of describing the efficiency of algorithms without getting too mired in the details. It describes how the time (or the number of operations needed) it takes to run grows as the size of the input grows.\n\n- Big O notation helps us answer the question, \"How do our functions or algorithms behave\u002Fscale when the size of the inputs increases significantly?\"\n\nThe idea here is that we care about things with a difference in an order of magnitude. For example, given the same amount of inputs, I don't really care if my algorithm runs for 100ms versus 105ms, we care if it runs for 100ms vs 10 seconds (a large, noticeable difference).\n\nWhen measuring Big O, we just take the important stuff. For example, O(4+2n) can just be simplified to O(n), we can take away the 'minor details' such as the constant + 4 and even the coefficient, which don't make a lot of difference when things are in large scale. \n\nI like to think of Big O as a tool in the back of my mind that helps me grasp the \"Big Picture\", giving an idea of how efficient the code or algorithms are.\n\n---\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvgjoxb9gdq6dvyqaq2wp.png\"\u003E\n  \u003Cfigcaption\u003EBig-O Complexity Chart from [Big-O Cheat Sheet](https:\u002F\u002Fwww.bigocheatsheet.com\u002F)\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\n# Time complexity \u003Ca name=\"timecomplexity\"\u003E\u003C\u002Fa\u003E\n\nTime complexity is a way of showing how the runtime of a function increases as the size of the input increases. It describes the amount of computer time it takes to run a function.\n\nThere are many different types of time complexity and these are some of them.\n\n- Constant time, O(1) - If we are doing things that only require one step or when there are no loops, then the complexity is O(1).\n- Linear time, O(n) - Loops such as for loops and while loops, something that causes the runtime to increase at magnitude proportional to the input size. E.g. an array of 100 items results in 100 loops.\n- Quadratic time, O(n²) - Two nested loops of the same input. Similarly, if we have three nested loops, then the time complexity is cubic time, O(n³).\n    - Example algorithms with quadratic time: **Bubble sort**, **Insertion sort**\n- Logarithmic time, O(log n) - When a divide-and-conquer strategy is used, it's said to be O(log n). In logarithmic time, the increase in time decreases as the input increases.\n    - Example algorithms with logarithmic time: **Binary search**\n- Factorial time, O(n!) - It's the most expensive one. We are adding a nested loop for every elements.\n\n---\nThere are some basic rules to remember when considering the Big O for an algorithm or code.\n\n## The Rule Book of Big O \u003Ca name=\"rules\"\u003E\u003C\u002Fa\u003E\n\n1. Worst Case\n2. Remove Constants\n3. Different terms for inputs\n4. Drop Non-Dominant Terms\n\n### **Rule 1: Worst Case**\n\nAlways consider the worst-case scenario. Even if the loop breaks earlier, it does not matter, we always take the Big O in the worst-case scenario. We can't just assume that things are always going well, even though sometimes our function can just run for an O(1). As shown in the example below, sometimes the item we want is located at the index of 0, and we finish off early, but it's still considered as O(n).\n\n```jsx\nconst carArr = ['Honda', 'BMW', 'Audi', 'Toyota', 'Proton', 'Nissan', 'Mazda'];\n\nfunction findCar(array, car) {\n    for (let i = 0; i \u003C array.length; i++) {\n      console.log('running');\n      if (array[i] === car) {\n          console.log(`Found ${car}`);\n          break;\n      }\n    }\n}\n\nfindCar(carArr, 'Honda'); \u002F\u002F Still O(n), even though it just took 1 iteration.\n```\n\n### **Rule 2: Remove Constants**\n\nIn this example, we are creating an input with a length we've defined (10), and pass it to the function. Inside the function, we create an array called `meaningLessArr` with a length based on the input argument. We have two console.log and a loop to loop for two times the length of the input. \n\nVariable assignment of `meaningLessArr` is ignored in this example but it doesn't matter much because, in the end, our goal is to remove the constants.\n\n```jsx\nconst removeConstantsExample = (arrInput) =\u003E {\n  const meaningLessArr = Array.from({\n    length: arrInput.length,\n  }).fill(\"😄\"); \u002F\u002F O(n)\n  console.log(meaningLessArr); \u002F\u002F O(1)\n  console.log(meaningLessArr.length); \u002F\u002F O(1)\n\n  \u002F\u002F Run for double the times\n  for (let i = 0; i \u003C arrInput.length * 2; i++) {\n    console.log(`i is ${i}`); \u002F\u002F O(2n)\n  }\n};\n\nconst input = Array.from({ length: 10 });\nremoveConstantsExample(input); \u002F\u002F O(n + 2 + 2n)\n```\n\n- O(3n + 2) is simplified to O(3n + 1). This is because O(any constant) is simplified to O(1). O(2) is simplified to O(1), O(100) → O(1), O(3333) → O(1), and so on.\n- O(3n + 1) is then simplified to O(n + 1) by removing the coefficient. The key here is that, whether it is 3n, or 4n, or 5n, they are all **linear**, we can simplify them to just n. We do not particularly care about ***how steep the line is***, we care about ***how it increases***, is it increasing linearly, exponentially, or what.\n- And finally, it is simplified to O(n) after dropping the constant 1, as 1 does not have an effect when the input is large.\n\n### **Rule 3: Different terms for inputs**\n\nWhen we have multiple inputs or multiple arguments, we give a unique term for each of them, as they are separate inputs with different sizes. In other words, the complexity depends on two independent factors. In the example below, n and m represent the sizes of two different inputs.\n\n```jsx\nconst logTwoArrays = (arr1, arr2) =\u003E {\n  arr1.forEach(item =\u003E {\n    console.log(item);\n  });\n\n  arr2.forEach(item =\u003E {\n    console.log(item);\n  });\n};\n\u002F\u002F ^ The Big O is O(n + m)\n```\n\nLet's look at another example with nested loops. We have two similar functions that do similar things. The difference is that the `makeTuples()` takes one argument while `makeTuplesTwo()` takes two arguments. Thus, we can say that `makeTuples()` depends on **one** independent factor while `makeTuplesTwo()` depends on two independent factors.\n\n```jsx\nconst nums = [1,2,3];\nconst emojis = ['😄', '🚗'];\n\nconst makeTuples = (arr) =\u003E {\n  let tuples = [];\n  arr.forEach(firstItem =\u003E {\n    arr.forEach(secondItem =\u003E {\n      tuples.push([firstItem, secondItem]);\n    });\n  });\n  return tuples;\n};\n\nconsole.log(makeTuples(nums));\n\u002F\u002F [\n\u002F\u002F   [1, 1], [1, 2], [1, 3],\n\u002F\u002F   [2, 1], [2, 2], [2, 3],\n\u002F\u002F   [3, 1], [3, 2], [3, 3],\n\u002F\u002F ]\n\u002F\u002F ^ For this example, it's O(n^2) - Quadratic Time\n\nconst makeTuplesTwo = (arr1, arr2) =\u003E {\n  let answer = [];\n  arr1.forEach(firstItem =\u003E {\n    arr2.forEach(secondItem =\u003E {\n      answer.push([firstItem, secondItem]);\n    });\n  });\n  return answer;\n};\n\nconsole.log(makeTuplesTwo(nums, emojis));\n\u002F\u002F [\n\u002F\u002F   [1, '😄'], [1, '🚗'],\n\u002F\u002F   [2, '😄'], [2, '🚗'],\n\u002F\u002F   [3, '😄'], [3, '🚗']\n\u002F\u002F ]\n\u002F\u002F This example would be O(n•m)\n```\n\nLet's do a quick exercise! What's the Big O for the function below?\n\n```jsx\nconst nums = [1,2,3];\nconst emojis = ['😄', '🚗'];\n\nconst logFirstArrThenMakeTuples = (arr1, arr2) =\u003E {\n  arr1.forEach(item =\u003E {\n    console.log(item);\n  });\n\n  let answer = [];\n  arr1.forEach(firstItem =\u003E {\n    arr2.forEach(secondItem =\u003E {\n      answer.push([firstItem, secondItem]);\n    });\n  });\n  return answer;\n};\n\nconsole.log(logFirstArrThenMakeTuples(nums, emojis));\n\u002F\u002F 1 2 3\n\u002F\u002F [\n\u002F\u002F   [1, '😄'], [1, '🚗'],\n\u002F\u002F   [2, '😄'], [2, '🚗'],\n\u002F\u002F   [3, '😄'], [3, '🚗']\n\u002F\u002F ]\n```\n\nThe answer is O(n + nm)! Even better, we can say it is O(nm). This is because we can simplify things here. By expressing O(n + nm) as O(n(1+m)), we can now see the 1+m. 1+m can be simplified to just m. Therefore, after the simplification, we get O(nm).\n\nHere are some great threads to dive deep about O(m+n) and O(nm):\n- [Is O(mn) considered \"linear\" or \"quadratic\" growth?](https:\u002F\u002Fcs.stackexchange.com\u002Fquestions\u002F9523\u002Fis-omn-considered-linear-or-quadratic-growth)\n- [Difference between O(m+n) and O(mn)?](https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F23896399\u002Fdifference-between-omn-and-omn)\n\nPrecise definition of Big O:\n- [big-O notation](https:\u002F\u002Fxlinux.nist.gov\u002Fdads\u002FHTML\u002FbigOnotation.html)\n\n### Rule 4: Drop Non-Dominant Terms\n\nActually, if you understand the concept of simplification like simplifying O(n+nm) to become O(nm) in the exercise above, then you probably already understand this rule. It's basically the same idea.\n\nAgain, if we have something like {% katex inline %}O(n^2 + n){% endkatex %}, it can be simplified to {% katex inline %}O(n^2){% endkatex %} by dropping the + n. \n\n{% katex %}\n O(n^2 + n) → O[n(n + 1)] → O(n^2)\n{% endkatex %}\n\nOr we can imagine when n is large, then the + n probably does not give a lot of effects. In this case, n² is the **dominant term**, the **big and important term**, while + n is not. We ignore the little parts and focus on the big parts. \n\nFor equation {% katex inline %}2x² + x + 30{% endkatex %}, let's try plugging in some numbers.\n\n- Plug in 3, we get 18 + 3 + 30.\n- Plug in 10, we get 200 + 10 + 30.\n- Plug in 500, we get 500000 + 500 + 30.\n- Plug in 100000, we get 20,000,000,000 + 100000 + 30.\n\nThe Big O for this mathematic equation would be {% katex inline %}O(n^2){% endkatex %}. Not only we can remove the constant and coefficient by applying the rule we learned before, we can also drop the + x as this term is not the 'big' one.\n\nEssentially, {% katex inline %}x^2{% endkatex %} is the one that contributes to the huge gap so we take it as the Big O.\n\n# Summary \u003Ca name=\"summary\"\u003E\u003C\u002Fa\u003E\n\n- Big O does not matter a lot when inputs are not sufficiently large. If a function is written to only accept a fixed small amount of data, then we don't particularly care about the time & space complexity in this case. Also in some scenarios, for example, O(n) might be more efficient than O(1) depending on the inputs.\n- Everything comes at a cost. Sometimes writing efficient code results in code that is hard to read, and vice versa. The goal is to strike a balance between code efficiency and readability, depending on problems and situations.\n\nThanks to all who read this post.\n",user:{name:"Boonsuen Oh",username:"wnxn",twitter_username:"_wnxn",github_username:"boonsuen",website_url:"https:\u002F\u002Fboonsuen.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--w88Sdx_7--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F115442\u002F95c4bdd4-7d1d-4955-b941-2e40149ce604.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Ax9bz7gR--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F115442\u002F95c4bdd4-7d1d-4955-b941-2e40149ce604.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fwnxn\u002F702452",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fwnxn\u002Fintroduction-to-big-o-notation-and-time-complexity-in-javascript-2m5j",62,"2021-05-20T15:58:57Z"));
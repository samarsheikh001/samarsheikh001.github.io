window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:825428,title:"Pandemic-driven bubble tea availability w\u002F Amazon Pinpoint, Location Service, Lambda, EventBridge, Step Functions, and more…",description:"In the Toronto area when the COVID-19 pandemic hit last year (spring 2020) one of the consequences...",readable_publish_date:"Sep 15",slug:"pandemic-driven-bubble-tea-availability-w-amazon-pinpoint-location-service-lambda-eventbridge-step-functions-and-more-41b8",path:"\u002Faws-builders\u002Fpandemic-driven-bubble-tea-availability-w-amazon-pinpoint-location-service-lambda-eventbridge-step-functions-and-more-41b8",url:"https:\u002F\u002Fdev.to\u002Faws-builders\u002Fpandemic-driven-bubble-tea-availability-w-amazon-pinpoint-location-service-lambda-eventbridge-step-functions-and-more-41b8",comments_count:1,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fx0eFRKg--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F47l0pwh5bbsdchonjlbj.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--swrL6ndx--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F47l0pwh5bbsdchonjlbj.png",canonical_url:"https:\u002F\u002Faaronbrighton.medium.com\u002Fpandemic-driven-store-availability-monitoring-w-amazon-pinpoint-location-service-lambda-3c078800a77",created_at:b,edited_at:"2021-09-15T20:45:44Z",crossposted_at:a,published_at:b,last_comment_at:"2021-10-07T07:16:57Z",reading_time_minutes:7,tag_list:"cloud, aws, serverless, eventdriven",tags:["cloud","aws","serverless","eventdriven"],body_html:"\u003Cp\u003EIn the Toronto area when the COVID-19 pandemic hit last year (spring 2020) one of the consequences (benefits?) was that all businesses where employees could reasonably work from home ended up being forced to do so.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis had an interesting effect on restaurants and the food service industry. In the suburbs food establishments saw a huge increase in sales, people were buying lunch near their homes instead of in downtown Toronto. Unfortunately, this also meant long lines for take out that would normally have taken a mere 5 minutes.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESome food stores went purely to online-ordering only, one of those was a Bubble Tea franchise named “Chatime”, you’ve probably heard of it, it’s apparently \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FChatime\"\u003Ethe biggest\u003C\u002Fa\u003E in the world. This actually caused a really frustrating problem for those wanting to order, my wife and I included.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGiven the increased volume of orders, the Chatime near us would “turn-on” their online ordering system for a few minutes, wait for it to fill up with orders, and then turn it off again, in a desperate effort for them to keep up (orders apparently still took upwards of an hour to be made). For a week my wife and I tried many times to order, and each time we got to the order submission page… Uber Eats would give up and say the store is no longer open and would happily wipe out our cart at the same time (thanks). Frustrating puts it mildly.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo what do we do? Keep hitting F5 until it’s balled hoping to catch the store when it opens it’s online ordering again? Thankfully no.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EEnter AWS.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESituations like this are one of the reasons I love the cloud, and specifically Serverless technologies. In roughly a day, I was able to put together a quick and dirty serverless app that would (effectively) hit F5 for us and then send an SMS message to let us know the moment online ordering opened back up.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt worked! First time we got the SMS message, we succeeded at placing an order!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BCkklkVv--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fam4xc370s7qo5pm8qxs5.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BCkklkVv--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fam4xc370s7qo5pm8qxs5.jpg\" alt=\"Google Images “Bubble Tea Meme”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EEnter 2021.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s time I clean-up what I had built and put it out there for others to learn from, repurpose, etc…\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor those that aren’t interested in a wordy walk-through and explanation, feel free to skip the rest and jump right into the code (a clap and follow would be nice though before you leave, if you’re also feeling generous :)\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003Ecdk-serverless-chatime-ordering-helper\u003C\u002Fstrong\u003E — \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Faaronbrighton\u002Fcdk-serverless-chatime-ordering-helper\"\u003Ehttps:\u002F\u002Fgithub.com\u002Faaronbrighton\u002Fcdk-serverless-chatime-ordering-helper\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the rest of you, let’s dive into it!\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"amazon-pinpoint-for-twoway-sms\" href=\"#amazon-pinpoint-for-twoway-sms\"\u003E\n  \u003C\u002Fa\u003E\n  Amazon Pinpoint for Two-way SMS\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELast spring, for whatever reason (maybe the feature actually wasn’t available yet, someone please correct me in the comments) I couldn’t find a way to cost-effectively handle in-bound SMS on AWS. So the initial implementation actually leveraged Twilio’s SMS w\u002F Webhooks and API for the SMS interfacing.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs I was cleaning up the code this past week, I realized I can cut Twilio and use Amazon Pinpoint directly. Which drastically simplifies the setup and explanation.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fpinpoint\u002F\"\u003EAmazon Pinpoint is…\u003C\u002Fa\u003E\u003C\u002Fstrong\u003E a flexible and scalable outbound and inbound marketing communications service. You can connect with customers over channels like email, SMS, push, or voice.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EPinpoint is the one piece I wasn’t able to automate using IaC (Infrastructure as Code), so if you’re following along, you’ll have to provision an SMS enabled long code phone number manually. This is pretty straight forward in the the AWS Management Console.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Wg4wo4wF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffnlgiounfkq9f90733q5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Wg4wo4wF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffnlgiounfkq9f90733q5.png\" alt=\"Amazon Pinpoint “Phone numbers”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"subscriber-lambda-and-amazon-location-service\" href=\"#subscriber-lambda-and-amazon-location-service\"\u003E\n  \u003C\u002Fa\u003E\n  Subscriber Lambda and Amazon Location Service\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EOnce an SMS message is received by the phone number in Amazon Pinpoint, it is relayed to some custom logic by way of an \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fsns\u002F\"\u003EAmazon SNS\u003C\u002Fa\u003E (Simple Notification Service) topic. This is \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fpinpoint\u002Flatest\u002Fuserguide\u002Fchannels-sms-two-way.html#channels-sms-two-way-configure\"\u003Ehow\u003C\u002Fa\u003E Two-way SMS is integrated with downstream services in Pinpoint.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PZZc00dP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqzrzf3jap3vzwi37e4ls.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PZZc00dP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqzrzf3jap3vzwi37e4ls.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAmazon Location Service\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnother external service that I ended up replacing as part of this cleanup was the Google Maps API. One of the things the app needs to do is convert a users Postal Code (\u003Cstrong\u003ECanadian\u003C\u002Fstrong\u003E) to LAT\u002FLONG Coordinates. In the initial implementation I used Google Maps for this. At re:Invent 2020, Amazon announced Amazon Location service — so time to leverage this as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gCP7U-xA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Finfl6t4efsn474yd42xh.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gCP7U-xA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Finfl6t4efsn474yd42xh.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe first SMS message the end-user sends to this app will be their Postal Code. As you can see from the above diagram we then hit an external API hosted by Chatime. Their API expects a user to provide LAT\u002FLONG Coordinates, so first we do the translation with Amazon Location service and then POST to Chatime’s Location API. We get back a list of Chatime locations near the user’s coordinates, as well as information like the Uber Eats online ordering URL. Code excerpt below:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--htHbRiNR--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxdjt7b8qdhrf3qjq0fd5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--htHbRiNR--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxdjt7b8qdhrf3qjq0fd5.png\" alt=\"TypeScript \u002F AWS SDK for Javascript \u002F Amazon Location Service “searchPlaceIndexForText”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4MSLJo38--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpqhjq3v62hou79t1939p.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4MSLJo38--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpqhjq3v62hou79t1939p.png\" alt=\"TypeScript \u002F Axios \u002F Chatime Location API\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ERegistering the store for monitoring\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere’s a second exchange to be had between the app and the end-user before we start monitoring. We return them a list of the 3 closest Chatime locations that have an Uber Eats online store. They then have to respond back with the Store ID for the store they want to monitor \u002F order from.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kKY3Xwai--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdh8f0mt7vv9ogtfxljdh.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kKY3Xwai--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdh8f0mt7vv9ogtfxljdh.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce the selected Store ID is received by the app (it will get thrown at the Subscriber Lambda as well). We create an Amazon SNS topic for that Chatime store, with the Uber Eats URL as a tag (for “safe keeping”). Lastly, we subscribe the end-user to this SNS topic using “sms” as the protocol.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"probing-part-1-amazon-eventbridge-and-populator-lambda\" href=\"#probing-part-1-amazon-eventbridge-and-populator-lambda\"\u003E\n  \u003C\u002Fa\u003E\n  Probing Part 1: Amazon EventBridge and Populator Lambda\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dPL2LBPi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmsh2aoxc4dxvxycagi2l.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dPL2LBPi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmsh2aoxc4dxvxycagi2l.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe next part of our application is the first half of the monitoring piece. We want to probe Uber Eats Chatime store pages at least once a minute. Therefore, we use our trusty “serverless cron” AKA \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Feventbridge\u002F\"\u003EAmazon EventBridge\u003C\u002Fa\u003E (formerly CloudWatch Rules).\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_hv3hZg4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7go6mbb97eh0gevkd9yv.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_hv3hZg4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7go6mbb97eh0gevkd9yv.png\" alt=\"TypeScript \u002F CDK \u002F EventBridge\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EPopulator Lambda\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe populator Lambda will scan the previously created SNS topics representing Chatime stores to be monitored, and will populate an \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fsqs\u002F\"\u003EAmazon SQS\u003C\u002Fa\u003E (Simple Queuing Service) queue with messages containing the Uber Eats URL (from the SNS Topic tags), and the SNS Topic ARN itself.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LtQVl-eo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4omenf8izxeihk052yzi.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LtQVl-eo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4omenf8izxeihk052yzi.png\" alt=\"TypeScript \u002F AWS SDK for Javascript \u002F SQS “sendMessage”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"probing-part-2-amazon-sqs-and-worker-lambda\" href=\"#probing-part-2-amazon-sqs-and-worker-lambda\"\u003E\n  \u003C\u002Fa\u003E\n  Probing Part 2: Amazon SQS and Worker Lambda\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wesYt8rz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6imjwyloj7zjvpxlo5jp.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wesYt8rz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6imjwyloj7zjvpxlo5jp.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the final steps, our Amazon SQS is configured to “fan-out” messages to a Worker Lambda with a batch size of 1 (meaning only 1 SQS message at a time will be sent to the Lambda — we don’t want to overload ;) the external Uber Eats store pages.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOur Worker Lambda throws a GET for the store page, and checks to see if there are any occurrences of the word “Currently unavailable” — this is what happens when a store shuts off their online ordering capability.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dowQaGrP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Faur78ryrlasldzo9h7dn.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dowQaGrP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Faur78ryrlasldzo9h7dn.png\" alt=\"TypeScript \u002F AWS SDK for Javascript \u002F SNS “publish”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf the occurrence \u003Cstrong\u003Eis\u003C\u002Fstrong\u003E found, the Lambda simply exits to try again ~60 seconds later. If the occurrence \u003Cstrong\u003Eis not\u003C\u002Fstrong\u003E* found then we publish to the SNS topic we created earlier — which will result in an SMS message being sent to anyone who wanted to be notified if this store’s online order came online.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"probing-part-3-aws-step-functions-and-unsubscriber-lambda\" href=\"#probing-part-3-aws-step-functions-and-unsubscriber-lambda\"\u003E\n  \u003C\u002Fa\u003E\n  Probing Part 3: AWS Step Functions and Unsubscriber Lambda\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--s6qCBpj5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffkco86lbywodzxplo7tl.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--s6qCBpj5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffkco86lbywodzxplo7tl.png\" alt=\"Excerpt from full architecture diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELastly, we want to remove the end-user’s subscription as we’ve now done our part. One of the “gotchas” of SNS Topics is that if you publish to them and then immediately try to delete those topics, there’s a chance not all of the notifications will be sent-out.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EDeleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. — AWS SDK for Javascript (“\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002FAWSJavaScriptSDK\u002Flatest\u002FAWS\u002FSNS.html#deleteTopic-property\"\u003EdeleteTopic\u003C\u002Fa\u003E”)\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ESo we have a couple options:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ESleep the Worker Lambda for ~30 seconds\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fabout-aws\u002Fwhats-new\u002F2020\u002F12\u002Faws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms\u002F\"\u003EAWS Step Functions\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ESleeping the Lambda is probably the first thought someone would have, but it’s not great for a number of reasons. One of those is you’re \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fabout-aws\u002Fwhats-new\u002F2020\u002F12\u002Faws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms\u002F\"\u003Epaying every ms\u003C\u002Fa\u003E the Lambda is running… so that’s just financially wasteful.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith Step Functions we can define a “Wait” step, say 30 seconds, before executing additional custom logic (our unsubscriber Lambda).\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RPYFlghY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqr2tl6g9im8g7d1djgup.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RPYFlghY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqr2tl6g9im8g7d1djgup.png\" alt=\"TypeScript \u002F CDK \u002F Step Functions \u002F State Machine “Wait” step\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EUnsubscriber Lambda\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOur final step of this app is to remove the SNS topic completely along with all of it’s subscriptions, that’s what this Lambda does, the code is very simple.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--69QFtHya--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flb07zj8m38ul87iu75ab.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--69QFtHya--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flb07zj8m38ul87iu75ab.png\" alt=\"TypeScript \u002F AWS SDK for Javascript \u002F SNS “deleteTopic”\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"how-do-i-deploy-this-myself\" href=\"#how-do-i-deploy-this-myself\"\u003E\n  \u003C\u002Fa\u003E\n  How do I deploy this myself?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EI won’t go into too much detail, as it’s largely already documented in the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Faaronbrighton\u002Fcdk-serverless-chatime-ordering-helper\"\u003Ecdk-serverless-chatime-ordering-helper\u003C\u002Fa\u003E repo’s README.md.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you have experience working with CDK (AWS Cloud Development Kit), then it should be fairly straightforward. If you don’t have experience with CDK, I highly recommend you familiar yourself with it! It’s a game changer for cloud development, especially serverless architectures.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere’s a really awesome low time-investment CDK workshop here: \u003Ca href=\"https:\u002F\u002Fcdkworkshop.com\u002F\"\u003Ehttps:\u002F\u002Fcdkworkshop.com\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"to-conclude-what-does-it-look-like-for-the-enduser\" href=\"#to-conclude-what-does-it-look-like-for-the-enduser\"\u003E\n  \u003C\u002Fa\u003E\n  To conclude… what does it look like for the end-user?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hpAwL-jM--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffd51kkv9i8fglvxuh1vq.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hpAwL-jM--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffd51kkv9i8fglvxuh1vq.png\" alt=\"SMS conversation with app\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks for reading!\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you found the content valuable, please press that heart button and follow, comment what you liked or didn’t like and let me know what I should cover next!\u003C\u002Fp\u003E\n\n",body_markdown:"In the Toronto area when the COVID-19 pandemic hit last year (spring 2020) one of the consequences (benefits?) was that all businesses where employees could reasonably work from home ended up being forced to do so.\n\nThis had an interesting effect on restaurants and the food service industry. In the suburbs food establishments saw a huge increase in sales, people were buying lunch near their homes instead of in downtown Toronto. Unfortunately, this also meant long lines for take out that would normally have taken a mere 5 minutes.\n\nSome food stores went purely to online-ordering only, one of those was a Bubble Tea franchise named “Chatime”, you’ve probably heard of it, it’s apparently [the biggest](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FChatime) in the world. This actually caused a really frustrating problem for those wanting to order, my wife and I included.\n\nGiven the increased volume of orders, the Chatime near us would “turn-on” their online ordering system for a few minutes, wait for it to fill up with orders, and then turn it off again, in a desperate effort for them to keep up (orders apparently still took upwards of an hour to be made). For a week my wife and I tried many times to order, and each time we got to the order submission page… Uber Eats would give up and say the store is no longer open and would happily wipe out our cart at the same time (thanks). Frustrating puts it mildly.\n\nSo what do we do? Keep hitting F5 until it’s balled hoping to catch the store when it opens it’s online ordering again? Thankfully no.\n\n**Enter AWS.**\n\nSituations like this are one of the reasons I love the cloud, and specifically Serverless technologies. In roughly a day, I was able to put together a quick and dirty serverless app that would (effectively) hit F5 for us and then send an SMS message to let us know the moment online ordering opened back up.\n\nIt worked! First time we got the SMS message, we succeeded at placing an order!\n\n![Google Images “Bubble Tea Meme”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fam4xc370s7qo5pm8qxs5.jpg)\n\n**Enter 2021.**\n\nIt’s time I clean-up what I had built and put it out there for others to learn from, repurpose, etc…\n\nFor those that aren’t interested in a wordy walk-through and explanation, feel free to skip the rest and jump right into the code (a clap and follow would be nice though before you leave, if you’re also feeling generous :)\n\n**cdk-serverless-chatime-ordering-helper** — https:\u002F\u002Fgithub.com\u002Faaronbrighton\u002Fcdk-serverless-chatime-ordering-helper\n\nFor the rest of you, let’s dive into it!\n\n---\n\n# Amazon Pinpoint for Two-way SMS\n\nLast spring, for whatever reason (maybe the feature actually wasn’t available yet, someone please correct me in the comments) I couldn’t find a way to cost-effectively handle in-bound SMS on AWS. So the initial implementation actually leveraged Twilio’s SMS w\u002F Webhooks and API for the SMS interfacing.\n\nAs I was cleaning up the code this past week, I realized I can cut Twilio and use Amazon Pinpoint directly. Which drastically simplifies the setup and explanation.\n\n\u003E **[Amazon Pinpoint is…](https:\u002F\u002Faws.amazon.com\u002Fpinpoint\u002F)** a flexible and scalable outbound and inbound marketing communications service. You can connect with customers over channels like email, SMS, push, or voice.\n\nPinpoint is the one piece I wasn’t able to automate using IaC (Infrastructure as Code), so if you’re following along, you’ll have to provision an SMS enabled long code phone number manually. This is pretty straight forward in the the AWS Management Console.\n\n![Amazon Pinpoint “Phone numbers”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffnlgiounfkq9f90733q5.png)\n\n---\n\n# Subscriber Lambda and Amazon Location Service\n\nOnce an SMS message is received by the phone number in Amazon Pinpoint, it is relayed to some custom logic by way of an [Amazon SNS](https:\u002F\u002Faws.amazon.com\u002Fsns\u002F) (Simple Notification Service) topic. This is [how](https:\u002F\u002Fdocs.aws.amazon.com\u002Fpinpoint\u002Flatest\u002Fuserguide\u002Fchannels-sms-two-way.html#channels-sms-two-way-configure) Two-way SMS is integrated with downstream services in Pinpoint.\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqzrzf3jap3vzwi37e4ls.png)\n\n**Amazon Location Service**\n\nAnother external service that I ended up replacing as part of this cleanup was the Google Maps API. One of the things the app needs to do is convert a users Postal Code (**Canadian**) to LAT\u002FLONG Coordinates. In the initial implementation I used Google Maps for this. At re:Invent 2020, Amazon announced Amazon Location service — so time to leverage this as well.\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Finfl6t4efsn474yd42xh.png)\n\nThe first SMS message the end-user sends to this app will be their Postal Code. As you can see from the above diagram we then hit an external API hosted by Chatime. Their API expects a user to provide LAT\u002FLONG Coordinates, so first we do the translation with Amazon Location service and then POST to Chatime’s Location API. We get back a list of Chatime locations near the user’s coordinates, as well as information like the Uber Eats online ordering URL. Code excerpt below:\n\n![TypeScript \u002F AWS SDK for Javascript \u002F Amazon Location Service “searchPlaceIndexForText”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxdjt7b8qdhrf3qjq0fd5.png)\n\n![TypeScript \u002F Axios \u002F Chatime Location API](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpqhjq3v62hou79t1939p.png)\n\n**Registering the store for monitoring**\n\nThere’s a second exchange to be had between the app and the end-user before we start monitoring. We return them a list of the 3 closest Chatime locations that have an Uber Eats online store. They then have to respond back with the Store ID for the store they want to monitor \u002F order from.\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdh8f0mt7vv9ogtfxljdh.png)\n\nOnce the selected Store ID is received by the app (it will get thrown at the Subscriber Lambda as well). We create an Amazon SNS topic for that Chatime store, with the Uber Eats URL as a tag (for “safe keeping”). Lastly, we subscribe the end-user to this SNS topic using “sms” as the protocol.\n\n---\n\n# Probing Part 1: Amazon EventBridge and Populator Lambda\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmsh2aoxc4dxvxycagi2l.png)\n\nThe next part of our application is the first half of the monitoring piece. We want to probe Uber Eats Chatime store pages at least once a minute. Therefore, we use our trusty “serverless cron” AKA [Amazon EventBridge](https:\u002F\u002Faws.amazon.com\u002Feventbridge\u002F) (formerly CloudWatch Rules).\n\n![TypeScript \u002F CDK \u002F EventBridge](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7go6mbb97eh0gevkd9yv.png)\n\n**Populator Lambda**\n\nThe populator Lambda will scan the previously created SNS topics representing Chatime stores to be monitored, and will populate an [Amazon SQS](https:\u002F\u002Faws.amazon.com\u002Fsqs\u002F) (Simple Queuing Service) queue with messages containing the Uber Eats URL (from the SNS Topic tags), and the SNS Topic ARN itself.\n\n![TypeScript \u002F AWS SDK for Javascript \u002F SQS “sendMessage”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4omenf8izxeihk052yzi.png)\n\n---\n\n# Probing Part 2: Amazon SQS and Worker Lambda\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6imjwyloj7zjvpxlo5jp.png)\n\nIn the final steps, our Amazon SQS is configured to “fan-out” messages to a Worker Lambda with a batch size of 1 (meaning only 1 SQS message at a time will be sent to the Lambda — we don’t want to overload ;) the external Uber Eats store pages.\n\nOur Worker Lambda throws a GET for the store page, and checks to see if there are any occurrences of the word “Currently unavailable” — this is what happens when a store shuts off their online ordering capability.\n\n![TypeScript \u002F AWS SDK for Javascript \u002F SNS “publish”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Faur78ryrlasldzo9h7dn.png)\n\nIf the occurrence **is** found, the Lambda simply exits to try again ~60 seconds later. If the occurrence **is not*** found then we publish to the SNS topic we created earlier — which will result in an SMS message being sent to anyone who wanted to be notified if this store’s online order came online.\n\n---\n\n# Probing Part 3: AWS Step Functions and Unsubscriber Lambda\n\n![Excerpt from full architecture diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffkco86lbywodzxplo7tl.png)\n\nLastly, we want to remove the end-user’s subscription as we’ve now done our part. One of the “gotchas” of SNS Topics is that if you publish to them and then immediately try to delete those topics, there’s a chance not all of the notifications will be sent-out.\n\n\u003E Deleting a topic might prevent some messages previously sent to the topic from being delivered to subscribers. — AWS SDK for Javascript (“[deleteTopic](https:\u002F\u002Fdocs.aws.amazon.com\u002FAWSJavaScriptSDK\u002Flatest\u002FAWS\u002FSNS.html#deleteTopic-property)”)\n\nSo we have a couple options:\n\n- Sleep the Worker Lambda for ~30 seconds\n- [AWS Step Functions](https:\u002F\u002Faws.amazon.com\u002Fabout-aws\u002Fwhats-new\u002F2020\u002F12\u002Faws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms\u002F)\n\nSleeping the Lambda is probably the first thought someone would have, but it’s not great for a number of reasons. One of those is you’re [paying every ms](https:\u002F\u002Faws.amazon.com\u002Fabout-aws\u002Fwhats-new\u002F2020\u002F12\u002Faws-lambda-changes-duration-billing-granularity-from-100ms-to-1ms\u002F) the Lambda is running… so that’s just financially wasteful.\n\nWith Step Functions we can define a “Wait” step, say 30 seconds, before executing additional custom logic (our unsubscriber Lambda).\n\n![TypeScript \u002F CDK \u002F Step Functions \u002F State Machine “Wait” step](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqr2tl6g9im8g7d1djgup.png)\n\n**Unsubscriber Lambda**\n\nOur final step of this app is to remove the SNS topic completely along with all of it’s subscriptions, that’s what this Lambda does, the code is very simple.\n\n![TypeScript \u002F AWS SDK for Javascript \u002F SNS “deleteTopic”](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flb07zj8m38ul87iu75ab.png)\n\n# How do I deploy this myself?\n\nI won’t go into too much detail, as it’s largely already documented in the [cdk-serverless-chatime-ordering-helper](https:\u002F\u002Fgithub.com\u002Faaronbrighton\u002Fcdk-serverless-chatime-ordering-helper) repo’s README.md.\n\nIf you have experience working with CDK (AWS Cloud Development Kit), then it should be fairly straightforward. If you don’t have experience with CDK, I highly recommend you familiar yourself with it! It’s a game changer for cloud development, especially serverless architectures.\n\nThere’s a really awesome low time-investment CDK workshop here: https:\u002F\u002Fcdkworkshop.com\u002F\n\n---\n\n# To conclude… what does it look like for the end-user?\n\n![SMS conversation with app](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffd51kkv9i8fglvxuh1vq.png)\n\nThanks for reading!\n\nIf you found the content valuable, please press that heart button and follow, comment what you liked or didn’t like and let me know what I should cover next!\n\n",user:{name:"Aaron Brighton",username:c,twitter_username:c,github_username:c,website_url:"https:\u002F\u002Faaronbrighton.ca\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--t3e58A_d--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F645465\u002F1181b2a8-8a30-4501-9ca5-6d4ace4b3004.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_iOeGfsg--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F645465\u002F1181b2a8-8a30-4501-9ca5-6d4ace4b3004.jpeg"},organization:{name:"AWS Community Builders ",username:e,slug:e,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zmOZQNzv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vWmcJ-ty--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Faaronbrighton\u002F825428",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-09-15T20:42:19Z","aaronbrighton",20,"aws-builders"));
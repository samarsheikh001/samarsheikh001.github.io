window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:675140,title:"3 small tips to make your SQL Server experience easier",description:"For most of the last two years, My job has been mostly about writing another and another SQL query, b...",readable_publish_date:"Apr 22",slug:"3-tips-to-make-your-sql-server-experience-easier-5682",path:"\u002Fhanewali\u002F3-tips-to-make-your-sql-server-experience-easier-5682",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F675140.png",canonical_url:c,created_at:b,edited_at:"2021-04-22T14:48:27Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"sql, 5days5blogposts",tags:["sql","5days5blogposts"],body_html:"\u003Cp\u003EFor most of the last two years, My job has been mostly about writing another and another SQL query, be it to check what's happening with some data, debug a weird error or develop a stored procedure as a part of a feature I'm working on. During that time I've written dozens of different procedures consisting of multiple queries, even to the point of committing small heresy in the form of two thousand lines monster full of XML deserialization and business validations. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBad times.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut every such experience had left me with some new knowledge to use in future projects, things I could use to further optimize my SQL code or make some debugging easier, so I decided to share them in the form of this blog post\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"easily-commented-out-conditions\" href=\"#easily-commented-out-conditions\"\u003E\n  \u003C\u002Fa\u003E\n  Easily commented out conditions\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis one is very small and simple, but very useful when I need to write a query with multiple conditions. Let's take a look at the following example:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\n\u003Cspan class=\"k\"\u003ESELECT\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EId\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \n    \u003Cspan class=\"n\"\u003EName\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EFROM\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ESomeTable\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EField1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"X\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003EAND\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EField2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"Y\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, here we already made our life easier by putting an AND keyword on the new line, right before second condition. It's a good practice when you're actively working on a query, because if you need to see what kind of result you'll achieve without the second condition, you can simply comment it out:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EField1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"X\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E--AND Field2 = \"Y\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESee? Nice and easy, and in most SQL IDEs, like SSMS or DataGrip, you can comment out a single line with a simple shortcut. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut what if you want to see what would happen with second condition, but without first? If you leave AND keyword on its place, you'll just create an error, because there will be no condition preceding it:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E--*SQL server won't let you do this, as there is no working condition before AND!*\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E--Field1 = \"X\" \u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003EAND\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EField2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"Y\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOf course, you could move AND to the end of the first condition, but then it would trouble you if you need to comment out the second condition again. Or you could comment out AND like this: \u002F\u003Cem\u003EAND\u003C\u002Fem\u003E\u002F and it would work, too. It's all fine and dandy, but what if there is other option?\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003EAND\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EField1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"X\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003EAND\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EField2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E\"Y\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELooks weird, but it could actually save you a lot of time. That way if you don't need any condition, you can simply comment it out, without breaking your whole query, which depending on size might be very difficult to find where did the error happened.  Adding this simple 1=1 will not affect your qery performance in any significant way, but instead will make it much easier to work on query \"right now\". \u003C\u002Fp\u003E\n\n\u003Cp\u003EOf course, it's not something I would leave in a production code, but for the sake of debugging, it can save you some precious seconds or even minutes, and most importantly, it will let you stay \"in the flow\", without being bothered by unexpected and irritating errors.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"instant-insert-into-tempdb-table-from-select\" href=\"#instant-insert-into-tempdb-table-from-select\"\u003E\n  \u003C\u002Fa\u003E\n  Instant insert into TempDB table from SELECT\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow this is something I've picked up just recently, but it instantly made my life much easier. Consider following code:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003ECREATE\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003ETABLE\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ESample\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EId\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EINT\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EName\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENVARCHAR\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EDescription\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENVARCHAR\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E500\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003EINSERT\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003EINTO\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ESample\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EId\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EDescription\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003ESELECT\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EId\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \n    \u003Cspan class=\"n\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EDescription\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EFROM\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ESampleTable\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ECondition\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Etrue\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis example is very simple: \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EWe create a temporal table (which is marked by # character at the beginning of the name)\u003C\u002Fli\u003E\n\u003Cli\u003EWe write its columns and their types\u003C\u002Fli\u003E\n\u003Cli\u003EWe repeat both table name and columns in INSERT statement\u003C\u002Fli\u003E\n\u003Cli\u003EWe fill it with data from SELECT statement\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EIt still made us write quite a lot of words, and any mistake in data type or in choosing columns in an INSERT statement can lead to irritating errors, which could stop you for a long enough time that you'll lose your focus. \u003C\u002Fp\u003E\n\n\u003Cp\u003EInstead, you could try this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003ESELECT\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EId\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EName\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EDescription\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EINTO\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ESample\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EFROM\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ESampleTable\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003EWHERE\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ECondition\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Etrue\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYes: I just replaced both CREATE TABLE and INSERT INTO statements with single INTO between SELECT and FROM statements. What does it do? It creates a table with the same column names and types as ones we just retrieved from the database using our SELECT statement, without writing a lot of unnecessary code, and making it more difficult to make a mistake in the list of columns or risking that one of the columns will have a wrong type.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOf course, there is a \"but\": If you have to run this command multiple times, it won't just insert new data into our #Sample table, but instead it will throw an error saying that such a table already exists. We will deal with this in just a second:\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"ensuring-that-unnecessary-temporal-table-doesnt-already-exist\" href=\"#ensuring-that-unnecessary-temporal-table-doesnt-already-exist\"\u003E\n  \u003C\u002Fa\u003E\n  Ensuring that unnecessary temporal table doesn't already exist\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhen we use temporal tables, sometimes we also have to delete them, especially when we are actively developing our query. Of course, it's less important when we use #table in stored procedure, as it will get dropped when the procedure is finished, and it's scoped to this procedure, just as our #table will be scoped to our DB session - but if it exists when it shouldn't, it's still a problem.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAn obvious choice would be to simply DROP #table at the end of our query, but there is a risk: If for any reason #table doesn't exist when DROP is called, it will throw an error. Similarly, if for any reason the DROP statement won't be called (for example, because there was an error before it) next time we run our query we will also run into a problem. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo what's the solution?\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight sql\"\u003E\u003Ccode\u003E\u003Cspan class=\"n\"\u003EIF\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EOBJECT_ID\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E'tempdb..#app'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003EIS\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003ENOT\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003ENULL\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003EDROP\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003ETABLE\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eapp\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis single line of code will do two things:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECheck if table #app already exists in tempdb\u003C\u002Fli\u003E\n\u003Cli\u003EIf it exists, it will drop it. \u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EPut this line at the beginning of your SQL script, change the name to whatever you like, and you're good to go. If a table doesn't exist yet, nothing will happen, but if it exists before it should, it will be dropped. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis line makes an excellent work next to SELECT INTO statement, as it protects you against unnecessary errors while letting you use this statement easily.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor now, this will be all. If I remember (or find out) any other tips that can make my life a bit easier, this post will have a part 2.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"summary\" href=\"#summary\"\u003E\n  \u003C\u002Fa\u003E\n  Summary\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EYou can make debugging SQL queries much simpler by adding \"fake\" 1=1 condition, and putting every \"real\" condition after AND or OR keywords.\u003C\u002Fli\u003E\n\u003Cli\u003ECreating and filling tempdb tables can be very simple in SQL Server\u003C\u002Fli\u003E\n\u003Cli\u003EThere are a lot of possible errors while operating on tempdb tables, but you can avoid them if you remember that they are there\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EBut what about You? Do You have any interesting tips or tricks you use in SQL Server that helps you get through the day? If you do, please share them in comments, I'd love to learn something new to use in my day-to-day SQL work.\u003C\u002Fp\u003E\n\n",body_markdown:"For most of the last two years, My job has been mostly about writing another and another SQL query, be it to check what's happening with some data, debug a weird error or develop a stored procedure as a part of a feature I'm working on. During that time I've written dozens of different procedures consisting of multiple queries, even to the point of committing small heresy in the form of two thousand lines monster full of XML deserialization and business validations. \n\nBad times.\n\nBut every such experience had left me with some new knowledge to use in future projects, things I could use to further optimize my SQL code or make some debugging easier, so I decided to share them in the form of this blog post\n\n## Easily commented out conditions\n\nThis one is very small and simple, but very useful when I need to write a query with multiple conditions. Let's take a look at the following example:\n\n```sql\n\nSELECT\n\tId, \n\tName\nFROM\n\tSomeTable\nWHERE\n\tField1 = \"X\"\n\tAND Field2 = \"Y\"\n```\n\nNow, here we already made our life easier by putting an AND keyword on the new line, right before second condition. It's a good practice when you're actively working on a query, because if you need to see what kind of result you'll achieve without the second condition, you can simply comment it out:\n\n```sql\nWHERE\n\tField1 = \"X\"\n\t--AND Field2 = \"Y\"\n```\n\nSee? Nice and easy, and in most SQL IDEs, like SSMS or DataGrip, you can comment out a single line with a simple shortcut. \n\nBut what if you want to see what would happen with second condition, but without first? If you leave AND keyword on its place, you'll just create an error, because there will be no condition preceding it:\n\n```sql\n--*SQL server won't let you do this, as there is no working condition before AND!*\nWHERE\n\t--Field1 = \"X\" \n\tAND Field2 = \"Y\"\n```\n\nOf course, you could move AND to the end of the first condition, but then it would trouble you if you need to comment out the second condition again. Or you could comment out AND like this: \u002F*AND*\u002F and it would work, too. It's all fine and dandy, but what if there is other option?\n\n```sql\nWHERE 1=1\n\tAND Field1 = \"X\"\n\tAND Field2 = \"Y\"\n```\n\nLooks weird, but it could actually save you a lot of time. That way if you don't need any condition, you can simply comment it out, without breaking your whole query, which depending on size might be very difficult to find where did the error happened.  Adding this simple 1=1 will not affect your qery performance in any significant way, but instead will make it much easier to work on query \"right now\". \n\nOf course, it's not something I would leave in a production code, but for the sake of debugging, it can save you some precious seconds or even minutes, and most importantly, it will let you stay \"in the flow\", without being bothered by unexpected and irritating errors.\n\n## Instant insert into TempDB table from SELECT\n\nNow this is something I've picked up just recently, but it instantly made my life much easier. Consider following code:\n\n```sql\nCREATE TABLE #Sample (Id INT, Name NVARCHAR(100), Description NVARCHAR(500))\n\nINSERT INTO #Sample (Id, Name, Description)\nSELECT\n\tId, \n\tName,\n\tDescription\nFROM\n\tSampleTable\nWHERE\n\tCondition = true\n```\n\nThis example is very simple: \n\n1. We create a temporal table (which is marked by # character at the beginning of the name)\n2. We write its columns and their types\n3. We repeat both table name and columns in INSERT statement\n4. We fill it with data from SELECT statement\n\nIt still made us write quite a lot of words, and any mistake in data type or in choosing columns in an INSERT statement can lead to irritating errors, which could stop you for a long enough time that you'll lose your focus. \n\nInstead, you could try this:\n\n```sql\nSELECT\n\tId,\n\tName,\n\tDescription\nINTO #Sample\nFROM\n\tSampleTable\nWHERE\n\tCondition = true\n```\n\nYes: I just replaced both CREATE TABLE and INSERT INTO statements with single INTO between SELECT and FROM statements. What does it do? It creates a table with the same column names and types as ones we just retrieved from the database using our SELECT statement, without writing a lot of unnecessary code, and making it more difficult to make a mistake in the list of columns or risking that one of the columns will have a wrong type.\n\nOf course, there is a \"but\": If you have to run this command multiple times, it won't just insert new data into our #Sample table, but instead it will throw an error saying that such a table already exists. We will deal with this in just a second:\n\n## Ensuring that unnecessary temporal table doesn't already exist\n\nWhen we use temporal tables, sometimes we also have to delete them, especially when we are actively developing our query. Of course, it's less important when we use #table in stored procedure, as it will get dropped when the procedure is finished, and it's scoped to this procedure, just as our #table will be scoped to our DB session - but if it exists when it shouldn't, it's still a problem.\n\nAn obvious choice would be to simply DROP #table at the end of our query, but there is a risk: If for any reason #table doesn't exist when DROP is called, it will throw an error. Similarly, if for any reason the DROP statement won't be called (for example, because there was an error before it) next time we run our query we will also run into a problem. \n\nSo what's the solution?\n\n```sql\nIF OBJECT_ID('tempdb..#app') IS NOT NULL DROP TABLE #app\n```\n\nThis single line of code will do two things:\n\n1. Check if table #app already exists in tempdb\n2. If it exists, it will drop it. \n\nPut this line at the beginning of your SQL script, change the name to whatever you like, and you're good to go. If a table doesn't exist yet, nothing will happen, but if it exists before it should, it will be dropped. \n\nThis line makes an excellent work next to SELECT INTO statement, as it protects you against unnecessary errors while letting you use this statement easily.\n\nFor now, this will be all. If I remember (or find out) any other tips that can make my life a bit easier, this post will have a part 2.\n\n## Summary\n\n- You can make debugging SQL queries much simpler by adding \"fake\" 1=1 condition, and putting every \"real\" condition after AND or OR keywords.\n- Creating and filling tempdb tables can be very simple in SQL Server\n- There are a lot of possible errors while operating on tempdb tables, but you can avoid them if you remember that they are there\n\nBut what about You? Do You have any interesting tips or tricks you use in SQL Server that helps you get through the day? If you do, please share them in comments, I'd love to learn something new to use in my day-to-day SQL work.",user:{name:"Jakub Rumpel",username:"hanewali",twitter_username:"JakubRumpel",github_username:"Hanewali",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1FU6lvMj--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F617262\u002F6ecf3c40-29a8-4368-bff7-3fe379a89000.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hnnPGmrY--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F617262\u002F6ecf3c40-29a8-4368-bff7-3fe379a89000.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fhanewali\u002F675140",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-22T14:29:48Z","https:\u002F\u002Fdev.to\u002Fhanewali\u002F3-tips-to-make-your-sql-server-experience-easier-5682",8));
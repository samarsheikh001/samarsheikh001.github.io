__NUXT_JSONP__("/articles/fluffy/634991", (function(a,b,c,d,e,f){c.type_of="article";c.id=634991;c.title="Code: Radix sort revisited";c.description="Around two years ago I wrote an article on the perils of relying on big-O notation, and in it I...";c.readable_publish_date="Jul 4";c.slug="code-radix-sort-revisited-2i8p";c.path="\u002Ffluffy\u002Fcode-radix-sort-revisited-2i8p";c.url="https:\u002F\u002Fdev.to\u002Ffluffy\u002Fcode-radix-sort-revisited-2i8p";c.comments_count=0;c.public_reactions_count=a;c.collection_id=d;c.published_timestamp=e;c.positive_reactions_count=a;c.cover_image=d;c.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F634991.png";c.canonical_url="https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited";c.created_at="2021-03-15T01:27:18Z";c.edited_at="2021-07-04T06:44:35Z";c.crossposted_at=e;c.published_at=f;c.last_comment_at=f;c.reading_time_minutes=a;c.tag_list="code, complexity, performance";c.tags=["code","complexity","performance"];c.body_html="\u003Cp\u003EAround two years ago I wrote an article on \u003Ca href=\"https:\u002F\u002Fdev.to\u002Ffluffy\u002Fcode-the-danger-of-big-o-notation-4j3g\"\u003Ethe perils of relying on big-O notation\u003C\u002Fa\u003E, and in it I focused on a comparison between comparison-based sorting (via \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E) and \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FRadix_sort\"\u003Eradix sort\u003C\u002Fa\u003E, based on the common bucketing approach.\u003C\u002Fp\u003E\n\n\u003Cp\u003ERecently I came across a \u003Ca href=\"https:\u002F\u002Fyoutu.be\u002Fujb2CIWE8zY\"\u003Evideo on radix sort\u003C\u002Fa\u003E which presents an alternate counting-based implementation at the end, and claims that the tradeoff point between radix and comparison sort comes much sooner. My intuition said that even counting-based radix sort would still be slower than a comparison sort for any meaningful input size, but it’s always good to test one’s intuitions.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, hey, it turns out I was wrong about something. (But my greater point still stands.)\u003C\u002Fp\u003E\n\n\u003Cfigure\u003E\u003Cp\u003EHere are my implementations of bucket-based and count-based radix sort, in C++:\u003C\u002Fp\u003E\n\u003Cfigcaption\u003E big-o-2.cpp (excerpt)\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n\n\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight cpp\"\u003E\u003Ccode\u003E\u003Cspan class=\"cp\"\u003E#include &lt;vector&gt;\n\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Etypedef\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Estd\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evector\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Euint64_t\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Etypedef\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Estd\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evector\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Euint64_t\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EBucket\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Etemplate\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eradix_bucket_sort\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue_type\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emask\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebits\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Esizeof\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue_type\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebits\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EBucket\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eradixes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eauto\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Eradixes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emask\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E].\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Epush_back\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eclear\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eauto\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebucket\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eradixes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einsert\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebucket\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ebegin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebucket\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E());\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Etemplate\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eradix_count_sort\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue_type\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emask\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Econstexpr\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebits\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Esizeof\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue_type\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"n\"\u003ETestCase\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eoutput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esize\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E());\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ebits\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EK\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecounts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eslots\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eauto\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecounts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emask\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"kt\"\u003Esize_t\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eaccum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eauto\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecounts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eaccum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Eaccum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eauto\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eiter\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erbegin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eiter\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eiter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Eoutput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E--\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecounts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eiter\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emask\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eiter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"n\"\u003Estd\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eswap\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eoutput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFor the full source, see \u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002F_file\u002F11134\u002Fbig-o-2.cpp\"\u003E\u003Ccode\u003Ebig-o-2.cpp\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd here are the time comparisons between \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E, and both bucket and counting radix sort using a 4- and 8-bit radix: (\u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited\"\u003Eraw data\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ubFn2wVr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002F96\u002Ffce3\u002Fbig-o-2-5e4_52d5c28863_640x360.png\" alt=\"big-o-2-5e4.png\" title=\"Five sorts up to 5e4\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--72yvkqT9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002Fd8\u002Fa002\u002Fbig-o-2-1e5_37cbb3dc87_640x360.png\" alt=\"big-o-2-1e5.png\" title=\"Up to 1e5\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W_PbyMR1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002Fa4\u002F05af\u002Fbig-o-2-1e6_d7a71f0713_640x360.png\" alt=\"big-o-2-1e6.png\" title=\"Up to 1e6\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, what’s going on here? And why are even the bucket-radix sort graphs different than last time?\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s hard to do a like-for-like comparison with the previous set of implementations; this time around was running on a very different computer (a Mac mini running on the M1 chip), a newer version of the C++ compiler, a newer version of the C++ standard library, and who knows how many other differences. It’s pretty interesting that the power-of-two allocation overhead from bucketed radix, in particular, has more or less gone away; there’s possibly something about the M1 architecture which makes the vector resize take much less time, and also making use of clang’s robust C++17 support may have also reduced some of the copy overhead due to implicit move semantics being used.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut it’s pretty interesting to me that the following things are pretty apparent:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EA 4-bit radix+bucket sort breaks even with \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E at around N=13000\u003C\u002Fli\u003E\n\u003Cli\u003EAn 8-bit radix+bucket sort breaks even at around N=44000\u003C\u002Fli\u003E\n\u003Cli\u003EBoth 4- and 8-bit radix+count sort break even pretty much immediately (around N=600 and N=100, respectively)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENow, all that said, this still demonstrates a problem with just assuming that a lower big-O factor is better. All four of those radix sort implementations are (\\mathcal{O}(N)), but the bucket-based ones still are slower than the (\\mathcal{O}(N lg N)) \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E until fairly large input sizes, even with all of the overall performance improvements which have happened (after all, \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E has gotten faster too).\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd, of course, all four radix sorts have the same time complexity as each other, but they all scale with different factors; in particular, it doesn’t take that long for the radix+bucket sorts to overtake the 4-bit counting sort (which is, frankly, pretty surprising to me).\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs always, the fact that an algorithm scales better in the long term doesn’t mean it’s suitable for all input sizes. Even in this best-case situation, \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E still wins for input sizes of a few hundred values, and of course the maintenance overhead of using \u003Ccode\u003Estd::sort\u003C\u002Fcode\u003E is \u003Cem\u003Eway\u003C\u002Fem\u003E lower.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s also important to remember that these sorting functions can still only work on unsigned integers, or signed integers with a little tweaking. They are not applicable to floating-point values, much less things with more complicated tiebreaking rules (such as database rows).\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd, heck, it’s also really easy to write code which is (\\mathcal{O}(N)) but not optimal! As we saw with the previous article.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, my conclusion is still the same: practical concerns trump theoretical complexity. But as a bonus conclusion, it’s okay to revisit things to see if they’ve changed.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOh, and you might also want to consider that just because your parts of the algorithm have a certain complexity factor doesn’t mean that’s what the runtime performance will be; it’s easy to make something \u003Ca href=\"https:\u002F\u002Faccidentallyquadratic.tumblr.com\u002F\"\u003Eaccidentally quadratic\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited#comments\"\u003Ecomments\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";c.body_markdown="---\ntitle: Code: Radix sort revisited\npublished: true\ndate: 2021-03-14 20:40:03 UTC\ntags: code,complexity,performance\ncanonical_url: https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited\n---\n\nAround two years ago I wrote an article on [the perils of relying on big-O notation](https:\u002F\u002Fdev.to\u002Ffluffy\u002Fcode-the-danger-of-big-o-notation-4j3g), and in it I focused on a comparison between comparison-based sorting (via `std::sort`) and [radix sort](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FRadix_sort), based on the common bucketing approach.\n\nRecently I came across a [video on radix sort](https:\u002F\u002Fyoutu.be\u002Fujb2CIWE8zY) which presents an alternate counting-based implementation at the end, and claims that the tradeoff point between radix and comparison sort comes much sooner. My intuition said that even counting-based radix sort would still be slower than a comparison sort for any meaningful input size, but it’s always good to test one’s intuitions.\n\nSo, hey, it turns out I was wrong about something. (But my greater point still stands.)\n\nHere are my implementations of bucket-based and count-based radix sort, in C++:\n\n\u003Cfigcaption\u003E big-o-2.cpp (excerpt)\u003C\u002Ffigcaption\u003E\n\n```cpp\n#include \u003Cvector\u003E\n\ntypedef std::vector\u003Cuint64_t\u003E TestCase;\ntypedef std::vector\u003Cuint64_t\u003E Bucket;\n\ntemplate\u003Csize_t K = 8\u003E void radix_bucket_sort(TestCase& input)\n{\n    constexpr size_t slots = 1 \u003C\u003C K;\n    constexpr TestCase::value_type mask = slots - 1;\n    constexpr size_t bits = sizeof(TestCase::value_type) * 8;\n    for (int r = 0; r \u003C bits; r += K) {\n        Bucket radixes[slots];\n        for (auto n : input) {\n            radixes[(n \u003E\u003E r) & mask].push_back(n);\n        }\n        input.clear();\n        for (auto& bucket : radixes) {\n            input.insert(input.end(), bucket.begin(), bucket.end());\n        }\n    }\n}\n\ntemplate\u003Csize_t K = 8\u003E void radix_count_sort(TestCase& input)\n{\n    constexpr size_t slots = 1 \u003C\u003C K;\n    constexpr TestCase::value_type mask = slots - 1;\n    constexpr size_t bits = sizeof(TestCase::value_type) * 8;\n\n    TestCase output(input.size());\n\n    for (int r = 0; r \u003C bits; r += K) {\n        size_t counts[slots] = {0};\n        for (auto n : input) {\n            ++counts[(n \u003E\u003E r) & mask];\n        }\n        size_t accum = 0;\n        for (auto& n : counts) {\n            n += accum;\n            accum = n;\n        }\n\n        for (auto iter = input.rbegin(); iter != input.rend(); ++iter) {\n            output[--counts[(*iter \u003E\u003E r) & mask]] = *iter;\n        }\n\n        std::swap(input, output);\n    }\n}\n\n```\n\nFor the full source, see [`big-o-2.cpp`](https:\u002F\u002Fbeesbuzz.biz\u002F_file\u002F11134\u002Fbig-o-2.cpp)\n\nAnd here are the time comparisons between `std::sort`, and both bucket and counting radix sort using a 4- and 8-bit radix: ([raw data](https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited))\n\n[![big-o-2-5e4.png](https:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002F96\u002Ffce3\u002Fbig-o-2-5e4_52d5c28863_640x360.png \"Five sorts up to 5e4\")](https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited)[![big-o-2-1e5.png](https:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002Fd8\u002Fa002\u002Fbig-o-2-1e5_37cbb3dc87_640x360.png \"Up to 1e5\")](https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited)[![big-o-2-1e6.png](https:\u002F\u002Fbeesbuzz.biz\u002Fstatic\u002F_img\u002Fa4\u002F05af\u002Fbig-o-2-1e6_d7a71f0713_640x360.png \"Up to 1e6\")](https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited)\n\nSo, what’s going on here? And why are even the bucket-radix sort graphs different than last time?\n\nIt’s hard to do a like-for-like comparison with the previous set of implementations; this time around was running on a very different computer (a Mac mini running on the M1 chip), a newer version of the C++ compiler, a newer version of the C++ standard library, and who knows how many other differences. It’s pretty interesting that the power-of-two allocation overhead from bucketed radix, in particular, has more or less gone away; there’s possibly something about the M1 architecture which makes the vector resize take much less time, and also making use of clang’s robust C++17 support may have also reduced some of the copy overhead due to implicit move semantics being used.\n\nBut it’s pretty interesting to me that the following things are pretty apparent:\n\n- A 4-bit radix+bucket sort breaks even with `std::sort` at around N=13000\n- An 8-bit radix+bucket sort breaks even at around N=44000\n- Both 4- and 8-bit radix+count sort break even pretty much immediately (around N=600 and N=100, respectively)\n\nNow, all that said, this still demonstrates a problem with just assuming that a lower big-O factor is better. All four of those radix sort implementations are \\(\\mathcal{O}(N)\\), but the bucket-based ones still are slower than the \\(\\mathcal{O}(N lg N)\\) `std::sort` until fairly large input sizes, even with all of the overall performance improvements which have happened (after all, `std::sort` has gotten faster too).\n\nAnd, of course, all four radix sorts have the same time complexity as each other, but they all scale with different factors; in particular, it doesn’t take that long for the radix+bucket sorts to overtake the 4-bit counting sort (which is, frankly, pretty surprising to me).\n\nAs always, the fact that an algorithm scales better in the long term doesn’t mean it’s suitable for all input sizes. Even in this best-case situation, `std::sort` still wins for input sizes of a few hundred values, and of course the maintenance overhead of using `std::sort` is _way_ lower.\n\nIt’s also important to remember that these sorting functions can still only work on unsigned integers, or signed integers with a little tweaking. They are not applicable to floating-point values, much less things with more complicated tiebreaking rules (such as database rows).\n\nAnd, heck, it’s also really easy to write code which is \\(\\mathcal{O}(N)\\) but not optimal! As we saw with the previous article.\n\nSo, my conclusion is still the same: practical concerns trump theoretical complexity. But as a bonus conclusion, it’s okay to revisit things to see if they’ve changed.\n\nOh, and you might also want to consider that just because your parts of the algorithm have a certain complexity factor doesn’t mean that’s what the runtime performance will be; it’s easy to make something [accidentally quadratic](https:\u002F\u002Faccidentallyquadratic.tumblr.com\u002F).\n\n[comments](https:\u002F\u002Fbeesbuzz.biz\u002Fcode\u002F1159-Radix-sort-revisited#comments)";c.user={name:b,username:b,twitter_username:b,github_username:"fluffy-critter",website_url:"https:\u002F\u002Fbeesbuzz.biz\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_pKy8IUb--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F119947\u002Ff2055327-f05e-4ecc-b4da-b7010949615c.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CLk3dnGi--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F119947\u002Ff2055327-f05e-4ecc-b4da-b7010949615c.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(4,"fluffy",{},null,"2021-07-04T06:43:55Z","2021-03-14T20:40:03Z")));
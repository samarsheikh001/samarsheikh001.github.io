window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:559223,title:"Understanding Rendering in React ‚ôª ‚öõÔ∏è",description:"Hey there! üëãüèº  I'm Mateo Garcia, I co-organize a community in Medellin, Colombia called React Medelli...",readable_publish_date:"Jan 31",slug:"understanding-rendering-in-react-i5i",path:"\u002Fteo_garcia\u002Funderstanding-rendering-in-react-i5i",url:b,comments_count:19,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DvCQ4J5S--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fxk1z0iv82gn4b7hcueqa.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4-N2vUr5--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fxk1z0iv82gn4b7hcueqa.png",canonical_url:b,created_at:"2021-01-02T18:13:08Z",edited_at:"2021-01-31T14:43:20Z",crossposted_at:a,published_at:d,last_comment_at:"2021-09-03T10:11:59Z",reading_time_minutes:6,tag_list:"react, webdev, javascript, reactnative",tags:["react","webdev","javascript","reactnative"],body_html:"\u003Cp\u003EHey there! üëãüèº\u003C\u002Fp\u003E\n\n\u003Cp\u003EI'm Mateo Garcia, I co-organize a community in Medellin, Colombia called React Medellin. This year I started a series of posts called 'Coding with Mateo'; My first post was about \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fteo_garcia\u002F6-ways-to-write-a-react-component-ts-included-2k42\"\u003E6 ways to write a React component\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yDImMgOG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsowd5c0xwoinpbaxaza4.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yDImMgOG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsowd5c0xwoinpbaxaza4.png\" alt=\"Coding with Mateo billboard\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EToday I want to share with you what I have researched for a couple of weeks about how rendering works in React. To begin with, I will say that the concept of rendering in React is a little different from how we know it. Let's find out why.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"table-of-contents\" href=\"#table-of-contents\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Contents\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E1.\u003Ca href=\"#introduction\"\u003EIntroduction\u003C\u002Fa\u003E\u003Cbr\u003E\n2.\u003Ca href=\"#virtualdom\"\u003EVirtualDOM\u003C\u002Fa\u003E\u003Cbr\u003E\n3.\u003Ca href=\"#render\"\u003ERender\u003C\u002Fa\u003E\u003Cbr\u003E\n4.\u003Ca href=\"#reconciliation\"\u003EReconciliation\u003C\u002Fa\u003E\u003Cbr\u003E\n5.\u003Ca href=\"#commit\"\u003ECommit\u003C\u002Fa\u003E\u003Cbr\u003E\n6.\u003Ca href=\"#example\"\u003EAn example\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EYou are probably here because you have worked with React, interacted with their APIs, changed the state of your components, and seen the magic happen. However, it is sometimes useful to go into a little more detail about how React does what it does. Performance problems can appear when your React application is continuously re-rendering, the application has scaled considerably and, the components are complex and expensive to represent. That's why \u003Ccode\u003EUnderstanding rendering in React\u003C\u002Fcode\u003E is something that all of us who use this library should understand.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo understand why React is so fast it is important to know these four concepts:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EVirtual DOM.\u003C\u002Fli\u003E\n\u003Cli\u003ERender.\u003C\u002Fli\u003E\n\u003Cli\u003EReconciliation.\u003C\u002Fli\u003E\n\u003Cli\u003ECommit.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ELet's get started\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"virtualdom\" href=\"#virtualdom\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  VirtualDOM\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe Virtual DOM was a strategy that appeared to solve the modifications or mutations that the DOM suffers when using a web or mobile application. Rendering the entire document tree is too costly as applications become more complex; by mutations, we can understand any change that the DOM can undergo: an insertion\u002Fmodification\u002Fdeletion of an element or its properties.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThus, the Virtual DOM came to represent the DOM tree in memory. Perform calculations using the state and props and finally decide which elements of the actual DOM (the browser one, I mean haha) should be mutated. From the \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Ffaq-internals.html\"\u003Eofficial React website\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EThe virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM by a library such as ReactDOM. This process is called reconciliation. \u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EInitially, I said that the concept we normally know as rendering is different in React, I personally considered rendering as the procedure of synchronizing changes in the DOM. React synchronizes the changes in the DOM through three steps.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8w4-NrE6--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcsjl5onhxu99qhokbfjh.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8w4-NrE6--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcsjl5onhxu99qhokbfjh.png\" alt=\"Virtual DOM in a graphic\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"render\" href=\"#render\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Render\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERendering is a process that is triggered by a change of state in some component of your application, when a state change occurs React:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rulaPxWd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9s7jqpadoijq32y5b1eo.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rulaPxWd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9s7jqpadoijq32y5b1eo.png\" alt=\"React render phase illustration\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIt will collect from the root of your App all the components that requested a re-render because their state or their props changed.\u003C\u002Fli\u003E\n\u003Cli\u003EIt will invoke these components\n\n\u003Col\u003E\n\u003Cli\u003EIf you use \u003Ccode\u003Efunction components\u003C\u002Fcode\u003E it will invoke the function itself, something like \u003Ccode\u003EHeader(props)\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EIf you use \u003Ccode\u003Eclass components\u003C\u002Fcode\u003E it will invoke \u003Ccode\u003EYourComponent.render()\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EEven when the process's name is rendering, at this point, the DOM has not been modified or altered, which could be a little tricky if you think as I did, about the meaning of render.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESince we normally use \u003Ccode\u003EJSX\u003C\u002Fcode\u003E, the code will be transformed to \u003Ccode\u003EReact.createElement(...)\u003C\u002Fcode\u003E. The output of the \u003Ccode\u003EcreateElement\u003C\u002Fcode\u003E will describe how the application should look like in the next version of the render through the next stage called:\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"reconciliation\" href=\"#reconciliation\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reconciliation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EOnce the re-rendering has happened, React has the context of two versions of the \u003Ccode\u003EReact.createElement\u003C\u002Fcode\u003E output, the version executed before the state change occurred, and the version executed after the state has changed. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WO9HqQdq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F5b2efk1nj6yhl83jou5i.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WO9HqQdq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F5b2efk1nj6yhl83jou5i.png\" alt=\"Reconcilier process illustration\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt this point two objects are describing the UI, React through a heuristic algorithm of order O(n^3) will be able to determine which elements need to be represented again.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAmong technical details the React team tells us some aspects about how React identifies which elements were affected:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003EElements that changed type must be recreated.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EChanges within the attributes of an element are replaced, without unmounting the element.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EUpgrades within the element's children recreate all children\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EUpdates within child elements that use \u003Ccode\u003Ekey\u003C\u002Fcode\u003E as attributes are compared and only new items are represented.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"commit\" href=\"#commit\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Commit\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAfter React calculated all the changes that should be made in the application tree, \u003Ccode\u003Ereact-dom\u003C\u002Fcode\u003E appears for the browser and \u003Ccode\u003Ereact-native\u003C\u002Fcode\u003E for the mobile platforms, which make the modifications to the browser or mobile app API (finally! ü•≥). Synchronously React will clean up the past layout effects, run the new layout effects, then the browser will paint the DOM, after that, React will clean up the past effects and mount the new ones; when I talk about effects I refer to the lifecycles method such as \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-reference.html#uselayouteffect\"\u003EuseLayoutEffect\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-reference.html#useeffect\"\u003EuseEffect\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iWg-G05---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9pswc5zt2psdqbgiq8oa.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iWg-G05---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9pswc5zt2psdqbgiq8oa.png\" alt=\"Commit phase illustration\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo explain the lifecycles method part a little bit more, I bring to you this wonderful graph that Donavon West and his contributors created. This is the project \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdonavon\u002Fhook-flow\"\u003Erepo\u003C\u002Fa\u003E, check it out!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Gb81aRyw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frexqxdys2yzjq7m178ba.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Gb81aRyw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frexqxdys2yzjq7m178ba.png\" alt=\"React Hooks lifecycle methods flow\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore moving on to the example, it is important to understand that under normal conditions, if a component calls \u003Ccode\u003Erender\u003C\u002Fcode\u003E, it will automatically do so for all its children. However it is possible to prevent certain components from being re-rendered under certain special cases, I have in my plans to talk about it, however, you can read about \u003Ccode\u003EReact.PureComponent\u003C\u002Fcode\u003E, \u003Ccode\u003EReact.memo\u003C\u002Fcode\u003E, \u003Ccode\u003EReact.useMemo\u003C\u002Fcode\u003E, and \u003Ccode\u003EReact.useCallback\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"example\" href=\"#example\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Example\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EConsider the following example.\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dIMaHnGk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhnrnb18jxqolmu2vuffb.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dIMaHnGk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhnrnb18jxqolmu2vuffb.png\" alt=\"Rendering example\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere's the code\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ereact\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E..\u002F..\u002Futils\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EgetRandomHEX\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E`#\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003EMath\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Efloor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003EMath\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Erandom\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E16777215\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E).\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EtoString\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E16\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EHeader\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecolor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsetColor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EuseState\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E#111\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Eheader\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Estyle\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EbackgroundColor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecolor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003EHeader component has re-rendered \u003Cspan class=\"si\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E}\u003C\u002Fspan\u003E times\u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ebutton\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EonClick\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsetColor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EgetRandomHEX\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E())\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003EClick\u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ebutton\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Eheader\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EFooter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Efooter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003EFooter component has re-rendered \u003Cspan class=\"si\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E}\u003C\u002Fspan\u003E times\u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Efooter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EApp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EHeader\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E\u002F&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003EHey, nice to see you again üëãüèº\u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003EThe App component has re-rendered \u003Cspan class=\"si\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecount\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E}\u003C\u002Fspan\u003E times\u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u002F\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003Emain\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"nc\"\u003EFooter\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E\u002F&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E&lt;\u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EApp\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003EuseRenderTimes\u003C\u002Fcode\u003E is a hook that will allow us to accumulate the number of times a component is re-rendered. I saw it in a \u003Ca href=\"https:\u002F\u002Fkentcdodds.com\u002Fblog\u002Fhow-to-optimize-your-context-value\"\u003Epost\u003C\u002Fa\u003E by Kent C Dodds, so thanks!\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight tsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Ereact\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErenderRef\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EuseRef\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"nx\"\u003EReact\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EuseEffect\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003ErenderRef\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErenderRef\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErenderRef\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EuseRenderTimes\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe \u003Ccode\u003E&lt;Header \u002F&gt;\u003C\u002Fcode\u003E component has its own state, which will be changing once we start pressing the button. Let's take a look\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TtBPzwyD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9fwem222jn8vn08ywsin.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TtBPzwyD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9fwem222jn8vn08ywsin.png\" alt=\"Rendering example in the second render\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat just happened here is:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EAn event in the \u003Ccode\u003E&lt;Header \u002F&gt;\u003C\u002Fcode\u003E component triggered a state change. A render was scheduled.\u003C\u002Fli\u003E\n\u003Cli\u003EVirtualDOM started analyzing which components were marked as needing to be re-rendered. Only \u003Ccode\u003E&lt;Header \u002F&gt;\u003C\u002Fcode\u003E needed it.\u003C\u002Fli\u003E\n\u003Cli\u003EThrough the reconciliation step, it was identified that the style of the \u003Ccode\u003E&lt;header&gt;&lt;\u002Fheader&gt;\u003C\u002Fcode\u003E was changing.\u003C\u002Fli\u003E\n\u003Cli\u003EDispatched a commit to DOM.\u003C\u002Fli\u003E\n\u003Cli\u003EBoom, we see the change of the background color.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"final-thoughts\" href=\"#final-thoughts\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Final thoughts\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAlthough rendering in React is a process that can become complex, we must recognize the excellent work done by the entire React Team to improve the day to day experience in web development. Knowing the deeper parts of a tool can be useful for people who are just starting to discover it, as well as for people who have been using it for a long time and want to understand what was going on behind the scenes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI want to thank the experts who continually strive to share all the knowledge in the most understandable way possible, some of them are \u003Ca href=\"https:\u002F\u002Fblog.isquaredsoftware.com\u002F\"\u003EMark Erikson\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fkentcdodds.com\u002Fblog\u002F\"\u003EKent C Dodds\u003C\u002Fa\u003E. I leave you the link to their blogs. Each article is a gold mine and needs to be recognized.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you found this post useful and would like to see more content, you could react to this post, which would make me very happy. If you have any comments or corrections that could improve this post, I would be glad to receive them. Thank you for your time üëãüèº üíô.\u003C\u002Fp\u003E\n\n",body_markdown:"Hey there! üëãüèº\n\nI'm Mateo Garcia, I co-organize a community in Medellin, Colombia called React Medellin. This year I started a series of posts called 'Coding with Mateo'; My first post was about [6 ways to write a React component](https:\u002F\u002Fdev.to\u002Fteo_garcia\u002F6-ways-to-write-a-react-component-ts-included-2k42).\n\n![Coding with Mateo billboard](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsowd5c0xwoinpbaxaza4.png)\n\nToday I want to share with you what I have researched for a couple of weeks about how rendering works in React. To begin with, I will say that the concept of rendering in React is a little different from how we know it. Let's find out why.\n\n## Table of Contents\n1.[Introduction](#introduction)\n2.[VirtualDOM](#virtualdom)\n3.[Render](#render)\n4.[Reconciliation](#reconciliation)\n5.[Commit](#commit)\n6.[An example](#example)\n\n### Introduction\n\nYou are probably here because you have worked with React, interacted with their APIs, changed the state of your components, and seen the magic happen. However, it is sometimes useful to go into a little more detail about how React does what it does. Performance problems can appear when your React application is continuously re-rendering, the application has scaled considerably and, the components are complex and expensive to represent. That's why `Understanding rendering in React` is something that all of us who use this library should understand.\n\nTo understand why React is so fast it is important to know these four concepts:\n\n1. Virtual DOM.\n2. Render.\n3. Reconciliation.\n4. Commit.\n\nLet's get started\n\n## VirtualDOM\n\nThe Virtual DOM was a strategy that appeared to solve the modifications or mutations that the DOM suffers when using a web or mobile application. Rendering the entire document tree is too costly as applications become more complex; by mutations, we can understand any change that the DOM can undergo: an insertion\u002Fmodification\u002Fdeletion of an element or its properties.\n\nThus, the Virtual DOM came to represent the DOM tree in memory. Perform calculations using the state and props and finally decide which elements of the actual DOM (the browser one, I mean haha) should be mutated. From the [official React website](https:\u002F\u002Freactjs.org\u002Fdocs\u002Ffaq-internals.html):\n\n\u003E The virtual DOM (VDOM) is a programming concept where an ideal, or ‚Äúvirtual‚Äù, representation of a UI is kept in memory and synced with the ‚Äúreal‚Äù DOM by a library such as ReactDOM. This process is called reconciliation. \n\nInitially, I said that the concept we normally know as rendering is different in React, I personally considered rendering as the procedure of synchronizing changes in the DOM. React synchronizes the changes in the DOM through three steps.\n\n![Virtual DOM in a graphic](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcsjl5onhxu99qhokbfjh.png)\n\n## Render\n\nRendering is a process that is triggered by a change of state in some component of your application, when a state change occurs React:\n\n![React render phase illustration](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9s7jqpadoijq32y5b1eo.png)\n\n- It will collect from the root of your App all the components that requested a re-render because their state or their props changed.\n- It will invoke these components\n  1. If you use `function components` it will invoke the function itself, something like `Header(props)`.\n  2. If you use `class components` it will invoke `YourComponent.render()`.\n\nEven when the process's name is rendering, at this point, the DOM has not been modified or altered, which could be a little tricky if you think as I did, about the meaning of render.\n  \nSince we normally use `JSX`, the code will be transformed to `React.createElement(...)`. The output of the `createElement` will describe how the application should look like in the next version of the render through the next stage called:\n\n## Reconciliation\n\nOnce the re-rendering has happened, React has the context of two versions of the `React.createElement` output, the version executed before the state change occurred, and the version executed after the state has changed. \n\n![Reconcilier process illustration](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F5b2efk1nj6yhl83jou5i.png)\n\nAt this point two objects are describing the UI, React through a heuristic algorithm of order O(n^3) will be able to determine which elements need to be represented again.\n\nAmong technical details the React team tells us some aspects about how React identifies which elements were affected:\n\n1. Elements that changed type must be recreated.\n\n2. Changes within the attributes of an element are replaced, without unmounting the element.\n\n3. Upgrades within the element's children recreate all children\n\n4. Updates within child elements that use `key` as attributes are compared and only new items are represented.\n\n## Commit\n\nAfter React calculated all the changes that should be made in the application tree, `react-dom` appears for the browser and `react-native` for the mobile platforms, which make the modifications to the browser or mobile app API (finally! ü•≥). Synchronously React will clean up the past layout effects, run the new layout effects, then the browser will paint the DOM, after that, React will clean up the past effects and mount the new ones; when I talk about effects I refer to the lifecycles method such as [useLayoutEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-reference.html#uselayouteffect) and [useEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-reference.html#useeffect).\n\n![Commit phase illustration](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9pswc5zt2psdqbgiq8oa.png)\n\nTo explain the lifecycles method part a little bit more, I bring to you this wonderful graph that Donavon West and his contributors created. This is the project [repo](https:\u002F\u002Fgithub.com\u002Fdonavon\u002Fhook-flow), check it out!\n\n![React Hooks lifecycle methods flow](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frexqxdys2yzjq7m178ba.png)\n\n\n\nBefore moving on to the example, it is important to understand that under normal conditions, if a component calls `render`, it will automatically do so for all its children. However it is possible to prevent certain components from being re-rendered under certain special cases, I have in my plans to talk about it, however, you can read about `React.PureComponent`, `React.memo`, `React.useMemo`, and `React.useCallback`.\n\n## Example\nConsider the following example.\n![Rendering example](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhnrnb18jxqolmu2vuffb.png)\n\nHere's the code\n\n```jsx\nimport * as React from \"react\";\nimport { useRenderTimes } from '..\u002F..\u002Futils';\n\nfunction getRandomHEX() {\n  return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\nfunction Header() {\n  const [color, setColor] = React.useState(\"#111\");\n  const count = useRenderTimes();\n  return (\n    \u003Cheader style={{ backgroundColor: color }}\u003E\n      \u003Cp\u003EHeader component has re-rendered {count} times\u003C\u002Fp\u003E\n      \u003Cbutton onClick={() =\u003E setColor(getRandomHEX())}\u003EClick\u003C\u002Fbutton\u003E\n    \u003C\u002Fheader\u003E\n  );\n}\n\nfunction Footer() {\n  const count = useRenderTimes();\n  return (\n    \u003Cfooter\u003E\n      \u003Cp\u003EFooter component has re-rendered {count} times\u003C\u002Fp\u003E\n    \u003C\u002Ffooter\u003E\n  );\n}\n\nfunction App() {\n  const count = useRenderTimes();\n  return (\n    \u003C\u003E\n      \u003CHeader \u002F\u003E\n      \u003Cmain\u003E\n        \u003Cp\u003EHey, nice to see you again üëãüèº\u003C\u002Fp\u003E\n        \u003Cp\u003EThe App component has re-rendered {count} times\u003C\u002Fp\u003E\n      \u003C\u002Fmain\u003E\n      \u003CFooter \u002F\u003E\n    \u003C\u002F\u003E\n  );\n}\n\nexport { App };\n}\n```\n\n`useRenderTimes` is a hook that will allow us to accumulate the number of times a component is re-rendered. I saw it in a [post](https:\u002F\u002Fkentcdodds.com\u002Fblog\u002Fhow-to-optimize-your-context-value) by Kent C Dodds, so thanks!\n\n```tsx\nimport * as React from 'react';\n\nfunction useRenderTimes() {\n  const renderRef = React.useRef(0);\n\n  React.useEffect(() =\u003E {\n    renderRef.current = renderRef.current + 1;\n  });\n\n  return renderRef.current;\n}\n\nexport { useRenderTimes };\n```\n\nThe `\u003CHeader \u002F\u003E` component has its own state, which will be changing once we start pressing the button. Let's take a look\n\n![Rendering example in the second render](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9fwem222jn8vn08ywsin.png)\n\n\nWhat just happened here is:\n\n1. An event in the `\u003CHeader \u002F\u003E` component triggered a state change. A render was scheduled.\n2. VirtualDOM started analyzing which components were marked as needing to be re-rendered. Only `\u003CHeader \u002F\u003E` needed it.\n3. Through the reconciliation step, it was identified that the style of the `\u003Cheader\u003E\u003C\u002Fheader\u003E` was changing.\n4. Dispatched a commit to DOM.\n5. Boom, we see the change of the background color.\n\n\n### Final thoughts\n\nAlthough rendering in React is a process that can become complex, we must recognize the excellent work done by the entire React Team to improve the day to day experience in web development. Knowing the deeper parts of a tool can be useful for people who are just starting to discover it, as well as for people who have been using it for a long time and want to understand what was going on behind the scenes.\n\nI want to thank the experts who continually strive to share all the knowledge in the most understandable way possible, some of them are [Mark Erikson](https:\u002F\u002Fblog.isquaredsoftware.com\u002F) and [Kent C Dodds](https:\u002F\u002Fkentcdodds.com\u002Fblog\u002F). I leave you the link to their blogs. Each article is a gold mine and needs to be recognized.\n\nIf you found this post useful and would like to see more content, you could react to this post, which would make me very happy. If you have any comments or corrections that could improve this post, I would be glad to receive them. Thank you for your time üëãüèº üíô.",user:{name:"Mateo Garcia",username:"teo_garcia",twitter_username:a,github_username:"teo-garcia",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6DAnVbcQ--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F24289\u002Fa40519e9-94c2-4ca6-986b-ec73366a7780.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NfC1qZKO--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F24289\u002Fa40519e9-94c2-4ca6-986b-ec73366a7780.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fteo_garcia\u002F559223",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fteo_garcia\u002Funderstanding-rendering-in-react-i5i",921,"2021-01-31T14:34:20Z"));
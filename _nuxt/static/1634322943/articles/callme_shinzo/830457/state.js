window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:830457,title:"Arrays: Deletion with searching in C++",description:"I was practising arrays in C++, for competitive programming. While coding for basic operations, I...",readable_publish_date:"Sep 18",slug:"arrays-deletion-with-searching-in-c-39an",path:"\u002Fcallme_shinzo\u002Farrays-deletion-with-searching-in-c-39an",url:c,comments_count:2,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--S3CG35MU--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvsa8touhasgmhhzh3jjh.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VSzSTCLq--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvsa8touhasgmhhzh3jjh.jpg",canonical_url:c,created_at:b,edited_at:"2021-09-18T10:51:38Z",crossposted_at:a,published_at:b,last_comment_at:"2021-09-22T04:44:42Z",reading_time_minutes:1,tag_list:"cpp, arrays, datastructure, programming",tags:["cpp","arrays","datastructure","programming"],body_html:"\u003Cp\u003EI was practising arrays in C++, for competitive programming. While coding for basic operations, I thought to code for deleting elements while searching for them. \u003C\u002Fp\u003E\n\n\u003Cp\u003EJumped to google and after searching for like 30 minutes, I got no stuff related except one article from GFG, which showed me a complex code. But the code from GeeksforGeeks didn't run when array contained same value elements. Without wasting time on searching, I started writing algorithm for the solution I want. \u003Cbr\u003E\nAnd after an hour, I was able to write an algorithm which works for array with same elements, and array with different elements.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI don't know whether solution is available on internet or not, it must be there, but hard to find. See if my solution helps in this, although the time complexity of this solution is not as efficient as it should be.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe program doesn't include any STL functions, since I am a beginner in DSA with C++ twice.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELink to GFG solution : \u003Ca href=\"https:\u002F\u002Fwww.geeksforgeeks.org\u002Fdelete-an-element-from-array-using-two-traversals-and-one-traversal\u002F\"\u003Ehttps:\u002F\u002Fwww.geeksforgeeks.org\u002Fdelete-an-element-from-array-using-two-traversals-and-one-traversal\u002F\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ECode:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\nint deleteSearch(int a[],int n, int val){\n\n\u002F\u002F val is value to be searched\n\u002F\u002F n is the size of static array\n\n     int i = 0;  \n     while( i &lt; n){\n\n         if(a[i] == val) {\n\n             \u002F\u002Fshifting and deleting elements\n             while(i &lt; n){\n                 a[i] = a[i+1];\n                 i++;\n\n             }\n\n             n--;\n             i = 0;\n\n         }\n\n         else \n             i++;\n\n     }\n     return n;\n }\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe program works for all cases.  Please share you views,corrections and solutions.\u003C\u002Fp\u003E\n\n",body_markdown:"I was practising arrays in C++, for competitive programming. While coding for basic operations, I thought to code for deleting elements while searching for them. \n\nJumped to google and after searching for like 30 minutes, I got no stuff related except one article from GFG, which showed me a complex code. But the code from GeeksforGeeks didn't run when array contained same value elements. Without wasting time on searching, I started writing algorithm for the solution I want. \nAnd after an hour, I was able to write an algorithm which works for array with same elements, and array with different elements.\n\nI don't know whether solution is available on internet or not, it must be there, but hard to find. See if my solution helps in this, although the time complexity of this solution is not as efficient as it should be.\n\nThe program doesn't include any STL functions, since I am a beginner in DSA with C++ twice.\n\nLink to GFG solution : https:\u002F\u002Fwww.geeksforgeeks.org\u002Fdelete-an-element-from-array-using-two-traversals-and-one-traversal\u002F\n\n\nCode:\n```\n\nint deleteSearch(int a[],int n, int val){\n\n\u002F\u002F val is value to be searched\n\u002F\u002F n is the size of static array\n\n     int i = 0;  \n     while( i \u003C n){\n\n         if(a[i] == val) {\n\n             \u002F\u002Fshifting and deleting elements\n             while(i \u003C n){\n                 a[i] = a[i+1];\n                 i++;\n\n             }\n\n             n--;\n             i = 0;\n\n         }\n\n         else \n             i++;\n        \n     }\n     return n;\n }\n\n```\n\n\n\nThe program works for all cases.  Please share you views,corrections and solutions.",user:{name:"CallMe_Shinzo",username:"callme_shinzo",twitter_username:a,github_username:"Skiena34",website_url:"https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fsakshi-jain909099\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--eUnD6LDY--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F703356\u002F30aff4a8-d47b-4b5a-a11b-23b2a950b10c.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tlCor6_5--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F703356\u002F30aff4a8-d47b-4b5a-a11b-23b2a950b10c.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fcallme_shinzo\u002F830457",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-09-18T10:42:35Z","https:\u002F\u002Fdev.to\u002Fcallme_shinzo\u002Farrays-deletion-with-searching-in-c-39an",6));
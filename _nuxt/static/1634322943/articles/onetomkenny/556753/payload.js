__NUXT_JSONP__("/articles/onetomkenny/556753", (function(a,b,c,d,e,f){d.type_of="article";d.id=556753;d.title="The Journey Of A Brownfield Monolith Towards SOLID";d.description="Our First Thousand Unit Tests...   \"Wait, we’ve written 1000 Unit tests?\"  This would have s...";d.readable_publish_date="Jan 7";d.slug="the-journey-of-a-brownfield-monolith-towards-solid-koo";d.path="\u002Fonetomkenny\u002Fthe-journey-of-a-brownfield-monolith-towards-solid-koo";d.url=e;d.comments_count=0;d.public_reactions_count=f;d.collection_id=a;d.published_timestamp=b;d.positive_reactions_count=f;d.cover_image=a;d.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F556753.png";d.canonical_url=e;d.created_at="2020-12-30T20:20:23Z";d.edited_at="2021-01-07T18:22:28Z";d.crossposted_at=a;d.published_at=b;d.last_comment_at=b;d.reading_time_minutes=5;d.tag_list="testdev, csharp, dependencyinjection, solid";d.tags=["testdev","csharp","dependencyinjection","solid"];d.body_html="\u003Ch1\u003E\n  \u003Ca name=\"our-first-thousand-unit-tests\" href=\"#our-first-thousand-unit-tests\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Our First Thousand Unit Tests...\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Cem\u003E\"Wait, we’ve written 1000 Unit tests?\"\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis would have seemed like a ridiculous goal 18 months ago.   Our 19 year old monolith platform created by (on average) four developers was the sort that everyone pretends not to work on these days:  \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  240,000 lines of C# code, with no unit testing (though we did have other forms of automated acceptance testing and js based unit tests on the front end).\n\u003C\u002Fli\u003E\n\u003Cli\u003E  C# code is written directly against volatile dependencies like database and caching.\n\u003C\u002Fli\u003E\n\u003Cli\u003E  Subject Matter Experts confidently stride into dark corners of the code whenever there is a problem.\n\u003C\u002Fli\u003E\n\u003Cli\u003E  The code is structured enough that non-SMEs can work when SMEs are on vacation even though its slow going. The code is “pretty” though decidedly legacy (as per \u003Ca href=\"https:\u002F\u002Fwww.amazon.com\u002FWorking-Effectively-Legacy-Michael-Feathers\u002Fdp\u002F0131177052\"\u003EMichael C Feathers\u003C\u002Fa\u003E).\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"fourth-times-the-charm\" href=\"#fourth-times-the-charm\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Fourth Time's The Charm\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOver the years we had made probably three half-hearted attempts at unit testing in the business layer but ran into the same problems that everybody else does:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003E\u003Cem\u003EHow to get data into the methods you want to test\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E You’ll try a special database first.  You will grow old trying to keep it in the right state and tests will run glacially slow.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003E\u003Cem\u003EVery little of our code featured Abstract, Virtual or Interface based practices.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E That seemed to leave reflection based testing as an option.  A very non-performant, brittle option that looked best suited to getting code into a test harness for a more aggressive refactoring that ended with more unit test coverage.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003E\u003Cem\u003EOur methods were \"well written\" but contain layers of nested logic.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E  You can’t easily write a set of concise unit tests for that sort of code and end up confident that you are really testing every logical possibility.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003E\u003Cem\u003EAnd lets be honest, our ability to deploy new versions with massive internal changes that don’t cause huge fires proves that we are great developers right?\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EStill, you feel growing unease because the application is growing in complexity and it would be nice to hire new people without them having to spend six months learning all the system’s secret handshakes.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EYou know the world has moved on since you left school too.  You could have written off Dependency Injection, Mocking, Unit Testing and Compositional coding approaches as “probably just fads” ten years ago.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EMaybe…\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut now this is all mainstream stuff with a proven track record and the best developer interview candidates get quiet when you let on that you don’t really do any of that SOLID stuff at your company.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"and-there-was-another-problem\" href=\"#and-there-was-another-problem\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cem\u003EAnd There Was Another Problem\u003C\u002Fem\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOur business logic was tightly coupled to a number of things that were slipping into legacy status.   Without seams in the code our business and repository logic was mixed up with the implementation details of those components.  Some of them (like Full Framework) were on the list of “Definitely someday we need to deal with that”.   \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut how could we really make progress against something so large when the platform has to add features just to pay the bills today?  And what about all the other dependencies in the meantime?  The thought of a business layer containing nothing but business logic indifferent to the outside world seemed like such a beautiful utopia.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGrowing feelings of long term dread coupled with a change in company ownership created an opportunity to lead an attack on all of these through an initiative creatively called \u003Cem\u003E\u003Cstrong\u003E\u003Cem\u003E“Do Unit Testing, But For Real This Time”.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere was no shortage of good vibes coming from the newer team members, but the rest of us knew how past attempts had gone. We knew it was going to take more than getting everyone to just say they would do things better.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"the-slow-start\" href=\"#the-slow-start\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  The Slow Start...\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe most obvious pain point was getting data into the methods we wanted to test.  We already knew we needed to use mocking rather than trying to maintain a slow database.   The major mocking tools and the blogs about Test Driven Development were all talking about Dependency Injection.   There was no shortage of punchy little demos proving just how easy it all was.  \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EBut it wasn’t easy for us because the state of our existing code was nothing like those examples.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EAnother problem was that every DI example was introducing considerable amounts of abstraction into examples that started out as some pretty straightforward coding.   It seemed like making the system easier to manage meant you had to make it way more complicated.   Could this be sold to a team already used to doing things “the obvious way”?  \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat about the risks of this bold new direction?  It didn’t seem like you could just break off a little piece from these techniques and then add more later on if it went well.  You had to do them all to write testable code and you had to wrap your head around several new disciplines and integrate them all to have a shot at ending up with something you wanted to work on every day.   \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EWho do you trust for good advice?\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E  Can you really bet your architecture on a blog post or a few witty remarks in a stack-overflow comment?\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"inspiration-comes\" href=\"#inspiration-comes\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Inspiration Comes…\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThen I heard a .NET Rocks interview with \u003Ca href=\"https:\u002F\u002Fdotnetrocks.com\u002F?show=1603\"\u003ESteven van Deursen\u003C\u002Fa\u003E about the tools and practices required to approach Dependency Injection effectively.   This interview was what I had been looking for.  Finally, I was hearing a coherent vision for both the “why” and the “how”.  It made sense.  And it seemed realistic.   \u003C\u002Fp\u003E\n\n\u003Cp\u003ESteven \u003Ca href=\"https:\u002F\u002Fwww.amazon.com\u002FDependency-Injection-Principles-Practices-Patterns\u002Fdp\u002F161729473X\"\u003Ewrote a book with Mark Seeman\u003C\u002Fa\u003E full of the knowledge that comes out of dealing with these issues repeatedly in many organizations in several languages over decades.   The book is quite abstract, but a few reads gave me the confidence to formulate a plan for an “all-in” approach to updating our architecture to something fully modern.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat really won me over was Steven’s desire to create tools and approaches that \u003Cstrong\u003E\u003Cem\u003E“push the developer to fall into the pit of success”\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E, rather than just demo a bunch of neat ways to do things.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis blog will be about my experiences, approaches, mistakes and realizations introducing SOLID principles as a main feature of the platform I work on daily.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI’m ready to write it now because with about 45% of our domain\u002Frepository code now based on DI Services and with over 1000 fast running, maintainable, concise, resilient unit tests written (and no signs of slowing down) we know that what we are doing is working.   \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EWe are slowly climbing the mountain.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E   And we are still adding features.   And we are getting better at what we do as a team and as individual developers and this will help our development team attract more fellow travelers.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EAnd honestly, there is a bit of humble bragging here too:\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EConverting a large monolith to use Dependency Injection in support of Unit Testing is not easy.   I was lucky to be among friends when I took on the task of reworking the entire business and data access layers of our platform and setting coding standards for others to follow.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOur informal deal was something like, \"Everyone makes a good faith effort to follow my lead and I am honest to the point of total humility about what's working and improving what's not working.\"\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you are feeling like we were a little while ago, then join us for the journey.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe first post is \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fonetomkenny\u002Fintroducing-dependency-injection-to-a-large-brownfield-application-289g\"\u003Ehere.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";d.body_markdown="# Our First Thousand Unit Tests...\n\n\n*\"Wait, we’ve written 1000 Unit tests?\"*\n\n\nThis would have seemed like a ridiculous goal 18 months ago.   Our 19 year old monolith platform created by (on average) four developers was the sort that everyone pretends not to work on these days:  \n*\t240,000 lines of C# code, with no unit testing (though we did have other forms of automated acceptance testing and js based unit tests on the front end).  \n*\tC# code is written directly against volatile dependencies like database and caching.  \n*\tSubject Matter Experts confidently stride into dark corners of the code whenever there is a problem.   \n*\tThe code is structured enough that non-SMEs can work when SMEs are on vacation even though its slow going. The code is “pretty” though decidedly legacy (as per [Michael C Feathers](https:\u002F\u002Fwww.amazon.com\u002FWorking-Effectively-Legacy-Michael-Feathers\u002Fdp\u002F0131177052)).\n\n\n### Fourth Time's The Charm\n\nOver the years we had made probably three half-hearted attempts at unit testing in the business layer but ran into the same problems that everybody else does:\n\n* **_How to get data into the methods you want to test_** You’ll try a special database first.  You will grow old trying to keep it in the right state and tests will run glacially slow.\n* **_Very little of our code featured Abstract, Virtual or Interface based practices._** That seemed to leave reflection based testing as an option.  A very non-performant, brittle option that looked best suited to getting code into a test harness for a more aggressive refactoring that ended with more unit test coverage.\n* **_Our methods were \"well written\" but contain layers of nested logic._**  You can’t easily write a set of concise unit tests for that sort of code and end up confident that you are really testing every logical possibility.\n* **_And lets be honest, our ability to deploy new versions with massive internal changes that don’t cause huge fires proves that we are great developers right?_**\n\nStill, you feel growing unease because the application is growing in complexity and it would be nice to hire new people without them having to spend six months learning all the system’s secret handshakes.  \n\nYou know the world has moved on since you left school too.  You could have written off Dependency Injection, Mocking, Unit Testing and Compositional coding approaches as “probably just fads” ten years ago.  \n\nMaybe…\n\nBut now this is all mainstream stuff with a proven track record and the best developer interview candidates get quiet when you let on that you don’t really do any of that SOLID stuff at your company.\n\n### _And There Was Another Problem_\n\nOur business logic was tightly coupled to a number of things that were slipping into legacy status.   Without seams in the code our business and repository logic was mixed up with the implementation details of those components.  Some of them (like Full Framework) were on the list of “Definitely someday we need to deal with that”.   \n\nBut how could we really make progress against something so large when the platform has to add features just to pay the bills today?  And what about all the other dependencies in the meantime?  The thought of a business layer containing nothing but business logic indifferent to the outside world seemed like such a beautiful utopia.\n\nGrowing feelings of long term dread coupled with a change in company ownership created an opportunity to lead an attack on all of these through an initiative creatively called _***“Do Unit Testing, But For Real This Time”.***_\n\nThere was no shortage of good vibes coming from the newer team members, but the rest of us knew how past attempts had gone. We knew it was going to take more than getting everyone to just say they would do things better.\n\n### The Slow Start...\n\nThe most obvious pain point was getting data into the methods we wanted to test.  We already knew we needed to use mocking rather than trying to maintain a slow database.   The major mocking tools and the blogs about Test Driven Development were all talking about Dependency Injection.   There was no shortage of punchy little demos proving just how easy it all was.  \n\n***But it wasn’t easy for us because the state of our existing code was nothing like those examples.*** \n\nAnother problem was that every DI example was introducing considerable amounts of abstraction into examples that started out as some pretty straightforward coding.   It seemed like making the system easier to manage meant you had to make it way more complicated.   Could this be sold to a team already used to doing things “the obvious way”?  \n\nWhat about the risks of this bold new direction?  It didn’t seem like you could just break off a little piece from these techniques and then add more later on if it went well.  You had to do them all to write testable code and you had to wrap your head around several new disciplines and integrate them all to have a shot at ending up with something you wanted to work on every day.   \n\n***Who do you trust for good advice?***  Can you really bet your architecture on a blog post or a few witty remarks in a stack-overflow comment?\n\n### Inspiration Comes…\n\nThen I heard a .NET Rocks interview with [Steven van Deursen](https:\u002F\u002Fdotnetrocks.com\u002F?show=1603) about the tools and practices required to approach Dependency Injection effectively.   This interview was what I had been looking for.  Finally, I was hearing a coherent vision for both the “why” and the “how”.  It made sense.  And it seemed realistic.   \n\nSteven [wrote a book with Mark Seeman](https:\u002F\u002Fwww.amazon.com\u002FDependency-Injection-Principles-Practices-Patterns\u002Fdp\u002F161729473X) full of the knowledge that comes out of dealing with these issues repeatedly in many organizations in several languages over decades.   The book is quite abstract, but a few reads gave me the confidence to formulate a plan for an “all-in” approach to updating our architecture to something fully modern.\n\nWhat really won me over was Steven’s desire to create tools and approaches that ***“push the developer to fall into the pit of success”***, rather than just demo a bunch of neat ways to do things.\n\nThis blog will be about my experiences, approaches, mistakes and realizations introducing SOLID principles as a main feature of the platform I work on daily.\n\nI’m ready to write it now because with about 45% of our domain\u002Frepository code now based on DI Services and with over 1000 fast running, maintainable, concise, resilient unit tests written (and no signs of slowing down) we know that what we are doing is working.   \n\n***We are slowly climbing the mountain.***   And we are still adding features.   And we are getting better at what we do as a team and as individual developers and this will help our development team attract more fellow travelers.\n\n***And honestly, there is a bit of humble bragging here too:***\n\nConverting a large monolith to use Dependency Injection in support of Unit Testing is not easy.   I was lucky to be among friends when I took on the task of reworking the entire business and data access layers of our platform and setting coding standards for others to follow.\n\nOur informal deal was something like, \"Everyone makes a good faith effort to follow my lead and I am honest to the point of total humility about what's working and improving what's not working.\"\n\nIf you are feeling like we were a little while ago, then join us for the journey.  \n\nThe first post is [here.](https:\u002F\u002Fdev.to\u002Fonetomkenny\u002Fintroducing-dependency-injection-to-a-large-brownfield-application-289g)\n\n\n\n\n\n";d.user={name:c,username:c,twitter_username:a,github_username:c,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oZA8cuSg--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F550215\u002F21b78ce2-ad79-4626-9f9e-e1ce241f5636.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IDnQJrpc--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F550215\u002F21b78ce2-ad79-4626-9f9e-e1ce241f5636.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:d}},mutations:[["SET_CURRENT_ARTICLE",d]]}}(null,"2021-01-07T18:21:42Z","onetomkenny",{},"https:\u002F\u002Fdev.to\u002Fonetomkenny\u002Fthe-journey-of-a-brownfield-monolith-towards-solid-koo",1)));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:548587,title:"My year on the frontend, 2020 edition",description:"My, oh my, what a year. Lockdown or no lockdown, the terminal blinked and the projects came and went,...",readable_publish_date:"Dec 28 '20",slug:"my-year-on-the-frontend-2020-edition-1fpk",path:"\u002Fpeterszerzo\u002Fmy-year-on-the-frontend-2020-edition-1fpk",url:c,comments_count:3,public_reactions_count:d,collection_id:a,published_timestamp:e,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Qi6wMkBN--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fp0lkgmzvm31jz4c2x4i1.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_IYy_-Es--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fp0lkgmzvm31jz4c2x4i1.png",canonical_url:c,created_at:"2020-12-21T11:51:16Z",edited_at:"2020-12-30T13:33:24Z",crossposted_at:a,published_at:e,last_comment_at:"2021-01-13T07:02:41Z",reading_time_minutes:5,tag_list:"frontend, react, elm, svelte",tags:["frontend","react","elm","svelte"],body_html:"\u003Cp\u003EMy, oh my, what a year. Lockdown or no lockdown, the terminal blinked and the projects came and went, clocking in at the following stats for the year:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eongoing maintenance of 5 reasonably complicated apps ranging between 15k and 75k lines. Hi there, \u003Ca href=\"https:\u002F\u002Fnlx.ai\u002Fstudio\"\u003ENLX Studio\u003C\u002Fa\u003E!\u003C\u002Fli\u003E\n\u003Cli\u003E4 marketing sites, with the lovely \u003Ca href=\"https:\u002F\u002Fvoicecompass.ai\u002F\"\u003Evoicecompass.ai\u003C\u002Fa\u003E coming in last.\u003C\u002Fli\u003E\n\u003Cli\u003Eone reasonably complicated backend.\u003C\u002Fli\u003E\n\u003Cli\u003Eone Figma plugin (fun!!).\u003C\u002Fli\u003E\n\u003Cli\u003Earound 15 or so quick interactive prototypes for clients.\u003C\u002Fli\u003E\n\u003Cli\u003Eone 3d app plus a \u003Ca href=\"https:\u002F\u002Fsplytlight.surge.sh\u002F\"\u003E3d pet project\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E4 app frameworks: React, Elm, Svelte and Vue.\u003C\u002Fli\u003E\n\u003Cli\u003E4 styling solutions: ✨Tailwind✨, vanilla CSS4, \u003Ca href=\"https:\u002F\u002Femotion.sh\"\u003ECSS in JS\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fpackage.elm-lang.org\u002Fpackages\u002Fmdgriffith\u002Felm-ui\u002Flatest\u002F\"\u003Eelm-ui\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENever would I have imagined there would be so much going on, and it seems next to impossible to sort out a coherent story. Nonetheless, here is a catalog of thoughts:\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"elm-is-wonderful-elm-purism-isnt\" href=\"#elm-is-wonderful-elm-purism-isnt\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Elm is wonderful. Elm purism isn't.\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EElm is an absolute delight of a language, bringing a strict yet friendly Haskell-like environment to the frontend. The main selling points are a bulletproof type system including type-safe IO, delightful error messages, a spotlessly designed ecosystem, and strong guarantees across the board.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI got invested in Elm way before TypeScript got decent (&gt; v2.6) or React came out with hooks, and for the longest time I thought the best thing was to write as much in Elm as possible:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eactor model for ports that are almost always used in a request-response style? Bring it!\u003C\u002Fli\u003E\n\u003Cli\u003Esub-views with laborious wiring? No problem, I just use some Vim macros.\u003C\u002Fli\u003E\n\u003Cli\u003Eno FFI, no local state, no effect modules? Thanks for looking out for me!\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EYet today, my idealism is crumbling. I am maintaining a 75k line Elm app with some \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fpeterszerzo\u002Felm-porter\"\u003Estraaange stuff in it\u003C\u002Fa\u003E just to keep it sane. Because of the boilerplate, I still find places where subscriptions aren't wired up at the detriment of UX, or even worse, conflict with each other. I re-wrote the dropdown and the list editor about 5 times each, still not happy with either of them.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETime for a change: my next year in Elm will be one that embraces custom elements \u003Cem\u003Ea whole lot more\u003C\u002Fem\u003E, limiting Elm to handle sensitive logic, the simpler chunks of UI, and the crucially valuable JSON encoding\u002Fdecoding. I will no longer write up \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fmargaretkrutikova\u002Felm-dom-node-decoder-to-detect-click-outside-3ioh\"\u003Eclickaway handlers\u003C\u002Fa\u003E or set up dictionaries of dropdown UI states in Elm.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhy? I lost faith that this kind of Elm purism will get me to a level of UI quality I can defend in front of project owners. React makes a painlessly reusable \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fpeterszerzo\u002Fgenerics-for-user-interfaces-hak\"\u003Egeneric drag-and-drop list manager\u003C\u002Fa\u003E in a few dozen lines. Elm never will.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe narratives of the Elm community continue to confuse me. What in the world did the 'no components' campaign even mean? Do we still advise against nesting model-view-update triplets in favor of the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fevancz\u002Felm-sortable-table\"\u003Eelm-sortable-table pattern\u003C\u002Fa\u003E, even though \u003Ca href=\"https:\u002F\u002Fpackage.elm-lang.org\u002Fpackages\u002Fannaghi\u002Fdnd-list\u002Flatest\u002F\"\u003Edrag and drop\u003C\u002Fa\u003E can't be set up in the latter? Are the guarantees really that strong if people can just pass in proxies and use custom elements as they please?\u003C\u002Fp\u003E\n\n\u003Cp\u003EElm is definitely here to stay for me. However, I am hoping that a more critical and pragmatic approach to it will help me stay happy in the ecosystem.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"react-hooks-are-fantastic\" href=\"#react-hooks-are-fantastic\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  React hooks are fantastic\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EHere's a pattern I have no complaints about: good old React hooks (GORH or something?). I wrote a number of custom hooks this year including one that \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@nlxchat\u002Freact\"\u003Efully manages a chat experience\u003C\u002Fa\u003E, and I simply can't think of a better way to package and share effectful, headless UI logic.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMy time spent in Elm continues to influence me in the way I write React:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EI strive for a limited and (allegedly) thoughtful use of local state.\u003C\u002Fli\u003E\n\u003Cli\u003Eno matter how good TypeScript is getting, I really miss type-safe IO the way Elm does it. I hope to use \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fpeterszerzo\u002Fsafe-functional-io-in-typescript-an-introduction-1kmi\"\u003Eio-ts\u003C\u002Fa\u003E in production someday.\u003C\u002Fli\u003E\n\u003Cli\u003EI never got interested in projects like \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fimmerjs\u002Fimmer\"\u003Eimmer\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmobxjs\u002Fmobx\"\u003EMobX\u003C\u002Fa\u003E have declined even further, in favor of what I could only call 'vanilla React'. Explicitly immutable code is alright.\u003C\u002Fli\u003E\n\u003Cli\u003Ethis is not to say I have a beef with libraries now: I actually grew really fond of \u003Ca href=\"https:\u002F\u002Fformik.org\u002F\"\u003EFormik\u003C\u002Fa\u003E. It does some very thoughtful, semantically sound heavy lifting on forms.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-about-svelte-and-vue\" href=\"#what-about-svelte-and-vue\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  What about Svelte and Vue?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhile I kept working on fancy(-looking) architectures in Elm and React, I also built a ton of smaller Svelte and Vue projects this year - all with satisfied owners and mostly happy users. Which got me wondering: just how much better are sites made the 'rigorous way'?\u003C\u002Fp\u003E\n\n\u003Cp\u003ERich Harris makes the argument that terse code is good on account of research that shows (paraphrasing here):\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EThe \u003Ccode\u003Ebugs\u002Flines of code\u003C\u002Fcode\u003E ratio of software projects is more or less constant.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EThis is something I didn't think I would pay any attention to, but then here I am, staring at it with curious eyes.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETruth is, Svelte is just very promising right now. I can implement features in no time, the HTML templates are - regardless of how long they it takes me to warm up to them - amazing for dev speed. Best of all, the API is impressively comprehensive (springs even!!) and yet with such a tiny and well-designed total surface.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI will probably keep shying away from writing anything very complicated in it and go by the thinking of \u003Ca href=\"https:\u002F\u002Fwww.swyx.io\u002Fsvelte-sites-react-apps\u002F\"\u003Ethis excellent blog post\u003C\u002Fa\u003E. Additionally, Svelte gets bonus points for powering pretty much all my \u003Ca href=\"http:\u002F\u002Fsketches.peterszerzo.com\"\u003Ecreative programming\u003C\u002Fa\u003E these days.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs for Vue, which I never really liked for reasons that are outside the scope of this post to explain, things might be turning around. With the community slowly upgrading to Vue 3 (including a faithful port of React hooks and proper TypeScript support), I might just wind up writing more of it myself. Let's see, let's see.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"the-hype-i-still-dont-buy\" href=\"#the-hype-i-still-dont-buy\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  The hype I still don't buy\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis year I fully stopped listening to people preaching vanilla JavaScript or out on a bundle-shaming crusade. I refuse to apologize for shipping 100 kilobytes of \u003Ccode\u003Ereact-dom\u003C\u002Fcode\u003E if it means I get to avoid hacking a static site with \u003Ccode\u003Edocument.querySelector\u003C\u002Fcode\u003E (I happen to have a site that does that and it literally keeps me up at night).\u003C\u002Fp\u003E\n\n\u003Cp\u003EI am happy to talk about bundle sizes, loading times and the challenges of SSR-hydration as UX issues, as long as we keep in mind that the worst UX issue is and forever will be [drumrolls] [drumrolls] a runtime error. You know, the one caused by a haphazard architecture.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI should mention that more formalized alternatives like \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Falpinejs\u002Falpine\u002F\"\u003EAlpine.js\u003C\u002Fa\u003E or \u003Ca href=\"https:\u002F\u002Fhotwire.dev\u002F\"\u003EHotwire\u003C\u002Fa\u003E do look very promising, hopefully I will get the chance to engage with them in production soon.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"onwards-to-2021\" href=\"#onwards-to-2021\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Onwards to 2021\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI really look forward to this next year. I wonder if I will stay a Vim user in twelve months, what my next terminal color scheme will be, whether there is going to be another super cool 3d project in store for me, and how much of the thoughts and rambles above will still hold. Look forward to writing it all up again in one year's time.\u003C\u002Fp\u003E\n\n\u003Cp\u003E🍾Happy New Year🍾 everybody!\u003C\u002Fp\u003E\n\n",body_markdown:"My, oh my, what a year. Lockdown or no lockdown, the terminal blinked and the projects came and went, clocking in at the following stats for the year:\n- ongoing maintenance of 5 reasonably complicated apps ranging between 15k and 75k lines. Hi there, [NLX Studio](https:\u002F\u002Fnlx.ai\u002Fstudio)!\n- 4 marketing sites, with the lovely [voicecompass.ai](https:\u002F\u002Fvoicecompass.ai\u002F) coming in last.\n- one reasonably complicated backend.\n- one Figma plugin (fun!!).\n- around 15 or so quick interactive prototypes for clients.\n- one 3d app plus a [3d pet project](https:\u002F\u002Fsplytlight.surge.sh\u002F).\n- 4 app frameworks: React, Elm, Svelte and Vue.\n- 4 styling solutions: ✨Tailwind✨, vanilla CSS4, [CSS in JS](https:\u002F\u002Femotion.sh), [elm-ui](https:\u002F\u002Fpackage.elm-lang.org\u002Fpackages\u002Fmdgriffith\u002Felm-ui\u002Flatest\u002F).\n\nNever would I have imagined there would be so much going on, and it seems next to impossible to sort out a coherent story. Nonetheless, here is a catalog of thoughts:\n\n## Elm is wonderful. Elm purism isn't.\n\nElm is an absolute delight of a language, bringing a strict yet friendly Haskell-like environment to the frontend. The main selling points are a bulletproof type system including type-safe IO, delightful error messages, a spotlessly designed ecosystem, and strong guarantees across the board.\n\nI got invested in Elm way before TypeScript got decent (\u003E v2.6) or React came out with hooks, and for the longest time I thought the best thing was to write as much in Elm as possible:\n- actor model for ports that are almost always used in a request-response style? Bring it!\n- sub-views with laborious wiring? No problem, I just use some Vim macros.\n- no FFI, no local state, no effect modules? Thanks for looking out for me!\n\nYet today, my idealism is crumbling. I am maintaining a 75k line Elm app with some [straaange stuff in it](https:\u002F\u002Fgithub.com\u002Fpeterszerzo\u002Felm-porter) just to keep it sane. Because of the boilerplate, I still find places where subscriptions aren't wired up at the detriment of UX, or even worse, conflict with each other. I re-wrote the dropdown and the list editor about 5 times each, still not happy with either of them.\n\nTime for a change: my next year in Elm will be one that embraces custom elements *a whole lot more*, limiting Elm to handle sensitive logic, the simpler chunks of UI, and the crucially valuable JSON encoding\u002Fdecoding. I will no longer write up [clickaway handlers](https:\u002F\u002Fdev.to\u002Fmargaretkrutikova\u002Felm-dom-node-decoder-to-detect-click-outside-3ioh) or set up dictionaries of dropdown UI states in Elm.\n\nWhy? I lost faith that this kind of Elm purism will get me to a level of UI quality I can defend in front of project owners. React makes a painlessly reusable [generic drag-and-drop list manager](https:\u002F\u002Fdev.to\u002Fpeterszerzo\u002Fgenerics-for-user-interfaces-hak) in a few dozen lines. Elm never will.\n\nThe narratives of the Elm community continue to confuse me. What in the world did the 'no components' campaign even mean? Do we still advise against nesting model-view-update triplets in favor of the [elm-sortable-table pattern](https:\u002F\u002Fgithub.com\u002Fevancz\u002Felm-sortable-table), even though [drag and drop](https:\u002F\u002Fpackage.elm-lang.org\u002Fpackages\u002Fannaghi\u002Fdnd-list\u002Flatest\u002F) can't be set up in the latter? Are the guarantees really that strong if people can just pass in proxies and use custom elements as they please?\n\nElm is definitely here to stay for me. However, I am hoping that a more critical and pragmatic approach to it will help me stay happy in the ecosystem.\n\n## React hooks are fantastic\n\nHere's a pattern I have no complaints about: good old React hooks (GORH or something?). I wrote a number of custom hooks this year including one that [fully manages a chat experience](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@nlxchat\u002Freact), and I simply can't think of a better way to package and share effectful, headless UI logic.\n\nMy time spent in Elm continues to influence me in the way I write React:\n- I strive for a limited and (allegedly) thoughtful use of local state.\n- no matter how good TypeScript is getting, I really miss type-safe IO the way Elm does it. I hope to use [io-ts](https:\u002F\u002Fdev.to\u002Fpeterszerzo\u002Fsafe-functional-io-in-typescript-an-introduction-1kmi) in production someday.\n- I never got interested in projects like [immer](https:\u002F\u002Fgithub.com\u002Fimmerjs\u002Fimmer) and [MobX](https:\u002F\u002Fgithub.com\u002Fmobxjs\u002Fmobx) have declined even further, in favor of what I could only call 'vanilla React'. Explicitly immutable code is alright.\n- this is not to say I have a beef with libraries now: I actually grew really fond of [Formik](https:\u002F\u002Fformik.org\u002F). It does some very thoughtful, semantically sound heavy lifting on forms.\n\n## What about Svelte and Vue?\n\nWhile I kept working on fancy(-looking) architectures in Elm and React, I also built a ton of smaller Svelte and Vue projects this year - all with satisfied owners and mostly happy users. Which got me wondering: just how much better are sites made the 'rigorous way'?\n\nRich Harris makes the argument that terse code is good on account of research that shows (paraphrasing here):\n\n\u003E The `bugs\u002Flines of code` ratio of software projects is more or less constant.\n\nThis is something I didn't think I would pay any attention to, but then here I am, staring at it with curious eyes.\n\nTruth is, Svelte is just very promising right now. I can implement features in no time, the HTML templates are - regardless of how long they it takes me to warm up to them - amazing for dev speed. Best of all, the API is impressively comprehensive (springs even!!) and yet with such a tiny and well-designed total surface.\n\nI will probably keep shying away from writing anything very complicated in it and go by the thinking of [this excellent blog post](https:\u002F\u002Fwww.swyx.io\u002Fsvelte-sites-react-apps\u002F). Additionally, Svelte gets bonus points for powering pretty much all my [creative programming](http:\u002F\u002Fsketches.peterszerzo.com) these days.\n\nAs for Vue, which I never really liked for reasons that are outside the scope of this post to explain, things might be turning around. With the community slowly upgrading to Vue 3 (including a faithful port of React hooks and proper TypeScript support), I might just wind up writing more of it myself. Let's see, let's see.\n\n## The hype I still don't buy\n\nThis year I fully stopped listening to people preaching vanilla JavaScript or out on a bundle-shaming crusade. I refuse to apologize for shipping 100 kilobytes of `react-dom` if it means I get to avoid hacking a static site with `document.querySelector` (I happen to have a site that does that and it literally keeps me up at night).\n\nI am happy to talk about bundle sizes, loading times and the challenges of SSR-hydration as UX issues, as long as we keep in mind that the worst UX issue is and forever will be [drumrolls] [drumrolls] a runtime error. You know, the one caused by a haphazard architecture.\n\nI should mention that more formalized alternatives like [Alpine.js](https:\u002F\u002Fgithub.com\u002Falpinejs\u002Falpine\u002F) or [Hotwire](https:\u002F\u002Fhotwire.dev\u002F) do look very promising, hopefully I will get the chance to engage with them in production soon.\n\n## Onwards to 2021\n\nI really look forward to this next year. I wonder if I will stay a Vim user in twelve months, what my next terminal color scheme will be, whether there is going to be another super cool 3d project in store for me, and how much of the thoughts and rambles above will still hold. Look forward to writing it all up again in one year's time.\n\n🍾Happy New Year🍾 everybody!",user:{name:"Peter Szerzo",username:b,twitter_username:b,github_username:b,website_url:"https:\u002F\u002Fpeterszerzo.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NDL5Bfos--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F197308\u002F04693e03-27db-4214-af6a-17b08e58442c.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--A68HvPwJ--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F197308\u002F04693e03-27db-4214-af6a-17b08e58442c.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fpeterszerzo\u002F548587",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"peterszerzo","https:\u002F\u002Fdev.to\u002Fpeterszerzo\u002Fmy-year-on-the-frontend-2020-edition-1fpk",8,"2020-12-28T13:27:04Z"));
__NUXT_JSONP__("/articles/jaredcwhite/573028", (function(a,b,c,d,e,f){c.type_of="article";c.id=573028;c.title="Why Tailwind Isn't for Me";c.description="I think the folks building Tailwind are talented and nice people. But at a pure technical level, I simply don't like Tailwind. Whoever it was built for, it was not built for me.";c.readable_publish_date="Jan 16";c.slug="why-tailwind-isn-t-for-me-5c90";c.path="\u002Fjaredcwhite\u002Fwhy-tailwind-isn-t-for-me-5c90";c.url=d;c.comments_count=202;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=f;c.positive_reactions_count=e;c.cover_image=a;c.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F573028.png";c.canonical_url=d;c.created_at="2021-01-15T23:44:26Z";c.edited_at="2021-03-26T22:15:56Z";c.crossposted_at=a;c.published_at=f;c.last_comment_at="2021-10-10T09:35:50Z";c.reading_time_minutes=9;c.tag_list="tailwindcss, css, webcomponents";c.tags=["tailwindcss","css","webcomponents"];c.body_html="\u003Cp\u003E\u003Cstrong\u003EMarch 2021 Update\u003C\u002Fstrong\u003E: \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Ftailwindcss\u002Fstatus\u002F1374675986965528576?s=21\"\u003Ethe experimental new JIT (Just-In-Time) compiler for Tailwind\u003C\u002Fa\u003E has the potential to alleviate some of the concerns outlined here and also provides some intriguing new benefits. I haven't tried it out yet, but once I do I'll formulate additional thoughts and link to them from here. -JW\u003C\u002Fp\u003E\n\n\u003Cp\u003EI've gotten into more than one heated argument on the interwebs lately over \u003Ca href=\"https:\u002F\u002Ftailwindcss.com\"\u003ETailwind CSS\u003C\u002Fa\u003E. I'm not proud of this. I don't like being at odds with anybody. I think the folks building Tailwind are talented and nice people. But at a pure technical level, I simply don't like Tailwind. Whoever it was built for, \u003Cstrong\u003Eit was not built for me\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd in one sense, that's fine. There are \u003Cem\u003Etons\u003C\u002Fem\u003E of web technologies out there which I'll never use. Doesn't mean they're bad. There are plenty of groovy tech stacks to go around.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe problem I keep running into however is this increasing popular sentiment that Tailwind \u003Cem\u003Eis the future\u003C\u002Fem\u003E (man). It's \u003Cem\u003Ethe way things should be done\u003C\u002Fem\u003E. In other words, it's opinionated and it inspires a cadre of evangelists. Again, on a certain level, that's fine. Rails is very opinionated, for example, and I love using Rails.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut Tailwind definitely throws down a gauntlet. I'll quote directly from creator Adam Wathan highlighted right on the Tailwind website:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E“Best practices” don’t actually work.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI’ve written a few thousand words on why traditional “semantic class names” are the reason CSS is hard to maintain, but the truth is you’re never going to believe me until you actually try it. If you can suppress the urge to retch long enough to give it a chance, I really think you'll wonder how you ever worked with CSS any other way.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EChallenge accepted.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI've tried it. And I've used it. A lot. A project one of my largest clients has me developing is built on top of React and Tailwind. So whatever you may come at me with, you can't accuse me of not giving Tailwind the good ol' college try.\u003C\u002Fp\u003E\n\n\u003Cp\u003EStill not my thing. At all. In fact I have some real concerns about Tailwind, and what I find supremely frustrating is whenever I raise these concerns, I get immediate pushback from die-hard Tailwind fans who accuse me (in so many words) of just being a fucking idiot. As a programmer who has worked full-time in the web industry since the late 90s, that just doesn't sit right with me.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo since Twitter and Hacker News comments are apparently poor mediums for technical conversations of this magnitude, I will now attempt to outline the very real reasons why Tailwind is not for me.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"reason-1-tailwind-promotes-uglyass-html\" href=\"#reason-1-tailwind-promotes-uglyass-html\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reason 1: Tailwind promotes ugly-ass HTML.\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis first reason is an aesthetic concern, yet it's intimately related to real technical challenges which I'll outline shortly. But at the very least, I \u003Cstrong\u003Ehate\u003C\u002Fstrong\u003E the way utility-css-only HTML looks. Hate, hate, hate it. Adam even acknowledges this head on when he begs us to \"suppress the urge to retch long enough to give it a chance…\". This is a tacit admission that writing markup this way initially seems ugly and weird—but somehow we'll eventually just \"get over it\" because the benefits are so great.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter a year of writing Tailwind, I haven't gotten over it. Sorry folks! You'll \u003Cem\u003Enever\u003C\u002Fem\u003E get me to appreciate this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight html\"\u003E\u003Ccode\u003E\u003Cspan class=\"nt\"\u003E&lt;div\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eclass=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"min-w-0 flex-auto space-y-0.5\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nt\"\u003E&lt;p\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eclass=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"text-lime-600 dark:text-lime-400 text-sm sm:text-base lg:text-sm xl:text-base font-semibold uppercase\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E&lt;abbr\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Etitle=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Episode\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003EEp.\u003Cspan class=\"nt\"\u003E&lt;\u002Fabbr&gt;\u003C\u002Fspan\u003E 128\n  \u003Cspan class=\"nt\"\u003E&lt;\u002Fp&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nt\"\u003E&lt;h2\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eclass=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"text-black dark:text-white text-base sm:text-xl lg:text-base xl:text-xl font-semibold truncate\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n    Scaling CSS at Heroku with Utility Classes\n  \u003Cspan class=\"nt\"\u003E&lt;\u002Fh2&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nt\"\u003E&lt;p\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eclass=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"text-gray-500 dark:text-gray-400 text-base sm:text-lg lg:text-base xl:text-lg font-medium\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n    Full Stack Radio\n  \u003Cspan class=\"nt\"\u003E&lt;\u002Fp&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"nt\"\u003E&lt;\u002Fdiv&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow I already hear many of you screaming at your computer screens to tell me \"dude, just use \u003Ccode\u003E@apply\u003C\u002Fcode\u003E if you want to keep your HTML clean! Problem solved!\" Well, that is a potential solution, and in fact that's what we've done on the aforementioned project. Much of our HTML is oriented around component-scoped class names (fairly close to BEM in concept) and thus we use \u003Ccode\u003E@apply\u003C\u002Fcode\u003E extensively. But that brings me to my next concern.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"reason-2-raw-apply-endraw-is-fundamentally-incompatible-and-nonstandard-and-largely-unnecessary\" href=\"#reason-2-raw-apply-endraw-is-fundamentally-incompatible-and-nonstandard-and-largely-unnecessary\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reason 2: \u003Ccode\u003E@apply\u003C\u002Fcode\u003E is fundamentally incompatible and non-standard (and largely unnecessary).\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis is where a lot of Tailwind fans get tripped up and keep on arguing with me over and over again, so I'll try to explain this as clearly and obviously as possible.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\n\u003Ccode\u003E@apply mt-3\u003C\u002Fcode\u003E in a CSS file \u003Cem\u003Eonly\u003C\u002Fem\u003E works if you use Tailwind. It requires the presence of Tailwind in your build process. If you remove Tailwind from your build process, that statement doesn't work and your CSS is broken.\u003C\u002Fli\u003E\n\u003Cli\u003EWhile it's true you can take the generated output CSS of a site and use that without Tailwind, it's typically a bundled compilation of dozens if not hundreds of small CSS files scattered around a codebase (if you write CSS-per-component files like we do). It's not something you can count on for source code.\u003C\u002Fli\u003E\n\u003Cli\u003ETherefore, it's simply the truth that CSS files built for Tailwind are non-standard (aka proprietary) and \u003Cstrong\u003Efundamentally incompatible\u003C\u002Fstrong\u003E with all other CSS frameworks and tooling. Once you go Tailwind, \u003Cem\u003Eyou can never leave\u003C\u002Fem\u003E. (da da dum 😱)\u003C\u002Fli\u003E\n\u003Cli\u003EAnd as an added bonus, writing all your CSS files with \u003Ccode\u003E@apply\u003C\u002Fcode\u003E everywhere basically means you're not learning and authoring CSS. You're authoring Tailwind. No matter how many times you write \u003Ccode\u003E@apply flex\u003C\u002Fcode\u003E, that's \u003Cstrong\u003Enot\u003C\u002Fstrong\u003E the same as writing \u003Ccode\u003Edisplay: flex\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ENow I realize most of us aren't in the habit of trying to swap out CSS frameworks on projects on a regular basis. But believe me, I have done this! I'm on a client project right now where we're migrating from Foundation to Bulma. While it's true that it requires updating a bunch of HTML and some of the stylesheets in use, rest assured any custom bits of styling we wrote before will work again without hassle, because when you write plain ol' CSS (or even Sass), it just works no matter what.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd while \u003Ccode\u003E@apply\u003C\u002Fcode\u003E seems cool on the face of it, it ends up becoming an enormous crutch. For example, I like the way Tailwind makes writing styles using CSS Grid techniques pretty straightforward. Unfortunately, after having done so, I still don't really understand Grid syntax itself. I remain ignorant of the open CSS standard.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs for why \u003Ccode\u003E@apply\u003C\u002Fcode\u003E in the grand scheme of things is largely unnecessary, that brings me to my third point.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"reason-3-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard\" href=\"#reason-3-tailwinds-focus-on-design-systems-and-tokens-could-mostly-be-replaced-by-css-custom-properties-aka-variableswhich-is-a-standard\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reason 3: Tailwind's focus on design systems and tokens could mostly be replaced by CSS Custom Properties (aka variables)—which IS a standard.\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EPeople initially like Tailwind because it comes out-of-the-box with a nice design system and lots of tokens you can tweak (colors, font sizes, spacing, etc.). It's easy to get good-looking results quickly.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe problem is that all these tokens are defined…in JavaScript. A CSS framework. Using JavaScript for its design tokens. In 2021.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI hate to break it to you, but all modern browsers support this thing called CSS Custom Properties. You can define design tokens once at the \u003Ccode\u003E:root\u003C\u002Fcode\u003E level as variables, and utilize them \u003Cstrong\u003Eeverywhere\u003C\u002Fstrong\u003E. You can even modify them in real-time while the site is loaded, or overload them in particular parts of the DOM tree. And they work \u003Cem\u003Egreat\u003C\u002Fem\u003E with web components. More on that in a moment.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo for example, in Tailwind you can write \u003Ccode\u003Eclass=\"mb-8\"\u003C\u002Fcode\u003E and you get a \u003Ccode\u003Emargin-bottom: 2rem\u003C\u002Fcode\u003E style applied. But guess what you could do instead? Define \u003Ccode\u003E:root { --spacing-8: 2rem }\u003C\u002Fcode\u003E in your stylesheet, and then write \u003Ccode\u003Emargin-bottom: var(--spacing-8)\u003C\u002Fcode\u003E anywhere you want. As in literally anywhere: a stylesheet, or a JS component, \u003Cem\u003Eor even a\u003C\u002Fem\u003E \u003Ccode\u003Estyle=\u003C\u002Fcode\u003E \u003Cem\u003Eattribute directly in HTML!\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhile the story gets a little murkier once you start looking at how to accommodate responsive breakpoints and so forth, nevertheless the principle here is that Tailwind uses a non-standard JavaScript-based build process for its design system at a time when you can build design systems using syntax that's \u003Cem\u003Enative\u003C\u002Fem\u003E to all modern browsers.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESpeaking of what's native in modern web browsers…\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"reason-4-tailwind-forgets-that-web-components-exist\" href=\"#reason-4-tailwind-forgets-that-web-components-exist\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reason 4: Tailwind forgets that web components exist.\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis is perhaps the biggest knock against Tailwind. It seemingly was conceived and promoted in a world where web components don't exist. Tailwind CSS is completely unusable within the Shadow DOM. Some enterprising developers have come up with solutions where select bits of Tailwind styling can get injected into components through a build process, but it's definitely a hack.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMeanwhile, there are ways to build web component-based design systems today where global theming and component styling via the Shadow DOM (and exposed Parts) all work together. Again, you can do all this based on technology that's built-in and native to all modern browsers. And before you shrug your shoulders and go back to your React or your Vue, bear in mind that web components are not only an integral part of the HTML\u002FCSS\u002FJS spec today but are increasingly at the heart of further advancements to browser technology (for example how advanced customization of form controls might work in the future).\u003C\u002Fp\u003E\n\n\u003Cp\u003ETailwind in this respect is no more helpful to you than Bootstrap or Foundation or any other CSS framework written years\u002Fdecades ago. (Even my beloved Bulma! 😢)\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"reason-5-finally-tailwind-encourages-divspantag-soup\" href=\"#reason-5-finally-tailwind-encourages-divspantag-soup\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Reason 5: Finally, Tailwind encourages div\u002Fspan-tag soup.\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI almost included this in the previous point, but it really bears its own conversation. I have become convinced by now that using \u003Ccode\u003E&lt;div&gt;\u003C\u002Fcode\u003E and \u003Ccode\u003E&lt;span&gt;\u003C\u002Fcode\u003E tags everywhere in your markup is an anti-pattern. We live in a world where custom elements (aka \u003Ccode\u003E&lt;whatever-you-can-dream-of&gt;\u003C\u002Fcode\u003E) are fully supported and enabled by modern browsers. There's virtually no reason you're forced to write \u003Ccode\u003E&lt;div class=\"card\"&gt;&lt;\u002Fdiv&gt;\u003C\u002Fcode\u003E when you can write \u003Ccode\u003E&lt;ui-card&gt;&lt;\u002Fui-card&gt;\u003C\u002Fcode\u003E. And in fact it's quite possible to use custom attributes along with elements to write \u003Cem\u003Eextremely expressive markup\u003C\u002Fem\u003E that—compared to ye markup of ol'—looks quite futuristic!\u003C\u002Fp\u003E\n\n\u003Cp\u003ETake the \u003Ca href=\"https:\u002F\u002Fshoelace.style\"\u003EShoelace\u003C\u002Fa\u003E web component library for example. Here's a button:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight html\"\u003E\u003Ccode\u003E\u003Cspan class=\"nt\"\u003E&lt;sl-button\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Etype=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"default\"\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Esize=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"small\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nt\"\u003E&lt;sl-icon\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eslot=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"prefix\"\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Ename=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"gear\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;&lt;\u002Fsl-icon&gt;\u003C\u002Fspan\u003E\n  Settings\n\u003Cspan class=\"nt\"\u003E&lt;\u002Fsl-button&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAnd here's a modal:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight html\"\u003E\u003Ccode\u003E\u003Cspan class=\"nt\"\u003E&lt;sl-dialog\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Elabel=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Dialog\"\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Estyle=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"--width: 50vw;\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  \u003Cspan class=\"nt\"\u003E&lt;sl-button\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eslot=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"footer\"\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Etype=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"primary\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003EClose\u003Cspan class=\"nt\"\u003E&lt;\u002Fsl-button&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"nt\"\u003E&lt;\u002Fsl-dialog&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENote that this isn't JSX. This isn't XML. This isn't some kind of fancy-pants template language you have to convert to ordinary HTML.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThis is HTML.\u003C\u002Fstrong\u003E This is what modern markup can look like.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECompare that to an example from Tailwind's home page:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight html\"\u003E\u003Ccode\u003E\u003Cspan class=\"nt\"\u003E&lt;button\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eclass=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"hover:bg-light-blue-200 hover:text-light-blue-800 group flex items-center rounded-md bg-light-blue-100 text-light-blue-600 text-sm font-medium px-4 py-2\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n  New\n\u003Cspan class=\"nt\"\u003E&lt;\u002Fbutton&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EEwwwww. 🤢\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere is a future world of HTML\u002FCSS\u002FJS (and in large part it's here already) where you can write bespoke Grid\u002FFlexbox layouts quickly and easily with vanilla CSS, set up design tokens with CSS variables, utilize a well-architected web component library like Shoelace (or even mix 'n' match two or three), and end up with a website\u002Fapp that \u003Cstrong\u003Elooks amazing\u003C\u002Fstrong\u003E and works quite well—all without needing \u003Cem\u003Eany\u003C\u002Fem\u003E of the many megabytes of Tailwind utility classes that you then need to purge to get your performance back down to manageable levels.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn other words, Tailwind's main selling point (besides rapid prototyping via utility classes) is its attractive design system—yet the way it implements that design system really kind of sucks! (Incompatible with web components by default, only minimally leverages CSS variables, doesn't encourage custom elements\u002Fattributes with relevant scoped styling…)\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhich begs the question: how does Tailwind enable us to \"build modern websites\" exactly? On a pure technical level, I honestly don't see it as being much of an improvement over Bootstrap. And Bootstrap at least provides an open-source component library for free. If you use Tailwind, \u003Ca href=\"https:\u002F\u002Ftailwindui.com\"\u003Ethey ask you to pay for it\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"conclusion-if-you-like-tailwind-use-it-but-dont-try-to-convince-me-its-the-future\" href=\"#conclusion-if-you-like-tailwind-use-it-but-dont-try-to-convince-me-its-the-future\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion: If you like Tailwind, use it! But don't try to convince me it's the future.\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EListen, we can go back and forth on the relative merits or problems with any technology. There are definitely some benefits to choosing Tailwind, most notably how you can go from blank page to fancy-pants design quickly by simply hammering out a bunch of div tags with utility classes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut after over a year of experience with Tailwind and weighing the pros and cons against other approaches to HTML, styling, and component-based web development in general, I'm thoroughly convinced that Tailwind does not represent the direction I wish to see the web head in as a whole. And apologies to all the Tailwind fans out there, but you just don't have a compelling argument that will convince me otherwise.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd that's why Tailwind isn't for me. YMMV. 🙃\u003C\u002Fp\u003E\n\n";c.body_markdown="---\ntitle: Why Tailwind Isn't for Me\npublished: true\ndescription: I think the folks building Tailwind are talented and nice people. But at a pure technical level, I simply don't like Tailwind. Whoever it was built for, it was not built for me.\ntags: tailwind, css, webcomponents\n\u002F\u002Fcover_image: https:\u002F\u002Fdirect_url_to_image.jpg\n---\n\n**March 2021 Update**: [the experimental new JIT (Just-In-Time) compiler for Tailwind](https:\u002F\u002Ftwitter.com\u002Ftailwindcss\u002Fstatus\u002F1374675986965528576?s=21) has the potential to alleviate some of the concerns outlined here and also provides some intriguing new benefits. I haven't tried it out yet, but once I do I'll formulate additional thoughts and link to them from here. -JW\n\nI've gotten into more than one heated argument on the interwebs lately over [Tailwind CSS](https:\u002F\u002Ftailwindcss.com). I'm not proud of this. I don't like being at odds with anybody. I think the folks building Tailwind are talented and nice people. But at a pure technical level, I simply don't like Tailwind. Whoever it was built for, **it was not built for me**.\n\nAnd in one sense, that's fine. There are *tons* of web technologies out there which I'll never use. Doesn't mean they're bad. There are plenty of groovy tech stacks to go around.\n\nThe problem I keep running into however is this increasing popular sentiment that Tailwind _is the future_ (man). It's _the way things should be done_. In other words, it's opinionated and it inspires a cadre of evangelists. Again, on a certain level, that's fine. Rails is very opinionated, for example, and I love using Rails.\n\nBut Tailwind definitely throws down a gauntlet. I'll quote directly from creator Adam Wathan highlighted right on the Tailwind website:\n\n\u003E “Best practices” don’t actually work.\n\u003E \n\u003E I’ve written a few thousand words on why traditional “semantic class names” are the reason CSS is hard to maintain, but the truth is you’re never going to believe me until you actually try it. If you can suppress the urge to retch long enough to give it a chance, I really think you'll wonder how you ever worked with CSS any other way.\n\nChallenge accepted.\n\nI've tried it. And I've used it. A lot. A project one of my largest clients has me developing is built on top of React and Tailwind. So whatever you may come at me with, you can't accuse me of not giving Tailwind the good ol' college try.\n\nStill not my thing. At all. In fact I have some real concerns about Tailwind, and what I find supremely frustrating is whenever I raise these concerns, I get immediate pushback from die-hard Tailwind fans who accuse me (in so many words) of just being a fucking idiot. As a programmer who has worked full-time in the web industry since the late 90s, that just doesn't sit right with me.\n\nSo since Twitter and Hacker News comments are apparently poor mediums for technical conversations of this magnitude, I will now attempt to outline the very real reasons why Tailwind is not for me.\n\n### Reason 1: Tailwind promotes ugly-ass HTML.\n\nThis first reason is an aesthetic concern, yet it's intimately related to real technical challenges which I'll outline shortly. But at the very least, I **hate** the way utility-css-only HTML looks. Hate, hate, hate it. Adam even acknowledges this head on when he begs us to \"suppress the urge to retch long enough to give it a chance…\". This is a tacit admission that writing markup this way initially seems ugly and weird—but somehow we'll eventually just \"get over it\" because the benefits are so great.\n\nAfter a year of writing Tailwind, I haven't gotten over it. Sorry folks! You'll _never_ get me to appreciate this:\n\n```html\n\u003Cdiv class=\"min-w-0 flex-auto space-y-0.5\"\u003E\n  \u003Cp class=\"text-lime-600 dark:text-lime-400 text-sm sm:text-base lg:text-sm xl:text-base font-semibold uppercase\"\u003E\n    \u003Cabbr title=\"Episode\"\u003EEp.\u003C\u002Fabbr\u003E 128\n  \u003C\u002Fp\u003E\n  \u003Ch2 class=\"text-black dark:text-white text-base sm:text-xl lg:text-base xl:text-xl font-semibold truncate\"\u003E\n    Scaling CSS at Heroku with Utility Classes\n  \u003C\u002Fh2\u003E\n  \u003Cp class=\"text-gray-500 dark:text-gray-400 text-base sm:text-lg lg:text-base xl:text-lg font-medium\"\u003E\n    Full Stack Radio\n  \u003C\u002Fp\u003E\n\u003C\u002Fdiv\u003E\n```\n\nNow I already hear many of you screaming at your computer screens to tell me \"dude, just use `@apply` if you want to keep your HTML clean! Problem solved!\" Well, that is a potential solution, and in fact that's what we've done on the aforementioned project. Much of our HTML is oriented around component-scoped class names (fairly close to BEM in concept) and thus we use `@apply` extensively. But that brings me to my next concern.\n\n### Reason 2: `@apply` is fundamentally incompatible and non-standard (and largely unnecessary).\n\nThis is where a lot of Tailwind fans get tripped up and keep on arguing with me over and over again, so I'll try to explain this as clearly and obviously as possible.\n\n1. `@apply mt-3` in a CSS file _only_ works if you use Tailwind. It requires the presence of Tailwind in your build process. If you remove Tailwind from your build process, that statement doesn't work and your CSS is broken.\n2. While it's true you can take the generated output CSS of a site and use that without Tailwind, it's typically a bundled compilation of dozens if not hundreds of small CSS files scattered around a codebase (if you write CSS-per-component files like we do). It's not something you can count on for source code.\n3. Therefore, it's simply the truth that CSS files built for Tailwind are non-standard (aka proprietary) and **fundamentally incompatible** with all other CSS frameworks and tooling. Once you go Tailwind, _you can never leave_. (da da dum 😱)\n4. And as an added bonus, writing all your CSS files with `@apply` everywhere basically means you're not learning and authoring CSS. You're authoring Tailwind. No matter how many times you write `@apply flex`, that's **not** the same as writing `display: flex`.\n\nNow I realize most of us aren't in the habit of trying to swap out CSS frameworks on projects on a regular basis. But believe me, I have done this! I'm on a client project right now where we're migrating from Foundation to Bulma. While it's true that it requires updating a bunch of HTML and some of the stylesheets in use, rest assured any custom bits of styling we wrote before will work again without hassle, because when you write plain ol' CSS (or even Sass), it just works no matter what.\n\nAnd while `@apply` seems cool on the face of it, it ends up becoming an enormous crutch. For example, I like the way Tailwind makes writing styles using CSS Grid techniques pretty straightforward. Unfortunately, after having done so, I still don't really understand Grid syntax itself. I remain ignorant of the open CSS standard.\n\nAs for why `@apply` in the grand scheme of things is largely unnecessary, that brings me to my third point.\n\n### Reason 3: Tailwind's focus on design systems and tokens could mostly be replaced by CSS Custom Properties (aka variables)—which IS a standard.\n\nPeople initially like Tailwind because it comes out-of-the-box with a nice design system and lots of tokens you can tweak (colors, font sizes, spacing, etc.). It's easy to get good-looking results quickly.\n\nThe problem is that all these tokens are defined…in JavaScript. A CSS framework. Using JavaScript for its design tokens. In 2021.\n\nI hate to break it to you, but all modern browsers support this thing called CSS Custom Properties. You can define design tokens once at the `:root` level as variables, and utilize them **everywhere**. You can even modify them in real-time while the site is loaded, or overload them in particular parts of the DOM tree. And they work *great* with web components. More on that in a moment.\n\nSo for example, in Tailwind you can write `class=\"mb-8\"` and you get a `margin-bottom: 2rem` style applied. But guess what you could do instead? Define `:root { --spacing-8: 2rem }` in your stylesheet, and then write `margin-bottom: var(--spacing-8)` anywhere you want. As in literally anywhere: a stylesheet, or a JS component, _or even a_ `style=` _attribute directly in HTML!_\n\nWhile the story gets a little murkier once you start looking at how to accommodate responsive breakpoints and so forth, nevertheless the principle here is that Tailwind uses a non-standard JavaScript-based build process for its design system at a time when you can build design systems using syntax that's _native_ to all modern browsers.\n\nSpeaking of what's native in modern web browsers…\n\n### Reason 4: Tailwind forgets that web components exist.\n\nThis is perhaps the biggest knock against Tailwind. It seemingly was conceived and promoted in a world where web components don't exist. Tailwind CSS is completely unusable within the Shadow DOM. Some enterprising developers have come up with solutions where select bits of Tailwind styling can get injected into components through a build process, but it's definitely a hack.\n\nMeanwhile, there are ways to build web component-based design systems today where global theming and component styling via the Shadow DOM (and exposed Parts) all work together. Again, you can do all this based on technology that's built-in and native to all modern browsers. And before you shrug your shoulders and go back to your React or your Vue, bear in mind that web components are not only an integral part of the HTML\u002FCSS\u002FJS spec today but are increasingly at the heart of further advancements to browser technology (for example how advanced customization of form controls might work in the future).\n\nTailwind in this respect is no more helpful to you than Bootstrap or Foundation or any other CSS framework written years\u002Fdecades ago. (Even my beloved Bulma! 😢)\n\n### Reason 5: Finally, Tailwind encourages div\u002Fspan-tag soup.\n\nI almost included this in the previous point, but it really bears its own conversation. I have become convinced by now that using `\u003Cdiv\u003E` and `\u003Cspan\u003E` tags everywhere in your markup is an anti-pattern. We live in a world where custom elements (aka `\u003Cwhatever-you-can-dream-of\u003E`) are fully supported and enabled by modern browsers. There's virtually no reason you're forced to write `\u003Cdiv class=\"card\"\u003E\u003C\u002Fdiv\u003E` when you can write `\u003Cui-card\u003E\u003C\u002Fui-card\u003E`. And in fact it's quite possible to use custom attributes along with elements to write _extremely expressive markup_ that—compared to ye markup of ol'—looks quite futuristic!\n\nTake the [Shoelace](https:\u002F\u002Fshoelace.style) web component library for example. Here's a button:\n\n```html\n\u003Csl-button type=\"default\" size=\"small\"\u003E\n  \u003Csl-icon slot=\"prefix\" name=\"gear\"\u003E\u003C\u002Fsl-icon\u003E\n  Settings\n\u003C\u002Fsl-button\u003E\n```\n\nAnd here's a modal:\n\n```html\n\u003Csl-dialog label=\"Dialog\" style=\"--width: 50vw;\"\u003E\n  Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n  \u003Csl-button slot=\"footer\" type=\"primary\"\u003EClose\u003C\u002Fsl-button\u003E\n\u003C\u002Fsl-dialog\u003E\n```\n\nNote that this isn't JSX. This isn't XML. This isn't some kind of fancy-pants template language you have to convert to ordinary HTML.\n\n**This is HTML.** This is what modern markup can look like.\n\nCompare that to an example from Tailwind's home page:\n\n```html\n\u003Cbutton class=\"hover:bg-light-blue-200 hover:text-light-blue-800 group flex items-center rounded-md bg-light-blue-100 text-light-blue-600 text-sm font-medium px-4 py-2\"\u003E\n  New\n\u003C\u002Fbutton\u003E\n```\n\nEwwwww. 🤢\n\nThere is a future world of HTML\u002FCSS\u002FJS (and in large part it's here already) where you can write bespoke Grid\u002FFlexbox layouts quickly and easily with vanilla CSS, set up design tokens with CSS variables, utilize a well-architected web component library like Shoelace (or even mix 'n' match two or three), and end up with a website\u002Fapp that **looks amazing** and works quite well—all without needing *any* of the many megabytes of Tailwind utility classes that you then need to purge to get your performance back down to manageable levels.\n\nIn other words, Tailwind's main selling point (besides rapid prototyping via utility classes) is its attractive design system—yet the way it implements that design system really kind of sucks! (Incompatible with web components by default, only minimally leverages CSS variables, doesn't encourage custom elements\u002Fattributes with relevant scoped styling…)\n\nWhich begs the question: how does Tailwind enable us to \"build modern websites\" exactly? On a pure technical level, I honestly don't see it as being much of an improvement over Bootstrap. And Bootstrap at least provides an open-source component library for free. If you use Tailwind, [they ask you to pay for it](https:\u002F\u002Ftailwindui.com).\n\n### Conclusion: If you like Tailwind, use it! But don't try to convince me it's the future.\n\nListen, we can go back and forth on the relative merits or problems with any technology. There are definitely some benefits to choosing Tailwind, most notably how you can go from blank page to fancy-pants design quickly by simply hammering out a bunch of div tags with utility classes.\n\nBut after over a year of experience with Tailwind and weighing the pros and cons against other approaches to HTML, styling, and component-based web development in general, I'm thoroughly convinced that Tailwind does not represent the direction I wish to see the web head in as a whole. And apologies to all the Tailwind fans out there, but you just don't have a compelling argument that will convince me otherwise.\n\nAnd that's why Tailwind isn't for me. YMMV. 🙃";c.user={name:"Jared White",username:b,twitter_username:b,github_username:b,website_url:"https:\u002F\u002Fwww.bridgetownrb.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--80J3wLB7--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F342525\u002F21d42783-97b3-41d1-a778-d30c3120690a.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--bZJq9nCl--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F342525\u002F21d42783-97b3-41d1-a778-d30c3120690a.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"jaredcwhite",{},"https:\u002F\u002Fdev.to\u002Fjaredcwhite\u002Fwhy-tailwind-isn-t-for-me-5c90",1236,"2021-01-16T00:59:20Z")));
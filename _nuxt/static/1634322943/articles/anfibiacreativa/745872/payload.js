__NUXT_JSONP__("/articles/anfibiacreativa/745872", (function(a,b,c,d,e,f,g){b.type_of="article";b.id=745872;b.title="From developer to (solutions) architect.  A simple guide.";b.description="So you don't have formal CS education and have been doing development for some years, or you are a...";b.readable_publish_date="Jul 21";b.slug="from-developer-to-solutions-architect-a-simple-guide-2b91";b.path="\u002Fthis-is-learning\u002Ffrom-developer-to-solutions-architect-a-simple-guide-2b91";b.url=c;b.comments_count=7;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image=a;b.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F745872.png";b.canonical_url=c;b.created_at="2021-07-02T08:03:00Z";b.edited_at="2021-07-24T08:20:30Z";b.crossposted_at=a;b.published_at=e;b.last_comment_at="2021-07-27T22:50:35Z";b.reading_time_minutes=12;b.tag_list="architecture, cloudskills, infrastructure, systems";b.tags=["architecture","cloudskills","infrastructure","systems"];b.body_html="\u003Cp\u003ESo you don't have formal CS education and have been doing development for some years, or you are a junior but your manager has already asked you where do you see yourself in tech in a few years. You want to become an Architect, but you are not sure of what it takes and you want to have a better idea of what you should focus on. You want to understand where are your technical gaps and what soft skills are required. This article is for you!\u003C\u002Fp\u003E\n\n\u003Cp\u003EArchitect is an umbrella term to designate a role that is focused on either designing or refining software solutions for the benefit of the customer. But it has different accountabilities, depending on the organization you work for. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"presales-solutions-architects\" href=\"#presales-solutions-architects\"\u003E\n  \u003C\u002Fa\u003E\n  Pre-Sales Solutions Architects\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EPre-Sales Solutions Architects can also be called Customer Engineers or Sales Engineers, and are usually focused in making sure a technology they represent fits a customer's use case and their required capabilities, while they help them design a system to integrate it, or give pointers about the best application of it. They'll work on high-level diagrams, do discovery, work in scoping, and give support to Sales reps during technical alignments.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"postsales-solutions-architects\" href=\"#postsales-solutions-architects\"\u003E\n  \u003C\u002Fa\u003E\n  Post-Sales Solutions Architects\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESome of the pre-sales Architects, also do post sales, meaning that after you're done with the sales process, and a deal is closed, you focus in helping with the actual implementation. They may just design the systems at a high level and overview the implementation, or be very hands on, and execute it together with the technical implementation team.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"software-architects\" href=\"#software-architects\"\u003E\n  \u003C\u002Fa\u003E\n  Software Architects\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESoftware Architect is a very hands on role, architecting and oftentimes implementing a software solution. Software Architects are an equivalent of the Post-Sales, usually for a product or specific technology. Software Architects are not necessarily customer facing.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAgain, it's important to clarify that the designation and accountabilities for each role, may vary across the industry.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"the-technical-common-ground\" href=\"#the-technical-common-ground\"\u003E\n  \u003C\u002Fa\u003E\n  The technical common ground\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENo matter what type of architect, the common ground is the technical one. Architects are technical by nature, from a perspective that allows them to connect tech specifications to complex security requirements, governance nuances and privacy compliance and sovereignty, and legal liabilities. They are not concerned with the nitty-gritty details of the implementation, rather the big picture. Deployment pipelines, layers of the stack, performance at a system level, user management, locality, infrastructure components...those are the things that really interest and occupy an architect.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"process-phases-a-solutions-architect-participates-of\" href=\"#process-phases-a-solutions-architect-participates-of\"\u003E\n  \u003C\u002Fa\u003E\n  Process phases a Solutions Architect participates of\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI work now in the role of Solutions Architect, and will focus on this particular dimension, since Software Architects are involved in processes pertaining the software development cycle, which is much more complex to describe.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESolutions Architects are usually a customer facing role and participate of and are instrumental to a lot of conversations with them. Their main goal is to discover and scope a system's requirements and\u002For current technical state as much as drafting the desired state and deciding or advising on the most ideal solution.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"discovery\" href=\"#discovery\"\u003E\n  \u003C\u002Fa\u003E\n  Discovery\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ESA's (acronym for Solutions Architect) participate of discovery. These are the early stages of conversation with a client, where many questions are asked. An SA needs to understand everything about their client, their product or project, their goals, their problems, so they can map those to tangible solution suggestions.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe most important skills at a discovery meeting are not technical: Solutions Architects need to be able to \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Elisten more than talk\u003C\u002Fli\u003E\n\u003Cli\u003Emake good assumptions and validate them with the client\u003C\u002Fli\u003E\n\u003Cli\u003Edo not propose a solution ahead of understanding well all the problems and requirements\u003C\u002Fli\u003E\n\u003Cli\u003Ebe very objective\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EContrary to what many people think, even those architects that represent a brand, are unlikely to push for a biased solution if they assess that's not what the client needs. Not only your reputation is at stake, most architects pride themselves in promoting the foundations of a solid system\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"foundations-of-a-solid-system\" href=\"#foundations-of-a-solid-system\"\u003E\n  \u003C\u002Fa\u003E\n  Foundations of a solid system\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ESolid, well designed systems share certain identical features. They all aim to be scalable, robust, resilient, recoverable and secure, among other important characteristics. Architects also want their systems to be highly available and sometimes they have requirements for them to be globally distributed, which is less of a problem today when global provisioning is guaranteed in the cloud. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"scoping\" href=\"#scoping\"\u003E\n  \u003C\u002Fa\u003E\n  Scoping\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ERequirements are the documented capabilities used to measure a systems success, according to whether or not they're satisfied. They usually map to those foundational concepts. Like for example, it may be a requirement for the system to have an uptime of a certain percentage (usually 99.995% for mission critical applications, which is about 4s downtime daily - you can calculate that SLA here \u003Ca href=\"https:\u002F\u002Fuptime.is\u002F\"\u003Ehttps:\u002F\u002Fuptime.is\u002F\u003C\u002Fa\u003E). That requirement maps to \u003Ccode\u003EHigh Availability\u003C\u002Fcode\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe process of putting requirements and capabilities in scope, is also done by the architect, and usually (technically) validated by the customer with business objectives in mind, at some point. Backlogs are oftentimes the result of generating user stories and functional requirements directly from the scoping exercise, together with the validation and priorization of capabilities, towards a release. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-technologies-should-i-focus-on\" href=\"#what-technologies-should-i-focus-on\"\u003E\n  \u003C\u002Fa\u003E\n  What technologies should I focus on?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThat is a difficult question to answer, since it will very much depend on the type of system a software or solutions architect is designing or assessing, the technologies may vary greatly. I will focus on describing a list of technologies and areas of expertise you may want to check out, if your goal is to become an architect working in web oriented solutions.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"the-cloud-landscape\" href=\"#the-cloud-landscape\"\u003E\n  \u003C\u002Fa\u003E\n  The cloud landscape\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis is not to say there aren't architects still working on premise in self managed environments, but if you're planning to join the forces, you probably want to have an idea of who are the 3 public cloud providers (\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002F\"\u003EAWS\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fazure.microsoft.com\u002Fen-gb\u002F\"\u003EAzure\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fconsole.cloud.google.com\u002F\"\u003EGCP\u003C\u002Fa\u003E), and their offering and topology. \u003C\u002Fp\u003E\n\n\u003Cp\u003EYou may also want to learn about cloud-native technologies, and explore what's hot and trending.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdditionally it's very useful to know certain jargon and how some mechanisms work in the cloud. Concepts like\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ewhat is a \u003Ca href=\"https:\u002F\u002Fwww.capitalone.com\u002Ftech\u002Fcloud\u002Fwhat-is-a-cluster\u002F\"\u003Ecluster\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.delltechnologies.com\u002Fen-us\u002Fblog\u002Fthe-difference-between-scale-up-and-scale-out\u002F\"\u003Escaling out vs. scaling up\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Ewhat are \u003Ca href=\"https:\u002F\u002Fwww.confluent.io\u002Flearn\u002Fdistributed-systems\u002F\"\u003Edistributed systems\u003C\u002Fa\u003E and how they work\u003C\u002Fli\u003E\n\u003Cli\u003Ewhat are the \u003Ca href=\"https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fazure\u002Farchitecture\u002Fbest-practices\u002Fcaching\"\u003Ecaching mechanisms\u003C\u002Fa\u003E and the best practices in the cloud\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"infrastructure-and-infrastructure-provisioning\" href=\"#infrastructure-and-infrastructure-provisioning\"\u003E\n  \u003C\u002Fa\u003E\n  Infrastructure and infrastructure provisioning\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EProvisioning infrastructure is not really the architect domain and it is usually done by the system engineers, Ops or other roles (the name may vary, depending on the organization). However, architects may have to validate or analyse the deployment pipelines and infrastructure setup before it is executed or afterward, for several reasons:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ecosts assessment\u003C\u002Fli\u003E\n\u003Cli\u003Ecompliance with architecture definitions (security, performance, technology definitions, etc)\u003C\u002Fli\u003E\n\u003Cli\u003Erisk evaluation\u003C\u002Fli\u003E\n\u003Cli\u003Ereconfiguration\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAlthough infrastructure provisioning, especially in the cloud, is provider dependent, there are some concepts you need to know and understand.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"networking\" href=\"#networking\"\u003E\n  \u003C\u002Fa\u003E\n  Networking\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EYou will need to understand well how the internet works and all the layers involved. Some important concepts and focus areas would be\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ethe Networking Layer Model per type (TCP\u002FIP, vLab, ISO\u002FOSI)\u003C\u002Fli\u003E\n\u003Cli\u003ETCP\u002FUDP\u002FHTTP Protocols\u003C\u002Fli\u003E\n\u003Cli\u003ESSL, TLS and other Networking Security concepts (Firewalls, Keys, VPN's, VPC, Private Link, Network Peering, etc and the OWASP checklist)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EA book I definitely recommend to read to catchup with a lot of these concepts, is \u003Ca href=\"https:\u002F\u002Fwww.pearson.com\u002Fus\u002Fhigher-education\u002Fprogram\u002FKurose-Computer-Networking-A-Top-Down-Approach-7th-Edition\u002FPGM1101673.html\"\u003EComputer Networking, a Top-Down Approach\u003C\u002Fa\u003E I had to read it when I was taking credits in Software Engineering, and it's one of the best books on the subject.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI also recommend you download and install \u003Ca href=\"https:\u002F\u002Fwww.wireshark.org\u002F\"\u003EWireshark\u003C\u002Fa\u003E for packet sniffing or TCP analysis, to learn more about segments, headers, and other networking concepts. There are more sophisticated tools, but this one is great to get going. It's open source, free and a consolidated tool.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"hardware\" href=\"#hardware\"\u003E\n  \u003C\u002Fa\u003E\n  Hardware\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EYes, you need to know about hardware. This is particularly important at the time of deciding on infrastructure configuration and if you detect performance issues and must scale up or down\u002Fout or in and system, to decide on the specifications. Concepts like \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECPU, (disk) SDD and HDD, (memory) RAM(ø)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.quostar.com\u002Fblog\u002Fiops-explained\u002F\"\u003EIOPS\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.zdnet.com\u002Farticle\u002Fcommonly-used-raid-architectures\u002F\"\u003ERAID\u003C\u002Fa\u003E architecture\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.cloudflare.com\u002Fen-gb\u002Flearning\u002Fnetwork-layer\u002Fwhat-is-a-computer-port\u002F\"\u003Eports\u003C\u002Fa\u003E -very important for hexagonal architectures-\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003Eand concepts like\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ebig and little \u003Ca href=\"https:\u002F\u002Fwww.freecodecamp.org\u002Fnews\u002Fwhat-is-endianness-big-endian-vs-little-endian\u002F\"\u003Eendianness\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EUnless you actually work at a data center and walk in between racks, you probably don't need to know about other components like power supplies. Just the necessary specifications to match a software requirement. Although I always advise that the more you know, the better! But you also need to know about: \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eoperating systems(ø)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fazure.microsoft.com\u002Fen-us\u002Foverview\u002Fwhat-is-virtualization\u002F\"\u003Evirtualization\u003C\u002Fa\u003E (most servers are actually virtual machines on top of physical servers)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.ibm.com\u002Fcloud\u002Flearn\u002Fcontainerization\"\u003Econtainerization\u003C\u002Fa\u003E and containerization and orchestration software (like \u003Ca href=\"https:\u002F\u002Fwww.docker.com\u002F\"\u003EDocker\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fkubernetes.io\u002F\"\u003EKubernetes\u003C\u002Fa\u003E)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E(ø)I am not going to provide links to content about physical components of computers because there are way too many sources, and you only need to run a quick google search and pick the one that interests you the most.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne important piece of advise I can give you, is that whatever operating system you love the most, you probably need to be familiar with Unix and Unix-like systems and architectures, and be proficient in the use of the \u003Ca href=\"https:\u002F\u002Fwww.unixtutorial.org\u002Fbasic-unix-commands\"\u003Eshell\u003C\u002Fa\u003E since it's the preferred means of executing code remotely, deploying packages and code and accessing systems. \u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"databases\" href=\"#databases\"\u003E\n  \u003C\u002Fa\u003E\n  Databases\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThe task of storing and manipulating data becomes more and more important, as applications are more and more user-centric. Storing data is not only about the software used for it. It's a key part of the success of an application. And architects need to be well aware of the\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Edifferent \u003Ca href=\"https:\u002F\u002Fecomputernotes.com\u002Ffundamental\u002Fwhat-is-a-database\u002Ftype-of-data-models\"\u003Edata models\u003C\u002Fa\u003E and database architecture\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.mongodb.com\u002Fnosql-explained\u002Fnosql-vs-sql\"\u003Etabular vs document\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fnosql\u002Fgraph\u002F\"\u003Egraph databases\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fcloud.google.com\u002Flearn\u002Fwhat-is-object-storage\"\u003Eobject storage\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Ephysical requirements of the database software\u003C\u002Fli\u003E\n\u003Cli\u003Elimitations of certain models in relation to scalability\u003C\u002Fli\u003E\n\u003Cli\u003Esecurity implications of data flows\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EYou probably want to investigate what product corresponds to what provider, and want to learn concepts like \u003Ca href=\"https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F16455\u002Ftransaction-databases\"\u003Etransactions and ACID compliance\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou may think I'm biased, but I recommend you head to the MongoDB free learning platform aka \u003Ca href=\"https:\u002F\u002Funiversity.mongodb.com\u002F\"\u003EMonogDB University\u003C\u002Fa\u003E, where there are tons of information on all those subjects, and a lot of it is -contrary to what many may think- very objective.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"architecture-models\" href=\"#architecture-models\"\u003E\n  \u003C\u002Fa\u003E\n  Architecture models\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWell obviously, an architect needs to know about architecture! And architecture is an evolving and dynamic ground! \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fmicroservices.io\u002F\"\u003Emicroservices\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdzone.com\u002Farticles\u002Fhexagonal-architecture-what-is-it-and-how-does-it\"\u003Ehexagonal architectures\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003Emonoliths\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fazure\u002Farchitecture\u002Fguide\u002Farchitecture-styles\u002Fevent-driven\"\u003Eevent-driven\u003C\u002Fa\u003E architecture\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.martinfowler.com\u002Farticles\u002Fserverless.html\"\u003Eserverless\u003C\u002Fa\u003E architecture\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fjamstack.org\u002F\"\u003Ejam stack\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EYou need to know those concepts by heart and when they're the approach to follow. I am inclined to think that a good architect, just like a good developer, is never biased, and will try to find the right solution to a problem, instead of finding a problem to implement a preferred solution.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAll those paradigms have software and technologies associated, that you may want to explore and experiment with. For example:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Edocker (containerization\u002Fvirtualization)\u003C\u002Fli\u003E\n\u003Cli\u003Ekubernetes (orchestration\u002Fmanagement of containers)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fkafka.apache.org\u002F\"\u003Ekafka\u003C\u002Fa\u003E (event-streaming platform)\u003C\u002Fli\u003E\n\u003Cli\u003Eserverless functions (very much provider dependent, are a way to execute functions on triggers and avoid large backend implemetations)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENeedless to say that the many providers will have tools and connectors, modules and best practices or guidelines, to implement each different type of pattern according to their infrastructure architecture and offering.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"deployment-pipelines-and-release-models\" href=\"#deployment-pipelines-and-release-models\"\u003E\n  \u003C\u002Fa\u003E\n  Deployment pipelines and release models\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EArchitects are usually in charge of designing deployment pipelines, that tend to depend on the application release model. If you are working with a continuous integration pattern, you'll probably have to support it with CI\u002FCD automation tools. And the following concepts should be familiar to you\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EActions\u003C\u002Fli\u003E\n\u003Cli\u003ETriggers\u002FEvents\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fdotnet\u002Farchitecture\u002Fcloud-native\u002Finfrastructure-as-code\"\u003EInfra as code\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003Etogether with relevant software (again, options may be conditioned by the cloud provider choice)\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fcircleci.com\u002Fdocker\u002F?utm_medium=sem&amp;utm_source=microsoft&amp;utm_campaign=sem-microsoft-dg--emea-en-circleciBuildDeployEnviron-eCPC-auth-nb&amp;utm_content=keyword-text_rsa-exact_docker-&amp;msclkid=a0fbd75708d018c80cceb7af26c0bf57\"\u003ECircle CI\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.jetbrains.com\u002Fteamcity\u002F?msclkid=415bd95bc1411e73c559b9a3f07fc2ff&amp;utm_source=bing&amp;utm_medium=cpc&amp;utm_campaign=EMEA_en_ES_TeamCity_Search_Competitors&amp;utm_term=circle%20ci&amp;utm_content=circle%20ci\"\u003ETeamCity\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.terraform.io\u002F\"\u003ETerraform\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn the realms of automation you may also have to design means of performing test-automation for different areas, ranging from code sanity to performance, and have to know about the implementation and configuration of tools like\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.sonarqube.org\u002F\"\u003ESonarQube\u003C\u002Fa\u003E (code quality)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fcustomerportal.solarwinds.com\u002F\"\u003ESolarWinds\u003C\u002Fa\u003E (performance monitorization or observability)\nand the likes\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"access-control-and-governance\" href=\"#access-control-and-governance\"\u003E\n  \u003C\u002Fa\u003E\n  Access control and governance\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EArchitects are for sure in many cases responsible for software\u002Fplatform security, if not for its implementation, for its design or assessment.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt is important for architects to understand the many means of controlling access to software code bases and data, and the services provided by the applications they architect.\u003C\u002Fp\u003E\n\n\u003Cp\u003EArchitects know well the meaning of \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eauthorization\u003C\u002Fli\u003E\n\u003Cli\u003Eauthentication\n\u003Ca href=\"http:\u002F\u002Fwww.bu.edu\u002Ftech\u002Fabout\u002Fsecurity-resources\u002Fbestpractice\u002Fauth\u002F\"\u003Ehttp:\u002F\u002Fwww.bu.edu\u002Ftech\u002Fabout\u002Fsecurity-resources\u002Fbestpractice\u002Fauth\u002F\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003Eand have to understand the different ways to implement them, at an application level and low level, too.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt is desirable for architects to understand what vectors of vulnerability their apps or platforms, or the software they work with may be exposed to, in order to mitigate risks.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGovernance has many meanings and implications and it's so intersectional I can only map it to the different dimensions it may connect to. \u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, designing role based access depending on authorization granularity is part of governance policies for access, while software capabilities providing the ability to set those rules, guarantee legal compliance with standards like \u003Ca href=\"https:\u002F\u002Fwww.iso.org\u002Fisoiec-27001-information-security.html\"\u003EISO27001\u003C\u002Fa\u003E or GDPR. \u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"the-api-and-application-layers\" href=\"#the-api-and-application-layers\"\u003E\n  \u003C\u002Fa\u003E\n  The API and application layers\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EMost modern architecture patterns for web development are very heavily API dependent. It is very likely that the software or platform an architect is responsible for, does not only consume from dozens of API's but also exposes some of them.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENeedless to say, 100% of the tools I mentioned through the article, are API based, and so are most of the services exposed by cloud providers.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor this reason, architects need to be skilled on API design and maintenance, and very familiar with concepts and patterns like\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Frestfulapi.net\u002F\"\u003EREST APIs\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fwww.json.org\u002Fjson-en.html\"\u003EJSON\u003C\u002Fa\u003E standards\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgraphql.org\u002F\"\u003EGraphQL\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fstoplight.io\u002Fapi-types\u002Fsoap-api\u002F\"\u003ESOAP\u003C\u002Fa\u003E (although less used now, many legacy systems still consume or expose SOAP services)\u003C\u002Fli\u003E\n\u003Cli\u003EAnd other API alternatives like \u003Ca href=\"https:\u002F\u002Fwww.geeksforgeeks.org\u002Fintroduction-java-servlets\u002F\"\u003EJava Servlets\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAnd before you complain about the age of some of the mentioned API architectures, remember that a lot of times Solutions Architects assist in migrating \u003Ca href=\"https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F635\u002Flegacy-system\"\u003ELegacy Systems\u003C\u002Fa\u003E, and for that, they need to know what they're facing!\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn order to effectively design and maintain, or even assess in-place solutions, it is very useful for architects to be aware of and implement the \u003Ca href=\"https:\u002F\u002Fwww.openapis.org\u002F\"\u003EOpen API specification\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fswagger.io\u002F\"\u003ESwagger\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EArchitects need to design the connection and sometimes aggregation of data coming from all those API's. For that reason, they also need to understand well how to consume them and distribute them, and need to know concepts like\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fapifriends.com\u002Fapi-management\u002Fapi-gateway-to-the-cloud\u002F\"\u003Enorth-south bound\u003C\u002Fa\u003E (API gateway)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fapifriends.com\u002Fapi-management\u002Fservice-mesh\u002F\"\u003Eeast-west bound\u003C\u002Fa\u003E(service-to-service or service mesh)\u003C\u002Fli\u003E\n\u003Cli\u003Eproxy and \u003Ca href=\"https:\u002F\u002Fwww.cloudflare.com\u002Fen-gb\u002Flearning\u002Fcdn\u002Fglossary\u002Freverse-proxy\u002F\"\u003Ereverse proxy\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn terms of app development, it may not be necessary for architects to know or understand implementation details of high level languages, but most architects do anyway, since at a great percentage architects used to be developers. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"highlevel-diagrams-uml-and-other-types-of-diagrams\" href=\"#highlevel-diagrams-uml-and-other-types-of-diagrams\"\u003E\n  \u003C\u002Fa\u003E\n  High-level diagrams, UML and other types of diagrams\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EArchitects speak in diagrams. Believe me. Oftentimes they need to represent very complex systems and relationships, and the only way to do it is being proficient at representing entities with shapes and arrows.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is why architects learn \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.edrawsoft.com\u002Fwhat-is-uml-diagram.html\"\u003EUML\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.vertabelo.com\u002Fblog\u002Fcrow-s-foot-notation\u002F\"\u003ECrow's Foot Notation\u003C\u002Fa\u003E\nand other representation schemas\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EArchitects usually conduct and lead calls with customers, and they need to have great public speaking and presentation skills: from putting together impressive slide decks, to expressing complex technical ideas in a language everyone can understand.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"sales\" href=\"#sales\"\u003E\n  \u003C\u002Fa\u003E\n  Sales\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESome organizations hire architects to be part of their sales processes, and advise sales reps and clients from a technical perspective.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThose organizations are very likely to offer training in their sales process and methodologies used, as well as ramping up the architects in a particular technology or software.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"will-all-my-coding-skills-go-to-waste\" href=\"#will-all-my-coding-skills-go-to-waste\"\u003E\n  \u003C\u002Fa\u003E\n  Will all my coding skills go to waste?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAbsolutely NOT! I can speak from personal experience that all I have learned as a software developer, helps me quickly understand systems and decisions, analyse existing code bases and configurations, and build rapport with other architects and developers. Some solutions architects are required to build PoC's on a regular basis, and your coding skills are not only helpful but necessary.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWell, I know this is already very long, and this is only the tip of the ice-berg! Software and Solutions Architecture is a very rewarding career path and one that many developers follow when they don't want to move to more administrative, project or account management positions, and want to continue to be part of the technical scene. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EDisclaimer: I added links to resources from pretty reputable sites, but if you want to contribute with better ones, add them in the comments!\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you have more questions, hit me on \u003Ca href=\"https:\u002F\u002Fwww.twitter.com\u002Fanfibiacreativa\"\u003Etwitter\u003C\u002Fa\u003E, share and like!\u003C\u002Fp\u003E\n\n";b.body_markdown="So you don't have formal CS education and have been doing development for some years, or you are a junior but your manager has already asked you where do you see yourself in tech in a few years. You want to become an Architect, but you are not sure of what it takes and you want to have a better idea of what you should focus on. You want to understand where are your technical gaps and what soft skills are required. This article is for you!\n\nArchitect is an umbrella term to designate a role that is focused on either designing or refining software solutions for the benefit of the customer. But it has different accountabilities, depending on the organization you work for. \n\n## Pre-Sales Solutions Architects\nPre-Sales Solutions Architects can also be called Customer Engineers or Sales Engineers, and are usually focused in making sure a technology they represent fits a customer's use case and their required capabilities, while they help them design a system to integrate it, or give pointers about the best application of it. They'll work on high-level diagrams, do discovery, work in scoping, and give support to Sales reps during technical alignments.\n\n## Post-Sales Solutions Architects\nSome of the pre-sales Architects, also do post sales, meaning that after you're done with the sales process, and a deal is closed, you focus in helping with the actual implementation. They may just design the systems at a high level and overview the implementation, or be very hands on, and execute it together with the technical implementation team.\n\n## Software Architects\nSoftware Architect is a very hands on role, architecting and oftentimes implementing a software solution. Software Architects are an equivalent of the Post-Sales, usually for a product or specific technology. Software Architects are not necessarily customer facing.\n\nAgain, it's important to clarify that the designation and accountabilities for each role, may vary across the industry.\n\n## The technical common ground\nNo matter what type of architect, the common ground is the technical one. Architects are technical by nature, from a perspective that allows them to connect tech specifications to complex security requirements, governance nuances and privacy compliance and sovereignty, and legal liabilities. They are not concerned with the nitty-gritty details of the implementation, rather the big picture. Deployment pipelines, layers of the stack, performance at a system level, user management, locality, infrastructure components...those are the things that really interest and occupy an architect.\n\n\n## Process phases a Solutions Architect participates of\nI work now in the role of Solutions Architect, and will focus on this particular dimension, since Software Architects are involved in processes pertaining the software development cycle, which is much more complex to describe.\n\nSolutions Architects are usually a customer facing role and participate of and are instrumental to a lot of conversations with them. Their main goal is to discover and scope a system's requirements and\u002For current technical state as much as drafting the desired state and deciding or advising on the most ideal solution.\n\n### Discovery\nSA's (acronym for Solutions Architect) participate of discovery. These are the early stages of conversation with a client, where many questions are asked. An SA needs to understand everything about their client, their product or project, their goals, their problems, so they can map those to tangible solution suggestions.\n\nThe most important skills at a discovery meeting are not technical: Solutions Architects need to be able to \n\n- listen more than talk\n- make good assumptions and validate them with the client\n- do not propose a solution ahead of understanding well all the problems and requirements\n- be very objective\n\nContrary to what many people think, even those architects that represent a brand, are unlikely to push for a biased solution if they assess that's not what the client needs. Not only your reputation is at stake, most architects pride themselves in promoting the foundations of a solid system\n\n#### Foundations of a solid system \nSolid, well designed systems share certain identical features. They all aim to be scalable, robust, resilient, recoverable and secure, among other important characteristics. Architects also want their systems to be highly available and sometimes they have requirements for them to be globally distributed, which is less of a problem today when global provisioning is guaranteed in the cloud. \n\n### Scoping\nRequirements are the documented capabilities used to measure a systems success, according to whether or not they're satisfied. They usually map to those foundational concepts. Like for example, it may be a requirement for the system to have an uptime of a certain percentage (usually 99.995% for mission critical applications, which is about 4s downtime daily - you can calculate that SLA here https:\u002F\u002Fuptime.is\u002F). That requirement maps to `High Availability`. \n\nThe process of putting requirements and capabilities in scope, is also done by the architect, and usually (technically) validated by the customer with business objectives in mind, at some point. Backlogs are oftentimes the result of generating user stories and functional requirements directly from the scoping exercise, together with the validation and priorization of capabilities, towards a release. \n\n\n## What technologies should I focus on?\n\nThat is a difficult question to answer, since it will very much depend on the type of system a software or solutions architect is designing or assessing, the technologies may vary greatly. I will focus on describing a list of technologies and areas of expertise you may want to check out, if your goal is to become an architect working in web oriented solutions.\n\n### The cloud landscape\nThis is not to say there aren't architects still working on premise in self managed environments, but if you're planning to join the forces, you probably want to have an idea of who are the 3 public cloud providers ([AWS](https:\u002F\u002Faws.amazon.com\u002F), [Azure](https:\u002F\u002Fazure.microsoft.com\u002Fen-gb\u002F) and [GCP](https:\u002F\u002Fconsole.cloud.google.com\u002F)), and their offering and topology. \n\nYou may also want to learn about cloud-native technologies, and explore what's hot and trending.\n\nAdditionally it's very useful to know certain jargon and how some mechanisms work in the cloud. Concepts like\n\n- what is a [cluster](https:\u002F\u002Fwww.capitalone.com\u002Ftech\u002Fcloud\u002Fwhat-is-a-cluster\u002F)\n- [scaling out vs. scaling up](https:\u002F\u002Fwww.delltechnologies.com\u002Fen-us\u002Fblog\u002Fthe-difference-between-scale-up-and-scale-out\u002F)\n- what are [distributed systems](https:\u002F\u002Fwww.confluent.io\u002Flearn\u002Fdistributed-systems\u002F) and how they work\n- what are the [caching mechanisms](https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fazure\u002Farchitecture\u002Fbest-practices\u002Fcaching) and the best practices in the cloud\n\n### Infrastructure and infrastructure provisioning\nProvisioning infrastructure is not really the architect domain and it is usually done by the system engineers, Ops or other roles (the name may vary, depending on the organization). However, architects may have to validate or analyse the deployment pipelines and infrastructure setup before it is executed or afterward, for several reasons:\n\n- costs assessment\n- compliance with architecture definitions (security, performance, technology definitions, etc)\n- risk evaluation\n- reconfiguration\n\nAlthough infrastructure provisioning, especially in the cloud, is provider dependent, there are some concepts you need to know and understand.\n\n#### Networking\nYou will need to understand well how the internet works and all the layers involved. Some important concepts and focus areas would be\n\n- the Networking Layer Model per type (TCP\u002FIP, vLab, ISO\u002FOSI)\n- TCP\u002FUDP\u002FHTTP Protocols\n- SSL, TLS and other Networking Security concepts (Firewalls, Keys, VPN's, VPC, Private Link, Network Peering, etc and the OWASP checklist)\n\nA book I definitely recommend to read to catchup with a lot of these concepts, is [Computer Networking, a Top-Down Approach](https:\u002F\u002Fwww.pearson.com\u002Fus\u002Fhigher-education\u002Fprogram\u002FKurose-Computer-Networking-A-Top-Down-Approach-7th-Edition\u002FPGM1101673.html) I had to read it when I was taking credits in Software Engineering, and it's one of the best books on the subject.\n\nI also recommend you download and install [Wireshark](https:\u002F\u002Fwww.wireshark.org\u002F) for packet sniffing or TCP analysis, to learn more about segments, headers, and other networking concepts. There are more sophisticated tools, but this one is great to get going. It's open source, free and a consolidated tool.\n\n#### Hardware\nYes, you need to know about hardware. This is particularly important at the time of deciding on infrastructure configuration and if you detect performance issues and must scale up or down\u002Fout or in and system, to decide on the specifications. Concepts like \n\n- CPU, (disk) SDD and HDD, (memory) RAM(ø)\n- [IOPS](https:\u002F\u002Fwww.quostar.com\u002Fblog\u002Fiops-explained\u002F)\n- [RAID](https:\u002F\u002Fwww.zdnet.com\u002Farticle\u002Fcommonly-used-raid-architectures\u002F) architecture\n- [ports](https:\u002F\u002Fwww.cloudflare.com\u002Fen-gb\u002Flearning\u002Fnetwork-layer\u002Fwhat-is-a-computer-port\u002F) -very important for hexagonal architectures-\n\nand concepts like\n\n- big and little [endianness](https:\u002F\u002Fwww.freecodecamp.org\u002Fnews\u002Fwhat-is-endianness-big-endian-vs-little-endian\u002F)\n\nUnless you actually work at a data center and walk in between racks, you probably don't need to know about other components like power supplies. Just the necessary specifications to match a software requirement. Although I always advise that the more you know, the better! But you also need to know about: \n\n- operating systems(ø)\n- [virtualization](https:\u002F\u002Fazure.microsoft.com\u002Fen-us\u002Foverview\u002Fwhat-is-virtualization\u002F) (most servers are actually virtual machines on top of physical servers)\n- [containerization](https:\u002F\u002Fwww.ibm.com\u002Fcloud\u002Flearn\u002Fcontainerization) and containerization and orchestration software (like [Docker](https:\u002F\u002Fwww.docker.com\u002F) and [Kubernetes](https:\u002F\u002Fkubernetes.io\u002F))\n\n(ø)I am not going to provide links to content about physical components of computers because there are way too many sources, and you only need to run a quick google search and pick the one that interests you the most.\n\nOne important piece of advise I can give you, is that whatever operating system you love the most, you probably need to be familiar with Unix and Unix-like systems and architectures, and be proficient in the use of the [shell](https:\u002F\u002Fwww.unixtutorial.org\u002Fbasic-unix-commands) since it's the preferred means of executing code remotely, deploying packages and code and accessing systems. \n\n#### Databases\n\nThe task of storing and manipulating data becomes more and more important, as applications are more and more user-centric. Storing data is not only about the software used for it. It's a key part of the success of an application. And architects need to be well aware of the\n\n- different [data models](https:\u002F\u002Fecomputernotes.com\u002Ffundamental\u002Fwhat-is-a-database\u002Ftype-of-data-models) and database architecture\n- [tabular vs document](https:\u002F\u002Fwww.mongodb.com\u002Fnosql-explained\u002Fnosql-vs-sql)\n- [graph databases](https:\u002F\u002Faws.amazon.com\u002Fnosql\u002Fgraph\u002F)\n- [object storage](https:\u002F\u002Fcloud.google.com\u002Flearn\u002Fwhat-is-object-storage)\n- physical requirements of the database software\n- limitations of certain models in relation to scalability\n- security implications of data flows\n\nYou probably want to investigate what product corresponds to what provider, and want to learn concepts like [transactions and ACID compliance](https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F16455\u002Ftransaction-databases)\n\nYou may think I'm biased, but I recommend you head to the MongoDB free learning platform aka [MonogDB University](https:\u002F\u002Funiversity.mongodb.com\u002F), where there are tons of information on all those subjects, and a lot of it is -contrary to what many may think- very objective.\n\n#### Architecture models\n\nWell obviously, an architect needs to know about architecture! And architecture is an evolving and dynamic ground! \n\n- [microservices](https:\u002F\u002Fmicroservices.io\u002F)\n- [hexagonal architectures](https:\u002F\u002Fdzone.com\u002Farticles\u002Fhexagonal-architecture-what-is-it-and-how-does-it)\n- monoliths\n- [event-driven](https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fazure\u002Farchitecture\u002Fguide\u002Farchitecture-styles\u002Fevent-driven) architecture\n- [serverless](https:\u002F\u002Fwww.martinfowler.com\u002Farticles\u002Fserverless.html) architecture\n- [jam stack](https:\u002F\u002Fjamstack.org\u002F)\n\nYou need to know those concepts by heart and when they're the approach to follow. I am inclined to think that a good architect, just like a good developer, is never biased, and will try to find the right solution to a problem, instead of finding a problem to implement a preferred solution.\n\nAll those paradigms have software and technologies associated, that you may want to explore and experiment with. For example:\n\n- docker (containerization\u002Fvirtualization)\n- kubernetes (orchestration\u002Fmanagement of containers)\n- [kafka](https:\u002F\u002Fkafka.apache.org\u002F) (event-streaming platform)\n- serverless functions (very much provider dependent, are a way to execute functions on triggers and avoid large backend implemetations)\n\n\nNeedless to say that the many providers will have tools and connectors, modules and best practices or guidelines, to implement each different type of pattern according to their infrastructure architecture and offering.\n\n#### Deployment pipelines and release models\n\nArchitects are usually in charge of designing deployment pipelines, that tend to depend on the application release model. If you are working with a continuous integration pattern, you'll probably have to support it with CI\u002FCD automation tools. And the following concepts should be familiar to you\n\n- Actions\n- Triggers\u002FEvents\n- [Infra as code](https:\u002F\u002Fdocs.microsoft.com\u002Fen-us\u002Fdotnet\u002Farchitecture\u002Fcloud-native\u002Finfrastructure-as-code)\n\ntogether with relevant software (again, options may be conditioned by the cloud provider choice)\n\n- [Circle CI](https:\u002F\u002Fcircleci.com\u002Fdocker\u002F?utm_medium=sem&utm_source=microsoft&utm_campaign=sem-microsoft-dg--emea-en-circleciBuildDeployEnviron-eCPC-auth-nb&utm_content=keyword-text_rsa-exact_docker-&msclkid=a0fbd75708d018c80cceb7af26c0bf57)\n- [TeamCity](https:\u002F\u002Fwww.jetbrains.com\u002Fteamcity\u002F?msclkid=415bd95bc1411e73c559b9a3f07fc2ff&utm_source=bing&utm_medium=cpc&utm_campaign=EMEA_en_ES_TeamCity_Search_Competitors&utm_term=circle%20ci&utm_content=circle%20ci)\n- [Terraform](https:\u002F\u002Fwww.terraform.io\u002F)\n\nIn the realms of automation you may also have to design means of performing test-automation for different areas, ranging from code sanity to performance, and have to know about the implementation and configuration of tools like\n\n- [SonarQube](https:\u002F\u002Fwww.sonarqube.org\u002F) (code quality)\n- [SolarWinds](https:\u002F\u002Fcustomerportal.solarwinds.com\u002F) (performance monitorization or observability)\n and the likes\n\n#### Access control and governance\n\nArchitects are for sure in many cases responsible for software\u002Fplatform security, if not for its implementation, for its design or assessment.\n\nIt is important for architects to understand the many means of controlling access to software code bases and data, and the services provided by the applications they architect.\n\nArchitects know well the meaning of \n\n- authorization\n- authentication\nhttp:\u002F\u002Fwww.bu.edu\u002Ftech\u002Fabout\u002Fsecurity-resources\u002Fbestpractice\u002Fauth\u002F\n\nand have to understand the different ways to implement them, at an application level and low level, too.\n\nIt is desirable for architects to understand what vectors of vulnerability their apps or platforms, or the software they work with may be exposed to, in order to mitigate risks.\n\nGovernance has many meanings and implications and it's so intersectional I can only map it to the different dimensions it may connect to. \n\nFor example, designing role based access depending on authorization granularity is part of governance policies for access, while software capabilities providing the ability to set those rules, guarantee legal compliance with standards like [ISO27001](https:\u002F\u002Fwww.iso.org\u002Fisoiec-27001-information-security.html) or GDPR. \n\n#### The API and application layers\n\nMost modern architecture patterns for web development are very heavily API dependent. It is very likely that the software or platform an architect is responsible for, does not only consume from dozens of API's but also exposes some of them.\n\nNeedless to say, 100% of the tools I mentioned through the article, are API based, and so are most of the services exposed by cloud providers.\n\nFor this reason, architects need to be skilled on API design and maintenance, and very familiar with concepts and patterns like\n\n- [REST APIs](https:\u002F\u002Frestfulapi.net\u002F) and [JSON](https:\u002F\u002Fwww.json.org\u002Fjson-en.html) standards\n- [GraphQL](https:\u002F\u002Fgraphql.org\u002F)\n- [SOAP](https:\u002F\u002Fstoplight.io\u002Fapi-types\u002Fsoap-api\u002F) (although less used now, many legacy systems still consume or expose SOAP services)\n- And other API alternatives like [Java Servlets](https:\u002F\u002Fwww.geeksforgeeks.org\u002Fintroduction-java-servlets\u002F)\n\nAnd before you complain about the age of some of the mentioned API architectures, remember that a lot of times Solutions Architects assist in migrating [Legacy Systems](https:\u002F\u002Fwww.techopedia.com\u002Fdefinition\u002F635\u002Flegacy-system), and for that, they need to know what they're facing!\n\nIn order to effectively design and maintain, or even assess in-place solutions, it is very useful for architects to be aware of and implement the [Open API specification](https:\u002F\u002Fwww.openapis.org\u002F) and [Swagger](https:\u002F\u002Fswagger.io\u002F)\n\nArchitects need to design the connection and sometimes aggregation of data coming from all those API's. For that reason, they also need to understand well how to consume them and distribute them, and need to know concepts like\n\n- [north-south bound](https:\u002F\u002Fapifriends.com\u002Fapi-management\u002Fapi-gateway-to-the-cloud\u002F) (API gateway)\n- [east-west bound](https:\u002F\u002Fapifriends.com\u002Fapi-management\u002Fservice-mesh\u002F)(service-to-service or service mesh)\n- proxy and [reverse proxy](https:\u002F\u002Fwww.cloudflare.com\u002Fen-gb\u002Flearning\u002Fcdn\u002Fglossary\u002Freverse-proxy\u002F)\n\nIn terms of app development, it may not be necessary for architects to know or understand implementation details of high level languages, but most architects do anyway, since at a great percentage architects used to be developers. \n\n## High-level diagrams, UML and other types of diagrams\nArchitects speak in diagrams. Believe me. Oftentimes they need to represent very complex systems and relationships, and the only way to do it is being proficient at representing entities with shapes and arrows.\n\nThis is why architects learn \n- [UML] (https:\u002F\u002Fwww.edrawsoft.com\u002Fwhat-is-uml-diagram.html)\n- [Crow's Foot Notation](https:\u002F\u002Fwww.vertabelo.com\u002Fblog\u002Fcrow-s-foot-notation\u002F)\nand other representation schemas\n\nArchitects usually conduct and lead calls with customers, and they need to have great public speaking and presentation skills: from putting together impressive slide decks, to expressing complex technical ideas in a language everyone can understand.\n\n## Sales\nSome organizations hire architects to be part of their sales processes, and advise sales reps and clients from a technical perspective.\n\nThose organizations are very likely to offer training in their sales process and methodologies used, as well as ramping up the architects in a particular technology or software.\n\n## Will all my coding skills go to waste?\nAbsolutely NOT! I can speak from personal experience that all I have learned as a software developer, helps me quickly understand systems and decisions, analyse existing code bases and configurations, and build rapport with other architects and developers. Some solutions architects are required to build PoC's on a regular basis, and your coding skills are not only helpful but necessary.\n\n## Conclusion\nWell, I know this is already very long, and this is only the tip of the ice-berg! Software and Solutions Architecture is a very rewarding career path and one that many developers follow when they don't want to move to more administrative, project or account management positions, and want to continue to be part of the technical scene. \n\n*Disclaimer: I added links to resources from pretty reputable sites, but if you want to contribute with better ones, add them in the comments!*\n\nIf you have more questions, hit me on [twitter](https:\u002F\u002Fwww.twitter.com\u002Fanfibiacreativa), share and like!\n ";b.user={name:"Natalia Venditto",username:f,twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PmQoXRub--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F150849\u002F3e174cf2-1d34-4ad2-a696-6b6d6458504e.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NBvxFzSY--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F150849\u002F3e174cf2-1d34-4ad2-a696-6b6d6458504e.jpg"};b.organization={name:"This is Learning",username:g,slug:g,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Y_qiuPkj--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F3314\u002Fdc73eb74-08f9-4592-b599-c08f2bb14b4d.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--YUtYH_M_--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F3314\u002Fdc73eb74-08f9-4592-b599-c08f2bb14b4d.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Fthis-is-learning\u002Ffrom-developer-to-solutions-architect-a-simple-guide-2b91",352,"2021-07-21T17:36:54Z","anfibiacreativa","this-is-learning")));
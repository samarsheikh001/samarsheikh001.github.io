window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:623209,title:"What is CRUD?",description:"Create, Read, Update, and Delete (CRUD) are the four basic methods for a good functional mod...",readable_publish_date:"Apr 4",slug:"what-is-crud-4id",path:"\u002Folegmelnic\u002Fwhat-is-crud-4id",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F623209.png",canonical_url:c,created_at:"2021-03-02T21:13:41Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:6,tag_list:"crud, rest, api",tags:["crud","rest","api"],body_html:"\u003Ch3\u003E\n  \u003Ca name=\"create-read-update-and-delete-crud-are-the-four-basic-methods-for-a-good-functional-model\" href=\"#create-read-update-and-delete-crud-are-the-four-basic-methods-for-a-good-functional-model\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Create, Read, Update, and Delete (CRUD) are the four basic methods for a good functional model.\n\u003C\u002Fh3\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"create-read-update-delete\" href=\"#create-read-update-delete\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Create, Read, Update, Delete\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhen we create an API, we should provide four basic types of functionality to our model. The model should have the ability to create, read, update and remove resources. Program developers usually refer to these methods as the acronym CRUD. The model must be able to perform a maximum of these four functions in order to be complete. If an action cannot be described in any of these four operations, it should potentially be its own model.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe CRUD methods are common when building web applications because it provides a memorable basis for reminding developers how to build complete, usable models. For example, let’s imagine a system for tracking library books. In this hypothetical library, a database would be a books resource in which book objects would be stored. Let’s suppose this book object looks like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E“book”: {\n  \"id\": &lt;Integer&gt;,\n  “title”: &lt;String&gt;,\n  “author”: &lt;String&gt;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ETo make this library system usable, we should be sure that there were clear mechanisms for completing the CRUD operations:\u003Cbr\u003E\nCreate - is the method we use to add a new library book to the catalogue. The program that invokes the function would give values for \u003Ccode\u003Etitle\u003C\u002Fcode\u003E and \u003Ccode\u003Eauthor\u003C\u002Fcode\u003E. When this function is called, a new entry corresponding to this new book should appear in the \u003Ccode\u003Ebooks\u003C\u002Fcode\u003E resource. In addition, a new entry is assigned a unique id that can be used to access the resource later. \u003Cbr\u003E\nRead - is the method that we use to view all books in the catalogue. This function call would not change the books in the directory - it would simply get the resource and display the results. We would also have a function to extract a separate book for which we could supply the title, author or ISBN. One more time, this book will not be altered, only found. \u003Cbr\u003E\nUpdate — is the method we use to change information about a book. The program calling the function would supply the new values for \u003Ccode\u003Etitle\u003C\u002Fcode\u003E and \u003Ccode\u003Eauthor\u003C\u002Fcode\u003E. After the function call, the corresponding entry in the books resource would contain the new fields supplied.\u003Cbr\u003E\nDelete — is the method we use to remove a library book from the catalogue. The program calling the function would supply one or more values (\u003Ccode\u003Etitle\u003C\u002Fcode\u003E and\u002For \u003Ccode\u003Eauthor\u003C\u002Fcode\u003E) to identify the book, and then this book would be removed from the books resource. After this function is called, the books resource should contain all of the books it had before, except for the one just deleted.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"crud-and-rest\" href=\"#crud-and-rest\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  CRUD and REST\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn the REST environment, CRUD often corresponds to the HTTP methods POST, GET, PUT and DELETE respectively. These are the four basic elements of a persistent storage system.\u003Cbr\u003E\nIn the remainder of the article, we will recommend the response standards and codes that developers usually follow when creating RESTful applications. Conventions may differ, so feel free to experiment with different return values and codes as you become comfortable with the CRUD conception.\u003Cbr\u003E\nImagine that we’re working with a system that tracks dishes and the relevant prices for the restaurant. Let’s see how we should implement CRUD operations.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"create\" href=\"#create\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Create\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe commonly use the HTTP POST method to create resources in the REST environment. POST creates a new resource of the specified type.\u003Cbr\u003E\nFor example, imagine that we add a new product to the stored list of dishes for this restaurant, and the \u003Ccode\u003Edish\u003C\u002Fcode\u003E objects are stored in the \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource. If we wanted to create a new element, we would use the POST request:\u003Cbr\u003E\nRequest:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EPOST http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EBody -\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"dish\": {\n    \"name\": “Meat Toast”,\n    \"price\": 12\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis creates a new item with a \u003Ccode\u003Ename\u003C\u002Fcode\u003E value of \u003Ccode\u003E“Meat Toast”\u003C\u002Fcode\u003E and a \u003Ccode\u003Eprice\u003C\u002Fcode\u003E value of 12. After successful creation, the server should return a header with a link to the newly-created resource, along with an HTTP response code of 201 (CREATED).\u003Cbr\u003E\nResponse:\u003Cbr\u003E\nStatus Code - 201 (CREATED)\u003Cbr\u003E\nBody -\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"dish\": {\n    \"id\": 1463,\n    \"name\": “Meat Toast”,\n    \"price\": 12\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFrom this response, we can see that the \u003Ccode\u003Edish\u003C\u002Fcode\u003E with the \u003Ccode\u003Ename\u003C\u002Fcode\u003E “Meat Toast” and price 8 has been successfully created and added to the \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"read\" href=\"#read\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Read\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe use the GET method to read resources in the REST environment. Reading a resource should never change any information - it should only retrieve it. If you call GET for the same information 10 times in a row, you must receive the same response to the first call as the last one.\u003Cbr\u003E\nGET can be used to read an entire list of items:\u003Cbr\u003E\nRequest:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EGET http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EResponse: Status Code - 200 (OK)\u003Cbr\u003E\nBody -\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"dishes\": [\n    {\n      \"id\": 1,\n      \"name\": “Some Rolls”,\n      \"price\": 4\n    },\n    {\n      \"id\": 2,\n      \"name\": “Mozzarella”,\n      \"price\": 8\n    },\n    ...\n    {\n      \"id\": 1463,\n      \"name\": “Meat Toast”,\n      \"price\": 12\n    },\n    {\n      \"id\": 1584,\n      \"name\": “Muesli”,\n      \"price\": 3\n    }\n  ]\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EGET requests can also be used to read a specific item when its \u003Ccode\u003Eid\u003C\u002Fcode\u003E is specified in the request:\u003Cbr\u003E\nRequest:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EGET http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EResponse: Status Code - 200 (OK) Body -\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"id\": 1463,\n  \"name\": “Meat Toast”,\n  \"price\": 12\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAfter this request, no information has been changed in the database. The item with \u003Ccode\u003Eid\u003C\u002Fcode\u003E 1463 has been retrieved from the \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource, and not modified. When there are no errors, GET will return the HTML or JSON of the desired resource, along with a 200 (OK) response code. If there is an error, it most often will return a 404 (NOT FOUND) response code.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"update\" href=\"#update\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Update\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EPUT is the HTTP method used to update information in the system.\u003Cbr\u003E\nFor example, if the price of Avocado Toast has been raised, we should go into the database and update that information. We can do this with a PUT request.\u003Cbr\u003E\nRequest:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EPUT http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EBody -\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"dish\": {\n    \"name\": “Meat Toast”,\n    \"price\": 10\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis request should change the item with \u003Ccode\u003Eid\u003C\u002Fcode\u003E 1463 to have the attributes supplied in the request body. This \u003Ccode\u003Edish\u003C\u002Fcode\u003E with \u003Ccode\u003Eid\u003C\u002Fcode\u003E 1463 should now still have the \u003Ccode\u003Ename\u003C\u002Fcode\u003E \u003Ccode\u003E“Avocado Toast”\u003C\u002Fcode\u003E, but the price value should now be 10, as it used to be 12.\u003Cbr\u003E\nResponse: Status Code - 200 (OK) Body - not necessary\u003Cbr\u003E\nThe response includes a Status Code of 200 (OK) to signify that the operation was successful, but it need not return a response body.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"delete\" href=\"#delete\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Delete\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe CRUD operation Delete corresponds to the HTTP method DELETE. It is used to remove a resource from the system.\u003Cbr\u003E\nLet’s say that the world avocado deficit has reached a critical point, and we can no longer afford to serve this modern delicacy at all. We should go into the database and delete the item that corresponds to “Avocado Toast”, which we know has an \u003Ccode\u003Eid\u003C\u002Fcode\u003E of 1463.\u003Cbr\u003E\nRequest:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EDELETE http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAfter the successful operation, we receive a response code of 204 (NO CONTENT) with no response body. The \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource should no longer contain the \u003Ccode\u003Edish\u003C\u002Fcode\u003E object with \u003Ccode\u003Eid\u003C\u002Fcode\u003E 1463.\u003C\u002Fp\u003E\n\n\u003Cp\u003EResponse: Status Code - 204 (NO CONTENT) Body - None\u003C\u002Fp\u003E\n\n\u003Cp\u003ECalling GET on the \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource after this DELETE call would return the original list of dishes with the \u003Ccode\u003E{\"id\": 1463, \"name\": “Meat Toast”, \"price\": 10}\u003C\u002Fcode\u003E entry removed. All other \u003Ccode\u003Edish\u003C\u002Fcode\u003E objects in the \u003Ccode\u003Edishes\u003C\u002Fcode\u003E resource should remain unchanged. If we tried to call a GET on the item with \u003Ccode\u003Eid\u003C\u002Fcode\u003E 1463, which we just deleted, we would receive a 404 (NOT FOUND) response code and the state of the system should remain unchanged.\u003Cbr\u003E\nCalling DELETE on a resource that does not exist should not change the state of the system. The call should return a 404 response code (NOT FOUND) and do nothing.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"crud-practice\" href=\"#crud-practice\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  CRUD Practice\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ECreate, Read, Update, and Delete methods are fundamental components of a usable storage model. You have already seen above a couple of examples of how the CRUD concept can help us to design systems. Now, try using CRUD to list out routes for a new example model. Imagine that we are creating a system that tracks workout classes, including the name of each class, who teaches it, and the duration of the class. An example \u003Ccode\u003Eclass\u003C\u002Fcode\u003E object would look like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"class\": {\n    \"id\": 1    \n    \"name\": “Hard Work”,\n    “trainer”: “Bob Smeet”,\n    \"duration\": 2.25\n   }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAll of the classes are stored in a \u003Ccode\u003Eclasses\u003C\u002Fcode\u003E resource at \u003Ccode\u003Ewww.force-academy.com\u002Fclasses\u003C\u002Fcode\u003E.\u003Cbr\u003E\nFor each CRUD operation, write out answers to the following questions:\u003Cbr\u003E\n    • What routes would you need to implement to provide your workout class model with this CRUD functionality and what are their corresponding HTTP methods?\u003Cbr\u003E\n    • What effect would each route have on the database?\u003Cbr\u003E\n    • What response body would each route return?\u003Cbr\u003E\n    • What response code would each route return?\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"crud-practice-answers\" href=\"#crud-practice-answers\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  CRUD Practice Answers\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E1) Create\u003Cbr\u003E\n\u003Cstrong\u003ERoute\u003C\u002Fstrong\u003E: POST \u002Fclasses\u003Cbr\u003E\n\u003Cstrong\u003EEffect on Database\u003C\u002Fstrong\u003E: Adds the class provided in the request body to the database\u003Cbr\u003E\n\u003Cstrong\u003EResponse Body\u003C\u002Fstrong\u003E: \u003Ccode\u003E{ \"class\": The Newly-Created Class }\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003Cstrong\u003ESuccess Response Code\u003C\u002Fstrong\u003E: 201\u003Cbr\u003E\n2) Read (All Classes)\u003Cbr\u003E\n\u003Cstrong\u003ERoute\u003C\u002Fstrong\u003E: GET \u002Fclasses\u003Cbr\u003E\n\u003Cstrong\u003EEffect on Database\u003C\u002Fstrong\u003E: None\u003Cbr\u003E\n\u003Cstrong\u003EResponse Body\u003C\u002Fstrong\u003E: \u003Ccode\u003E{ \"classes\": [ Array of All Saved Classess ] }\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003Cstrong\u003ESuccess Response Code\u003C\u002Fstrong\u003E: 200\u003Cbr\u003E\n3) Read (One Class)\u003Cbr\u003E\n\u003Cstrong\u003ERoute\u003C\u002Fstrong\u003E: GET \u002Fclasses\u002F:id\u003Cbr\u003E\n\u003Cstrong\u003EEffect on Database\u003C\u002Fstrong\u003E: None\u003Cbr\u003E\n\u003Cstrong\u003EResponse Body\u003C\u002Fstrong\u003E: \u003Ccode\u003E{ \"class\": The class with the specified ID }\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003Cstrong\u003ESuccess Response Code\u003C\u002Fstrong\u003E: 200\u003Cbr\u003E\n4) Update\u003Cbr\u003E\n\u003Cstrong\u003ERoute\u003C\u002Fstrong\u003E: PUT \u002Fclasses\u002F:id\u003Cbr\u003E\n\u003Cstrong\u003EEffect on Database\u003C\u002Fstrong\u003E: Updates the class with the specified ID to have the class information provided in the request body\u003Cbr\u003E\n\u003Cstrong\u003EResponse Body\u003C\u002Fstrong\u003E: \u003Ccode\u003E{ \"class\": The updated class now saved in the database }\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003Cstrong\u003ESuccess Response Code\u003C\u002Fstrong\u003E: 200\u003Cbr\u003E\n5) Delete\u003Cbr\u003E\n\u003Cstrong\u003ERoute\u003C\u002Fstrong\u003E: DELETE \u002Fclasses\u002F:id\u003Cbr\u003E\n\u003Cstrong\u003EEffect on Database\u003C\u002Fstrong\u003E: Removes the class with the specified ID from the database\u003Cbr\u003E\n\u003Cstrong\u003EResponse Body\u003C\u002Fstrong\u003E: None\u003Cbr\u003E\n\u003Cstrong\u003ESuccess Response Code\u003C\u002Fstrong\u003E: 204\u003Cbr\u003E\nAs you get more practice with designing storage systems, incorporating CRUD operations into your models will become easier and easier.\u003C\u002Fp\u003E\n\n",body_markdown:"###Create, Read, Update, and Delete (CRUD) are the four basic methods for a good functional model.###\n##Create, Read, Update, Delete##\nWhen we create an API, we should provide four basic types of functionality to our model. The model should have the ability to create, read, update and remove resources. Program developers usually refer to these methods as the acronym CRUD. The model must be able to perform a maximum of these four functions in order to be complete. If an action cannot be described in any of these four operations, it should potentially be its own model.\n\nThe CRUD methods are common when building web applications because it provides a memorable basis for reminding developers how to build complete, usable models. For example, let’s imagine a system for tracking library books. In this hypothetical library, a database would be a books resource in which book objects would be stored. Let’s suppose this book object looks like this:\n```\n“book”: {\n  \"id\": \u003CInteger\u003E,\n  “title”: \u003CString\u003E,\n  “author”: \u003CString\u003E\n}\n```\nTo make this library system usable, we should be sure that there were clear mechanisms for completing the CRUD operations:\nCreate - is the method we use to add a new library book to the catalogue. The program that invokes the function would give values for `title` and `author`. When this function is called, a new entry corresponding to this new book should appear in the `books` resource. In addition, a new entry is assigned a unique id that can be used to access the resource later. \nRead - is the method that we use to view all books in the catalogue. This function call would not change the books in the directory - it would simply get the resource and display the results. We would also have a function to extract a separate book for which we could supply the title, author or ISBN. One more time, this book will not be altered, only found. \nUpdate — is the method we use to change information about a book. The program calling the function would supply the new values for `title` and `author`. After the function call, the corresponding entry in the books resource would contain the new fields supplied.\nDelete — is the method we use to remove a library book from the catalogue. The program calling the function would supply one or more values (`title` and\u002For `author`) to identify the book, and then this book would be removed from the books resource. After this function is called, the books resource should contain all of the books it had before, except for the one just deleted.\n##CRUD and REST##\nIn the REST environment, CRUD often corresponds to the HTTP methods POST, GET, PUT and DELETE respectively. These are the four basic elements of a persistent storage system.\nIn the remainder of the article, we will recommend the response standards and codes that developers usually follow when creating RESTful applications. Conventions may differ, so feel free to experiment with different return values and codes as you become comfortable with the CRUD conception.\nImagine that we’re working with a system that tracks dishes and the relevant prices for the restaurant. Let’s see how we should implement CRUD operations.\n##Create##\nWe commonly use the HTTP POST method to create resources in the REST environment. POST creates a new resource of the specified type.\nFor example, imagine that we add a new product to the stored list of dishes for this restaurant, and the `dish` objects are stored in the `dishes` resource. If we wanted to create a new element, we would use the POST request:\nRequest:\n```\nPOST http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F\n```\nBody -\n```\n{\n  \"dish\": {\n    \"name\": “Meat Toast”,\n    \"price\": 12\n  }\n}\n```\nThis creates a new item with a `name` value of `“Meat Toast”` and a `price` value of 12. After successful creation, the server should return a header with a link to the newly-created resource, along with an HTTP response code of 201 (CREATED).\nResponse:\nStatus Code - 201 (CREATED)\nBody -\n```\n{\n  \"dish\": {\n    \"id\": 1463,\n    \"name\": “Meat Toast”,\n    \"price\": 12\n  }\n}\n```\nFrom this response, we can see that the `dish` with the `name` “Meat Toast” and price 8 has been successfully created and added to the `dishes` resource.\n##Read##\nWe use the GET method to read resources in the REST environment. Reading a resource should never change any information - it should only retrieve it. If you call GET for the same information 10 times in a row, you must receive the same response to the first call as the last one.\nGET can be used to read an entire list of items:\nRequest:\n```\nGET http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F\n```\nResponse: Status Code - 200 (OK)\nBody -\n```\n{\n  \"dishes\": [\n    {\n      \"id\": 1,\n      \"name\": “Some Rolls”,\n      \"price\": 4\n    },\n    {\n      \"id\": 2,\n      \"name\": “Mozzarella”,\n      \"price\": 8\n    },\n    ...\n    {\n      \"id\": 1463,\n      \"name\": “Meat Toast”,\n      \"price\": 12\n    },\n    {\n      \"id\": 1584,\n      \"name\": “Muesli”,\n      \"price\": 3\n    }\n  ]\n}\n```\nGET requests can also be used to read a specific item when its `id` is specified in the request:\nRequest:\n```\nGET http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n```\nResponse: Status Code - 200 (OK) Body -\n```\n{\n  \"id\": 1463,\n  \"name\": “Meat Toast”,\n  \"price\": 12\n}\n```\nAfter this request, no information has been changed in the database. The item with `id` 1463 has been retrieved from the `dishes` resource, and not modified. When there are no errors, GET will return the HTML or JSON of the desired resource, along with a 200 (OK) response code. If there is an error, it most often will return a 404 (NOT FOUND) response code.\n##Update##\nPUT is the HTTP method used to update information in the system.\nFor example, if the price of Avocado Toast has been raised, we should go into the database and update that information. We can do this with a PUT request.\nRequest:\n```\nPUT http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n```\nBody -\n```\n{\n  \"dish\": {\n    \"name\": “Meat Toast”,\n    \"price\": 10\n  }\n}\n```\nThis request should change the item with `id` 1463 to have the attributes supplied in the request body. This `dish` with `id` 1463 should now still have the `name` `“Avocado Toast”`, but the price value should now be 10, as it used to be 12.\nResponse: Status Code - 200 (OK) Body - not necessary\nThe response includes a Status Code of 200 (OK) to signify that the operation was successful, but it need not return a response body.\n##Delete##\nThe CRUD operation Delete corresponds to the HTTP method DELETE. It is used to remove a resource from the system.\nLet’s say that the world avocado deficit has reached a critical point, and we can no longer afford to serve this modern delicacy at all. We should go into the database and delete the item that corresponds to “Avocado Toast”, which we know has an `id` of 1463.\nRequest:\n```\nDELETE http:\u002F\u002Fwww.best-restaurant.my\u002Fdishes\u002F1463\n```\nAfter the successful operation, we receive a response code of 204 (NO CONTENT) with no response body. The `dishes` resource should no longer contain the `dish` object with `id` 1463.\n\nResponse: Status Code - 204 (NO CONTENT) Body - None\n\nCalling GET on the `dishes` resource after this DELETE call would return the original list of dishes with the `{\"id\": 1463, \"name\": “Meat Toast”, \"price\": 10}` entry removed. All other `dish` objects in the `dishes` resource should remain unchanged. If we tried to call a GET on the item with `id` 1463, which we just deleted, we would receive a 404 (NOT FOUND) response code and the state of the system should remain unchanged.\nCalling DELETE on a resource that does not exist should not change the state of the system. The call should return a 404 response code (NOT FOUND) and do nothing.\n##CRUD Practice##\nCreate, Read, Update, and Delete methods are fundamental components of a usable storage model. You have already seen above a couple of examples of how the CRUD concept can help us to design systems. Now, try using CRUD to list out routes for a new example model. Imagine that we are creating a system that tracks workout classes, including the name of each class, who teaches it, and the duration of the class. An example `class` object would look like this:\n```\n{\n  \"class\": {\n    \"id\": 1    \n    \"name\": “Hard Work”,\n    “trainer”: “Bob Smeet”,\n    \"duration\": 2.25\n   }\n}\n```\nAll of the classes are stored in a `classes` resource at `www.force-academy.com\u002Fclasses`.\nFor each CRUD operation, write out answers to the following questions:\n    • What routes would you need to implement to provide your workout class model with this CRUD functionality and what are their corresponding HTTP methods?\n    • What effect would each route have on the database?\n    • What response body would each route return?\n    • What response code would each route return?\n##CRUD Practice Answers##\n1) Create\n**Route**: POST \u002Fclasses\n**Effect on Database**: Adds the class provided in the request body to the database\n**Response Body**: `{ \"class\": The Newly-Created Class }`\n**Success Response Code**: 201\n2) Read (All Classes)\n**Route**: GET \u002Fclasses\n**Effect on Database**: None\n**Response Body**: `{ \"classes\": [ Array of All Saved Classess ] }`\n**Success Response Code**: 200\n3) Read (One Class)\n**Route**: GET \u002Fclasses\u002F:id\n**Effect on Database**: None\n**Response Body**: `{ \"class\": The class with the specified ID }`\n**Success Response Code**: 200\n4) Update\n**Route**: PUT \u002Fclasses\u002F:id\n**Effect on Database**: Updates the class with the specified ID to have the class information provided in the request body\n**Response Body**: `{ \"class\": The updated class now saved in the database }`\n**Success Response Code**: 200\n5) Delete\n**Route**: DELETE \u002Fclasses\u002F:id\n**Effect on Database**: Removes the class with the specified ID from the database\n**Response Body**: None\n**Success Response Code**: 204\nAs you get more practice with designing storage systems, incorporating CRUD operations into your models will become easier and easier.",user:{name:e,username:"olegmelnic",twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QfZo319R--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F546056\u002F8f5bf975-a8ad-466a-b8bc-a8966ad804e6.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_j7NlP6u--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F546056\u002F8f5bf975-a8ad-466a-b8bc-a8966ad804e6.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Folegmelnic\u002F623209",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-04T16:23:06Z","https:\u002F\u002Fdev.to\u002Folegmelnic\u002Fwhat-is-crud-4id",32,"oleg-melnic"));
__NUXT_JSONP__("/articles/faraazahmad/601972", (function(a,b,c,d,e,f,g){b.type_of="article";b.id=601972;b.title="I was bored, so I built a programming language";b.description="One fine evening in the first lockdown of 2020, there I was, sitting idly, not knowing what to do....";b.readable_publish_date="Mar 24";b.slug="i-was-bored-so-i-built-my-own-programming-language-30f1";b.path="\u002Ffaraazahmad\u002Fi-was-bored-so-i-built-my-own-programming-language-30f1";b.url=c;b.comments_count=21;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image=a;b.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F601972.png";b.canonical_url=c;b.created_at="2021-02-12T21:21:20Z";b.edited_at="2021-03-25T12:53:42Z";b.crossposted_at=a;b.published_at=e;b.last_comment_at="2021-08-26T08:21:21Z";b.reading_time_minutes=8;b.tag_list="rust, computerscience, functional, showdev";b.tags=["rust","computerscience","functional",f];b.body_html="\u003Cp\u003EOne fine evening in the first lockdown of 2020, there I was, sitting idly, not knowing what to do. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003ECalmly freaking out.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou see, I really needed something to do. I had been doing a few web related projects on the side and that was something I didn't want to do any more, at least for a while. So I looked into doing something \"closer to the metal\", something much lower level than sending requests back and forth to a web server. So I quickly fired up \u003Ca href=\"https:\u002F\u002Faquadzn.github.io\u002Flearn-x-by-doing-y\u002F\"\u003ELearn X by doing Y\u003C\u002Fa\u003E and searched for something interesting, eventually ending up on Building your own \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FLisp_(programming_language)\"\u003ELisp\u003C\u002Fa\u003E (We all have a Lisp phase, it was just my turn).\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MLFU9Xc8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdutz9hefvgcubc4n7rwd.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MLFU9Xc8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdutz9hefvgcubc4n7rwd.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the uninitiated, Lisp is (simply put) a family of programming languages whose syntax looks more or less like this (You can quickly see where the parentheses jokes stem from).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight clojure\"\u003E\u003Ccode\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Edefun\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Earea-circle\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Erad\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n   \u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Calculates area of a circle with given radius\"\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n   \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Eterpri\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n   \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Et\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"Radius: ~5f\"\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erad\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n   \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Et\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"~%Area: ~10f\"\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mf\"\u003E3.141592\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erad\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erad\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)))\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Earea-circle\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E10\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EBut I didn't just want to create any Lisp, I wanted to make some modifications as per my preference. So there was only 1 way to go about doing this.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"coming-up-with-a-syntax\" href=\"#coming-up-with-a-syntax\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Coming up with a syntax\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhat got me into lisps and writing Lisp was (suprisingly) the \u003Ca href=\"https:\u002F\u002Fwww.gnu.org\u002Fsoftware\u002Femacs\u002F\"\u003EEmacs text editor\u003C\u002Fa\u003E (or Emacs OS for the hardcore users). What was I doing going anywhere even remotely near Emacs? I don't know, I'll tell you some other day. You see, writing Emacs Lisp is the recommended way of configuring Emacs. Even though I didn't write a lot of Emacs Lisp, a few of the keywords I saw there didn't feel very natural to me (especially coming from using Ruby). So one of the major goals would be to \u003Cstrong\u003Ehave more \"natural\" sounding keywords\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IF9oxwP3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffxsfh7j9rdvh0e5132uf.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IF9oxwP3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffxsfh7j9rdvh0e5132uf.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can't talk about Lisp without talking about the parentheses. A big advantage in readability for other languages is that everything isn't inside a parenthesis. Square brackets usually denote an array, braces usually denote code blocks, while parenthesis are used for function calls. It leads to easier visual grepping of code, not so much in Lisp, especially as a beginner. So I need to reduce the usage of parentheses, but I cant just change all of its syntax because then it might not stay a Lisp anymore (\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FShip_of_Theseus\"\u003EShip of Theseus\u003C\u002Fa\u003E, anyone?). I think \u003Ca href=\"https:\u002F\u002Fclojure.org\u002F\"\u003EClojure\u003C\u002Fa\u003E strikes a good balance between staying a Lisp and improving visual grepping. So another goal would be to \u003Cstrong\u003Ereduce the reliance on parentheses so that the code can be more readable\u003C\u002Fstrong\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight clojure\"\u003E\u003Ccode\u003E\u003Cspan class=\"o\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E     \u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E; list\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E      \u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E; vector\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E#\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E     \u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E; set\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"no\"\u003E:a\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"no\"\u003E:b\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E; map\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003E(Example from \u003Ca href=\"https:\u002F\u002Fclojure.org\u002Fguides\u002Flearn\u002Fsyntax\"\u003EClojure syntax guide\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"so-it-began\" href=\"#so-it-began\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  So it began\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAfter setting all these requirements for the language, I set out to finally start building it. I chose Rust to build it because it seemed like the right tool to do so because of it's speed and memory safety. I was building my own programming language, I felt like a \"real programmer\" (no such thing btw) so naturally I started tweeting about it.\u003C\u002Fp\u003E\n\n\n\u003Cblockquote class=\"ltag__twitter-tweet\" data-url=\"https:\u002F\u002Ftwitter.com\u002Ffaraaz98\u002Fstatus\u002F1329145543314980865\"\u003E\n\n  \u003Cdiv class=\"ltag__twitter-tweet__main\" data-url=\"https:\u002F\u002Ftwitter.com\u002Ffaraaz98\u002Fstatus\u002F1329145543314980865\"\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__header\"\u003E\n      \u003Cimg class=\"ltag__twitter-tweet__profile-image\" src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tmis_t-7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F1287133635158523904\u002FZhMw5pCT_normal.jpg\" alt=\"Faraaz Ahmad profile image\" loading=\"lazy\"\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__full-name\"\u003E\n        Faraaz Ahmad\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__username\"\u003E\n        @faraaz98\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__twitter-logo\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ir1kO05j--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg\" alt=\"twitter logo\" loading=\"lazy\"\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__body\"\u003E\n      Starting work on creating my own programming language...👀\n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__date\"\u003E\n      19:32 PM - 18 Nov 2020\n    \u003C\u002Fdiv\u003E\n\n\n    \u003Cdiv class=\"ltag__twitter-tweet__actions\"\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Ftweet?in_reply_to=1329145543314980865\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fFnoeFxk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg\" alt=\"Twitter reply action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Fretweet?tweet_id=1329145543314980865\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--k6dcrOn8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg\" alt=\"Twitter retweet action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Flike?tweet_id=1329145543314980865\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--SRQc9lOp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg\" alt=\"Twitter like action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"starting-simple\" href=\"#starting-simple\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Starting simple\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI wanted to start off with something as simple as possible, like adding a few numbers. It felt like the perfect starting point. I'll be evaluating a simple arithmetic expression written in Lisp, for example, \u003Cstrong\u003E2 * 3 + 1 - 4\u003C\u002Fstrong\u003E, which would be written as \u003Cstrong\u003E(- (+ 1 (* 2 3)) 4)\u003C\u002Fstrong\u003E in Lisp. To the unaware, this is in the form of Polish notation, just think of it as a simple function with multiple arguments. \u003Ccode\u003E(+ 1 2 3)\u003C\u002Fcode\u003E is simply the sum of 1, 2 &amp; 3. Its result can then be used as an argument to a parent function, and then that gets evaluated. Similarly the whole expression can be solved using the method below.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--V1XjAp3I--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7s1v3oj835ycju53ku8s.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--V1XjAp3I--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7s1v3oj835ycju53ku8s.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cbr\u003E\n(Source: \u003Ca href=\"https:\u002F\u002Fcraftinginterpreters.com\u002Frepresenting-code.html\"\u003ECrafting Interpreters\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter building the initial prototype I tested it with \u003Cstrong\u003E(+ 2 (- 4 6) 8)\u003C\u002Fstrong\u003E. Doing it manually, you can tell it's \u003Cstrong\u003E4 - 6 + 2 + 8 = 8\u003C\u002Fstrong\u003E. And if you see the result in the bottom red rectangle, the result is indeed 8.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Jpyqyto9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe1uvr33yv9l7x9vc9egp.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Jpyqyto9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe1uvr33yv9l7x9vc9egp.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"laying-the-building-blocks\" href=\"#laying-the-building-blocks\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Laying the building blocks\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ENow that we've had something to play around with, it's time to grow up and lay the foundations for a proper compiler. The first step for any compiler is to read the source file and turn it into a stream machine readable objects called tokens. This step is called \u003Cstrong\u003Elexical analysis\u003C\u002Fstrong\u003E, or lexing. It simply maps all possible characters in the programming language to a Token object. Like so:\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ECharacter\u003C\u002Fth\u003E\n\u003Cth\u003EToken\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E(\u003C\u002Ftd\u003E\n\u003Ctd\u003EToken { kind: OpenParen, value: None }\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003Elet\u003C\u002Ftd\u003E\n\u003Ctd\u003EToken { kind: Identifier, value: Some(\"let\") }\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E-?([0-9])+\u003C\u002Ftd\u003E\n\u003Ctd\u003EToken { kind: Number, value: Some(getVal()) }\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EIn this way you can build a mapping for token and their various types, so that its easier to build your syntax tree in the next step.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECool, now that I can generate tokens, it was time to build on top of this abstraction and give this stream of tokens a proper structure so that it's easier to work with. We're going to go examine every token and make sense of it all by generating a syntax tree. This step is called parsing and at its end, we going to have something like this:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BwJu8G_4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fu61nka1vzs6rcu0tstzt.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BwJu8G_4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fu61nka1vzs6rcu0tstzt.png\" alt=\"Abstract syntax tree\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Cem\u003E(Source: \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FAbstract_syntax_tree\"\u003EAbstract Syntax tree:Wikipedia\u003C\u002Fa\u003E)\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo I go about trying to build a syntax tree, starting with defining a basic grammar in the form of an enum which looked something like this\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eenum\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EExpr\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EConstant\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EValue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nf\"\u003EBuiltin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EIdent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E \n    \u003Cspan class=\"nf\"\u003ECall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003EBox\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EExpr\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EVec\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EExpr\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EWhile\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Econdition\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EBox\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EExpr\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ebody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EVec\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EExpr\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EReading the \u003Ca href=\"https:\u002F\u002Fdoc.rust-lang.org\u002Fstable\u002Fnightly-rustc\u002Fsrc\u002Frustc_parse\u002Flib.rs.html\"\u003Esource code of the Rust programming language\u003C\u002Fa\u003E was very helpful and I might have \u003Cem\u003Estolen\u003C\u002Fem\u003E some concepts from it. Let me just quickly define what these types are:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EConstant: Any literal of type \u003Ccode\u003EValue\u003C\u002Fcode\u003E (number, string, boolean)\u003C\u002Fli\u003E\n\u003Cli\u003EBuiltin: Any builtin token like an operator (+,-,*,\u002F) or a keyword (let, print, if)\u003C\u002Fli\u003E\n\u003Cli\u003ECall: this is simple, any function call (truth be told, everything should just be a function call since Lisp is a functional language)\u003C\u002Fli\u003E\n\u003Cli\u003EWhile: A while loop (duh)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E(If you're wondering, \u003Ca href=\"https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fboxed\u002Fstruct.Box.html\"\u003EBox\u003C\u002Fa\u003E is Rust's built-in type for pointers, broadly speaking.)\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is the gist of it, rest of the process was just finding ways to build this syntax tree using the token stream I had. Slowly but surely, I was making progress.\u003C\u002Fp\u003E\n\n\n\u003Cblockquote class=\"ltag__twitter-tweet\" data-url=\"https:\u002F\u002Ftwitter.com\u002Ffaraaz98\u002Fstatus\u002F1330497714107404291\"\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__media ltag__twitter-tweet__media__two-pics\"\u003E\n      \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1cqh-_Gp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpbs.twimg.com\u002Fmedia\u002FEnbghyEXcAEaZ_m.png\" alt=\"unknown tweet media content\" loading=\"lazy\"\u003E\n    \u003C\u002Fdiv\u003E\n\n  \u003Cdiv class=\"ltag__twitter-tweet__main\" data-url=\"https:\u002F\u002Ftwitter.com\u002Ffaraaz98\u002Fstatus\u002F1330497714107404291\"\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__header\"\u003E\n      \u003Cimg class=\"ltag__twitter-tweet__profile-image\" src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tmis_t-7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpbs.twimg.com\u002Fprofile_images\u002F1287133635158523904\u002FZhMw5pCT_normal.jpg\" alt=\"Faraaz Ahmad profile image\" loading=\"lazy\"\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__full-name\"\u003E\n        Faraaz Ahmad\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__username\"\u003E\n        @faraaz98\n      \u003C\u002Fdiv\u003E\n      \u003Cdiv class=\"ltag__twitter-tweet__twitter-logo\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ir1kO05j--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-f95605061196010f91e64806688390eb1a4dbc9e913682e043eb8b1e06ca484f.svg\" alt=\"twitter logo\" loading=\"lazy\"\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__body\"\u003E\n      Can now handle multiple independent expressions per file, and handles identifiers separately. \n    \u003C\u002Fdiv\u003E\n    \u003Cdiv class=\"ltag__twitter-tweet__date\"\u003E\n      13:05 PM - 22 Nov 2020\n    \u003C\u002Fdiv\u003E\n\n\n    \u003Cdiv class=\"ltag__twitter-tweet__actions\"\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Ftweet?in_reply_to=1330497714107404291\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fFnoeFxk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-reply-action-238fe0a37991706a6880ed13941c3efd6b371e4aefe288fe8e0db85250708bc4.svg\" alt=\"Twitter reply action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Fretweet?tweet_id=1330497714107404291\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--k6dcrOn8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-retweet-action-632c83532a4e7de573c5c08dbb090ee18b348b13e2793175fea914827bc42046.svg\" alt=\"Twitter retweet action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n      \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fintent\u002Flike?tweet_id=1330497714107404291\" class=\"ltag__twitter-tweet__actions__button\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--SRQc9lOp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Ftwitter-like-action-1ea89f4b87c7d37465b0eb78d51fcb7fe6c03a089805d7ea014ba71365be5171.svg\" alt=\"Twitter like action\" loading=\"lazy\"\u003E\n      \u003C\u002Fa\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n\u003C\u002Fblockquote\u003E\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QJUMDlRV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F8n95mahek3ahzpxcg6rv.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QJUMDlRV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F8n95mahek3ahzpxcg6rv.png\" alt=\"Alt text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt this point, the syntax tree felt robust enough for what I wanted the language to do for now. It was \u003Cstrong\u003Etime to move on to bigger and better things\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"llvm\" href=\"#llvm\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  LLVM\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Cem\u003ELow..Level..Virtual Machine?\u003C\u002Fem\u003E good guess, but \u003Ca href=\"https:\u002F\u002Flists.llvm.org\u002Fpipermail\u002Fllvm-dev\u002F2011-December\u002F046445.html\"\u003Enot anymore\u003C\u002Fa\u003E. What is LLVM? let's first take a step back and see why it's needed in the first place. You see, a compiler has 2 sides - a frontend and a backend - the former containing lexing and parsing, while the latter has intermediate code generation, optimisation and target code generation. What I'd built until now was just the frontend, and I had the internal representation that can be used by the backend.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo build all the backend from scratch, here's what I would have to do. Firstly, limit myself to an architecture since supporting multiple processor architectures was not an option, simply because of the intricacies of the way processors work. After selecting the most popular processor architecture I'd need to get a good grasp of its assembly language. You see, because of the different ways microprocessors are designed and made, they all have different instruction sets. To support an instruction set, you need to take the code the user has written in your language and translate it in the form of instructions of that specific set. Processors can work in weird ways, sometimes for compatibility reasons and sometimes just because they can. So when you optimise your generated code, you have to take all that into account. Let's say you do manage to support one architecture successfully but now there's (somehow) popular demand for your language on some other architecture, you will have to repeat this process all over again, and then again for another architecture, and so on. Don't even get me started on how you would debug errors that are specific to only some architectures. It would be a huge mess.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--n8cEDY2J--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fr37gv9mm9718s1pl773g.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--n8cEDY2J--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fr37gv9mm9718s1pl773g.png\" alt=\"LLVM being an abstraction\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is where LLVM comes in, it provides a convenient abstraction layer over all the instruction sets that you can target. You only need to worry about translating to its own internal representation (LLVM IR). LLVM will then handle all the code optimisation to its IR, and then for the instruction set you're targetting. But it's still a good idea to first optimise your code and then give it to LLVM, instead of just expecting LLVM to do it all. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo to use LLVM, all I needed to do was to take my AST and convert it into LLVM IR. I did it using \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fthedan64\u002Finkwell\"\u003EInkwell\u003C\u002Fa\u003E the LLVM API in Rust. It is a wrapper around the C API that LLVM has built, and on top of that provides the memory safety guaranteed by Rust. Oh, and this is what LLVM IR looks like in text format (\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=tPEhCcluVdM\"\u003EDon't try to understand it, feel it\u003C\u002Fa\u003E):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight llvm\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E; ModuleID = 'example'\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Esource_filename\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"\u002Fhome\u002Ffaraaz\u002Fhello.tp\"\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"vg\"\u003E@format_string\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eprivate\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eunnamed_addr\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Econstant\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"m\"\u003E4\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003Ex\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003Ec\"%f \\00\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ealign\u003C\u002Fspan\u003E \u003Cspan class=\"m\"\u003E1\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Edefine\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei32\u003C\u002Fspan\u003E \u003Cspan class=\"vg\"\u003E@main\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Ei32\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E%0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"nl\"\u003Eentry:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nv\"\u003E%num\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ealloca\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Estore\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E \u003Cspan class=\"m\"\u003E4.200000e+02\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E%num\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nv\"\u003E%num1\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eload\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E%num\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nv\"\u003E%printf\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ecall\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E*,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E...)\u003C\u002Fspan\u003E \u003Cspan class=\"vg\"\u003E@printf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Egetelementptr\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Einbounds\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"m\"\u003E4\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003Ex\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"m\"\u003E4\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003Ex\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]*\u003C\u002Fspan\u003E \u003Cspan class=\"vg\"\u003E@format_string\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei32\u003C\u002Fspan\u003E \u003Cspan class=\"m\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei32\u003C\u002Fspan\u003E \u003Cspan class=\"m\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003E%num1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eret\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Ei32\u003C\u002Fspan\u003E \u003Cspan class=\"m\"\u003E0\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Edeclare\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Edouble\u003C\u002Fspan\u003E \u003Cspan class=\"vg\"\u003E@printf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Ei8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E*,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E...)\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003E\u003Cem\u003ECode in LLVM IR that sets a variable to 420 and prints it\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"making-it-all-legit\" href=\"#making-it-all-legit\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Making it all legit\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EUntil now, executing the compiler's binary did only one thing and it wasn't very configurable or helpful for someone using it for the first time. I wanted it to have a proper Command Line Interface (CLI), something like this:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Pwm4SJII--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flulmuxnm6puhz24rp38x.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Pwm4SJII--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flulmuxnm6puhz24rp38x.png\" alt=\"CLI for htop tool\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo I used the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fclap-rs\u002Fclap\"\u003EClap\u003C\u002Fa\u003E crate (aka package) to build the CLI and I think it turned out all right.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Y8OfhD7A--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjcvitgywjex23ycfxsu5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Y8OfhD7A--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjcvitgywjex23ycfxsu5.png\" alt=\"CLI for Tisp\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E  \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"bringing-it-all-together\" href=\"#bringing-it-all-together\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Bringing it all together\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow that I have the compiler set up, and the language has features like storing variables, performing arithmetic, looping (nested loops don't work yet) and printing to screen, it was time to make a small program with it. Here's me writing a program to compute the first 5 Fibonacci numbers in Tisp and then compile and run it:\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag_asciinema\"\u003E\n  \u003Cscript id=\"asciicast-401435\" src=\"https:\u002F\u002Fasciinema.org\u002Fa\u002F401435.js\" async\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHere's the project if you want to check it out yourself.\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag-github-readme-tag\"\u003E\n  \u003Cdiv class=\"readme-overview\"\u003E\n    \u003Ch2\u003E\n      \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--i3JOwpme--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Fgithub-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003E\n      \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ffaraazahmad\"\u003E\n        faraazahmad\n      \u003C\u002Fa\u003E \u002F \u003Ca style=\"font-weight: 600;\" href=\"https:\u002F\u002Fgithub.com\u002Ffaraazahmad\u002Ftisp\"\u003E\n        tisp\n      \u003C\u002Fa\u003E\n    \u003C\u002Fh2\u003E\n    \u003Ch3\u003E\n      \n    \u003C\u002Fh3\u003E\n  \u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"ltag-github-body\"\u003E\n    \n\u003Cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003E\u003Carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003E\u003Ch1\u003E\nTisp (\u003Cstrong\u003ET\u003C\u002Fstrong\u003Eoy L\u003Cstrong\u003Eisp\u003C\u002Fstrong\u003E)\u003C\u002Fh1\u003E\n\u003Cp\u003EA Lisp-like programming language that is typed and compiled. It aims to\nsupport multiple processor architectures by being built upon LLVM. It takes\ninspiration from programming languages like Rust, Lisp and Elixir.\u003C\u002Fp\u003E\n\u003Ch2\u003E\nCurrent working example\u003C\u002Fh2\u003E\n\u003Cp\u003EA program to compute first 5 fibonacci numbers:\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight highlight-source-lisp js-code-highlight\"\u003E\n\u003Cpre\u003E(\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E first \u003Cspan class=\"pl-c1\"\u003E0\u003C\u002Fspan\u003E)\n(\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E second \u003Cspan class=\"pl-c1\"\u003E1\u003C\u002Fspan\u003E)\n(\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E fib)\n(\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E n \u003Cspan class=\"pl-c1\"\u003E0\u003C\u002Fspan\u003E)\n(while (&lt; n \u003Cspan class=\"pl-c1\"\u003E5\u003C\u002Fspan\u003E)\n    (\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E fib (+ first second))\n    (\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E second first)\n    (\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E first fib)\n    (\u003Cspan class=\"pl-k\"\u003Elet\u003C\u002Fspan\u003E n (+ n \u003Cspan class=\"pl-c1\"\u003E1\u003C\u002Fspan\u003E))\n    (print fib)\n)\n\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003Ch2\u003E\nFeatures to build\u003C\u002Fh2\u003E\n\u003Cul class=\"contains-task-list\"\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Convert raw code into token stream\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Convert token stream into Expression tree\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Handle multiple levels of nested expressions\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Have multiple (independent) expressions per file\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Generate LLVM IR for the currently supported features\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n add CLI flag to emit llvm\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n add while loop\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Declare variables\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n add nested while loops\u003C\u002Fli\u003E\n\u003Cli class=\"task-list-item\"\u003E\n Add types for…\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\u003C\u002Farticle\u003E\u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"gh-btn-container\"\u003E\u003Ca class=\"gh-btn\" href=\"https:\u002F\u002Fgithub.com\u002Ffaraazahmad\u002Ftisp\"\u003EView on GitHub\u003C\u002Fa\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"heres-what-i-learned\" href=\"#heres-what-i-learned\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Here's what I learned\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EProgramming languages are hard. Its' hard to read code in the first place. To understand and learn one is way harder. One can only imagine how hard it is to build one, let alone build one that is widely used. \u003Cstrong\u003EThis project was mostly me trying to answer the question \"How hard can it really be?\"\u003C\u002Fstrong\u003E, I guess I have my answer now. But it's also kinda easy low-key. Once you dip your toes in the hard parts, the next time you do it, it feels a little easier. Every day you do something hard, it gets a little easier, but you gotta do it everyday, that's the hard part.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ciframe width=\"710\" height=\"399\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FR2_Mn-qRKjA\" allowfullscreen loading=\"lazy\"\u003E\n\u003C\u002Fiframe\u003E\n\u003C\u002Fp\u003E\n\n";b.body_markdown="One fine evening in the first lockdown of 2020, there I was, sitting idly, not knowing what to do. \n\n*Calmly freaking out.*\n\nYou see, I really needed something to do. I had been doing a few web related projects on the side and that was something I didn't want to do any more, at least for a while. So I looked into doing something \"closer to the metal\", something much lower level than sending requests back and forth to a web server. So I quickly fired up [Learn X by doing Y](https:\u002F\u002Faquadzn.github.io\u002Flearn-x-by-doing-y\u002F) and searched for something interesting, eventually ending up on Building your own [Lisp](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FLisp_(programming_language)) (We all have a Lisp phase, it was just my turn).\n\n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdutz9hefvgcubc4n7rwd.png)\n\nFor the uninitiated, Lisp is (simply put) a family of programming languages whose syntax looks more or less like this (You can quickly see where the parentheses jokes stem from).\n\n```clojure\n(defun area-circle(rad)\n   \"Calculates area of a circle with given radius\"\n   (terpri)\n   (format t \"Radius: ~5f\" rad)\n   (format t \"~%Area: ~10f\" (* 3.141592 rad rad)))\n(area-circle 10)\n```\n\nBut I didn't just want to create any Lisp, I wanted to make some modifications as per my preference. So there was only 1 way to go about doing this.\n\n## Coming up with a syntax\n\nWhat got me into lisps and writing Lisp was (suprisingly) the [Emacs text editor](https:\u002F\u002Fwww.gnu.org\u002Fsoftware\u002Femacs\u002F) (or Emacs OS for the hardcore users). What was I doing going anywhere even remotely near Emacs? I don't know, I'll tell you some other day. You see, writing Emacs Lisp is the recommended way of configuring Emacs. Even though I didn't write a lot of Emacs Lisp, a few of the keywords I saw there didn't feel very natural to me (especially coming from using Ruby). So one of the major goals would be to **have more \"natural\" sounding keywords**.\n\n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Ffxsfh7j9rdvh0e5132uf.png)\n \nYou can't talk about Lisp without talking about the parentheses. A big advantage in readability for other languages is that everything isn't inside a parenthesis. Square brackets usually denote an array, braces usually denote code blocks, while parenthesis are used for function calls. It leads to easier visual grepping of code, not so much in Lisp, especially as a beginner. So I need to reduce the usage of parentheses, but I cant just change all of its syntax because then it might not stay a Lisp anymore ([Ship of Theseus](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FShip_of_Theseus), anyone?). I think [Clojure](https:\u002F\u002Fclojure.org\u002F) strikes a good balance between staying a Lisp and improving visual grepping. So another goal would be to **reduce the reliance on parentheses so that the code can be more readable**.\n\n```clojure\n'(1 2 3)     ; list\n[1 2 3]      ; vector\n#{1 2 3}     ; set\n{:a 1, :b 2} ; map\n```\n(Example from [Clojure syntax guide](https:\u002F\u002Fclojure.org\u002Fguides\u002Flearn\u002Fsyntax))\n\n## So it began\n\nAfter setting all these requirements for the language, I set out to finally start building it. I chose Rust to build it because it seemed like the right tool to do so because of it's speed and memory safety. I was building my own programming language, I felt like a \"real programmer\" (no such thing btw) so naturally I started tweeting about it.\n\n{% tweet 1329145543314980865 %}\n\n### Starting simple\n\nI wanted to start off with something as simple as possible, like adding a few numbers. It felt like the perfect starting point. I'll be evaluating a simple arithmetic expression written in Lisp, for example, **2 * 3 + 1 - 4**, which would be written as **(- (+ 1 (* 2 3)) 4)** in Lisp. To the unaware, this is in the form of Polish notation, just think of it as a simple function with multiple arguments. `(+ 1 2 3)` is simply the sum of 1, 2 & 3. Its result can then be used as an argument to a parent function, and then that gets evaluated. Similarly the whole expression can be solved using the method below.\n\n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7s1v3oj835ycju53ku8s.png)\n(Source: [Crafting Interpreters](https:\u002F\u002Fcraftinginterpreters.com\u002Frepresenting-code.html))\n\nAfter building the initial prototype I tested it with **(+ 2 (- 4 6) 8)**. Doing it manually, you can tell it's **4 - 6 + 2 + 8 = 8**. And if you see the result in the bottom red rectangle, the result is indeed 8.\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe1uvr33yv9l7x9vc9egp.png)\n\n### Laying the building blocks\n\nNow that we've had something to play around with, it's time to grow up and lay the foundations for a proper compiler. The first step for any compiler is to read the source file and turn it into a stream machine readable objects called tokens. This step is called **lexical analysis**, or lexing. It simply maps all possible characters in the programming language to a Token object. Like so:\n\n|Character|Token|\n|---------|-----|\n|(|Token { kind: OpenParen, value: None }|\n|let|Token { kind: Identifier, value: Some(\"let\") }|\n|-?([0-9])+|Token { kind: Number, value: Some(getVal()) }|\n\nIn this way you can build a mapping for token and their various types, so that its easier to build your syntax tree in the next step.\n\nCool, now that I can generate tokens, it was time to build on top of this abstraction and give this stream of tokens a proper structure so that it's easier to work with. We're going to go examine every token and make sense of it all by generating a syntax tree. This step is called parsing and at its end, we going to have something like this:\n\n![Abstract syntax tree](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fu61nka1vzs6rcu0tstzt.png)\n*(Source: [Abstract Syntax tree:Wikipedia](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FAbstract_syntax_tree))*\n\nSo I go about trying to build a syntax tree, starting with defining a basic grammar in the form of an enum which looked something like this\n\n```rust\npub enum Expr {\n    Constant(Value),\n    Builtin(Ident), \n    Call(Box\u003CExpr\u003E, Vec\u003CExpr\u003E),\n    While {\n        condition: Box\u003CExpr\u003E,\n        body: Vec\u003CExpr\u003E,\n    },\n}\n```\n\nReading the [source code of the Rust programming language](https:\u002F\u002Fdoc.rust-lang.org\u002Fstable\u002Fnightly-rustc\u002Fsrc\u002Frustc_parse\u002Flib.rs.html) was very helpful and I might have *stolen* some concepts from it. Let me just quickly define what these types are:\n* Constant: Any literal of type `Value` (number, string, boolean)\n* Builtin: Any builtin token like an operator (+,-,*,\u002F) or a keyword (let, print, if)\n* Call: this is simple, any function call (truth be told, everything should just be a function call since Lisp is a functional language)\n* While: A while loop (duh)\n\n(If you're wondering, [Box](https:\u002F\u002Fdoc.rust-lang.org\u002Fstd\u002Fboxed\u002Fstruct.Box.html) is Rust's built-in type for pointers, broadly speaking.)\n\nThis is the gist of it, rest of the process was just finding ways to build this syntax tree using the token stream I had. Slowly but surely, I was making progress.\n\n{% twitter 1330497714107404291 %}\n\n![Alt text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F8n95mahek3ahzpxcg6rv.png)\n\nAt this point, the syntax tree felt robust enough for what I wanted the language to do for now. It was **time to move on to bigger and better things**.\n\n### LLVM\n\n*Low..Level..Virtual Machine?* good guess, but [not anymore](https:\u002F\u002Flists.llvm.org\u002Fpipermail\u002Fllvm-dev\u002F2011-December\u002F046445.html). What is LLVM? let's first take a step back and see why it's needed in the first place. You see, a compiler has 2 sides - a frontend and a backend - the former containing lexing and parsing, while the latter has intermediate code generation, optimisation and target code generation. What I'd built until now was just the frontend, and I had the internal representation that can be used by the backend.\n\nTo build all the backend from scratch, here's what I would have to do. Firstly, limit myself to an architecture since supporting multiple processor architectures was not an option, simply because of the intricacies of the way processors work. After selecting the most popular processor architecture I'd need to get a good grasp of its assembly language. You see, because of the different ways microprocessors are designed and made, they all have different instruction sets. To support an instruction set, you need to take the code the user has written in your language and translate it in the form of instructions of that specific set. Processors can work in weird ways, sometimes for compatibility reasons and sometimes just because they can. So when you optimise your generated code, you have to take all that into account. Let's say you do manage to support one architecture successfully but now there's (somehow) popular demand for your language on some other architecture, you will have to repeat this process all over again, and then again for another architecture, and so on. Don't even get me started on how you would debug errors that are specific to only some architectures. It would be a huge mess.\n\n![LLVM being an abstraction](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fr37gv9mm9718s1pl773g.png)\n\nThis is where LLVM comes in, it provides a convenient abstraction layer over all the instruction sets that you can target. You only need to worry about translating to its own internal representation (LLVM IR). LLVM will then handle all the code optimisation to its IR, and then for the instruction set you're targetting. But it's still a good idea to first optimise your code and then give it to LLVM, instead of just expecting LLVM to do it all. \n\nSo to use LLVM, all I needed to do was to take my AST and convert it into LLVM IR. I did it using [Inkwell](https:\u002F\u002Fgithub.com\u002Fthedan64\u002Finkwell) the LLVM API in Rust. It is a wrapper around the C API that LLVM has built, and on top of that provides the memory safety guaranteed by Rust. Oh, and this is what LLVM IR looks like in text format ([Don't try to understand it, feel it](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=tPEhCcluVdM)):\n\n```llvm\n; ModuleID = 'example'\nsource_filename = \"\u002Fhome\u002Ffaraaz\u002Fhello.tp\"\n\n@format_string = private unnamed_addr constant [4 x i8] c\"%f \\00\", align 1\n\ndefine i32 @main(i32 %0) {\nentry:\n  %num = alloca double\n  store double 4.200000e+02, double* %num\n  %num1 = load double, double* %num\n  %printf = call double (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @format_string, i32 0, i32 0), double %num1)\n  ret i32 0\n}\n\ndeclare double @printf(i8*, ...)\n```\n\n*Code in LLVM IR that sets a variable to 420 and prints it*\n\n### Making it all legit\n\nUntil now, executing the compiler's binary did only one thing and it wasn't very configurable or helpful for someone using it for the first time. I wanted it to have a proper Command Line Interface (CLI), something like this:\n\n![CLI for htop tool](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Flulmuxnm6puhz24rp38x.png)\n\nSo I used the [Clap](https:\u002F\u002Fgithub.com\u002Fclap-rs\u002Fclap) crate (aka package) to build the CLI and I think it turned out all right.\n\n![CLI for Tisp](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjcvitgywjex23ycfxsu5.png)  \n\n## Bringing it all together\n\nNow that I have the compiler set up, and the language has features like storing variables, performing arithmetic, looping (nested loops don't work yet) and printing to screen, it was time to make a small program with it. Here's me writing a program to compute the first 5 Fibonacci numbers in Tisp and then compile and run it:\n\n{% asciinema 401435 %}\n\nHere's the project if you want to check it out yourself.\n\n{% github faraazahmad\u002Ftisp %}\n\n## Here's what I learned\n\nProgramming languages are hard. Its' hard to read code in the first place. To understand and learn one is way harder. One can only imagine how hard it is to build one, let alone build one that is widely used. **This project was mostly me trying to answer the question \"How hard can it really be?\"**, I guess I have my answer now. But it's also kinda easy low-key. Once you dip your toes in the hard parts, the next time you do it, it feels a little easier. Every day you do something hard, it gets a little easier, but you gotta do it everyday, that's the hard part.\n\n{% youtube R2_Mn-qRKjA %}\n";b.user={name:"Syed Faraaz Ahmad",username:g,twitter_username:"Faraaz98",github_username:g,website_url:"https:\u002F\u002Ffaraazahmad.github.io",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--G2_vMmlU--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F94451\u002F57325d0d-990e-4ea1-80d1-fd888775c0b2.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tWRlgorU--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F94451\u002F57325d0d-990e-4ea1-80d1-fd888775c0b2.jpg"};b.flare_tag={name:f,bg_color_hex:"#091b47",text_color_hex:"#b2ffe1"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Ffaraazahmad\u002Fi-was-bored-so-i-built-my-own-programming-language-30f1",229,"2021-03-24T19:49:37Z","showdev","faraazahmad")));
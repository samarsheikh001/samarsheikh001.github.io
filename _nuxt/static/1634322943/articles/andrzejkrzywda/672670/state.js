window.__NUXT__=(function(a,b,c,d,e,f){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:672670,title:"Frontend, backend - let's be friends again",description:"Programming is my passion. There's nothing better than working as a team, together to deliver somethi...",readable_publish_date:"Apr 20",slug:"frontend-backend-let-s-be-friends-again-28",path:"\u002Fandrzejkrzywda\u002Ffrontend-backend-let-s-be-friends-again-28",url:c,comments_count:14,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F672670.png",canonical_url:c,created_at:b,edited_at:"2021-04-22T16:23:36Z",crossposted_at:a,published_at:b,last_comment_at:"2021-04-28T06:49:38Z",reading_time_minutes:4,tag_list:"5days5blogposts, watercooler, programming",tags:["5days5blogposts",e,"programming"],body_html:"\u003Cp\u003EProgramming is my passion. There's nothing better than working as a team, together to deliver something working to the users.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWorking together creates this bond. It creates the connection that allows us to trust each other. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat are you talking about, Andrzej? Is it some kind of boomer's talk again?\u003C\u002Fp\u003E\n\n\u003Cp\u003EYep.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EBack then, not that long ago, we didn't have the frontend\u002Fbackend separation.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe have rendered html on the server. It was sent to the browser as a whole page. \u003C\u002Fp\u003E\n\n\u003Cp\u003EYes, it had limitations, as the browsers and machines back then. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe browsers got better. The computers and mobiles got stronger. They are now able to run more JavaScript.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAround 2010 the shift has started. Over time more and more apps went into this backend with JSON and frontend as a Single Page App. I was one of the advocates of this approach. It was new and promised more modularity.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt almost promised us to think about Single Page Apps as desktop apps. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAlmost.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThe browser is this weird hybrid monster.\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe browser is on one hand a document browser. Read this article, click next, read this list of documents, click, read another article.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe second face of the browser is being a runtime for running JavaScript apps.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe lie that I felt into was that I thought browsers would become less hybrid and became more the runtime part.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThen certain things could be simpler. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThere's not much sense to have a Back button in runtime apps. What does it mean for a chess app which runs in a browser? It's confusing. Yes, desktop apps have undo\u002Fredo often. But here it doesn't make sense. A back button makes a lot of sense when we think of browsers as document viewers. Go back. In desktop apps it's very confusing. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThat's why this part of frontend apps behaves weirdly when you click Back.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThen we have URL's - they make perfect sense in document viewers. Documents are resources. Resources have addresses, like URLs.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut maintaining a meaningful URL state in a JS frontend which behaves like a desktop app? Should every little message have their own URL? Again - what about games like chess and other more advanced stuff?\u003C\u002Fp\u003E\n\n\u003Cp\u003EDon't get me wrong - it's all possible to work around and make it consistent. You've probably done that.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt just adds more work. It adds more complexity.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EI hoped the browsers would stop being just document viewers.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EInstead, we will switch to treat it as a runtime to run document viewer apps. That's a difference.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI was either wrong or just to quick with my expectations. I can't imagine how we can have those hybrid browsers in the next decades.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI hope for simplicity.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut what does it have to do with frontend and backend?\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThe frontends became more complex (like desktop apps).\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003ENew technologies appeared - react, redux, maintaining the state on the frontend. This became a specialization on its own.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis together with a huge influx of new developers in the market created this almost generational difference. Many\u003Cbr\u003E\n young people specializing in frontends. Old boomers, like me, who stayed closer to the backend.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt the beginning it was fine. But over time, the more backend-inclined developers were not able to catch up with what's happening on the frontend. The frontend tooling was complicated and it's still complicated. It's hard to be a good backend dev and at the same time be a good frontend developer.\u003Cbr\u003E\nPeople don't want to be mediocre. They choose sides.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThis is where we stopped being friends.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe now have this fence between apps.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\"When can we expect this API to be ready?\" ask frontend devs.\u003Cbr\u003E\nThey come up with ideas like GraphQL to talk less to backend devs.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\"It's your fault, my API works, but you screwed the JS part and now the users can't use the app\" shout backend devs to frontend devs.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWe have created this boundary between ourselves.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's us vs them.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe're not friends. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat's worse, we're very close to become enemies.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENot everywhere, not always - but this is the trend I see around.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI don't like that.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIs there a hope?\u003C\u002Fp\u003E\n\n\u003Cp\u003EYes. But I might be wrong again ;)\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThe hope is the potential shift back to backends.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe shift of where html is rendered. React has introduced Server Rendered Components - which to old people sound exactly like what was there before. But in JavaScript.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThen comes the Rails world with its innovative approach. What if we agree that frontends stay with us and be cool with JavaScript \"sprinkles\". But, the HTML is rendered on the backend and sent to the client via Web Sockets (allowing nice updates on other clients too). \u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this approach maintaing the state is needed only on the backend. \u003C\u002Fp\u003E\n\n\u003Cp\u003E*\u003Cem\u003EThis simplifies the frontend by a lot. *\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis simplifies the whole app by a lot. Potentially less bugs, faster shipping of features.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETwo places to watch are \u003Ca href=\"https:\u002F\u002Fhotwire.dev\u002F\"\u003EHotwire\u003C\u002Fa\u003E (to become part of Rails soon) and \u003Ca href=\"https:\u002F\u002Fdocs.stimulusreflex.com\u002F\"\u003EStimulus Reflex\u003C\u002Fa\u003E. Very likely there are similar things in your technology too. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is our hope, dear backend and frontend friends.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis means simpler technology stack. This means backend people can deliver \u003Cem\u003Esome\u003C\u002Fem\u003E frontend features. This means frontend people can have more time to learn backend stuff.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThis means we work together again.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe're friends again. \u003C\u002Fp\u003E\n\n",body_markdown:"Programming is my passion. There's nothing better than working as a team, together to deliver something working to the users.\n\nWorking together creates this bond. It creates the connection that allows us to trust each other. \n\nWhat are you talking about, Andrzej? Is it some kind of boomer's talk again?\n\nYep.\n\n**Back then, not that long ago, we didn't have the frontend\u002Fbackend separation.**\n\nWe have rendered html on the server. It was sent to the browser as a whole page. \n\nYes, it had limitations, as the browsers and machines back then. \n\nThe browsers got better. The computers and mobiles got stronger. They are now able to run more JavaScript.\n\nAround 2010 the shift has started. Over time more and more apps went into this backend with JSON and frontend as a Single Page App. I was one of the advocates of this approach. It was new and promised more modularity.\n\nIt almost promised us to think about Single Page Apps as desktop apps. \n\nAlmost.\n\n**The browser is this weird hybrid monster.** \n\nThe browser is on one hand a document browser. Read this article, click next, read this list of documents, click, read another article.\n\nThe second face of the browser is being a runtime for running JavaScript apps.\n\nThe lie that I felt into was that I thought browsers would become less hybrid and became more the runtime part.\n\nThen certain things could be simpler. \n\nThere's not much sense to have a Back button in runtime apps. What does it mean for a chess app which runs in a browser? It's confusing. Yes, desktop apps have undo\u002Fredo often. But here it doesn't make sense. A back button makes a lot of sense when we think of browsers as document viewers. Go back. In desktop apps it's very confusing. \n\n**That's why this part of frontend apps behaves weirdly when you click Back.**\n\nThen we have URL's - they make perfect sense in document viewers. Documents are resources. Resources have addresses, like URLs.\n\nBut maintaining a meaningful URL state in a JS frontend which behaves like a desktop app? Should every little message have their own URL? Again - what about games like chess and other more advanced stuff?\n\nDon't get me wrong - it's all possible to work around and make it consistent. You've probably done that.\n\nIt just adds more work. It adds more complexity.\n\n**I hoped the browsers would stop being just document viewers.**\n\nInstead, we will switch to treat it as a runtime to run document viewer apps. That's a difference.\n\nI was either wrong or just to quick with my expectations. I can't imagine how we can have those hybrid browsers in the next decades.\n\nI hope for simplicity.\n\nBut what does it have to do with frontend and backend?\n\n**The frontends became more complex (like desktop apps).** \n\nNew technologies appeared - react, redux, maintaining the state on the frontend. This became a specialization on its own.\n\nThis together with a huge influx of new developers in the market created this almost generational difference. Many\n young people specializing in frontends. Old boomers, like me, who stayed closer to the backend.\n\nAt the beginning it was fine. But over time, the more backend-inclined developers were not able to catch up with what's happening on the frontend. The frontend tooling was complicated and it's still complicated. It's hard to be a good backend dev and at the same time be a good frontend developer.\nPeople don't want to be mediocre. They choose sides.\n\n**This is where we stopped being friends.**\n\nWe now have this fence between apps.\n\n\"When can we expect this API to be ready?\" ask frontend devs.\nThey come up with ideas like GraphQL to talk less to backend devs.\n\n\"It's your fault, my API works, but you screwed the JS part and now the users can't use the app\" shout backend devs to frontend devs.\n\n**We have created this boundary between ourselves.**\n\nIt's us vs them.\n\nWe're not friends. \n\nWhat's worse, we're very close to become enemies.\n\nNot everywhere, not always - but this is the trend I see around.\n\nI don't like that.\n\nIs there a hope?\n\nYes. But I might be wrong again ;)\n\n**The hope is the potential shift back to backends.**\n\nThe shift of where html is rendered. React has introduced Server Rendered Components - which to old people sound exactly like what was there before. But in JavaScript.\n\nThen comes the Rails world with its innovative approach. What if we agree that frontends stay with us and be cool with JavaScript \"sprinkles\". But, the HTML is rendered on the backend and sent to the client via Web Sockets (allowing nice updates on other clients too). \n\nIn this approach maintaing the state is needed only on the backend. \n\n**This simplifies the frontend by a lot. **\n\nThis simplifies the whole app by a lot. Potentially less bugs, faster shipping of features.\n\nTwo places to watch are [Hotwire](https:\u002F\u002Fhotwire.dev\u002F) (to become part of Rails soon) and [Stimulus Reflex](https:\u002F\u002Fdocs.stimulusreflex.com\u002F). Very likely there are similar things in your technology too. \n\nThis is our hope, dear backend and frontend friends.\n\nThis means simpler technology stack. This means backend people can deliver *some* frontend features. This means frontend people can have more time to learn backend stuff.\n\n**This means we work together again.**\n\nWe're friends again. ",user:{name:"Andrzej Krzywda",username:f,twitter_username:f,github_username:a,website_url:"https:\u002F\u002Farkademy.dev",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--X78MpL3x--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F193379\u002F993b4eab-5b98-4a70-ab37-93c52bc644e6.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vFqqai5X--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F193379\u002F993b4eab-5b98-4a70-ab37-93c52bc644e6.jpg"},flare_tag:{name:e,bg_color_hex:"#D0ECFF",text_color_hex:"#130074"}}},serverRendered:true,routePath:"\u002Farticles\u002Fandrzejkrzywda\u002F672670",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-20T12:33:22Z","https:\u002F\u002Fdev.to\u002Fandrzejkrzywda\u002Ffrontend-backend-let-s-be-friends-again-28",61,"watercooler","andrzejkrzywda"));
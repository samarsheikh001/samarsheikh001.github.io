window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:747990,title:"VS Code Thunder Client: An awesome alternative to Postman",description:"Suppose you are working on the front end of a project. You are using a VS Code editor. You have...",readable_publish_date:"Jul 4",slug:"vs-code-thunder-client-an-awesome-alternative-to-postman-1a02",path:"\u002Falim1496\u002Fvs-code-thunder-client-an-awesome-alternative-to-postman-1a02",url:d,comments_count:b,public_reactions_count:b,collection_id:a,published_timestamp:e,positive_reactions_count:b,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ouM6hW4f--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fth.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HFuRwaf3--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fth.png",canonical_url:d,created_at:"2021-07-04T19:04:47Z",edited_at:"2021-07-04T20:21:07Z",crossposted_at:a,published_at:e,last_comment_at:"2021-07-09T19:24:27Z",reading_time_minutes:b,tag_list:"api, postman, restful, testing",tags:["api","postman","restful","testing"],body_html:"\u003Cp\u003ESuppose you are working on the front end of a project. You are using a \u003Ccode\u003EVS Code\u003C\u002Fcode\u003E editor. You have successfully designed the user interfaces and now its time to bind data from back end api. You are given a collection of rest api endpoints. So at first you want to test these. What if you could test these in the editor without opening another app like \u003Ccode\u003EPostman\u003C\u002Fcode\u003E? This is absolutely possible now if your \u003Ccode\u003EVS Code\u003C\u002Fcode\u003E is having the latest version (1.57).\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can test the endpoints using a \u003Ccode\u003EVS Code\u003C\u002Fcode\u003E extension named \u003Cstrong\u003EThunder Client\u003C\u002Fstrong\u003E which is a lightweight rest client. You can have it from its official \u003Ca href=\"https:\u002F\u002Fwww.thunderclient.io\u002F\"\u003Ewebsite\u003C\u002Fa\u003E or from the extensions section of \u003Ccode\u003EVS Code\u003C\u002Fcode\u003E. Once you have added the extension to your editor and hit the \u003Ccode\u003ENew Request\u003C\u002Fcode\u003E button, it should look like following:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7-V_EKGP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fthunder.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7-V_EKGP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fthunder.png\" alt=\"Alt text of image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs you can see initially an endpoint is given and if you send a \u003Ccode\u003EGET\u003C\u002Fcode\u003E request to it, you will get the initial info about \u003Ccode\u003EThunder Client\u003C\u002Fcode\u003E as json response. Now lets discuss the features of this very extension:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EAll the major http requests like \u003Ccode\u003EGET\u003C\u002Fcode\u003E, \u003Ccode\u003EPOST\u003C\u002Fcode\u003E, \u003Ccode\u003EPATCH\u003C\u002Fcode\u003E, \u003Ccode\u003EPUT\u003C\u002Fcode\u003E, \u003Ccode\u003EDELETE\u003C\u002Fcode\u003E, \u003Ccode\u003EOPTIONS\u003C\u002Fcode\u003E, \u003Ccode\u003EHEAD\u003C\u002Fcode\u003E can be sent.\u003C\u002Fli\u003E\n\u003Cli\u003EQuery parameters can be added like key value pair or if you add these in the url then those can be seen automatically in the section as pairs.\u003C\u002Fli\u003E\n\u003Cli\u003EThere are separate sections to add \u003Ccode\u003EBasic Auth\u003C\u002Fcode\u003E, \u003Ccode\u003EBearer Token\u003C\u002Fcode\u003E and \u003Ccode\u003EOAuth2.0\u003C\u002Fcode\u003E which is pretty cool.\u003C\u002Fli\u003E\n\u003Cli\u003EA separate section for adding necessary http headers as key value pairs.\u003C\u002Fli\u003E\n\u003Cli\u003EA body section where data can be sent using \u003Ccode\u003Ejson\u003C\u002Fcode\u003E, \u003Ccode\u003Exml\u003C\u002Fcode\u003E, \u003Ccode\u003Etext\u003C\u002Fcode\u003E, \u003Ccode\u003Eform\u003C\u002Fcode\u003E, \u003Ccode\u003Eform-encoded\u003C\u002Fcode\u003E, \u003Ccode\u003Egraphql\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EAnother cool feature call \u003Ccode\u003ETests\u003C\u002Fcode\u003E where you can add your necessary conditions for testing like you want the response code to be equal to 200 or you want the response body to contain a fixed value.\u003C\u002Fli\u003E\n\u003Cli\u003EIn the response section you can see the \u003Ccode\u003Eheaders\u003C\u002Fcode\u003E, \u003Ccode\u003Ecookies\u003C\u002Fcode\u003E and \u003Ccode\u003Etest results\u003C\u002Fcode\u003E along with the response. The response being marked up with colors looks beautiful along with \u003Ccode\u003Estatus\u003C\u002Fcode\u003E, \u003Ccode\u003Esize\u003C\u002Fcode\u003E and \u003Ccode\u003Etime\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EThere are some demo codes to make request in different languages along with third party libraries.\u003C\u002Fli\u003E\n\u003Cli\u003EYou can creat a collection, add an activity to a collection, import collections and even import postman collections.\u003C\u002Fli\u003E\n\u003Cli\u003EYou can also create environment, define secrets like tokens and use those in sending requests.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAll these features together make \u003Ccode\u003EThunder Client\u003C\u002Fcode\u003E a great choice to test restful api endpoints. If you are a newbie or work in a project that is not very complex or don't want to run extra processes to test api then you should definitely give it a try.\u003C\u002Fp\u003E\n\n",body_markdown:"---\ncover_image: https:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fth.png\n---\nSuppose you are working on the front end of a project. You are using a `VS Code` editor. You have successfully designed the user interfaces and now its time to bind data from back end api. You are given a collection of rest api endpoints. So at first you want to test these. What if you could test these in the editor without opening another app like `Postman`? This is absolutely possible now if your `VS Code` is having the latest version (1.57).\n\nYou can test the endpoints using a `VS Code` extension named **Thunder Client** which is a lightweight rest client. You can have it from its official [website](https:\u002F\u002Fwww.thunderclient.io\u002F) or from the extensions section of `VS Code`. Once you have added the extension to your editor and hit the `New Request` button, it should look like following:\n![Alt text of image](https:\u002F\u002Fpublic-image-container.s3.ap-southeast-1.amazonaws.com\u002Fthunder.png)\n\nAs you can see initially an endpoint is given and if you send a `GET` request to it, you will get the initial info about `Thunder Client` as json response. Now lets discuss the features of this very extension:\n* All the major http requests like `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `OPTIONS`, `HEAD` can be sent.\n* Query parameters can be added like key value pair or if you add these in the url then those can be seen automatically in the section as pairs.\n* There are separate sections to add `Basic Auth`, `Bearer Token` and `OAuth2.0` which is pretty cool.\n* A separate section for adding necessary http headers as key value pairs.\n* A body section where data can be sent using `json`, `xml`, `text`, `form`, `form-encoded`, `graphql`.\n* Another cool feature call `Tests` where you can add your necessary conditions for testing like you want the response code to be equal to 200 or you want the response body to contain a fixed value.\n* In the response section you can see the `headers`, `cookies` and `test results` along with the response. The response being marked up with colors looks beautiful along with `status`, `size` and `time`.\n* There are some demo codes to make request in different languages along with third party libraries.\n* You can creat a collection, add an activity to a collection, import collections and even import postman collections.\n* You can also create environment, define secrets like tokens and use those in sending requests.\n\nAll these features together make `Thunder Client` a great choice to test restful api endpoints. If you are a newbie or work in a project that is not very complex or don't want to run extra processes to test api then you should definitely give it a try.",user:{name:"Mohammad Abdul Alim",username:c,twitter_username:c,github_username:c,website_url:"https:\u002F\u002Falim1496.github.io\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rl2O1s0Z--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F641955\u002F02940f5e-848d-4028-860d-ef32ff783717.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fmNnG8I4--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F641955\u002F02940f5e-848d-4028-860d-ef32ff783717.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Falim1496\u002F747990",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,2,"alim1496","https:\u002F\u002Fdev.to\u002Falim1496\u002Fvs-code-thunder-client-an-awesome-alternative-to-postman-1a02","2021-07-04T20:20:50Z"));
__NUXT_JSONP__("/articles/lohanidamodar/699569", (function(a,b,c,d,e,f){c.type_of="article";c.id=699569;c.title="#30DaysofAppwrite : Database Design üßê";c.description="Intro   #30DaysOfAppwrite is a month long event focused at giving developers a walk through...";c.readable_publish_date="May 16";c.slug="30daysofappwrite-database-design-140a";c.path="\u002Fappwrite\u002F30daysofappwrite-database-design-140a";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4-t15_Cc--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5so2807ye8s2nycwkt82.png";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hCmcO7Tp--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5so2807ye8s2nycwkt82.png";c.canonical_url=d;c.created_at="2021-05-16T04:53:21Z";c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=3;c.tag_list="30daysofappwrite, flutter, webdev, javascript";c.tags=["30daysofappwrite","flutter","webdev","javascript"];c.body_html="\u003Ch2\u003E\n  \u003Ca name=\"intro\" href=\"#intro\"\u003E\n  \u003C\u002Fa\u003E\n  Intro\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002F30days.appwrite.io\u002F\"\u003E#30DaysOfAppwrite\u003C\u002Fa\u003E is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"database-design\" href=\"#database-design\"\u003E\n  \u003C\u002Fa\u003E\n  Database Design üßê\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWelcome back to another session on the Appwrite Database üëã . We hope you have gone through the \u003Ca href=\"https:\u002F\u002Fdev.tolink-to-day-15\"\u003EDay 15\u003C\u002Fa\u003E article. It is important as we build upon the knowledge gained in Day 15 and plan and prepare the database for our demo application.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"planning-data-structure\" href=\"#planning-data-structure\"\u003E\n  \u003C\u002Fa\u003E\n  Planning Data Structure\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe will use the \u003Cstrong\u003ECollection\u003C\u002Fstrong\u003E and \u003Cstrong\u003ERules\u003C\u002Fstrong\u003E feature provided by Appwrite Database to plan the data structures needed for our application. First, let's put down the requirements of our application.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"post\" href=\"#post\"\u003E\n  \u003C\u002Fa\u003E\n  Post\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EA post refers to content that can be posted by any authenticated user. Anyone can signup and create a post. Our post will have \u003Cstrong\u003Etitle\u003C\u002Fstrong\u003E, \u003Cstrong\u003Ecover\u003C\u002Fstrong\u003E image, \u003Cstrong\u003Etext\u003C\u002Fstrong\u003E, \u003Cstrong\u003Epublished\u003C\u002Fstrong\u003E ( to signify whether the post is a draft or published) , \u003Cstrong\u003Etags\u003C\u002Fstrong\u003E, \u003Cstrong\u003Ecreated date\u003C\u002Fstrong\u003E and \u003Cstrong\u003Eid\u003C\u002Fstrong\u003E of the creator. Now we will plan this using the \u003Cstrong\u003ERules\u003C\u002Fstrong\u003E provided by Appwrite database.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst we will create a collection as described in Day 15 and name it \u003Cstrong\u003EPosts\u003C\u002Fstrong\u003E. Then we will add following rules from console and update the collection.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ETitle\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Title\u003C\u002Fli\u003E\n\u003Cli\u003EKey: title\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ECover image\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Cover image\u003C\u002Fli\u003E\n\u003Cli\u003EKey: cover\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: false\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EText\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Text\u003C\u002Fli\u003E\n\u003Cli\u003EKey: text\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Markdown\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EPublished\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Published\u003C\u002Fli\u003E\n\u003Cli\u003EKey: published\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Boolean\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ETags\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Tags\u003C\u002Fli\u003E\n\u003Cli\u003EKey: tags\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: false\u003C\u002Fli\u003E\n\u003Cli\u003EArray: true\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ECreated Date\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Created At\u003C\u002Fli\u003E\n\u003Cli\u003EKey: created_at\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Numeric\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EUser Id\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: User Id\u003C\u002Fli\u003E\n\u003Cli\u003EKey: user_id\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WaHjuWZd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6cvfeacw0ham96n3aqns.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WaHjuWZd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6cvfeacw0ham96n3aqns.png\" alt=\"Posts Collection\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the permissions, the read permission should be [\u003Ccode\u003E*\u003C\u002Fcode\u003E] as anyone should be able to read the posts, while the write permission for this collection should be [\u003Ccode\u003Erole:member\u003C\u002Fcode\u003E] so that only logged in users can create a post.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"profile\" href=\"#profile\"\u003E\n  \u003C\u002Fa\u003E\n  Profile\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe want to let our users have their profile with a public name so that we can display the author information in each post. We will also want to add a user's post as an embedded document in the collection so that we can fetch it easily with the user's profile. \u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's create another collection named \u003Cstrong\u003EUsers\u003C\u002Fstrong\u003E with following rules\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUser Id\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: User\u003C\u002Fli\u003E\n\u003Cli\u003EKey: user\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EName\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Name\u003C\u002Fli\u003E\n\u003Cli\u003EKey: name\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Text\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: true\u003C\u002Fli\u003E\n\u003Cli\u003EArray: false\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003EPosts\n\n\u003Cul\u003E\n\u003Cli\u003Elabel: Posts\u003C\u002Fli\u003E\n\u003Cli\u003EKey: posts\u003C\u002Fli\u003E\n\u003Cli\u003ERule Type: Document (Embedded)\u003C\u002Fli\u003E\n\u003Cli\u003ERequired: false\u003C\u002Fli\u003E\n\u003Cli\u003EArray: true\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EOnce you create a \u003Cstrong\u003Eposts\u003C\u002Fstrong\u003E rule, you will see a section with \u003Cstrong\u003EAllowed Collections\u003C\u002Fstrong\u003E. Here, you need to select \u003Cstrong\u003EPosts\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZvITvgHv--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fernsaw9bu06i9nddmmbh.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZvITvgHv--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fernsaw9bu06i9nddmmbh.png\" alt=\"Profile Collection\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs for the permissions, read permission should be [\u003Ccode\u003E*\u003C\u002Fcode\u003E] as anyone should be able to read, and write permission can be [\u003Ccode\u003Erole:member\u003C\u002Fcode\u003E] so that anyone signed in can create a profile.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, this is how easy it is to plan data structures for any application using \u003Cstrong\u003ECollections\u003C\u002Fstrong\u003E and \u003Cstrong\u003ERules\u003C\u002Fstrong\u003E - it is very similar to traditional Relational Databases where we plan using \u003Cstrong\u003Etables\u003C\u002Fstrong\u003E and \u003Cstrong\u003Ecolumns\u003C\u002Fstrong\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWe have now planned the database required for our application, on Day 17, we will continue to use these collections in our Application.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"credits\" href=\"#credits\"\u003E\n  \u003C\u002Fa\u003E\n  Credits\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe hope you liked this write up. You can follow \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fsearch?q=%2330daysofappwrite\"\u003E#30DaysOfAppwrite\u003C\u002Fa\u003E on Social Media to keep up with all of our posts. The complete event timeline can be found \u003Ca href=\"http:\u002F\u002F30days.appwrite.io\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdiscord\"\u003EDiscord Server\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fappwrite.io\u002F\"\u003EAppwrite Homepage\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fappwrite\"\u003EAppwrite's Github\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EFeel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ü¶Ñ. Stay tuned for tomorrow's article! Until then üëã\u003C\u002Fp\u003E\n\n";c.body_markdown="## Intro\n[#30DaysOfAppwrite](http:\u002F\u002F30days.appwrite.io\u002F) is a month long event focused at giving developers a walk through of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these concepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!\n\n## Database Design üßê\nWelcome back to another session on the Appwrite Database üëã . We hope you have gone through the [Day 15](link-to-day-15) article. It is important as we build upon the knowledge gained in Day 15 and plan and prepare the database for our demo application.\n\n## Planning Data Structure\nWe will use the **Collection** and **Rules** feature provided by Appwrite Database to plan the data structures needed for our application. First, let's put down the requirements of our application.\n\n### Post\nA post refers to content that can be posted by any authenticated user. Anyone can signup and create a post. Our post will have **title**, **cover** image, **text**, **published** ( to signify whether the post is a draft or published) , **tags**, **created date** and **id** of the creator. Now we will plan this using the **Rules** provided by Appwrite database.\n\nFirst we will create a collection as described in Day 15 and name it **Posts**. Then we will add following rules from console and update the collection.\n\n- Title\n    - label: Title\n    - Key: title\n    - Rule Type: Text\n    - Required: true\n    - Array: false\n- Cover image\n    - label: Cover image\n    - Key: cover\n    - Rule Type: Text\n    - Required: false\n    - Array: false\n- Text\n    - label: Text\n    - Key: text\n    - Rule Type: Markdown\n    - Required: true\n    - Array: false\n- Published\n    - label: Published\n    - Key: published\n    - Rule Type: Boolean\n    - Required: true\n    - Array: false\n- Tags\n    - label: Tags\n    - Key: tags\n    - Rule Type: Text\n    - Required: false\n    - Array: true\n- Created Date\n    - label: Created At\n    - Key: created_at\n    - Rule Type: Numeric\n    - Required: true\n    - Array: false\n- User Id\n    - label: User Id\n    - Key: user_id\n    - Rule Type: Text\n    - Required: true\n    - Array: false\n\n![Posts Collection](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F6cvfeacw0ham96n3aqns.png)\n \n\nFor the permissions, the read permission should be [`*`] as anyone should be able to read the posts, while the write permission for this collection should be [`role:member`] so that only logged in users can create a post.\n\n## Profile\nWe want to let our users have their profile with a public name so that we can display the author information in each post. We will also want to add a user's post as an embedded document in the collection so that we can fetch it easily with the user's profile. \n\nLet's create another collection named **Users** with following rules\n\n- User Id\n    - label: User\n    - Key: user\n    - Rule Type: Text\n    - Required: true\n    - Array: false\n- Name\n    - label: Name\n    - Key: name\n    - Rule Type: Text\n    - Required: true\n    - Array: false\n- Posts\n    - label: Posts\n    - Key: posts\n    - Rule Type: Document (Embedded)\n    - Required: false\n    - Array: true\n\nOnce you create a **posts** rule, you will see a section with **Allowed Collections**. Here, you need to select **Posts**.\n\n![Profile Collection](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fernsaw9bu06i9nddmmbh.png)\n \n\nAs for the permissions, read permission should be [`*`] as anyone should be able to read, and write permission can be [`role:member`] so that anyone signed in can create a profile.\n\nSo, this is how easy it is to plan data structures for any application using **Collections** and **Rules** - it is very similar to traditional Relational Databases where we plan using **tables** and **columns**. \n\nWe have now planned the database required for our application, on Day 17, we will continue to use these collections in our Application.\n\n## Credits \nWe hope you liked this write up. You can follow [#30DaysOfAppwrite](https:\u002F\u002Ftwitter.com\u002Fsearch?q=%2330daysofappwrite) on Social Media to keep up with all of our posts. The complete event timeline can be found [here](http:\u002F\u002F30days.appwrite.io)\n\n* [Discord Server](https:\u002F\u002Fappwrite.io\u002Fdiscord)\n* [Appwrite Homepage](https:\u002F\u002Fappwrite.io\u002F)  \n* [Appwrite's Github](https:\u002F\u002Fgithub.com\u002Fappwrite)\n\nFeel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ü¶Ñ. Stay tuned for tomorrow's article! Until then üëã";c.user={name:"Damodar Lohani",username:"lohanidamodar",twitter_username:"LohaniDamodar",github_username:a,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Y2Vg3V3b--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F551623\u002Fd6834701-4563-4984-8f1d-7c6735acd3b6.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WbIqGPLg--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F551623\u002Fd6834701-4563-4984-8f1d-7c6735acd3b6.jpg"};c.organization={name:"Appwrite",username:f,slug:f,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MwfZh3wG--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2225\u002Feb541cf9-84f4-4101-987c-c219cd4b34fc.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5xS_iZdD--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2225\u002Feb541cf9-84f4-4101-987c-c219cd4b34fc.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-05-16T13:09:46Z",{},"https:\u002F\u002Fdev.to\u002Fappwrite\u002F30daysofappwrite-database-design-140a",29,"appwrite")));
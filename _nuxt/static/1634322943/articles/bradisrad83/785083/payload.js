__NUXT_JSONP__("/articles/bradisrad83/785083", (function(a,b,c,d,e,f){c.type_of="article";c.id=785083;c.title="Browser location with Laravel Livewire";c.description="So this past week at week at work has been a triumph like none other.  I was able to get my...";c.readable_publish_date="Aug 8";c.slug="browser-location-with-laravel-livewire-54bd";c.path="\u002Fbradisrad83\u002Fbrowser-location-with-laravel-livewire-54bd";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--T-Mk6BQ_--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fybx3gki69tlhblxt0ce0.jpeg";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GqT9hkLa--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fybx3gki69tlhblxt0ce0.jpeg";c.canonical_url=d;c.created_at="2021-08-08T11:33:19Z";c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=7;c.tag_list="laravel, livewire, geolocation, iplocation";c.tags=["laravel","livewire","geolocation","iplocation"];c.body_html="\u003Cp\u003ESo this past week at week at work has been a triumph like none other.  I was able to get my NativeScript app in the app store and google play store for testing.  Yes I'm sure one million bugs will come up, but literally that saying the light at the end of the tunnel, well yea I'm blinded by it lol.  That being said at the beginning of the week I had a bit of down time while management was getting me full access to the apple developer area.  So they've had this add campaign idea that I knocked out.  Basically we have charters in various cities and instead of creating 1500+ individual campaigns for specific locations, the idea is to create one campaign that will get the users location and return nearby charters and automatically sort them by nearest first.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EWe also (and I say we and it's management \u002F admins) wanted it to be as close to possible as our Search results as to feel like you are actually on the site and not just on a random one off web page.  Luckily for us we have some blade components that can be reused so I don't have to build out anything super custom.  We also already have a livewire Search component that if I can reuse, literally would save me a headache.  I know that I'll be needing a new livewire component for this single landing page that will be in charge of handling the most minor of tasks (honestly might be overkill but adding one more component to this monolith won't be doing any real harm at this point):\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EOn page load check to see if locations services are turned on\u003C\u002Fli\u003E\n\u003Cli\u003EAsk for permission to access them\u003C\u002Fli\u003E\n\u003Cli\u003EYes - return lat \u002F lng and do a reverse geocode lookup (google API) to get location\u003C\u002Fli\u003E\n\u003Cli\u003ENo - get lat \u002F lng \u002F location based on IP address (ipstack)\u003C\u002Fli\u003E\n\u003Cli\u003EPass lat \u002F lng \u002F location to the Search component for results\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ESo now I do my generic livewire CLI stuff to make a new component and I call it \u003Ccode\u003ESearchNearyBy\u003C\u002Fcode\u003E.  I add a few properties that I know I'll need:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    public $location;\n    public $lat;\n    public $lng;\n    public $sortFilter;\n    public $data;\n\n    protected $queryString = ['location', 'lat', 'lng', 'sortFilter'];\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Cem\u003E$data\u003C\u002Fem\u003E is a fun one I'll explain later (and yes it's about as hacky as it gets but sometimes you just deal with it).\u003Cbr\u003E\nand in my render() method I extend that component I talked about earlier that will make this page use the header \u002F footer of the normal site and make it seamless\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    public function render()\n    {\n        return view('livewire.web.search-near-by')-&gt;extends('layouts.web-layout')-&gt;section('content');\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EMy \u003Ccode\u003Esearch-near-by.blade\u003C\u002Fcode\u003E file is pretty simple too.  The one thing I need to make sure of is before I load the Search livewire component I want to make sure that I have a lat, lng, and location otherwise it'll be all empty and my company will ask why they hired me.  I also realize that lat \u002F lng are found immediately and with the browser location but for reverse geocoding I have to actually call an API.  So I decided to make everything dependent on \u003Ccode\u003E$location\u003C\u002Fcode\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E&lt;div&gt;\n    @if($location)\n        &lt;livewire:web.search :lat=\"$lat\" :lng=\"$lng\" :location=\"$location\" :sortFilter=\"$sortFilter\"\u002F&gt;\n    @else\n        &lt;div class=\"mt-40 w-full m-auto text-center\"&gt;\n            &lt;i class=\"fal fa-lg fa-spinner fa-spin text-6xl font-bold text-fa-blue-700\"&gt;&lt;\u002Fi&gt;\n        &lt;\u002Fdiv&gt;\n    @endif\n&lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo now all that is left is the whole javascript stuff (that I thought I would never have to use again being that we chose livewire, but there are some things that you just cannot get away from and this is 100% one of them).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    document.addEventListener('livewire:load', function () {\n            getLocation();\n    });\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo this is literally it!!!!!!!!!!!!!\u003Cbr\u003E\u003Cbr\u003E\nYes I know you're wondering but how?!?!?!!?!?!   well getLocation() is where all the \"real\" magic happens.  \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002Fgeolocation\"\u003ENavigator.geolocation\u003C\u002Fa\u003E is what I'll be using along with \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FGeolocation\u002FgetCurrentPosition\"\u003EgetCurrentPosition\u003C\u002Fa\u003E which takes in a success \u002F error and some optional parameters that you are more than welcomed to check out.  For my purposes I did not see a need for them.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    function getLocation() {\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EPretty straight forwards here, and all I need to do now is define those two methods and write some basic code with a fallback (you'll see).  The easier of the 2 is the onError.  If location services are not enabled or a user blocks then this is what is ran, and we get our lat,lng,location based off of IP address, which honestly on a computer \u002F wifi is still pretty accurate.  It's when you are using a phone \u002F on data where I'll be in Sarasota and it says I'm in Miami or Orlando, but anyways here it is:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    function onError() {\n        window.axios.get('https:\u002F\u002Fapi.ipstack.com\u002Fcheck?access_key=YOUR_API_KEY')\n        .then(function(response) {\n            @this.lat = response.data.latitude;\n            @this.lng = response.data.longitude;\n            @this.location = response.data.city + ', ' + response.data.region_name;\n        });\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fipstack.com\u002F\"\u003EIPStack\u003C\u002Fa\u003E check it out.  kinda cool, get an API key and you can play around.  But as you can see pretty basic code.  set the variables to the proper response from the API call, and as we see in the blade code, once that \u003Ccode\u003E@this.location\u003C\u002Fcode\u003E is set, the livewire search component will be displayed and the font awesome spinning wheel (loading state) shall no longer be there.  \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo now onto the slightly more complicated code (well it shouldn't have been but I had to do some stuff that I'm not necessarily proud of).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    function onSuccess(position) {\n        const {\n            latitude,\n            longitude\n        } = position.coords;\n\n        @this.lat = latitude;\n        @this.lng = longitude;\n\n        window.axios.get(`https:\u002F\u002Fmaps.googleapis.com\u002Fmaps\u002Fapi\u002Fgeocode\u002Fjson?latlng=${latitude},${longitude}&amp;sensor=false&amp;key=YOUR_API_KEY')\n            .then(function(response) {\n                if(response.data.results[0]) {\n                    @this.data = response.data.results[0];\n                } else {\n                    onError();\n                }\n            })\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo looking at the MDN Web Docs, the success function will have a position and we do some object destructuring to get the lat \u002F lng.  I then make a simple google API call to get an address from lat\u002Flng.  Realistically \u003Ccode\u003Eresponse.data.results[0].formatted_address\u003C\u002Fcode\u003E would be 100% sufficient however it literally gives you the address of where you are at, kinda creepy, kinda big brothery, and well the admins over here thought that some of our clientele would get all aluminum foil wearing hats on us and not visit the site anymore, which cmon google \u002F the government has been listening to us for years, who cares, right?  \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut at the level of salary that I make I don't make decisions I just do what I'm told.  So I had to figure out a way to extract the city \u002F state from the formatted address.  I tried regex with no real success (not to self I suck at regex), and yes I googled and based on randomness of addresses I personally could not find one that I felt comfortable using that hit all of the marks.  So this is the \u003Ccode\u003E$data\u003C\u002Fcode\u003E property I mentioned earlier.  Oh yea but before I do that you can see from the above \u003Ccode\u003EonSuccess\u003C\u002Fcode\u003E method that if there is no response data it call \u003Ccode\u003EonError()\u003C\u002Fcode\u003E and we just get it based on IP address.  And I've never once ran into a situation where the IP failed.  Yea if you are behind a VPN and set your location \u002F server to China, well that's not really my problem.  \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo before I go on a long tangent again let's finish up what I did here.  I looked at the google response (first array position only) and decided to look for a couple of instances that worked for me.  I also did this with various lats \u002F lngs to make sure it would all play nicely, and came up with this (yes I'm sorry it's hacky not something a mid level would do but hey I'm all alone and we need to ship shit):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    public function updatedData()\n    {\n        $city = '';\n        $state = '';\n        foreach ($this-&gt;data['address_components'] as $component) {\n            if (in_array('locality', $component['types']) &amp;&amp; in_array('political', $component['types'])) {\n                $city = $component['long_name'];\n            }\n            if (in_array('administrative_area_level_1', $component['types']) &amp;&amp; in_array('political', $component['types'])) {\n                $state = $component['short_name'];\n            }\n        }\n        if ($city &amp;&amp; $state) {\n            $this-&gt;location = $city.', '.$state;\n        } else {\n            $this-&gt;location = $this-&gt;data['formatted_address'];\n        }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFirst off I use the livewire lifecycle \u003Ccode\u003EupdatedFoo()\u003C\u002Fcode\u003E where Foo is Data and if data is updated this method gets ran.  I loop through the address_components and after looking at the API responses carefully I came up with whenever  the types array has \u003Ccode\u003Epolitical\u003C\u002Fcode\u003E and \u003Ccode\u003Elocality\u003C\u002Fcode\u003E well that's the city and whenever it has \u003Ccode\u003Epolitical\u003C\u002Fcode\u003E and \u003Ccode\u003Eadministrative_area_level_1\u003C\u002Fcode\u003E that's the state.  Yes hacky as all can be but they didn't want the full address, and yes you'll also see that if the two variables i created at the beginning of the method ($city, $state) are not set, it still 100% returns the formatted address.  I just didn't want them to sit there with a spinning wheel forever.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EI actually think the whole browser access \u002F location services are rad as shit.  Pretty amazing and also pretty big brother that you can get my exact location without me knowing.  I mean if I have location services turned on and don't setup my preferences (which I'm going to assume a lot of people don't), then bam anyone can check in on me anytime (on any site that I visit).  So maybe that isn't rad as shit it's more the technology.  I just look at how cool it is and I know I would never use it for harm \u002F bad \u002F data mining, but not everyone is as cool as me or you.  Thanks for reading along and hope you enjoyed this.\u003C\u002Fp\u003E\n\n";c.body_markdown="So this past week at week at work has been a triumph like none other.  I was able to get my NativeScript app in the app store and google play store for testing.  Yes I'm sure one million bugs will come up, but literally that saying the light at the end of the tunnel, well yea I'm blinded by it lol.  That being said at the beginning of the week I had a bit of down time while management was getting me full access to the apple developer area.  So they've had this add campaign idea that I knocked out.  Basically we have charters in various cities and instead of creating 1500+ individual campaigns for specific locations, the idea is to create one campaign that will get the users location and return nearby charters and automatically sort them by nearest first.  \n\nWe also (and I say we and it's management \u002F admins) wanted it to be as close to possible as our Search results as to feel like you are actually on the site and not just on a random one off web page.  Luckily for us we have some blade components that can be reused so I don't have to build out anything super custom.  We also already have a livewire Search component that if I can reuse, literally would save me a headache.  I know that I'll be needing a new livewire component for this single landing page that will be in charge of handling the most minor of tasks (honestly might be overkill but adding one more component to this monolith won't be doing any real harm at this point):\n1. On page load check to see if locations services are turned on\n2. Ask for permission to access them\n3. Yes - return lat \u002F lng and do a reverse geocode lookup (google API) to get location\n4. No - get lat \u002F lng \u002F location based on IP address (ipstack)\n5. Pass lat \u002F lng \u002F location to the Search component for results\n\nSo now I do my generic livewire CLI stuff to make a new component and I call it `SearchNearyBy`.  I add a few properties that I know I'll need:\n\n```\n    public $location;\n    public $lat;\n    public $lng;\n    public $sortFilter;\n    public $data;\n\n    protected $queryString = ['location', 'lat', 'lng', 'sortFilter'];\n```\n*$data* is a fun one I'll explain later (and yes it's about as hacky as it gets but sometimes you just deal with it).\nand in my render() method I extend that component I talked about earlier that will make this page use the header \u002F footer of the normal site and make it seamless\n```\n    public function render()\n    {\n        return view('livewire.web.search-near-by')-\u003Eextends('layouts.web-layout')-\u003Esection('content');\n    }\n```\n\nMy `search-near-by.blade` file is pretty simple too.  The one thing I need to make sure of is before I load the Search livewire component I want to make sure that I have a lat, lng, and location otherwise it'll be all empty and my company will ask why they hired me.  I also realize that lat \u002F lng are found immediately and with the browser location but for reverse geocoding I have to actually call an API.  So I decided to make everything dependent on `$location`:\n```\n\u003Cdiv\u003E\n    @if($location)\n        \u003Clivewire:web.search :lat=\"$lat\" :lng=\"$lng\" :location=\"$location\" :sortFilter=\"$sortFilter\"\u002F\u003E\n    @else\n        \u003Cdiv class=\"mt-40 w-full m-auto text-center\"\u003E\n            \u003Ci class=\"fal fa-lg fa-spinner fa-spin text-6xl font-bold text-fa-blue-700\"\u003E\u003C\u002Fi\u003E\n        \u003C\u002Fdiv\u003E\n    @endif\n\u003C\u002Fdiv\u003E\n```\n\nSo now all that is left is the whole javascript stuff (that I thought I would never have to use again being that we chose livewire, but there are some things that you just cannot get away from and this is 100% one of them).\n```\n    document.addEventListener('livewire:load', function () {\n            getLocation();\n    });\n```\nSo this is literally it!!!!!!!!!!!!!  \nYes I know you're wondering but how?!?!?!!?!?!   well getLocation() is where all the \"real\" magic happens.  \n\n\n[Navigator.geolocation](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FNavigator\u002Fgeolocation) is what I'll be using along with [getCurrentPosition](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FGeolocation\u002FgetCurrentPosition) which takes in a success \u002F error and some optional parameters that you are more than welcomed to check out.  For my purposes I did not see a need for them.  \n```\n    function getLocation() {\n        navigator.geolocation.getCurrentPosition(onSuccess, onError);\n    }\n```\nPretty straight forwards here, and all I need to do now is define those two methods and write some basic code with a fallback (you'll see).  The easier of the 2 is the onError.  If location services are not enabled or a user blocks then this is what is ran, and we get our lat,lng,location based off of IP address, which honestly on a computer \u002F wifi is still pretty accurate.  It's when you are using a phone \u002F on data where I'll be in Sarasota and it says I'm in Miami or Orlando, but anyways here it is:\n```\n    function onError() {\n        window.axios.get('https:\u002F\u002Fapi.ipstack.com\u002Fcheck?access_key=YOUR_API_KEY')\n        .then(function(response) {\n            @this.lat = response.data.latitude;\n            @this.lng = response.data.longitude;\n            @this.location = response.data.city + ', ' + response.data.region_name;\n        });\n    }\n```\n[IPStack](https:\u002F\u002Fipstack.com\u002F) check it out.  kinda cool, get an API key and you can play around.  But as you can see pretty basic code.  set the variables to the proper response from the API call, and as we see in the blade code, once that `@this.location` is set, the livewire search component will be displayed and the font awesome spinning wheel (loading state) shall no longer be there.  \n\nSo now onto the slightly more complicated code (well it shouldn't have been but I had to do some stuff that I'm not necessarily proud of).\n```\n    function onSuccess(position) {\n        const {\n            latitude,\n            longitude\n        } = position.coords;\n\n        @this.lat = latitude;\n        @this.lng = longitude;\n\n        window.axios.get(`https:\u002F\u002Fmaps.googleapis.com\u002Fmaps\u002Fapi\u002Fgeocode\u002Fjson?latlng=${latitude},${longitude}&sensor=false&key=YOUR_API_KEY')\n            .then(function(response) {\n                if(response.data.results[0]) {\n                    @this.data = response.data.results[0];\n                } else {\n                    onError();\n                }\n            })\n    }\n```\nSo looking at the MDN Web Docs, the success function will have a position and we do some object destructuring to get the lat \u002F lng.  I then make a simple google API call to get an address from lat\u002Flng.  Realistically `response.data.results[0].formatted_address` would be 100% sufficient however it literally gives you the address of where you are at, kinda creepy, kinda big brothery, and well the admins over here thought that some of our clientele would get all aluminum foil wearing hats on us and not visit the site anymore, which cmon google \u002F the government has been listening to us for years, who cares, right?  \n\nBut at the level of salary that I make I don't make decisions I just do what I'm told.  So I had to figure out a way to extract the city \u002F state from the formatted address.  I tried regex with no real success (not to self I suck at regex), and yes I googled and based on randomness of addresses I personally could not find one that I felt comfortable using that hit all of the marks.  So this is the `$data` property I mentioned earlier.  Oh yea but before I do that you can see from the above `onSuccess` method that if there is no response data it call `onError()` and we just get it based on IP address.  And I've never once ran into a situation where the IP failed.  Yea if you are behind a VPN and set your location \u002F server to China, well that's not really my problem.  \n\nSo before I go on a long tangent again let's finish up what I did here.  I looked at the google response (first array position only) and decided to look for a couple of instances that worked for me.  I also did this with various lats \u002F lngs to make sure it would all play nicely, and came up with this (yes I'm sorry it's hacky not something a mid level would do but hey I'm all alone and we need to ship shit): \n```\n    public function updatedData()\n    {\n        $city = '';\n        $state = '';\n        foreach ($this-\u003Edata['address_components'] as $component) {\n            if (in_array('locality', $component['types']) && in_array('political', $component['types'])) {\n                $city = $component['long_name'];\n            }\n            if (in_array('administrative_area_level_1', $component['types']) && in_array('political', $component['types'])) {\n                $state = $component['short_name'];\n            }\n        }\n        if ($city && $state) {\n            $this-\u003Elocation = $city.', '.$state;\n        } else {\n            $this-\u003Elocation = $this-\u003Edata['formatted_address'];\n        }\n    }\n```\nFirst off I use the livewire lifecycle `updatedFoo()` where Foo is Data and if data is updated this method gets ran.  I loop through the address_components and after looking at the API responses carefully I came up with whenever  the types array has `political` and `locality` well that's the city and whenever it has `political` and `administrative_area_level_1` that's the state.  Yes hacky as all can be but they didn't want the full address, and yes you'll also see that if the two variables i created at the beginning of the method ($city, $state) are not set, it still 100% returns the formatted address.  I just didn't want them to sit there with a spinning wheel forever.  \n\nI actually think the whole browser access \u002F location services are rad as shit.  Pretty amazing and also pretty big brother that you can get my exact location without me knowing.  I mean if I have location services turned on and don't setup my preferences (which I'm going to assume a lot of people don't), then bam anyone can check in on me anytime (on any site that I visit).  So maybe that isn't rad as shit it's more the technology.  I just look at how cool it is and I know I would never use it for harm \u002F bad \u002F data mining, but not everyone is as cool as me or you.  Thanks for reading along and hope you enjoyed this.";c.user={name:"Brad Goldsmith",username:f,twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--JhKMxMBa--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F635849\u002F03c6938c-075a-48ad-81a4-1eea93bb7cf9.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--3napWEji--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F635849\u002F03c6938c-075a-48ad-81a4-1eea93bb7cf9.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-08-08T11:37:48Z",{},"https:\u002F\u002Fdev.to\u002Fbradisrad83\u002Fbrowser-location-with-laravel-livewire-54bd",6,"bradisrad83")));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:551957,title:"Minimal REST API tests in Node.js",description:"Ahoy, mate!  This topic may be useful for beginners in Test Automation or those testers who works wit...",readable_publish_date:"Dec 24 '20",slug:"minimal-rest-api-tests-in-node-js-2jde",path:"\u002Fbormando\u002Fminimal-rest-api-tests-in-node-js-2jde",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p-7dwfwX--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F7mzn9tyknpqa56b02utq.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6uDUOkim--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F7mzn9tyknpqa56b02utq.jpg",canonical_url:c,created_at:"2020-12-24T17:14:38Z",edited_at:"2021-01-28T20:18:39Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"rest, node, testing, qa",tags:["rest","node","testing","qa"],body_html:"\u003Cp\u003EAhoy, mate!\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis topic may be useful for beginners in Test Automation or those testers who works with other languages (\u003Cem\u003Elike Java or Python\u003C\u002Fem\u003E) and new to \u003Cstrong\u003EJavaScript\u003C\u002Fstrong\u003E (\u003Cem\u003ENode.js\u003C\u002Fem\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003ESource code of project from this article on \u003Cstrong\u003EGitHub\u003C\u002Fstrong\u003E: \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fbormando\u002Fmochapi\u002Ftree\u002Fmain\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fbormando\u002Fmochapi\u002Ftree\u002Fmain\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"tools\" href=\"#tools\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Tools\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EREST\u003C\u002Fstrong\u003E (\u003Cem\u003E\u003Cstrong\u003ERE\u003C\u002Fstrong\u003Epresentational \u003Cstrong\u003ES\u003C\u002Fstrong\u003Etate \u003Cstrong\u003ET\u003C\u002Fstrong\u003Eransfer\u003C\u002Fem\u003E) is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is the one of most popular \u003Cstrong\u003EAPI\u003C\u002Fstrong\u003E architectures, so we're going to test one of it's creatures.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor minimal configuration we're going to need these:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cstrong\u003ETest runner\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis tool allows us to define test scenarios and combine them into test suites. It also allows us to run these scenarios and suites. One of the most popular test runners for \u003Cstrong\u003ENode.js\u003C\u002Fstrong\u003E is \u003Cstrong\u003EMocha\u003C\u002Fstrong\u003E - we'll use this one.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cstrong\u003EAssertion library\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAssertion library is a set of assertions (\u003Cem\u003Eor expectations\u003C\u002Fem\u003E) for our test scenarios. Test runners usually contains some basic assertions set, but we're going to include this one too so we could accustom beginners to these libraries, especially \u003Cstrong\u003EChai\u003C\u002Fstrong\u003E (this is our choice for current article).\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003E\u003Cstrong\u003EHTTP client\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd this one makes \u003Cstrong\u003EREST API\u003C\u002Fstrong\u003E test automation possible. This is a tool that sends requests to \u003Cstrong\u003EHTTP (API) server\u003C\u002Fstrong\u003E. One of the most popular solutions in this area is \u003Cstrong\u003EAxios\u003C\u002Fstrong\u003E - this is our guy.\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EWe'll also need \u003Ca href=\"https:\u002F\u002Fwww.postman.com\u002F\"\u003EPostman\u003C\u002Fa\u003E or similar tool (\u003Cem\u003Ef.e. SoapUI, TestMace, Insomnia\u003C\u002Fem\u003E) to send few requests manually.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI use \u003Ca href=\"https:\u002F\u002Fcode.visualstudio.com\u002F\"\u003EVisual Studio Code\u003C\u002Fa\u003E as IDE.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs an example of \u003Cstrong\u003EREST API\u003C\u002Fstrong\u003E server, we'll use public endpoint of crypto market \u003Cstrong\u003EBitfinex\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EGET\u003C\u002Fstrong\u003E \u003Ca href=\"https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\"\u003Ehttps:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"setup\" href=\"#setup\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Setup\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EFirst of all, we'll need to create a project directory. After that, we must open it in \u003Cstrong\u003Econsole\u003C\u002Fstrong\u003E (\u003Cem\u003Eterminal in MacOS\u002FLinux or CMD\u002FPowerShell in Windows\u003C\u002Fem\u003E) and execute command:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Enpm init -y\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter this command execution you'll find \u003Cstrong\u003Epackage.json\u003C\u002Fstrong\u003E file in your project's root directory. This file contains your package info, we'll get back to it later.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we need to install dependencies (chosen tools from previous section):\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Enpm i -D mocha chai axios\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, when we have our package initialized and dependencies installed - we need to create files and folders structure...\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn project's root directory we'll create \u003Cstrong\u003Esrc\u003C\u002Fstrong\u003E directory, and then \u003Cstrong\u003Especs\u003C\u002Fstrong\u003E as a subdirectory of \u003Cstrong\u003Esrc\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003Esrc\u003C\u002Fstrong\u003E is a primary place for our project's code,\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003Especs\u003C\u002Fstrong\u003E contains test suites.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn \u003Cstrong\u003Especs\u003C\u002Fstrong\u003E directory we create \u003Cstrong\u003Emarkets.test.js\u003C\u002Fstrong\u003E file. Here we'll define our test scenarios.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt current state our project structure should look like this:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--sN6yMeCc--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frq9igtltmxf25ixnuimg.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--sN6yMeCc--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frq9igtltmxf25ixnuimg.png\" alt=\"Code_BCgWQlQPsA\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"test-cases\" href=\"#test-cases\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Test cases\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELet's make a \u003Cstrong\u003EGET\u003C\u002Fstrong\u003E request to the \u003Cstrong\u003EAPI\u003C\u002Fstrong\u003E endpoint that we're testing: \u003Ca href=\"https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\"\u003Ehttps:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ND-V7WKY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F075fjjs0qlhg1zdjjcme.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ND-V7WKY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F075fjjs0qlhg1zdjjcme.png\" alt=\"Postman_YbiqvDHkpH\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs we can see, the response body looks like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E[\n    23003,\n    26.09947727,\n    23004,\n    32.433429860000004,\n    -948,\n    -0.0396,\n    23003,\n    13562.61526307,\n    24052.99388042,\n    21884\n]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Cstrong\u003EResponse body\u003C\u002Fstrong\u003E contains list of numbers and this structure won't change if you'll execute this request few more times, only values will (\u003Cem\u003Esince this pair is being traded without stop\u003C\u002Fem\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, we can define at least 3 test scenarios here:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EStatus-code of response must be \u003Cstrong\u003E200\u003C\u002Fstrong\u003E (\u003Cem\u003EOK\u003C\u002Fem\u003E).\u003C\u002Fli\u003E\n\u003Cli\u003EResponse body must contain list with length of 10 values (\u003Cem\u003Enor more nor less\u003C\u002Fem\u003E).\u003C\u002Fli\u003E\n\u003Cli\u003EResponse body must contain list with number values only.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"coding\" href=\"#coding\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Coding\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EFinally, we can start writing code to automate our test scenarios. First of all, we have to define our test suite - let's name it \u003Cstrong\u003E'price data'\u003C\u002Fstrong\u003E, since we're checking on \u003Cstrong\u003EBTC\u002FUSD\u003C\u002Fstrong\u003E pair on crypto market:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Edescribe('price data', () =&gt; {\n    \u002F\u002F test scenarios and\u002For hooks\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EPreviously, we have defined test scenarios for automation, so let's hold on for a second and think for something that they have in common. Of course, it's the data that they check on. So what can we do to not to duplicate our code (and not to execute a request in each test)? We'll use hooks (or actually, a hook)!\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst axios = require('axios');\n\ndescribe('price data', () =&gt; {\n    let data;\n\n    before(async () =&gt; {\n        await axios.get('https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD')\n            .then((response) =&gt; {\n                data = response;\n            });\n    });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAs you can see, we've added \u003Cstrong\u003EAxios\u003C\u002Fstrong\u003E import into our test suite, so we could execute requests to our \u003Cstrong\u003EAPI\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHook \u003Cstrong\u003E'before'\u003C\u002Fstrong\u003E is being executed before all the tests in our test suite, so we gather data using \u003Cstrong\u003EAxios\u003C\u002Fstrong\u003E and store it into data variable, that is defined just above the \u003Cstrong\u003E'before'\u003C\u002Fstrong\u003E hook.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAlso, pay attention that \u003Cstrong\u003Eawait\u003C\u002Fstrong\u003E is used so we could wait for request to finish execution so we could continue. If you won't use await - you'll have \u003Cstrong\u003Edata\u003C\u002Fstrong\u003E variable undefined in your tests.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we're going to add our three test scenarios and import \u003Cstrong\u003EChai\u003C\u002Fstrong\u003E to check on assertions:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst axios = require('axios');\nconst assert = require('chai').assert;\n\ndescribe('price data', () =&gt; {\n    let data;\n\n    before(async () =&gt; {\n        await axios.get('https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD')\n            .then((response) =&gt; {\n                data = response;\n            });\n    });\n\n    it('has 200 response code', () =&gt; {\n        assert.equal(data.status, 200, 'the response code is not 200');\n    });\n\n    it('contains 10 values', () =&gt; {\n        assert.equal(data.data.length, 10, 'number of values is not 10');\n    });\n\n    it('values should be numbers', () =&gt; {\n        for (const value of data.data) {\n            assert.isNumber(value, `value '${value}' is not a number`);\n        }\n    });\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFirst one simply checks if status field from our test data is \u003Cstrong\u003E200\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESecond scenario gets length of response body's list and collates it with 10.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThird and final case is using \u003Cstrong\u003Efor loop\u003C\u002Fstrong\u003E to cycle through response body list's values and checks if every value is a number.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESeems pretty easy to understand and code, huh?\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"running-tests\" href=\"#running-tests\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Running tests\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELet's get back to \u003Cstrong\u003Epackage.json\u003C\u002Fstrong\u003E file that is being stored in our project's root directory...\u003C\u002Fp\u003E\n\n\u003Cp\u003EFind \u003Ccode\u003Etest\u003C\u002Fcode\u003E key and replace it's \u003Ccode\u003Evalue\u003C\u002Fcode\u003E (\u003Cem\u003Enot key\u003C\u002Fem\u003E) with \u003Ccode\u003Enpx mocha src\u002Fspecs\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can add description and author values if you like, but that's not not necessary.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYour \u003Ccode\u003Epackage.json\u003C\u002Fcode\u003E file should look like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n  \"name\": \"mochapi\",\n  \"version\": \"1.0.0\",\n  \"description\": \"API test automation with Mocha and Axios\",\n  \"scripts\": {\n    \"test\": \"npx mocha src\u002Fspecs\"\n  },\n  \"keywords\": [],\n  \"author\": \"Dmitrii Bormotov\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"axios\": \"^0.21.0\",\n    \"chai\": \"^4.2.0\",\n    \"mocha\": \"^8.2.1\"\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, you can run your tests by simply executing command in console while in your project's root directory:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Enpm run test\u003C\u002Fcode\u003E or \u003Ccode\u003Enpm test\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter run completion, you'll see report like this:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1YWcZfrS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fto92ymjxwvfowdfyumr1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1YWcZfrS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fto92ymjxwvfowdfyumr1.png\" alt=\"Code_tRvTtwQQkA\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow you may consider yourself \u003Cem\u003EREST API\u003C\u002Fem\u003E test automator. :)\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks for reading, hope you've learned something new.\u003C\u002Fp\u003E\n\n",body_markdown:"Ahoy, mate!\n\nThis topic may be useful for beginners in Test Automation or those testers who works with other languages (_like Java or Python_) and new to **JavaScript** (_Node.js_).\n\nSource code of project from this article on **GitHub**: https:\u002F\u002Fgithub.com\u002Fbormando\u002Fmochapi\u002Ftree\u002Fmain\n\n#Tools\n**REST** (_**RE**presentational **S**tate **T**ransfer_) is an architectural style for providing standards between computer systems on the web, making it easier for systems to communicate with each other.\n\nThis is the one of most popular **API** architectures, so we're going to test one of it's creatures.\n\nFor minimal configuration we're going to need these:\n1. **Test runner**.\n\n    This tool allows us to define test scenarios and combine them into test suites. It also allows us to run these scenarios and suites. One of the most popular test runners for **Node.js** is **Mocha** - we'll use this one.\n\n2. **Assertion library**.\n\n    Assertion library is a set of assertions (_or expectations_) for our test scenarios. Test runners usually contains some basic assertions set, but we're going to include this one too so we could accustom beginners to these libraries, especially **Chai** (this is our choice for current article).\n\n3. **HTTP client**.\n\n    And this one makes **REST API** test automation possible. This is a tool that sends requests to **HTTP (API) server**. One of the most popular solutions in this area is **Axios** - this is our guy.\n\nWe'll also need [Postman](https:\u002F\u002Fwww.postman.com\u002F) or similar tool (_f.e. SoapUI, TestMace, Insomnia_) to send few requests manually.\n\nI use [Visual Studio Code](https:\u002F\u002Fcode.visualstudio.com\u002F) as IDE.\n\nAs an example of **REST API** server, we'll use public endpoint of crypto market **Bitfinex**:\n\n**GET** https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\n\n-----\n\n#Setup\n\nFirst of all, we'll need to create a project directory. After that, we must open it in **console** (_terminal in MacOS\u002FLinux or CMD\u002FPowerShell in Windows_) and execute command:\n\n`npm init -y`\n\nAfter this command execution you'll find **package.json** file in your project's root directory. This file contains your package info, we'll get back to it later.\n\nNext, we need to install dependencies (chosen tools from previous section):\n\n`npm i -D mocha chai axios`\n\nNow, when we have our package initialized and dependencies installed - we need to create files and folders structure...\n\nIn project's root directory we'll create **src** directory, and then **specs** as a subdirectory of **src**.\n\n* **src** is a primary place for our project's code,\n* **specs** contains test suites.\n\nIn **specs** directory we create **markets.test.js** file. Here we'll define our test scenarios.\n\nAt current state our project structure should look like this:\n\n![Code_BCgWQlQPsA](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frq9igtltmxf25ixnuimg.png)\n\n-----\n\n#Test cases\n\nLet's make a **GET** request to the **API** endpoint that we're testing: https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD\n\n![Postman_YbiqvDHkpH](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F075fjjs0qlhg1zdjjcme.png)\n\nAs we can see, the response body looks like this:\n\n```\n[\n    23003,\n    26.09947727,\n    23004,\n    32.433429860000004,\n    -948,\n    -0.0396,\n    23003,\n    13562.61526307,\n    24052.99388042,\n    21884\n]\n```\n\n**Response body** contains list of numbers and this structure won't change if you'll execute this request few more times, only values will (_since this pair is being traded without stop_).\n\nSo, we can define at least 3 test scenarios here:\n1. Status-code of response must be **200** (_OK_).\n2. Response body must contain list with length of 10 values (_nor more nor less_).\n3. Response body must contain list with number values only.\n\n-----\n\n#Coding\n\nFinally, we can start writing code to automate our test scenarios. First of all, we have to define our test suite - let's name it **'price data'**, since we're checking on **BTC\u002FUSD** pair on crypto market:\n\n```\ndescribe('price data', () =\u003E {\n    \u002F\u002F test scenarios and\u002For hooks\n});\n```\n\nPreviously, we have defined test scenarios for automation, so let's hold on for a second and think for something that they have in common. Of course, it's the data that they check on. So what can we do to not to duplicate our code (and not to execute a request in each test)? We'll use hooks (or actually, a hook)!\n\n```\nconst axios = require('axios');\n\ndescribe('price data', () =\u003E {\n    let data;\n\n    before(async () =\u003E {\n        await axios.get('https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD')\n            .then((response) =\u003E {\n                data = response;\n            });\n    });\n});\n```\n\nAs you can see, we've added **Axios** import into our test suite, so we could execute requests to our **API**.\n\nHook **'before'** is being executed before all the tests in our test suite, so we gather data using **Axios** and store it into data variable, that is defined just above the **'before'** hook.\n\nAlso, pay attention that **await** is used so we could wait for request to finish execution so we could continue. If you won't use await - you'll have **data** variable undefined in your tests.\n\nNext, we're going to add our three test scenarios and import **Chai** to check on assertions:\n\n```\nconst axios = require('axios');\nconst assert = require('chai').assert;\n\ndescribe('price data', () =\u003E {\n    let data;\n\n    before(async () =\u003E {\n        await axios.get('https:\u002F\u002Fapi-pub.bitfinex.com\u002Fv2\u002Fticker\u002FtBTCUSD')\n            .then((response) =\u003E {\n                data = response;\n            });\n    });\n\n    it('has 200 response code', () =\u003E {\n        assert.equal(data.status, 200, 'the response code is not 200');\n    });\n\n    it('contains 10 values', () =\u003E {\n        assert.equal(data.data.length, 10, 'number of values is not 10');\n    });\n\n    it('values should be numbers', () =\u003E {\n        for (const value of data.data) {\n            assert.isNumber(value, `value '${value}' is not a number`);\n        }\n    });\n});\n```\n\nFirst one simply checks if status field from our test data is **200**.\n\nSecond scenario gets length of response body's list and collates it with 10.\n\nThird and final case is using **for loop** to cycle through response body list's values and checks if every value is a number.\n\nSeems pretty easy to understand and code, huh?\n\n-----\n\n#Running tests\n\nLet's get back to **package.json** file that is being stored in our project's root directory...\n\nFind `test` key and replace it's `value` (_not key_) with `npx mocha src\u002Fspecs`.\n\nYou can add description and author values if you like, but that's not not necessary.\n\nYour `package.json` file should look like this:\n\n```\n{\n  \"name\": \"mochapi\",\n  \"version\": \"1.0.0\",\n  \"description\": \"API test automation with Mocha and Axios\",\n  \"scripts\": {\n    \"test\": \"npx mocha src\u002Fspecs\"\n  },\n  \"keywords\": [],\n  \"author\": \"Dmitrii Bormotov\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"axios\": \"^0.21.0\",\n    \"chai\": \"^4.2.0\",\n    \"mocha\": \"^8.2.1\"\n  }\n}\n```\n\nNow, you can run your tests by simply executing command in console while in your project's root directory:\n\n`npm run test` or `npm test`\n\nAfter run completion, you'll see report like this:\n\n![Code_tRvTtwQQkA](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fto92ymjxwvfowdfyumr1.png)\n\nNow you may consider yourself *REST API* test automator. :)\n\nThanks for reading, hope you've learned something new.",user:{name:"Dmitrii Bormotov",username:e,twitter_username:a,github_username:e,website_url:"https:\u002F\u002Fwww.autoqa.me",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yj6ruNRW--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F545185\u002F9e0edac9-8158-48f4-be6c-049aaaa7ca81.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vRY60oC7--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F545185\u002F9e0edac9-8158-48f4-be6c-049aaaa7ca81.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fbormando\u002F551957",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2020-12-24T19:07:55Z","https:\u002F\u002Fdev.to\u002Fbormando\u002Fminimal-rest-api-tests-in-node-js-2jde",15,"bormando"));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:658036,title:"REST API with Rust + Warp 1: Introduction",description:"There are a few good web framework options for Rust: actix, rocket, tide, warp... And they all offer...",readable_publish_date:"Apr 14",slug:"rest-api-with-rust-warp-1-introduction-342e",path:"\u002Frogertorres\u002Frest-api-with-rust-warp-1-introduction-342e",url:d,comments_count:0,public_reactions_count:e,collection_id:12179,published_timestamp:b,positive_reactions_count:e,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--uTv9Lom0--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc0klrylrxc5jge3g7bkh.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--g1DMLtbM--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc0klrylrxc5jge3g7bkh.jpg",canonical_url:d,created_at:"2021-04-07T17:30:56Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:4,tag_list:"rust, warp, rest, api",tags:["rust","warp","rest","api"],body_html:"\u003Cp\u003EThere are a few good web framework options for Rust: \u003Cstrong\u003Eactix\u003C\u002Fstrong\u003E, \u003Cstrong\u003Erocket\u003C\u002Fstrong\u003E, \u003Cstrong\u003Etide\u003C\u002Fstrong\u003E, \u003Cstrong\u003Ewarp\u003C\u002Fstrong\u003E... And they all offer some sort of trade-off; but instead of carefully analyzing these intricate aspects (as Luca did \u003Ca href=\"https:\u002F\u002Fwww.lpalmieri.com\u002Fposts\u002F2020-07-04-choosing-a-rust-web-framework-2020-edition\u002F\"\u003Ehere\u003C\u002Fa\u003E), you simply decided to go with the one that has an explicit reference to \u003Cem\u003EStart Trek\u003C\u002Fem\u003E, right? Not ideal, mafriend, not ideal... Will I blame you? No. You will get nothing but support from me.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd since you're already down this path, I think it might be a good idea for me to show you how I used \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fseanmonstar\u002Fwarp\"\u003E\u003Cem\u003Ewarp\u003C\u002Fem\u003E\u003C\u002Fa\u003E myself to create a REST API (for learning purposes, just like a holodeck battle). \u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003EPlease note\u003C\u002Fstrong\u003E that this is not a tutorial; this is me sharing a \u003Cem\u003Eprocess\u003C\u002Fem\u003E in the hopes that it can help you. Imagine you ask a friend to help you build something. This friend can either point you to the guides she someday used or show you how she actually went about it, not only sharing the code but explaining the \u003Cem\u003Ewhys\u003C\u002Fem\u003E and \u003Cem\u003Ehows\u003C\u002Fem\u003E. This text is a simulation of the latter. In other words, if examples like \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fseanmonstar\u002Fwarp\u002Ftree\u002Fmaster\u002Fexamples\"\u003Ethese\u003C\u002Fa\u003E are enough to get you going, considering using them instead of reading this somewhat long text (unless you are easily amused by Star Trek references and puns, then stay).\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EStill up for the ride? Great! Grab your Earl Gray tea (\u003Cem\u003Ehot!\u003C\u002Fem\u003E) and let's \u003Cstrong\u003Emake it so!\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"getting-started\" href=\"#getting-started\"\u003E\n  \u003C\u002Fa\u003E\n  Getting started\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFirst, the playground.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E$ cargo new --lib holodeck\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, there are (\u003Cem\u003Eat least\u003C\u002Fem\u003E) two ways to go about it. The first is to serve the API and test it via \u003Cem\u003Ecurl\u003C\u002Fem\u003E, as Bastian did \u003Ca href=\"https:\u002F\u002Fblog.logrocket.com\u002Fcreating-a-rest-api-in-rust-with-warp\u002F\"\u003Ehere\u003C\u002Fa\u003E; and for this, I would use a binary crate. The other way is to use \u003Cem\u003Ewarp\u003C\u002Fem\u003E's built-in test functionalities, for which I think it is best to get a library. As one of my main goals was to actually try \u003Cem\u003Ewarp\u003C\u002Fem\u003E's test module, I chose the second path.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI started by editing the \u003Ccode\u003ECargo.toml\u003C\u002Fcode\u003E file and adding two \u003Ca href=\"https:\u002F\u002Fdoc.rust-lang.org\u002Frust-by-example\u002Fcargo\u002Fdeps.html\"\u003Edependencies\u003C\u002Fa\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight toml\"\u003E\u003Ccode\u003E\u003Cspan class=\"nn\"\u003E[dependencies]\u003C\u002Fspan\u003E\n\u003Cspan class=\"nn\"\u003Etokio\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"py\"\u003Eversion\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"1\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"py\"\u003Efeatures\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003E[\"full\"]\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"py\"\u003Ewarp\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"0.3\"\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen I wrote a very simple test case. I chose to test a dull \u003Ccode\u003EGET\u003C\u002Fcode\u003E method. By dull I mean that it will not actually return any data, it will only [1] assume that there will be a mod called \u003Ccode\u003Efilters\u003C\u002Fcode\u003E where the filters will be added (filters are the dorsal spine of \u003Cem\u003Ewarp\u003C\u002Fem\u003E usage, as shown \u003Ca href=\"https:\u002F\u002Fdocs.rs\u002Fwarp\u002F0.3.1\u002Fwarp\u002Ftrait.Filter.html\"\u003Ehere\u003C\u002Fa\u003E); [2]; use the request to make make a \u003Ccode\u003EGET\u003C\u002Fcode\u003E on the path \u003Ccode\u003E\u002Fholodeck\u003C\u002Fcode\u003E using the assumed filters; [3] and finally compare the answer with the enum \u003Ccode\u003EStatusCode::ACCEPTED\u003C\u002Fcode\u003E. And because the whole thing is going to be asynchronous, the \u003Ccode\u003E#[tokio::test]\u003C\u002Fcode\u003E is needed.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E#[cfg(test)]\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Emod\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etests\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Ehttp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EStatusCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Etest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Esuper\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Efilters\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"nd\"\u003E#[tokio::test]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Etry_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eapi\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Efilters\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"k\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eresponse\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nf\"\u003E.method\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nf\"\u003E.path\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"\u002Fholodeck\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nf\"\u003E.reply\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&amp;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eapi\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n            \u003Cspan class=\"k\"\u003E.await\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"nd\"\u003Eassert_eq!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003E.status\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(),\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003EStatusCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EACCEPTED\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003EYou will notice that I chose not to write \u003Ccode\u003Euse super::filters::*\u003C\u002Fcode\u003E with the \u003Cstrong\u003E*\u003C\u002Fstrong\u003E, which would allow me to write things like \u003Ccode\u003Elist()\u003C\u002Fcode\u003E instead of \u003Ccode\u003Efilters::list()\u003C\u002Fcode\u003E; I did so because it makes it easier for me (and for you) to know \u003Cem\u003Ewhat\u003C\u002Fem\u003E is coming from \u003Cem\u003Ewhere\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EThen, I created the missing filter, which is designed to expect nothing but an empty \u003Ccode\u003EGET\u003C\u002Fcode\u003E and handle it over to what I call a \u003Cem\u003E\"Matthew McConaughey handler\"\u003C\u002Fem\u003E, because all it has to do is to say \u003Cem\u003E\u003Ca href=\"https:\u002F\u002Fyoutu.be\u002FDvi8P-lhJmE?t=6\"\u003Ealright, alright, alright\u003C\u002Fa\u003E\u003C\u002Fem\u003E (a.k.a. \u003Ccode\u003EStatusCode::ACCEPTED\u003C\u002Fcode\u003E).\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rust\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Emod\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Efilters\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EFilter\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Esuper\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehandlers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003E-&gt;\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Eimpl\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EFilter\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EExtract\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eimpl\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EReply\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EError\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ERejection\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EClone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \n        \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Epath!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"holodeck\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nf\"\u003E.and\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nf\"\u003Eget\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E())\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nf\"\u003E.and_then\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Ehandlers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehandle_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Emod\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehandlers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Ehttp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EStatusCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Euse\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Estd\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003Econvert\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EInfallible\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Epub\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efn\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Ehandle_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003E-&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EResult\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eimpl\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Ewarp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EReply\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EInfallible\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"c\"\u003E\u002F\u002F \"Alright, alright, alright\", Matthew said.\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nf\"\u003EOk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nn\"\u003EStatusCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E::\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EACCEPTED\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhy \u003Ccode\u003EInfallible\u003C\u002Fcode\u003E in the handler's Result? Because if something goes wrong (that's not coded yet), the problem will also be sent as Ok (e.g. \u003Ccode\u003EOk(StatusCode::BAD_GATEWAY)\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt might seem like a lot of wasted time, but let me tell you the benefits of doing this (and I'm not even going to get fancy with \u003Ca href=\"http:\u002F\u002Fcarol-nichols.com\u002F2015\u002F03\u002F28\u002Ftdd-example-in-rust\u002F\"\u003ETDD\u003C\u002Fa\u003E). For starters, sometimes (maybe \u003Cem\u003Eevery time\u003C\u002Fem\u003E) it is easier to know \u003Cem\u003Ewhat\u003C\u002Fem\u003E we wanna do than \u003Cem\u003Ehow\u003C\u002Fem\u003E we're \u003Cem\u003Esupposed\u003C\u002Fem\u003E to do it, and tests are a good way to force you to answer this \u003Cem\u003E\"what\"\u003C\u002Fem\u003E before jumping into the myriad of possible answers to the \u003Cem\u003E\"how\"\u003C\u002Fem\u003E question. Besides that, these baby steps allowed me to have a clear picture of which function was responsible for which task, who got to be async and who didn't, and so on.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E$ cargo test\n\nrunning 1 test\ntest tests::try_list ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIt worked; not much happened but worked nonetheless. \u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"in-the-next-episode-of-engaging-warp\" href=\"#in-the-next-episode-of-engaging-warp\"\u003E\n  \u003C\u002Fa\u003E\n  In the next episode of \u003Cstrong\u003E\u003Cem\u003EEngaging Warp\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E...\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe next step is to build the \u003Ccode\u003EPOST\u003C\u002Fcode\u003E method. That will require proper coding of both filters and handlers, as well as deserializing the JSON and storing it somewhere.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnyway, that's all for now. If I said something wrong or made things more complicated than they should be, let me know in the comments.\u003C\u002Fp\u003E\n\n\u003Cp\u003E🖖\u003C\u002Fp\u003E\n\n",body_markdown:"There are a few good web framework options for Rust: **actix**, **rocket**, **tide**, **warp**... And they all offer some sort of trade-off; but instead of carefully analyzing these intricate aspects (as Luca did [here](https:\u002F\u002Fwww.lpalmieri.com\u002Fposts\u002F2020-07-04-choosing-a-rust-web-framework-2020-edition\u002F)), you simply decided to go with the one that has an explicit reference to _Start Trek_, right? Not ideal, mafriend, not ideal... Will I blame you? No. You will get nothing but support from me.\n\nAnd since you're already down this path, I think it might be a good idea for me to show you how I used [_warp_](https:\u002F\u002Fgithub.com\u002Fseanmonstar\u002Fwarp) myself to create a REST API (for learning purposes, just like a holodeck battle). \n\n\u003E **Please note** that this is not a tutorial; this is me sharing a _process_ in the hopes that it can help you. Imagine you ask a friend to help you build something. This friend can either point you to the guides she someday used or show you how she actually went about it, not only sharing the code but explaining the _whys_ and _hows_. This text is a simulation of the latter. In other words, if examples like [these](https:\u002F\u002Fgithub.com\u002Fseanmonstar\u002Fwarp\u002Ftree\u002Fmaster\u002Fexamples) are enough to get you going, considering using them instead of reading this somewhat long text (unless you are easily amused by Star Trek references and puns, then stay).\n\nStill up for the ride? Great! Grab your Earl Gray tea (_hot!_) and let's **make it so!**\n\n------\n## Getting started\n\nFirst, the playground.\n\n```\n$ cargo new --lib holodeck\n```\n\nNow, there are (_at least_) two ways to go about it. The first is to serve the API and test it via _curl_, as Bastian did [here](https:\u002F\u002Fblog.logrocket.com\u002Fcreating-a-rest-api-in-rust-with-warp\u002F); and for this, I would use a binary crate. The other way is to use _warp_'s built-in test functionalities, for which I think it is best to get a library. As one of my main goals was to actually try _warp_'s test module, I chose the second path.\n\nI started by editing the `Cargo.toml` file and adding two [dependencies](https:\u002F\u002Fdoc.rust-lang.org\u002Frust-by-example\u002Fcargo\u002Fdeps.html).\n\n```toml\n[dependencies]\ntokio = { version = \"1\", features = [\"full\"] }\nwarp = \"0.3\"\n```\n\nThen I wrote a very simple test case. I chose to test a dull `GET` method. By dull I mean that it will not actually return any data, it will only [1] assume that there will be a mod called `filters` where the filters will be added (filters are the dorsal spine of _warp_ usage, as shown [here](https:\u002F\u002Fdocs.rs\u002Fwarp\u002F0.3.1\u002Fwarp\u002Ftrait.Filter.html)); [2]; use the request to make make a `GET` on the path `\u002Fholodeck` using the assumed filters; [3] and finally compare the answer with the enum `StatusCode::ACCEPTED`. And because the whole thing is going to be asynchronous, the `#[tokio::test]` is needed.\n\n```rust\n#[cfg(test)]\nmod tests {\n    use warp::http::StatusCode;\n    use warp::test::request;\n    use super::filters;\n\n    #[tokio::test]\n    async fn try_list() {\n        let api = filters::list();\n\n        let response = request()\n            .method(\"GET\")\n            .path(\"\u002Fholodeck\")\n            .reply(&api)\n            .await;\n\n        assert_eq!(response.status(), StatusCode::ACCEPTED);\n    }\n}\n```\n\n\u003E You will notice that I chose not to write `use super::filters::*` with the __*__, which would allow me to write things like `list()` instead of `filters::list()`; I did so because it makes it easier for me (and for you) to know _what_ is coming from _where_.\n\nThen, I created the missing filter, which is designed to expect nothing but an empty `GET` and handle it over to what I call a _\"Matthew McConaughey handler\"_, because all it has to do is to say _[alright, alright, alright](https:\u002F\u002Fyoutu.be\u002FDvi8P-lhJmE?t=6)_ (a.k.a. `StatusCode::ACCEPTED`).\n\n```rust\nmod filters{\n    use warp::Filter;\n    use super::handlers;\n\n    pub fn list() -\u003E  impl Filter\u003CExtract = impl warp::Reply, Error = warp::Rejection\u003E + Clone{ \n        warp::path!(\"holodeck\")\n            .and(warp::get())\n            .and_then(handlers::handle_list)\n    }\n}\n\nmod handlers{\n    use warp::http::StatusCode;\n    use std::convert::Infallible;\n\n    pub async fn handle_list() -\u003E Result\u003Cimpl warp::Reply, Infallible\u003E {\n        \u002F\u002F \"Alright, alright, alright\", Matthew said.\n        Ok(StatusCode::ACCEPTED)\n    }\n}\n```\n\nWhy `Infallible` in the handler's Result? Because if something goes wrong (that's not coded yet), the problem will also be sent as Ok (e.g. `Ok(StatusCode::BAD_GATEWAY)`).\n\nIt might seem like a lot of wasted time, but let me tell you the benefits of doing this (and I'm not even going to get fancy with [TDD](http:\u002F\u002Fcarol-nichols.com\u002F2015\u002F03\u002F28\u002Ftdd-example-in-rust\u002F)). For starters, sometimes (maybe _every time_) it is easier to know _what_ we wanna do than _how_ we're _supposed_ to do it, and tests are a good way to force you to answer this _\"what\"_ before jumping into the myriad of possible answers to the _\"how\"_ question. Besides that, these baby steps allowed me to have a clear picture of which function was responsible for which task, who got to be async and who didn't, and so on.\n\n```\n$ cargo test\n\nrunning 1 test\ntest tests::try_list ... ok\n\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n```\n\nIt worked; not much happened but worked nonetheless. \n\n-----\n\n## In the next episode of **_Engaging Warp_**...\n\nThe next step is to build the `POST` method. That will require proper coding of both filters and handlers, as well as deserializing the JSON and storing it somewhere.\n\nAnyway, that's all for now. If I said something wrong or made things more complicated than they should be, let me know in the comments.\n\n🖖",user:{name:"Roger Torres Paes (he\u002Fhim\u002Fele)",username:c,twitter_username:c,github_username:c,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gDSFsYfM--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F558604\u002Fa46b6174-1e4d-47a0-82b0-8aec5c0011f6.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KC5qAGoa--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F558604\u002Fa46b6174-1e4d-47a0-82b0-8aec5c0011f6.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Frogertorres\u002F658036",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-14T12:20:40Z","rogertorres","https:\u002F\u002Fdev.to\u002Frogertorres\u002Frest-api-with-rust-warp-1-introduction-342e",37));
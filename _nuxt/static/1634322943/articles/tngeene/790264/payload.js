__NUXT_JSONP__("/articles/tngeene/790264", (function(a,b,c){b.type_of="article";b.id=790264;b.title="AdonisJs - Installation and Database Setup";b.description="Now that you have all the requirements we need to be installed, let's set up the project.   If you're...";b.readable_publish_date="Aug 16";b.slug="part-2-installation-and-database-setup-3o0n";b.path="\u002Ftngeene\u002Fpart-2-installation-and-database-setup-3o0n";b.url="https:\u002F\u002Fdev.to\u002Ftngeene\u002Fpart-2-installation-and-database-setup-3o0n";b.comments_count=0;b.public_reactions_count=c;b.collection_id=14084;b.published_timestamp=a;b.positive_reactions_count=c;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--lGfasA3d--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb0e9dshpcd3f1oyivcuk.png";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Sxq7ebYJ--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb0e9dshpcd3f1oyivcuk.png";b.canonical_url="https:\u002F\u002Ftngeene.com\u002Fblog\u002Fseries\u002Feverything-you-need-to-know-about-adonisjs";b.created_at="2021-08-13T06:10:33Z";b.edited_at="2021-08-16T09:25:41Z";b.crossposted_at=null;b.published_at=a;b.last_comment_at=a;b.reading_time_minutes=6;b.tag_list="javascript, adonis, typescript, node";b.tags=["javascript","adonis","typescript","node"];b.body_html="\u003Cp\u003ENow that you have all the requirements we need to be installed, let's set up the project.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EIf you're having any problems setting up or installing the dependencies, feel free to leave a comment or shoot me a DM.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EWhat we'll be covering in this post.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Ca href=\"#create-a-new-project\"\u003ECreating a new project\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#adonis-project-structures\"\u003EAdonis Project Structures\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#vs-code-setup\"\u003EIDE Setup\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#starting-the-development-server\"\u003EStarting the Development Server\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#database-setup\"\u003EDatabase Setup\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"create-a-new-project\" href=\"#create-a-new-project\"\u003E\n  \u003C\u002Fa\u003E\n  Create a new project\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo initialize a new project, all we need is a simple command on the terminal.\u003Cbr\u003E\nSimply navigate to the directory you'd like the project to be located and type the following;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Enpm init adonis-ts-app fitit\u003C\u002Fcode\u003E or \u003Ccode\u003Eyarn create adonis-ts-app fitit\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's break down this command for context.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\n\u003Ccode\u003Enpm init\u003C\u002Fcode\u003E - this is simply initializing the project. Since we're using npm as the package manager, we use \u003Ccode\u003Enpm\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eadonis-ts-app\u003C\u002Fcode\u003E - we're initializing the project as a typescript project. If you wish not to use typescript and stick to vanilla JavaScript, you can use the \u003Ccode\u003Eadonis new fitit\u003C\u002Fcode\u003E. This would involve installing the adonis cli. For more details on this, head over to \u003Ca href=\"https:\u002F\u002Flegacy.adonisjs.com\u002Fdocs\u002F3.2\u002Fadonis-blog-part1#_creating_new_application\"\u003Ethis link.\u003C\u002Fa\u003E However, I recommend using the typescript version.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Efitit\u003C\u002Fcode\u003E - this is the name of the application.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EIn general, the general structure of creating a new Adonis application is\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm init adonis-ts-app &lt;project_name&gt;\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAfter you've typed the project initialization command, npm first installs the necessary adonis packages, which then prompts you to choose a preferred project structure.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GCoXAbNF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjhd6lkqz09ilulc1qljr.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GCoXAbNF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjhd6lkqz09ilulc1qljr.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjhd6lkqz09ilulc1qljr.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"adonis-project-structures\" href=\"#adonis-project-structures\"\u003E\n  \u003C\u002Fa\u003E\n  Adonis Project structures\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou can choose between one of the following project structures.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eweb project\u003C\u002Fcode\u003E structure is ideal for creating classic server-rendered applications. We configure the support for sessions and also install the AdonisJS template engine(edge). Also, the support for serving static files like images is provided.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eapi project\u003C\u002Fcode\u003E structure is ideal for creating an API server. This also configures the support for CORS.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eslim project\u003C\u002Fcode\u003E structure creates the smallest possible AdonisJS application and does not install any additional packages, except the framework core. This sort of allows for flexibility. It's up to the developer to build the application ground-up.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIt's worth noting that apart from some minor differences, the overall project structure is almost similar.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor this project, we'll be using the \u003Ccode\u003Eapi project\u003C\u002Fcode\u003E structure. The reason for this is that I'm mostly going to be using Adonis as an API server, which I'll then hook to a vue.js frontend.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EIf you're using vs code, the command prompt will ask for additional configurations. These are prettier and eslint-related. I advise using both formatters.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EAfter the project has been created, you'll get a message like this on the terminal.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UEwLZOfr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frx9s29si21l3kyrpyuxf.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UEwLZOfr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frx9s29si21l3kyrpyuxf.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frx9s29si21l3kyrpyuxf.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"vs-code-setup\" href=\"#vs-code-setup\"\u003E\n  \u003C\u002Fa\u003E\n  Vs Code Setup\n\u003C\u002Fh2\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EThis section is intended for anyone using vs code as their IDE. If you use any other IDE, you can skip over to the next section.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ESome extensions will make your adonis development easier in vs code. These are;\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=esbenp.prettier-vscode\"\u003EPrettier\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=dbaeumer.vscode-eslint\"\u003Eeslint\u003C\u002Fa\u003E - As I'd mentioned earlier you need to have prettier and eslint installed. This will be set up during the installation process.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=ms-vscode.vscode-typescript-next\"\u003EJavaScript and TypeScript Nightly\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=hridoy.adonisjs-snippets\"\u003EAdonis JS Snippets\u003C\u002Fa\u003E - provides insightful snippets.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=stef-k.adonis-js-goto-controller\"\u003EAdonis Js Go to controller\u003C\u002Fa\u003E will come in handy when we start working with routes.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"starting-the-development-server\" href=\"#starting-the-development-server\"\u003E\n  \u003C\u002Fa\u003E\n  Starting the Development server\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENavigate to the project directory and open it on your IDE now that the project has been created.\u003Cbr\u003E\nRun the following command to spin up your local development server\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Enode ace serve --watch\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zSPGunI8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpip6qxqqllqxdxv45hmj.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zSPGunI8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpip6qxqqllqxdxv45hmj.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpip6qxqqllqxdxv45hmj.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOpen up your browser, and visit \u003Ccode\u003Elocalhost:3333\u003C\u002Fcode\u003E. If you did everything right, then you should see a screen with \u003Ccode\u003Ehello world\u003C\u002Fcode\u003E text. Congratulations on setting up your first Adonis project! 🎉🎊\u003C\u002Fp\u003E\n\n\u003Cp\u003EFrom here, things start to get interesting, we'll set up the database but before we head there, you might be wondering what \u003Ccode\u003Enode ace serve --watch\u003C\u002Fcode\u003E is.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Eace\u003C\u002Fcode\u003E is a command-line framework that is embedded within your app. It allows you to create project-specific commands and run them using \u003Ccode\u003Enode ace\u003C\u002Fcode\u003E. We'll be using ace commands throughout the tutorial, each with it's own purpose. For a more detailed explanation on ace commands, head over to this \u003Ca href=\"https:\u002F\u002Fdev.to\u002Famanvirk1\u002Fintroducing-adonisjs-part-3-65k\"\u003Earticle\u003C\u002Fa\u003E by \u003Ca class=\"mentioned-user\" href=\"https:\u002F\u002Fdev.to\u002Famanvirk1\"\u003E@amanvirk1\u003C\u002Fa\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the above command, let's break down what it does.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EThe \u003Ccode\u003Eserve\u003C\u002Fcode\u003E command starts the HTTP server and performs an in-memory compilation of TypeScript to JavaScript.\u003C\u002Fli\u003E\n\u003Cli\u003EThe \u003Ccode\u003E-watch\u003C\u002Fcode\u003E flag is meant to watch the file system for changes and restart the server automatically(hot reload).\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"database-setup\" href=\"#database-setup\"\u003E\n  \u003C\u002Fa\u003E\n  Database Setup\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBefore we wind up, let's connect our application to a database.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EI'll assume that you have some knowledge of setting up Postgres or SQL databases and already have one on your computer. If this is not the case, you can use sqlite, which will be a file created on your machine once we start defining the database configuration.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EAdonisJS has first class support for SQL databases. The data layer of the framework is powered by Lucid(AdonisJs ORM) and the package must be installed separately.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESimply run \u003Ccode\u003Enpm i @adonisjs\u002Flucid\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EUpon successful installation, we'll configure our database driver and create a database. For this tutorial, I'll be using postgres. So my configs will be postgres-related. However, if you're using SQL, then use relevant configuration.\u003Cbr\u003E\nIf you choose sqlite, no configuration will be required.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce done, run\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enode ace configure @adonisjs\u002Flucid\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eor\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enode ace invoke @adonisjs\u002Flucid\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tAOchYRG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fa89rfw84vqrd02v4poy7.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tAOchYRG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fa89rfw84vqrd02v4poy7.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fa89rfw84vqrd02v4poy7.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe ace configure and invoke commands executes the instructions Javascript file exposed by the package.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESince I decided to go with postgres, I'll copy the code for validating the environment variables to the env.ts file.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--t8NKlST3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxd58875vcey8sokk2z9s.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--t8NKlST3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxd58875vcey8sokk2z9s.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxd58875vcey8sokk2z9s.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EEnvironment variables are injected from outside. The env.ts file validates that they type match and that the app is always running with the correct set of configuration values.\u003Cbr\u003E\nYour env.ts file should now look like this.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport Env from '@ioc:Adonis\u002FCore\u002FEnv'\n\nexport default Env.rules({\n  HOST: Env.schema.string({ format: 'host' }),\n  PORT: Env.schema.number(),\n  APP_KEY: Env.schema.string(),\n  APP_NAME: Env.schema.string(),\n  PG_HOST: Env.schema.string({ format: 'host' }),\n  PG_PORT: Env.schema.number(),\n  PG_USER: Env.schema.string(),\n  PG_PASSWORD: Env.schema.string.optional(),\n  PG_DB_NAME: Env.schema.string(),\n  NODE_ENV: Env.schema.enum(['development', 'production', 'testing'] as const),\n})\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EThe \u003Ccode\u003Econfig\u002Fdatabase.ts\u003C\u002Fcode\u003E file holds all the configuration related to the database. For more details on this, check out the \u003Ca href=\"https:\u002F\u002Fdocs.adonisjs.com\u002Fguides\u002Fdatabase\u002Fintroduction\"\u003Edocumentation.\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENext, we'll configure our database on postgres.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fxAY8Sol--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdj0r18jifd8bcx183qn0.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fxAY8Sol--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdj0r18jifd8bcx183qn0.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdj0r18jifd8bcx183qn0.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can name your database whatever name you wish.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFinally, go to your \u003Ccode\u003E.env\u003C\u002Fcode\u003E file and modify these values\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\nDB_CONNECTION=pg\nPG_HOST=localhost\nPG_PORT=5432\nPG_USER=postgres\nPG_PASSWORD=&lt;your_postgres_password&gt;\nPG_DB_NAME=&lt;your_db_name&gt;\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"testing-database-connection\" href=\"#testing-database-connection\"\u003E\n  \u003C\u002Fa\u003E\n  Testing Database connection.\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAdonis comes with a neat health checker that checks if the database connection is working.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENavigate to \u003Ccode\u003Estart\u002Froutes.ts\u003C\u002Fcode\u003E and paste the following code.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\nimport HealthCheck from '@ioc:Adonis\u002FCore\u002FHealthCheck'\nimport Route from '@ioc:Adonis\u002FCore\u002FRoute'\n\n\u002F\u002F check db connection\nRoute.get('health', async ({ response }) =&gt; {\n  const report = await HealthCheck.getReport()\n\n  return report.healthy ? response.ok(report) : response.badRequest(report)\n})\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWith your server still running, open a browser tab and type \u003Ccode\u003Elocalhost:3333\u002Fhealth\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf everything worked fine and your database is connected, it should display the following screen.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--w815TYZT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foprh8itnvqyzl8a1xx4f.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--w815TYZT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foprh8itnvqyzl8a1xx4f.png\" alt=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foprh8itnvqyzl8a1xx4f.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"closing-thoughts\" href=\"#closing-thoughts\"\u003E\n  \u003C\u002Fa\u003E\n  Closing Thoughts\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThank you for following along, if you like the content and would like to know more about Adonis Development, bookmark this series, head over to my \u003Ca href=\"https:\u002F\u002Ftngeene.com\u002F\"\u003Epersonal website\u003C\u002Fa\u003E or follow me on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002FNgeene_kihiu\"\u003ETwitter\u003C\u002Fa\u003E. You can also leave a comment in case you need any clarification or would like to point out an addition.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor the next piece, I'll be covering database models and relationships.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can also follow the series on my \u003Ca href=\"https:\u002F\u002Ftngeene.com\u002Fblog\u002Fseries\u002Feverything-you-need-to-know-about-adonisjs\"\u003Epersonal website.\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EStay tuned!\u003C\u002Fp\u003E\n\n";b.body_markdown="Now that you have all the requirements we need to be installed, let's set up the project.\n\n\u003E If you're having any problems setting up or installing the dependencies, feel free to leave a comment or shoot me a DM.\n\nWhat we'll be covering in this post.\n\n1. [Creating a new project](#create-a-new-project)\n2. [Adonis Project Structures](#adonis-project-structures)\n3. [IDE Setup](#vs-code-setup)\n4. [Starting the Development Server](#starting-the-development-server)\n5. [Database Setup](#database-setup)\n\n## Create a new project\n\nTo initialize a new project, all we need is a simple command on the terminal.\nSimply navigate to the directory you'd like the project to be located and type the following;\n\n`npm init adonis-ts-app fitit` or `yarn create adonis-ts-app fitit`\n\nLet's break down this command for context.\n\n1. `npm init` - this is simply initializing the project. Since we're using npm as the package manager, we use `npm`.\n2. `adonis-ts-app` - we're initializing the project as a typescript project. If you wish not to use typescript and stick to vanilla JavaScript, you can use the `adonis new fitit`. This would involve installing the adonis cli. For more details on this, head over to [this link.](https:\u002F\u002Flegacy.adonisjs.com\u002Fdocs\u002F3.2\u002Fadonis-blog-part1#_creating_new_application) However, I recommend using the typescript version.\n3. `fitit` - this is the name of the application.\n\nIn general, the general structure of creating a new Adonis application is\n\n```\nnpm init adonis-ts-app \u003Cproject_name\u003E\n\n```\n\nAfter you've typed the project initialization command, npm first installs the necessary adonis packages, which then prompts you to choose a preferred project structure.\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjhd6lkqz09ilulc1qljr.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjhd6lkqz09ilulc1qljr.png)\n\n## Adonis Project structures\n\nYou can choose between one of the following project structures.\n\n- `web project` structure is ideal for creating classic server-rendered applications. We configure the support for sessions and also install the AdonisJS template engine(edge). Also, the support for serving static files like images is provided.\n- `api project` structure is ideal for creating an API server. This also configures the support for CORS.\n- `slim project` structure creates the smallest possible AdonisJS application and does not install any additional packages, except the framework core. This sort of allows for flexibility. It's up to the developer to build the application ground-up.\n\nIt's worth noting that apart from some minor differences, the overall project structure is almost similar.\n\nFor this project, we'll be using the `api project` structure. The reason for this is that I'm mostly going to be using Adonis as an API server, which I'll then hook to a vue.js frontend.\n\n\u003E If you're using vs code, the command prompt will ask for additional configurations. These are prettier and eslint-related. I advise using both formatters.\n\nAfter the project has been created, you'll get a message like this on the terminal.\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frx9s29si21l3kyrpyuxf.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frx9s29si21l3kyrpyuxf.png)\n\n## Vs Code Setup\n\n\u003E This section is intended for anyone using vs code as their IDE. If you use any other IDE, you can skip over to the next section.\n\nSome extensions will make your adonis development easier in vs code. These are;\n\n1. [Prettier](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=esbenp.prettier-vscode) and [eslint](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=dbaeumer.vscode-eslint) - As I'd mentioned earlier you need to have prettier and eslint installed. This will be set up during the installation process.\n2. [JavaScript and TypeScript Nightly](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=ms-vscode.vscode-typescript-next)\n3. [Adonis JS Snippets](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=hridoy.adonisjs-snippets) - provides insightful snippets.\n4. [Adonis Js Go to controller](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=stef-k.adonis-js-goto-controller) will come in handy when we start working with routes.\n\n## Starting the Development server\n\nNavigate to the project directory and open it on your IDE now that the project has been created.\nRun the following command to spin up your local development server\n\n`node ace serve --watch`\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpip6qxqqllqxdxv45hmj.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fpip6qxqqllqxdxv45hmj.png)\n\nOpen up your browser, and visit `localhost:3333`. If you did everything right, then you should see a screen with `hello world` text. Congratulations on setting up your first Adonis project! 🎉🎊\n\nFrom here, things start to get interesting, we'll set up the database but before we head there, you might be wondering what `node ace serve --watch` is.\n\n`ace` is a command-line framework that is embedded within your app. It allows you to create project-specific commands and run them using `node ace`. We'll be using ace commands throughout the tutorial, each with it's own purpose. For a more detailed explanation on ace commands, head over to this [article](https:\u002F\u002Fdev.to\u002Famanvirk1\u002Fintroducing-adonisjs-part-3-65k) by @amanvirk1\n\nFor the above command, let's break down what it does.\n\n- The `serve` command starts the HTTP server and performs an in-memory compilation of TypeScript to JavaScript.\n- The `-watch` flag is meant to watch the file system for changes and restart the server automatically(hot reload).\n\n## Database Setup\n\nBefore we wind up, let's connect our application to a database.\n\n\u003E I'll assume that you have some knowledge of setting up Postgres or SQL databases and already have one on your computer. If this is not the case, you can use sqlite, which will be a file created on your machine once we start defining the database configuration.\n\nAdonisJS has first class support for SQL databases. The data layer of the framework is powered by Lucid(AdonisJs ORM) and the package must be installed separately.\n\nSimply run `npm i @adonisjs\u002Flucid`\n\nUpon successful installation, we'll configure our database driver and create a database. For this tutorial, I'll be using postgres. So my configs will be postgres-related. However, if you're using SQL, then use relevant configuration.\nIf you choose sqlite, no configuration will be required.\n\nOnce done, run\n\n```\nnode ace configure @adonisjs\u002Flucid\n\n```\n\nor\n\n```\nnode ace invoke @adonisjs\u002Flucid\n\n```\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fa89rfw84vqrd02v4poy7.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fa89rfw84vqrd02v4poy7.png)\n\nThe ace configure and invoke commands executes the instructions Javascript file exposed by the package.\n\nSince I decided to go with postgres, I'll copy the code for validating the environment variables to the env.ts file.\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxd58875vcey8sokk2z9s.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxd58875vcey8sokk2z9s.png)\n\n\u003E Environment variables are injected from outside. The env.ts file validates that they type match and that the app is always running with the correct set of configuration values.\nYour env.ts file should now look like this.\n\n```\nimport Env from '@ioc:Adonis\u002FCore\u002FEnv'\n\nexport default Env.rules({\n  HOST: Env.schema.string({ format: 'host' }),\n  PORT: Env.schema.number(),\n  APP_KEY: Env.schema.string(),\n  APP_NAME: Env.schema.string(),\n  PG_HOST: Env.schema.string({ format: 'host' }),\n  PG_PORT: Env.schema.number(),\n  PG_USER: Env.schema.string(),\n  PG_PASSWORD: Env.schema.string.optional(),\n  PG_DB_NAME: Env.schema.string(),\n  NODE_ENV: Env.schema.enum(['development', 'production', 'testing'] as const),\n})\n\n```\n\n- The `config\u002Fdatabase.ts` file holds all the configuration related to the database. For more details on this, check out the [documentation.](https:\u002F\u002Fdocs.adonisjs.com\u002Fguides\u002Fdatabase\u002Fintroduction)\n\nNext, we'll configure our database on postgres.\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdj0r18jifd8bcx183qn0.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdj0r18jifd8bcx183qn0.png)\n\nYou can name your database whatever name you wish.\n\nFinally, go to your `.env` file and modify these values\n\n```\n\nDB_CONNECTION=pg\nPG_HOST=localhost\nPG_PORT=5432\nPG_USER=postgres\nPG_PASSWORD=\u003Cyour_postgres_password\u003E\nPG_DB_NAME=\u003Cyour_db_name\u003E\n\n```\n\n## Testing Database connection.\n\nAdonis comes with a neat health checker that checks if the database connection is working.\n\nNavigate to `start\u002Froutes.ts` and paste the following code.\n\n```\n\nimport HealthCheck from '@ioc:Adonis\u002FCore\u002FHealthCheck'\nimport Route from '@ioc:Adonis\u002FCore\u002FRoute'\n\n\u002F\u002F check db connection\nRoute.get('health', async ({ response }) =\u003E {\n  const report = await HealthCheck.getReport()\n\n  return report.healthy ? response.ok(report) : response.badRequest(report)\n})\n\n```\n\nWith your server still running, open a browser tab and type `localhost:3333\u002Fhealth`\n\nIf everything worked fine and your database is connected, it should display the following screen.\n\n![https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foprh8itnvqyzl8a1xx4f.png](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foprh8itnvqyzl8a1xx4f.png)\n\n## Closing Thoughts\n\nThank you for following along, if you like the content and would like to know more about Adonis Development, bookmark this series, head over to my [personal website](https:\u002F\u002Ftngeene.com\u002F) or follow me on [Twitter](https:\u002F\u002Ftwitter.com\u002FNgeene_kihiu). You can also leave a comment in case you need any clarification or would like to point out an addition.\n\nFor the next piece, I'll be covering database models and relationships.\n\nYou can also follow the series on my [personal website.](https:\u002F\u002Ftngeene.com\u002Fblog\u002Fseries\u002Feverything-you-need-to-know-about-adonisjs)\n\nStay tuned!";b.user={name:"Ted Ngeene",username:"tngeene",twitter_username:"Ngeene_kihiu",github_username:"King-maker",website_url:"https:\u002F\u002Ftngeene.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CIlDFTl---\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F208322\u002F1df4df3d-c506-44de-8342-fe1fcc0a5ada.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DN9I6-8H--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F208322\u002F1df4df3d-c506-44de-8342-fe1fcc0a5ada.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}("2021-08-16T08:58:44Z",{},7)));
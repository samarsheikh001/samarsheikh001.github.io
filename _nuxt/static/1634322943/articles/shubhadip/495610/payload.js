__NUXT_JSONP__("/articles/shubhadip/495610", (function(a,b,c,d,e,f){c.type_of="article";c.id=495610;c.title="Component Library( Vue 3  + Rollup)";c.description="This is part2 of creating a component library using vue 3 and rollup.we will be building a r...";c.readable_publish_date="Oct 23 '20";c.slug="vue-3-component-library-270p";c.path="\u002Fshubhadip\u002Fvue-3-component-library-270p";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=9340;c.published_timestamp=a;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FKPYn7EX--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fkongb18kt0hhemss1jau.jpg";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wqLrqr4U--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fkongb18kt0hhemss1jau.jpg";c.canonical_url=d;c.created_at=a;c.edited_at="2020-10-23T11:52:58Z";c.crossposted_at=f;c.published_at=a;c.last_comment_at=a;c.reading_time_minutes=5;c.tag_list="vue3, library, rollup, javascript";c.tags=["vue3","library","rollup","javascript"];c.body_html="\u003Ch1\u003E\n  \u003Ca name=\"this-is-part2-of-creating-a-component-library-using-vue-3-and-rollupwe-will-be-building-a-rollup-configuration-so-that-we-can-build-our-library\" href=\"#this-is-part2-of-creating-a-component-library-using-vue-3-and-rollupwe-will-be-building-a-rollup-configuration-so-that-we-can-build-our-library\"\u003E\n  \u003C\u002Fa\u003E\n  This is part2 of creating a component library using vue 3 and rollup.we will be building a rollup configuration so that we can build our library.\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELets install few rollup libraries that we require\u003Cbr\u003E\n\u003Ccode\u003Eyarn add @babel\u002Fpreset-env@7.12.1 @rollup\u002Fplugin-alias@3.1.1 @rollup\u002Fplugin-babel@5.2.1 @rollup\u002Fplugin-commonjs@14.0.0 @rollup\u002Fplugin-image@2.0.5 @rollup\u002Fplugin-node-resolve@9.0.0 @rollup\u002Fplugin-replace@2.3.3 @rollup\u002Fplugin-url@5.0.1 \u003Cbr\u003E\nrollup@2.30.0 rollup-plugin-postcss@3.1.8 rollup-plugin-terser@7.0.2 rollup-plugin-vue@6.0.0-beta.10 rimraf@3.0.2 cross-env@7.0.2\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003Elets update our babel.config.js\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Emodule.exports = {\n  presets: [\n    \"@babel\u002Fpreset-env\"\n  ]\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Erollup-plugin-vue will be used to process vue templates and rollup-plugin-postcss with handle our postcss.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow that we have all our dependencies we can write our config.Lets create a rollup.config.js, first we will create a baseconfig which can be reused for different module system builds\u003C\u002Fp\u003E\n\n\u003Cp\u003ELets import all dependencies that we require\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport fs from 'fs';\nimport path from 'path';\nimport vue from 'rollup-plugin-vue';\nimport alias from '@rollup\u002Fplugin-alias';\nimport commonjs from '@rollup\u002Fplugin-commonjs';\nimport resolve from '@rollup\u002Fplugin-node-resolve';\nimport replace from '@rollup\u002Fplugin-replace';\nimport babel from '@rollup\u002Fplugin-babel';\nimport PostCSS from 'rollup-plugin-postcss';\nimport simplevars from 'postcss-simple-vars'\nimport postcssImport from 'postcss-import'\nimport minimist from 'minimist';\nimport postcssUrl from 'postcss-url'\nimport url from '@rollup\u002Fplugin-url'\nimport nested from 'postcss-nested'\nimport { terser } from 'rollup-plugin-terser'\nimport  autoprefixer  from 'autoprefixer\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Elets add a variable which we can use to identify which module are we going to build and our project root path:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst argv = minimist(process.argv.slice(2));\nconst projectRoot = path.resolve(__dirname, '.');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Ewe will be adding a script like this in package.json\u003Cbr\u003E\n\u003Ccode\u003E\"build:es\": \"rimraf dist &amp;&amp; cross-env NODE_ENV=production rollup --config rollup.config.js --format es\"\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELets create baseConfig now, baseconfig will have configuration realted to vue, it will deal with preVue, Vue, postVue and babelConfig.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst baseConfig = {\n  plugins: {\n    preVue: [\n      alias({\n        entries: [\n          {\n            find: '@',\n            replacement: `${path.resolve(projectRoot, 'src')}`,\n          },\n        ],\n        customResolver: resolve({\n          extensions: ['.js', '.jsx', '.vue'],\n        }),\n      }),\n    ],\n    replace: {\n      'process.env.NODE_ENV': JSON.stringify('production'),\n      __VUE_OPTIONS_API__: JSON.stringify(true),\n      __VUE_PROD_DEVTOOLS__: JSON.stringify(false),\n    },\n    vue: {\n      target: 'browser',\n      preprocessStyles: true,\n      postcssPlugins:[\n       ...postcssConfigList\n      ]\n    },\n    postVue: [\n      \u002F\u002F Process only `&lt;style module&gt;` blocks.\n      PostCSS({\n        modules: {\n          generateScopedName: '[local]___[hash:base64:5]',\n        },\n        include: \u002F&amp;module=.*\\.css$\u002F,\n      }),\n      \u002F\u002F Process all `&lt;style&gt;` blocks except `&lt;style module&gt;`.\n      PostCSS({ include: \u002F(?&lt;!&amp;module=.*)\\.css$\u002F,\n        plugins:[\n          ...postcssConfigList\n        ]\n       }),\n        url({\n          include: [\n            '**\u002F*.svg',\n            '**\u002F*.png',\n            '**\u002F*.gif',\n            '**\u002F*.jpg',\n            '**\u002F*.jpeg'\n          ]\n        }),\n    ],\n    babel: {\n      exclude: 'node_modules\u002F**',\n      extensions: ['.js', '.jsx', '.vue'],\n      babelHelpers: 'bundled',\n    },\n  },\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eabove config will be used to different builds we also have postconfig which is used in different places.\u003C\u002Fp\u003E\n\n\u003Cp\u003EbaseConfig.vue is the part which is utilized by rollup-plugin-vue to compiler our codebase and then different plugins act accordingly.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore we proceed further we will declare some globals and externals which is used by rollup to identify external dependency and global outputs.\u003Cbr\u003E\n\u003Ccode\u003Econst external = ['vue'];\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003Ccode\u003Econst globals = {  vue: 'Vue' };\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELets create a entry points for our projects, there will be one default entry point as src\u002Findex.js and different with each components index.js e.g components\u002Fhelloworld\u002Findex.js\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst baseFolder = '.\u002Fsrc\u002F'\nconst componentsFolder = 'components\u002F'\n\nconst components = fs\n  .readdirSync(baseFolder + componentsFolder)\n  .filter((f) =&gt;\n    fs.statSync(path.join(baseFolder + componentsFolder, f)).isDirectory()\n  )\n\nconst entriespath = {\n  index: '.\u002Fsrc\u002Findex.js',\n  ...components.reduce((obj, name) =&gt; {\n    obj[name] = (baseFolder + componentsFolder + name + '\u002Findex.js')\n    return obj\n  }, {})\n}\n\nconst capitalize = (s) =&gt; {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow that entry points are ready lets write the crux of the module bundlers.We will be using above mentioned \u003Ccode\u003Eargv\u003C\u002Fcode\u003E to identify which module build are we supposed to build.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELets start with esm build \u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E(argv === 'es')\u003Cbr\u003E\nconfiguration will be as follows :\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F Customize configs for individual targets\nlet buildFormats = [];\n\u002F\u002F this will hold our whole configuration object \n\nif (!argv.format || argv.format === 'es') {\n  const esConfig = {\n    input: entriespath,\n    external,\n    output: {\n        format: 'esm',\n        dir: 'dist\u002Fesm'\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel({\n        ...baseConfig.plugins.babel,\n        presets: [\n          [\n            '@babel\u002Fpreset-env',\n            { modules: false }\n          ],\n        ],\n      }),\n    ],\n  };\n\n  const merged = {\n    input: 'src\u002Findex.js',\n    external,\n    output: {\n      format: 'esm',\n      file: 'dist\u002Fvuelib.esm.js'\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel({\n        ...baseConfig.plugins.babel,\n        presets: [\n          [\n            '@babel\u002Fpreset-env',\n            { modules: false }\n          ],\n        ],\n      }),\n    ]\n  }\n  buildFormats.push(esConfig);\n  buildFormats.push(merged);\n}\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis sets up our configuration for esm builds. module (rollup, webpack) bundlers will pick this builds.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9HSe6fGZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsf8z0fjwemi56m6owjte.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9HSe6fGZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsf8z0fjwemi56m6owjte.png\" alt=\"ESM Build output\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith this we have a single build which has all our code and others are splitted chunks from esm\u002Findex.js.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAlso with this we can have treeshaking on project which uses library.\u003C\u002Fp\u003E\n\n\u003Cp\u003Ewith both components\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6_9sDrPW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fgnvgcc4l499y9shlblrm.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6_9sDrPW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fgnvgcc4l499y9shlblrm.jpg\" alt=\"With All Components\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is with only one component. \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XqLegEoD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F217ku8iylkm84br2ue2u.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XqLegEoD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F217ku8iylkm84br2ue2u.jpg\" alt=\"With Single Components\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnly the component which is included comes in the build.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow lets add other module configs:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\nif (!argv.format || argv.format === 'iife') {\n  const unpkgConfig = {\n    ...baseConfig,\n    input: '.\u002Fsrc\u002Findex.js',\n    external,\n    output: {\n      compact: true,\n      file: 'dist\u002Fvuelib-browser.min.js',\n      format: 'iife',\n      name: 'vuelib',\n      exports: 'named',\n      globals,\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel(baseConfig.plugins.babel),\n      terser({\n        output: {\n          ecma: 5,\n        },\n      }),\n    ],\n  };\n  buildFormats.push(unpkgConfig);\n}\n\nif (!argv.format || argv.format === 'cjs') {\n  const cjsConfig = {\n    ...baseConfig,\n    input: entriespath,\n    external,\n    output: {\n      compact: true,\n      format: 'cjs',\n      dir: 'dist\u002Fcjs',\n      exports: 'named',\n      globals,\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue({\n        ...baseConfig.plugins.vue,\n        template: {\n          ...baseConfig.plugins.vue.template,\n          optimizeSSR: true,\n        },\n      }),\n      ...baseConfig.plugins.postVue,\n      babel(baseConfig.plugins.babel),\n    ],\n  };\n  buildFormats.push(cjsConfig);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELets create individual build of each components i.e umd Builds\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst mapComponent = (name) =&gt; {\n    return [\n      {\n        input: baseFolder + componentsFolder + `${name}\u002Findex.js`,\n        external,\n        output: {\n          format: 'umd',\n          name: capitalize(name),\n          file: `dist\u002Fcomponents\u002F${name}\u002Findex.js`,\n          exports: 'named',\n          globals,\n        },\n        plugins: [\n          ...baseConfig.plugins.preVue,\n          vue({}),\n          ...baseConfig.plugins.postVue,\n          babel({\n            ...baseConfig.plugins.babel,\n            presets: [\n              [\n                '@babel\u002Fpreset-env',\n                { modules: false }\n              ],\n            ],\n          }),\n          commonjs(),\n        ]\n      }\n    ]\n  }\n\nconst ind = [...components.map((f) =&gt; mapComponent(f)).reduce((r, a) =&gt; r.concat(a), [])]\n\nbuildFormats = [...buildFormats, ...ind]\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow with all build formats done we can export our whole config\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eexport default buildFormats;\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELets make changes to our package.json\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E...\n\"main\": \"dist\u002Fcjs\u002Findex.js\",\n  \"module\": \"dist\u002Fesm\u002Findex.js\",\n  \"unpkg\": \"dist\u002Fvuelib.min.js\",\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"sideEffects\": [\n    \"*.css\",\n    \"*.scss\"\n  ],\n \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\",\n    \"build:es\": \"rimraf dist &amp;&amp; cross-env NODE_ENV=production rollup --config rollup.config.js --format es\",\n    \"build:js\": \"rimraf dist &amp;&amp; cross-env NODE_ENV=production rollup --config rollup.config.js\"\n  },\n\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Ewith this each project will be correctly pick formats they need. commonjs projects will pick cjs folder and webpack or rollup ones will pic esm folder.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VQJzI-eE--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffi38caukaqjsa3mnvqac.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VQJzI-eE--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffi38caukaqjsa3mnvqac.png\" alt=\"dist folder after all builds\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith this configuration we can build our library. We have added treeshaking and postcss preprocessors to our library.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ENote: we have inlined the css on the components directly in case we need css in different files e.g bundle.css we need to use plugins like rollup-plugin-scss, rollup-plugin-css-only.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ESo, we have created vue 3 components library with rollup and postcss and it has treeshaking capability.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECode related to this article is available on \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fshubhadip\u002Fvue3-component-library\"\u003EGithub\u003C\u002Fa\u003E \u003C\u002Fp\u003E\n\n";c.body_markdown="#This is part2 of creating a component library using vue 3 and rollup.we will be building a rollup configuration so that we can build our library.\n\nLets install few rollup libraries that we require\n`yarn add @babel\u002Fpreset-env@7.12.1 @rollup\u002Fplugin-alias@3.1.1 @rollup\u002Fplugin-babel@5.2.1 @rollup\u002Fplugin-commonjs@14.0.0 @rollup\u002Fplugin-image@2.0.5 @rollup\u002Fplugin-node-resolve@9.0.0 @rollup\u002Fplugin-replace@2.3.3 @rollup\u002Fplugin-url@5.0.1 \nrollup@2.30.0 rollup-plugin-postcss@3.1.8 rollup-plugin-terser@7.0.2 rollup-plugin-vue@6.0.0-beta.10 rimraf@3.0.2 cross-env@7.0.2 `\n\nlets update our babel.config.js\n```\nmodule.exports = {\n  presets: [\n    \"@babel\u002Fpreset-env\"\n  ]\n}\n```\n\nrollup-plugin-vue will be used to process vue templates and rollup-plugin-postcss with handle our postcss.\n\nNow that we have all our dependencies we can write our config.Lets create a rollup.config.js, first we will create a baseconfig which can be reused for different module system builds\n\nLets import all dependencies that we require \n```\nimport fs from 'fs';\nimport path from 'path';\nimport vue from 'rollup-plugin-vue';\nimport alias from '@rollup\u002Fplugin-alias';\nimport commonjs from '@rollup\u002Fplugin-commonjs';\nimport resolve from '@rollup\u002Fplugin-node-resolve';\nimport replace from '@rollup\u002Fplugin-replace';\nimport babel from '@rollup\u002Fplugin-babel';\nimport PostCSS from 'rollup-plugin-postcss';\nimport simplevars from 'postcss-simple-vars'\nimport postcssImport from 'postcss-import'\nimport minimist from 'minimist';\nimport postcssUrl from 'postcss-url'\nimport url from '@rollup\u002Fplugin-url'\nimport nested from 'postcss-nested'\nimport { terser } from 'rollup-plugin-terser'\nimport  autoprefixer  from 'autoprefixer\n\n```\nlets add a variable which we can use to identify which module are we going to build and our project root path:\n\n```\nconst argv = minimist(process.argv.slice(2));\nconst projectRoot = path.resolve(__dirname, '.');\n```\nwe will be adding a script like this in package.json\n`\"build:es\": \"rimraf dist && cross-env NODE_ENV=production rollup --config rollup.config.js --format es\"`\n\n\nLets create baseConfig now, baseconfig will have configuration realted to vue, it will deal with preVue, Vue, postVue and babelConfig.\n\n```\nconst baseConfig = {\n  plugins: {\n    preVue: [\n      alias({\n        entries: [\n          {\n            find: '@',\n            replacement: `${path.resolve(projectRoot, 'src')}`,\n          },\n        ],\n        customResolver: resolve({\n          extensions: ['.js', '.jsx', '.vue'],\n        }),\n      }),\n    ],\n    replace: {\n      'process.env.NODE_ENV': JSON.stringify('production'),\n      __VUE_OPTIONS_API__: JSON.stringify(true),\n      __VUE_PROD_DEVTOOLS__: JSON.stringify(false),\n    },\n    vue: {\n      target: 'browser',\n      preprocessStyles: true,\n      postcssPlugins:[\n       ...postcssConfigList\n      ]\n    },\n    postVue: [\n      \u002F\u002F Process only `\u003Cstyle module\u003E` blocks.\n      PostCSS({\n        modules: {\n          generateScopedName: '[local]___[hash:base64:5]',\n        },\n        include: \u002F&module=.*\\.css$\u002F,\n      }),\n      \u002F\u002F Process all `\u003Cstyle\u003E` blocks except `\u003Cstyle module\u003E`.\n      PostCSS({ include: \u002F(?\u003C!&module=.*)\\.css$\u002F,\n        plugins:[\n          ...postcssConfigList\n        ]\n       }),\n        url({\n          include: [\n            '**\u002F*.svg',\n            '**\u002F*.png',\n            '**\u002F*.gif',\n            '**\u002F*.jpg',\n            '**\u002F*.jpeg'\n          ]\n        }),\n    ],\n    babel: {\n      exclude: 'node_modules\u002F**',\n      extensions: ['.js', '.jsx', '.vue'],\n      babelHelpers: 'bundled',\n    },\n  },\n};\n```\nabove config will be used to different builds we also have postconfig which is used in different places.\n\nbaseConfig.vue is the part which is utilized by rollup-plugin-vue to compiler our codebase and then different plugins act accordingly.\n\nBefore we proceed further we will declare some globals and externals which is used by rollup to identify external dependency and global outputs.\n`const external = ['vue'];`\n`const globals = {  vue: 'Vue' };`\n\nLets create a entry points for our projects, there will be one default entry point as src\u002Findex.js and different with each components index.js e.g components\u002Fhelloworld\u002Findex.js\n\n```\nconst baseFolder = '.\u002Fsrc\u002F'\nconst componentsFolder = 'components\u002F'\n\nconst components = fs\n  .readdirSync(baseFolder + componentsFolder)\n  .filter((f) =\u003E\n    fs.statSync(path.join(baseFolder + componentsFolder, f)).isDirectory()\n  )\n\nconst entriespath = {\n  index: '.\u002Fsrc\u002Findex.js',\n  ...components.reduce((obj, name) =\u003E {\n    obj[name] = (baseFolder + componentsFolder + name + '\u002Findex.js')\n    return obj\n  }, {})\n}\n\nconst capitalize = (s) =\u003E {\n  if (typeof s !== 'string') return ''\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n```\nNow that entry points are ready lets write the crux of the module bundlers.We will be using above mentioned `argv` to identify which module build are we supposed to build.\n\nLets start with esm build \n\u003E(argv === 'es')\nconfiguration will be as follows :\n\n```\n\u002F\u002F Customize configs for individual targets\nlet buildFormats = [];\n\u002F\u002F this will hold our whole configuration object \n\nif (!argv.format || argv.format === 'es') {\n  const esConfig = {\n    input: entriespath,\n    external,\n    output: {\n        format: 'esm',\n        dir: 'dist\u002Fesm'\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel({\n        ...baseConfig.plugins.babel,\n        presets: [\n          [\n            '@babel\u002Fpreset-env',\n            { modules: false }\n          ],\n        ],\n      }),\n    ],\n  };\n\n  const merged = {\n    input: 'src\u002Findex.js',\n    external,\n    output: {\n      format: 'esm',\n      file: 'dist\u002Fvuelib.esm.js'\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel({\n        ...baseConfig.plugins.babel,\n        presets: [\n          [\n            '@babel\u002Fpreset-env',\n            { modules: false }\n          ],\n        ],\n      }),\n    ]\n  }\n  buildFormats.push(esConfig);\n  buildFormats.push(merged);\n}\n\n```\nThis sets up our configuration for esm builds. module (rollup, webpack) bundlers will pick this builds.\n\n![ESM Build output](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fsf8z0fjwemi56m6owjte.png)\n\nWith this we have a single build which has all our code and others are splitted chunks from esm\u002Findex.js.\n\nAlso with this we can have treeshaking on project which uses library.\n\nwith both components\n![With All Components](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fgnvgcc4l499y9shlblrm.jpg)\n\nThis is with only one component. \n![With Single Components](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F217ku8iylkm84br2ue2u.jpg)\n\nOnly the component which is included comes in the build.\n\nNow lets add other module configs:\n```\n\nif (!argv.format || argv.format === 'iife') {\n  const unpkgConfig = {\n    ...baseConfig,\n    input: '.\u002Fsrc\u002Findex.js',\n    external,\n    output: {\n      compact: true,\n      file: 'dist\u002Fvuelib-browser.min.js',\n      format: 'iife',\n      name: 'vuelib',\n      exports: 'named',\n      globals,\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue(baseConfig.plugins.vue),\n      ...baseConfig.plugins.postVue,\n      babel(baseConfig.plugins.babel),\n      terser({\n        output: {\n          ecma: 5,\n        },\n      }),\n    ],\n  };\n  buildFormats.push(unpkgConfig);\n}\n\nif (!argv.format || argv.format === 'cjs') {\n  const cjsConfig = {\n    ...baseConfig,\n    input: entriespath,\n    external,\n    output: {\n      compact: true,\n      format: 'cjs',\n      dir: 'dist\u002Fcjs',\n      exports: 'named',\n      globals,\n    },\n    plugins: [\n      commonjs(),\n      replace(baseConfig.plugins.replace),\n      ...baseConfig.plugins.preVue,\n      vue({\n        ...baseConfig.plugins.vue,\n        template: {\n          ...baseConfig.plugins.vue.template,\n          optimizeSSR: true,\n        },\n      }),\n      ...baseConfig.plugins.postVue,\n      babel(baseConfig.plugins.babel),\n    ],\n  };\n  buildFormats.push(cjsConfig);\n}\n```\n\nLets create individual build of each components i.e umd Builds\n\n```\nconst mapComponent = (name) =\u003E {\n    return [\n      {\n        input: baseFolder + componentsFolder + `${name}\u002Findex.js`,\n        external,\n        output: {\n          format: 'umd',\n          name: capitalize(name),\n          file: `dist\u002Fcomponents\u002F${name}\u002Findex.js`,\n          exports: 'named',\n          globals,\n        },\n        plugins: [\n          ...baseConfig.plugins.preVue,\n          vue({}),\n          ...baseConfig.plugins.postVue,\n          babel({\n            ...baseConfig.plugins.babel,\n            presets: [\n              [\n                '@babel\u002Fpreset-env',\n                { modules: false }\n              ],\n            ],\n          }),\n          commonjs(),\n        ]\n      }\n    ]\n  }\n\nconst ind = [...components.map((f) =\u003E mapComponent(f)).reduce((r, a) =\u003E r.concat(a), [])]\n\nbuildFormats = [...buildFormats, ...ind]\n```\n\nNow with all build formats done we can export our whole config \n\n```\nexport default buildFormats;\n\n```\n\nLets make changes to our package.json \n```\n...\n\"main\": \"dist\u002Fcjs\u002Findex.js\",\n  \"module\": \"dist\u002Fesm\u002Findex.js\",\n  \"unpkg\": \"dist\u002Fvuelib.min.js\",\n  \"files\": [\n    \"dist\",\n    \"src\"\n  ],\n  \"sideEffects\": [\n    \"*.css\",\n    \"*.scss\"\n  ],\n \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"vue-cli-service build\",\n    \"lint\": \"vue-cli-service lint\",\n    \"build:es\": \"rimraf dist && cross-env NODE_ENV=production rollup --config rollup.config.js --format es\",\n    \"build:js\": \"rimraf dist && cross-env NODE_ENV=production rollup --config rollup.config.js\"\n  },\n \n...\n```\n\nwith this each project will be correctly pick formats they need. commonjs projects will pick cjs folder and webpack or rollup ones will pic esm folder.\n\n![dist folder after all builds](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffi38caukaqjsa3mnvqac.png)\n\nWith this configuration we can build our library. We have added treeshaking and postcss preprocessors to our library.\n\n\u003E Note: we have inlined the css on the components directly in case we need css in different files e.g bundle.css we need to use plugins like rollup-plugin-scss, rollup-plugin-css-only.\n\nSo, we have created vue 3 components library with rollup and postcss and it has treeshaking capability.\n\nCode related to this article is available on [Github](https:\u002F\u002Fgithub.com\u002Fshubhadip\u002Fvue3-component-library) \n";c.user={name:b,username:b,twitter_username:f,github_username:b,website_url:"https:\u002F\u002Fshubh-portfolio.herokuapp.com\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--sgU0SFj2--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F466678\u002Fcf2c0121-305d-401a-b6f3-339f1fe9fccf.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FHHCfu9r--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F466678\u002Fcf2c0121-305d-401a-b6f3-339f1fe9fccf.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}("2020-10-23T10:34:49Z","shubhadip",{},"https:\u002F\u002Fdev.to\u002Fshubhadip\u002Fvue-3-component-library-270p",25,null)));
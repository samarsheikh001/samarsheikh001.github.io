window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:639706,title:"Closing dialogs by going back",description:"As developers, we are responsible for a lot of things when building an application. In addition to...",readable_publish_date:"Mar 19",slug:"closing-dialogs-by-going-back-46pe",path:"\u002Fmaikmichel\u002Fclosing-dialogs-by-going-back-46pe",url:b,comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F639706.png",canonical_url:b,created_at:"2021-03-19T16:59:30Z",edited_at:a,crossposted_at:d,published_at:e,last_comment_at:e,reading_time_minutes:2,tag_list:"apex, oracle, orclapex, javascript",tags:["apex","oracle","orclapex","javascript"],body_html:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8y9gjSO4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fkelly-sikkema-v9FQR4tbIq8-unsplash.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8y9gjSO4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fkelly-sikkema-v9FQR4tbIq8-unsplash.jpg\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs developers, we are responsible for a lot of things when building an application. In addition to the actual business logic, the application must also look good and, above all, it must feel good. By feel, I mean the flow and the ease with which the application is operated. APEX already offers a lot of possibilities out of the box. Those possibilities have to be placed consciously and may be enriched with \"LowCode\", too, of course.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--F5wx3VTz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-without-backnavi.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--F5wx3VTz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-without-backnavi.gif\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne point that I think needs to be adjusted is the way you act with modal dialogs. Especially when using a mobile, exactly one point always catches my eye. And that is navigating back from a modal dialog. The user, especially in case of Android-devices, is used to navigate back from a view by means of back-button. Precisely because APEX is responsive, many apps are also used on mobile devices. But if you want to navigate back, you will be navigated back to the previous parent page. That is not nice.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFortunately, browsers provide us with an API to help us with this issue. With window.history.pushState we can add an entry to the browser's navigation stack and let the popstate event of the window object inform us that the user pressed the back button or that the history.back() event was triggered.   \u003C\u002Fp\u003E\n\n\u003Cp\u003EThat is, whenever a ModalDialog opens, we put a new entry in the browser's history. When the back navigation event occurs, we close the ModalDialog. When closing ModalDialog manually, we will go back one step in history.   \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat does the whole thing look like in APEX. Calling page resp. global page needs following 3 methods.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F triggered when closing modal dialog\nfunction customOnCloseEvent(event, data){\n  hideModal();\n\n  if (history.state == 'popup-open') {\n     window.history.back();\n  }\n}\n\n\u002F\u002F triggered on load of the modal dialog\nfunction registerModal(pPageID) {\n window.history.pushState('popup-open', null, '');\n\n apex.jQuery(window).on('popstate', hideModal);    \n}\n\n\u002F\u002F called when history.back() is triggered\nfunction hideModal() {\n  \u002F\u002F close modal\n  if (apex.jQuery('.ui-dialog-content &gt; iframe')[0]) {\n     apex.jQuery('.ui-dialog-content &gt; iframe')[0]\n                .contentWindow.apex.navigation.dialog.cancel(true);\n  }\n\n  \u002F\u002F unregister function call \n  apex.jQuery(window).off('popstate', hideModal);\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn addition, we register the method customDialogClose, which should always be triggered when a dialog is closed.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eclose: function() { customOnCloseEvent('customDialogClose', {modalPageId: 5});}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AthFPIBj--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-dlg-attributes.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AthFPIBj--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-dlg-attributes.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen loading the page, the following function must be called:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Ewindow.parent.registerModal('5');\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs----x28c4X--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-javascript-attributes.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs----x28c4X--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-javascript-attributes.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThat's it.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zryWy5m3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-with-backnavi.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zryWy5m3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-with-backnavi.gif\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Closing dialogs by going back\npublished: true\ndate: 2021-03-19 16:48:03 UTC\ntags: APEX,Oracle,ORCLAPEX,Javascript\ncanonical_url: \n---\n\n ![](https:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fkelly-sikkema-v9FQR4tbIq8-unsplash.jpg)\n\nAs developers, we are responsible for a lot of things when building an application. In addition to the actual business logic, the application must also look good and, above all, it must feel good. By feel, I mean the flow and the ease with which the application is operated. APEX already offers a lot of possibilities out of the box. Those possibilities have to be placed consciously and may be enriched with \"LowCode\", too, of course.\n\n![](https:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-without-backnavi.gif)\n\nOne point that I think needs to be adjusted is the way you act with modal dialogs. Especially when using a mobile, exactly one point always catches my eye. And that is navigating back from a modal dialog. The user, especially in case of Android-devices, is used to navigate back from a view by means of back-button. Precisely because APEX is responsive, many apps are also used on mobile devices. But if you want to navigate back, you will be navigated back to the previous parent page. That is not nice.\n\nFortunately, browsers provide us with an API to help us with this issue. With window.history.pushState we can add an entry to the browser's navigation stack and let the popstate event of the window object inform us that the user pressed the back button or that the history.back() event was triggered.   \n  \nThat is, whenever a ModalDialog opens, we put a new entry in the browser's history. When the back navigation event occurs, we close the ModalDialog. When closing ModalDialog manually, we will go back one step in history.   \n  \nWhat does the whole thing look like in APEX. Calling page resp. global page needs following 3 methods.\n\n```\n\u002F\u002F triggered when closing modal dialog\nfunction customOnCloseEvent(event, data){\n  hideModal();\n\n  if (history.state == 'popup-open') {\n     window.history.back();\n  }\n}\n\n\u002F\u002F triggered on load of the modal dialog\nfunction registerModal(pPageID) {\n window.history.pushState('popup-open', null, '');\n \n apex.jQuery(window).on('popstate', hideModal);    \n}\n\n\u002F\u002F called when history.back() is triggered\nfunction hideModal() {\n  \u002F\u002F close modal\n  if (apex.jQuery('.ui-dialog-content \u003E iframe')[0]) {\n     apex.jQuery('.ui-dialog-content \u003E iframe')[0]\n\t\t\t\t.contentWindow.apex.navigation.dialog.cancel(true);\n  }\n\n  \u002F\u002F unregister function call \n  apex.jQuery(window).off('popstate', hideModal);\n}\n```\n\nIn addition, we register the method customDialogClose, which should always be triggered when a dialog is closed.\n\n```\nclose: function() { customOnCloseEvent('customDialogClose', {modalPageId: 5});}\n```\n\n![](https:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-dlg-attributes.png)\n\nWhen loading the page, the following function must be called:\n\n```\nwindow.parent.registerModal('5');\n```\n\n![](https:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Fapex-bagebuilder-javascript-attributes.png)\n\nThat's it.\n\n![](https:\u002F\u002Fmicodify.de\u002Fmedia\u002Fposts\u002F22\u002Femployees-with-backnavi.gif)",user:{name:"Maik Michel",username:"maikmichel",twitter_username:"Maik__Michel",github_username:"MaikMichel",website_url:"https:\u002F\u002Fmicodify.de",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PkXOj-th--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F310147\u002F510230bf-3c00-443e-9854-22952f04825f.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iAWFcZej--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F310147\u002F510230bf-3c00-443e-9854-22952f04825f.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmaikmichel\u002F639706",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fmaikmichel\u002Fclosing-dialogs-by-going-back-46pe",6,"2021-03-19T16:59:58Z","2021-03-19T16:48:03Z"));
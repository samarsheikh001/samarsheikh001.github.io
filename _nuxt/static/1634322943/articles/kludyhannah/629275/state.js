window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:629275,title:"How We Built and Use Runbook Documentation at Blameless",description:"By: Alicia Li and Lucas Bartroli  Originally published on Failure is Inevitable.           Why runboo...",readable_publish_date:"Mar 8",slug:"how-we-built-and-use-runbook-documentation-at-blameless-47ea",path:"\u002Fblameless\u002Fhow-we-built-and-use-runbook-documentation-at-blameless-47ea",url:c,comments_count:2,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NJVJ1DZ0--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhjpeq1fwfgrpp78urys6.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mXnKGp0k--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhjpeq1fwfgrpp78urys6.png",canonical_url:c,created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:"2021-03-09T16:05:58Z",reading_time_minutes:5,tag_list:"sre, devops",tags:["sre","devops"],body_html:"\u003Cp\u003EBy: Alicia Li and Lucas Bartroli\u003C\u002Fp\u003E\n\n\u003Cp\u003EOriginally published on \u003Ca href=\"https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Fhow-we-built-and-use-runbook-documentation-at-blameless\"\u003EFailure is Inevitable\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"why-runbooks-are-important-to-a-fully-developed-sre-strategy\" href=\"#why-runbooks-are-important-to-a-fully-developed-sre-strategy\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Why runbooks are important to a fully developed SRE strategy\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EEven if you don’t notice, you are executing runbooks everyday, all the time.\u003C\u002Fstrong\u003E When you have an incident in your day-to-day operations, you follow a series of ordered and connected steps to solve it. For instance, if you lose your internet connection, you will follow a series of steps to resolve that issue:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECheck if you’re still connected to the WiFi network.\u003C\u002Fli\u003E\n\u003Cli\u003ECheck for the router status.\u003C\u002Fli\u003E\n\u003Cli\u003ETry to restart the router.\u003C\u002Fli\u003E\n\u003Cli\u003ECheck if connection is back.\u003C\u002Fli\u003E\n\u003Cli\u003EIn case connection is not back, call the internet provider.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EThis could be different depending on your method, but you have the idea. Even if you don’t write it down because it is not a complex process, you’re still executing a runbook to achieve a goal or resolve an incident. However, within a more complex socio-technical environment, it becomes crucial to document your runbooks and codify your knowledge.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESRE and engineering teams need a tool to write and store their runbooks because incidents can be way more complex than the one in the above example. Incidents can involve collaboration between different teams, code execution, reuse of metadata across different steps (tokens, names, password, etc), conditional actions based on the result of a step execution, and more. Or teams may just need to write down a personal experience from an edge case they encountered while resolving an incident, which can help others if it happens again in the future.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMost runbooks focus on incident mitigation. However, sometimes the response depends on knowing the cause of the incident first. It is easy to overlook the role a runbook can potentially play in determining a contributing factor of an incident. Instead of a single, large runbook that tries to deal with multiple situations, we recommend breaking it down into multiple runbooks focused on doing one thing well. \u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, imagine your internet isn’t working. There could be multiple reasons why you cannot connect. Your computer might have suffered a hardware failure, the modem might fail, you might be connected to the wrong network, or simply at a place where signal strength isn’t strong enough. Some of these issues might require their own runbooks. You can have an overarching runbook to determine the cause which links to one or more runbooks that can help fix an individual issue.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWell-written runbooks should be clearly broken down into different steps. For each step, in addition to clearly indicating what needs to be done, it’s also helpful to include some context to explain why this step is taken. This helps new engineers onboard quickly and limits \u003Cem\u003Etribal knowledge\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"migrating-runbooks-to-a-central-repository\" href=\"#migrating-runbooks-to-a-central-repository\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Migrating runbooks to a central repository\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ERunbooks are only helpful if everyone can find them. If your runbooks are scattered across Confluence, Google Docs, or even stored locally on a laptop, they can be difficult to locate when you need them the most. We dealt with a similar problem here at Blameless. So, our team began dogfooding Runbook Documentation for our own runbooks. Here’s what we found the most useful.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMigrating our runbooks to Blameless was a very easy task. We used to have all our runbooks in Confluence, broken down by steps. Runbook Documents currently support 4 types of steps (and we plan to add even more). These are the steps we most commonly use within our own runbooks and they include:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EText Blocks:\u003C\u002Fstrong\u003E Log and print any message to the screen.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ERich Text Blocks:\u003C\u002Fstrong\u003E Similar to Text Block with rich text capabilities.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECode Snippets:\u003C\u002Fstrong\u003E Display a code editor that allows you to select between more than 50 languages with syntax highlighting.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECustom Forms:\u003C\u002Fstrong\u003E Create your own form with JSON Schema.\nHere is an example of a runbook migrated from Confluence to Blameless:\n\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--M5ArIn2v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5lftcq2c3c0qb1k385cl.png\" alt=\"Old runbook in Confluence\" loading=\"lazy\"\u003E\n\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4u3RYOcE--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F843jq0lldau2teehgiru.png\" alt=\"New Blameless Runbook Document\" loading=\"lazy\"\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhen we’re trying to find a particular runbook within Blameless later, we also have a sorting function that makes finding the exact runbook we need faster. We provide a search-and-sort functionality in the runbooks list page that allows us to filter them very quickly by name, description, amount of steps, and last execution dates.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"what-makes-us-excited-about-runbook-documentation\" href=\"#what-makes-us-excited-about-runbook-documentation\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  What makes us excited about Runbook Documentation\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ERunbook Documentation allows users to document the optimal way to respond to events. This helps teams be consistent in their incident response processes. Users are guided through a series of predefined steps to accomplish a specific outcome via manual tasks. In Blameless, you can also create independent steps that allow you to craft custom flows, and get metadata from each step to use on another step.\u003Cbr\u003E\nAdditionally, we built Runbook Documentation using GraphQL Subscriptions. This means that you can interact with runbooks in real time. For example, if someone else executed a runbook, you can see the new instance of the runbook running and take actions if needed.\u003Cbr\u003E\n\u003Ciframe width=\"710\" height=\"399\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002F8QPd6loyvf8\" allowfullscreen loading=\"lazy\"\u003E\n\u003C\u002Fiframe\u003E\n\u003Cbr\u003E\nAnother cool feature of Runbook Documentation is that you can write code snippets using Monaco Editor (the code editor that powers VSCode). This means you have no limits when writing a code snippet, as it supports more than 50 languages with syntax highlighting.\u003Cbr\u003E\n\u003Ciframe width=\"710\" height=\"399\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FYXdnhZqUVbU\" allowfullscreen loading=\"lazy\"\u003E\n\u003C\u002Fiframe\u003E\n\u003Cbr\u003E\nAnother feature that we love about Runbook Documentation is the ability to attach individual runbooks to an incident. This integration allows all stakeholders to see exactly which steps are being taken to mitigate this incident. Plus, you can track runbook usage. This helps teams understand which runbooks are most commonly consulted, which are most useful, and which might need a little tidying up.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdditionally, what was run at the time of the incident is preserved as-is, \u003Cem\u003Eeven if the runbook changes in the future\u003C\u002Fem\u003E. This is much better than an ad-hoc comment linking to a document or Confluence that may have already been edited as it gives a clearer view of what responders were working with. Furthermore, we’re able to see the audit log history of individual runbooks that have been invoked on the runbook history page. \u003C\u002Fp\u003E\n\n\u003Cp\u003ERunbooks are more than a guide to resolving incidents. They’re a way to collaborate with your team and find \u003Cem\u003Ethe best way\u003C\u002Fem\u003E to respond. These documents are well-loved and well worn. With Runbooks Documentation, we’re able to keep them up-to-date, monitor usage, and create a team-based approach to crafting and revising.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you’d like to learn more about runbooks, here are some additional resources:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Four-top-5-on-call-practices\"\u003E5 On-Call Practices to Help you Sleep through the Night\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Frunbook-automation-best-practices\"\u003ETop Practices for Runbook Automation\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Fintroducing-blameless-runbook-documentation\"\u003EIntroducing Blameless Runbook Documentation\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n",body_markdown:"By: Alicia Li and Lucas Bartroli\n\nOriginally published on [Failure is Inevitable](https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Fhow-we-built-and-use-runbook-documentation-at-blameless).\n#Why runbooks are important to a fully developed SRE strategy#\n**Even if you don’t notice, you are executing runbooks everyday, all the time.** When you have an incident in your day-to-day operations, you follow a series of ordered and connected steps to solve it. For instance, if you lose your internet connection, you will follow a series of steps to resolve that issue:\n1. Check if you’re still connected to the WiFi network.\n2. Check for the router status.\n3. Try to restart the router.\n4. Check if connection is back.\n5. In case connection is not back, call the internet provider.\n\nThis could be different depending on your method, but you have the idea. Even if you don’t write it down because it is not a complex process, you’re still executing a runbook to achieve a goal or resolve an incident. However, within a more complex socio-technical environment, it becomes crucial to document your runbooks and codify your knowledge.\n\nSRE and engineering teams need a tool to write and store their runbooks because incidents can be way more complex than the one in the above example. Incidents can involve collaboration between different teams, code execution, reuse of metadata across different steps (tokens, names, password, etc), conditional actions based on the result of a step execution, and more. Or teams may just need to write down a personal experience from an edge case they encountered while resolving an incident, which can help others if it happens again in the future.\n\nMost runbooks focus on incident mitigation. However, sometimes the response depends on knowing the cause of the incident first. It is easy to overlook the role a runbook can potentially play in determining a contributing factor of an incident. Instead of a single, large runbook that tries to deal with multiple situations, we recommend breaking it down into multiple runbooks focused on doing one thing well. \n\nFor example, imagine your internet isn’t working. There could be multiple reasons why you cannot connect. Your computer might have suffered a hardware failure, the modem might fail, you might be connected to the wrong network, or simply at a place where signal strength isn’t strong enough. Some of these issues might require their own runbooks. You can have an overarching runbook to determine the cause which links to one or more runbooks that can help fix an individual issue.\n\nWell-written runbooks should be clearly broken down into different steps. For each step, in addition to clearly indicating what needs to be done, it’s also helpful to include some context to explain why this step is taken. This helps new engineers onboard quickly and limits *tribal knowledge*.\n#Migrating runbooks to a central repository#\nRunbooks are only helpful if everyone can find them. If your runbooks are scattered across Confluence, Google Docs, or even stored locally on a laptop, they can be difficult to locate when you need them the most. We dealt with a similar problem here at Blameless. So, our team began dogfooding Runbook Documentation for our own runbooks. Here’s what we found the most useful.\n\nMigrating our runbooks to Blameless was a very easy task. We used to have all our runbooks in Confluence, broken down by steps. Runbook Documents currently support 4 types of steps (and we plan to add even more). These are the steps we most commonly use within our own runbooks and they include:\n* **Text Blocks:** Log and print any message to the screen.\n* **Rich Text Blocks:** Similar to Text Block with rich text capabilities.\n* **Code Snippets:** Display a code editor that allows you to select between more than 50 languages with syntax highlighting.\n* **Custom Forms:** Create your own form with JSON Schema.\nHere is an example of a runbook migrated from Confluence to Blameless:\n![Old runbook in Confluence](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5lftcq2c3c0qb1k385cl.png)\n![New Blameless Runbook Document](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F843jq0lldau2teehgiru.png)\n\nWhen we’re trying to find a particular runbook within Blameless later, we also have a sorting function that makes finding the exact runbook we need faster. We provide a search-and-sort functionality in the runbooks list page that allows us to filter them very quickly by name, description, amount of steps, and last execution dates.\n#What makes us excited about Runbook Documentation#\nRunbook Documentation allows users to document the optimal way to respond to events. This helps teams be consistent in their incident response processes. Users are guided through a series of predefined steps to accomplish a specific outcome via manual tasks. In Blameless, you can also create independent steps that allow you to craft custom flows, and get metadata from each step to use on another step.\nAdditionally, we built Runbook Documentation using GraphQL Subscriptions. This means that you can interact with runbooks in real time. For example, if someone else executed a runbook, you can see the new instance of the runbook running and take actions if needed.\n{% youtube 8QPd6loyvf8 %}\nAnother cool feature of Runbook Documentation is that you can write code snippets using Monaco Editor (the code editor that powers VSCode). This means you have no limits when writing a code snippet, as it supports more than 50 languages with syntax highlighting.\n{% youtube YXdnhZqUVbU %}\nAnother feature that we love about Runbook Documentation is the ability to attach individual runbooks to an incident. This integration allows all stakeholders to see exactly which steps are being taken to mitigate this incident. Plus, you can track runbook usage. This helps teams understand which runbooks are most commonly consulted, which are most useful, and which might need a little tidying up.\n\nAdditionally, what was run at the time of the incident is preserved as-is, *even if the runbook changes in the future*. This is much better than an ad-hoc comment linking to a document or Confluence that may have already been edited as it gives a clearer view of what responders were working with. Furthermore, we’re able to see the audit log history of individual runbooks that have been invoked on the runbook history page. \n\nRunbooks are more than a guide to resolving incidents. They’re a way to collaborate with your team and find *the best way* to respond. These documents are well-loved and well worn. With Runbooks Documentation, we’re able to keep them up-to-date, monitor usage, and create a team-based approach to crafting and revising.\n\nIf you’d like to learn more about runbooks, here are some additional resources:\n* [5 On-Call Practices to Help you Sleep through the Night](https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Four-top-5-on-call-practices)\n* [Top Practices for Runbook Automation](https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Frunbook-automation-best-practices)\n* [Introducing Blameless Runbook Documentation](https:\u002F\u002Fwww.blameless.com\u002Fblog\u002Fintroducing-blameless-runbook-documentation)",user:{name:"Hannah Culver",username:"kludyhannah",twitter_username:"KludyHannah",github_username:a,website_url:"https:\u002F\u002Fwww.blameless.com\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HzswYU7z--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F409754\u002F05cdc7c8-c2e1-4f5e-b513-35d142c70798.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mhFSz0hA--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F409754\u002F05cdc7c8-c2e1-4f5e-b513-35d142c70798.png"},organization:{name:"Blameless",username:e,slug:e,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ExDtSFtB--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2528\u002F7d5c2a13-b1f4-4ec2-af61-b7306a36094f.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GSV5IPJV--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2528\u002F7d5c2a13-b1f4-4ec2-af61-b7306a36094f.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkludyhannah\u002F629275",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-03-08T22:09:19Z","https:\u002F\u002Fdev.to\u002Fblameless\u002Fhow-we-built-and-use-runbook-documentation-at-blameless-47ea",15,"blameless"));
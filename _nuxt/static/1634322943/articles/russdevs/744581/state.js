window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:744581,title:"Set Up Your Next Web Dev Project with SCSS Made Easy!",description:"If you are anything like me, sometimes vanilla CSS just doesn't cut it. I mostly use SCSS for it's...",readable_publish_date:"Jun 30",slug:"set-up-your-next-web-dev-project-with-scss-made-easy-230d",path:"\u002Frussdevs\u002Fset-up-your-next-web-dev-project-with-scss-made-easy-230d",url:c,comments_count:4,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F744581.png",canonical_url:c,created_at:b,edited_at:"2021-07-01T02:10:24Z",crossposted_at:a,published_at:b,last_comment_at:"2021-07-01T18:38:25Z",reading_time_minutes:3,tag_list:"scss, css, webdev, beginners",tags:["scss","css","webdev","beginners"],body_html:"\u003Cp\u003EIf you are anything like me, sometimes vanilla CSS just doesn't cut it. I mostly use SCSS for it's organizational purposes. \u003C\u002Fp\u003E\n\n\u003Cp\u003EHere, I will walk you through the pretty simple steps of how to set up SCSS for your next project! This article will just help you on how to set up SCSS \u002F SASS in your project. If you would like to learn more on how to use SCSS \u002F SASS and what it can do, you can check out the official SASS Guide \u003Ca href=\"https:\u002F\u002Fsass-lang.com\u002Fguide\"\u003EHere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you don't care about the in depth explanations, check out the TLDR; section at the bottom!\u003C\u002Fp\u003E\n\n\u003Cp\u003EI have a folder structure that seems to work pretty well for me. In any given project folder, I will have a \u003Ccode\u003Edist\u003C\u002Fcode\u003E folder that holds my index.html, image files, and any JavaScript files I may have. This is considered my distribution file, and if someone wanted to deploy the website, they could just use that folder to deploy without all that extra SCSS stuff to get in the way.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"creating-your-project-folders\" href=\"#creating-your-project-folders\"\u003E\n  \u003C\u002Fa\u003E\n  Creating your project folders\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELet's start off by creating a project folder for yourself. \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreate a folder for your project.\u003C\u002Fli\u003E\n\u003Cli\u003EWithin that folder, create another folder labeled \u003Ccode\u003Edist\u003C\u002Fcode\u003E. You can name it whatever you want, but this is the name I use.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAlso within your project folder, create another one called \u003Ccode\u003Escss\u003C\u002Fcode\u003E. This will house all of your SCSS files.\u003Cbr\u003E\nIt should look a little something like this: \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pZp3Ku6A--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fltwj0q98024oyhdpaonc.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pZp3Ku6A--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fltwj0q98024oyhdpaonc.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003ENext step is installing node.js...\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"installing-node-and-sass\" href=\"#installing-node-and-sass\"\u003E\n  \u003C\u002Fa\u003E\n  Installing Node and SASS\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EBefore we get started with SCSS, you will need Node on your machine. To get node, you can go to \u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload\u002F\"\u003ENode's Website Here\u003C\u002Fa\u003E and follow the instructions for your device. \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EOnce node is installed, open your terminal.\u003C\u002Fli\u003E\n\u003Cli\u003ETo validate that you have node installed, run the command \u003Ccode\u003Enode --version\u003C\u002Fcode\u003E. You should see a version number returned.\u003C\u002Fli\u003E\n\u003Cli\u003ENow we will globally install SASS. To do this, run the command \u003Ccode\u003Enpm install -g sass\u003C\u002Fcode\u003E. This will install it globally on your machine.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"code-all-your-scss-to-your-hearts-content\" href=\"#code-all-your-scss-to-your-hearts-content\"\u003E\n  \u003C\u002Fa\u003E\n  Code all your SCSS to your heart's content\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EHere is where you can get creative and code your SCSS files! Have fun with it!\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"compiling-your-scss\" href=\"#compiling-your-scss\"\u003E\n  \u003C\u002Fa\u003E\n  Compiling your SCSS\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAlright, now let's see what you did!\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EWithin your terminal, you can navigate to your file path. \n\n\u003Cul\u003E\n\u003Cli\u003ETo do this, you can type in \u003Ccode\u003Ecd &lt;filepath&gt;\u003C\u002Fcode\u003E. So if your project was on your desktop, you can do \u003Ccode\u003Ecd \\desktop\\my_project\u003C\u002Fcode\u003E and you will be brought to your project.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EEnter the command \u003Ccode\u003Esass \u002Fscss\u002Fmain.scss dist\u002Fcss\u002Fmain.css\u003C\u002Fcode\u003E. This will build and compile your SCSS files. Just run that command every time you want to compile!\u003C\u002Fli\u003E\n\u003Cli\u003EJust refresh your project, and BOOM! It's updated!\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"how-i-use-scss\" href=\"#how-i-use-scss\"\u003E\n  \u003C\u002Fa\u003E\n  How I Use SCSS\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Gcm48v6S--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foiv0u2yanf7io1b3nu4d.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Gcm48v6S--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foiv0u2yanf7io1b3nu4d.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cbr\u003E\nI use SCSS for organization. You can see how I am using this in one of my real projects I am working on. Within the SCSS folder, I use the \u003Ccode\u003Emain.scss\u003C\u002Fcode\u003E file as a file that holds imports to all other scss files. I then break down each section of the website into it's own scss file. So you can see in the above screenshot, I have a file specifically for the Hero of the page.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"tldr\" href=\"#tldr\"\u003E\n  \u003C\u002Fa\u003E\n  TLDR;\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI know I was wordy up there, you can find a simple numbered list here on how to set it up.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreate your project folder\u003C\u002Fli\u003E\n\u003Cli\u003EWithin project folder, create a \u003Ccode\u003Edist\u003C\u002Fcode\u003E folder\u003C\u002Fli\u003E\n\u003Cli\u003EWithin the project folder, create an \u003Ccode\u003Escss\u003C\u002Fcode\u003E folder\u003C\u002Fli\u003E\n\u003Cli\u003EInstall \u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload\"\u003ENode.js\u003C\u002Fa\u003E if you have not already.\u003C\u002Fli\u003E\n\u003Cli\u003EIn your terminal, run the command \u003Ccode\u003Enpm install -g sass\u003C\u002Fcode\u003E to install SASS globally.\u003C\u002Fli\u003E\n\u003Cli\u003ENavigate to your project within your terminal.\u003C\u002Fli\u003E\n\u003Cli\u003ECode your SCSS with all your might!\u003C\u002Fli\u003E\n\u003Cli\u003EWhen you are ready to compile your SCSS files, you can enter the command \u003Ccode\u003Esass \u002Fscss\u002Fmain.scss dist\u002Fcss\u002Fmain.css\u003C\u002Fcode\u003E. This will build and compile your SCSS files. Just run that command every time you want to compile!\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ECongratulations, you are now up and running with SASS! Happy Coding!\u003C\u002Fp\u003E\n\n",body_markdown:"If you are anything like me, sometimes vanilla CSS just doesn't cut it. I mostly use SCSS for it's organizational purposes. \n\nHere, I will walk you through the pretty simple steps of how to set up SCSS for your next project! This article will just help you on how to set up SCSS \u002F SASS in your project. If you would like to learn more on how to use SCSS \u002F SASS and what it can do, you can check out the official SASS Guide [Here](https:\u002F\u002Fsass-lang.com\u002Fguide).\n\nIf you don't care about the in depth explanations, check out the TLDR; section at the bottom!\n\nI have a folder structure that seems to work pretty well for me. In any given project folder, I will have a `dist` folder that holds my index.html, image files, and any JavaScript files I may have. This is considered my distribution file, and if someone wanted to deploy the website, they could just use that folder to deploy without all that extra SCSS stuff to get in the way.\n\n### Creating your project folders\nLet's start off by creating a project folder for yourself. \n1. Create a folder for your project.\n2. Within that folder, create another folder labeled `dist`. You can name it whatever you want, but this is the name I use.\n3. Also within your project folder, create another one called `scss`. This will house all of your SCSS files.\nIt should look a little something like this: \n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fltwj0q98024oyhdpaonc.png)\n \n\n4. Next step is installing node.js...\n\n### Installing Node and SASS\nBefore we get started with SCSS, you will need Node on your machine. To get node, you can go to [Node's Website Here](https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload\u002F) and follow the instructions for your device. \n5. Once node is installed, open your terminal.\n1. To validate that you have node installed, run the command `node --version`. You should see a version number returned.\n3. Now we will globally install SASS. To do this, run the command `npm install -g sass`. This will install it globally on your machine.\n\n### Code all your SCSS to your heart's content\nHere is where you can get creative and code your SCSS files! Have fun with it!\n\n### Compiling your SCSS\nAlright, now let's see what you did!\n\n1. Within your terminal, you can navigate to your file path. \n  * To do this, you can type in `cd \u003Cfilepath\u003E`. So if your project was on your desktop, you can do `cd \\desktop\\my_project` and you will be brought to your project.\n2. Enter the command `sass \u002Fscss\u002Fmain.scss dist\u002Fcss\u002Fmain.css`. This will build and compile your SCSS files. Just run that command every time you want to compile!\n3. Just refresh your project, and BOOM! It's updated!\n\n### How I Use SCSS\n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Foiv0u2yanf7io1b3nu4d.png)\nI use SCSS for organization. You can see how I am using this in one of my real projects I am working on. Within the SCSS folder, I use the `main.scss` file as a file that holds imports to all other scss files. I then break down each section of the website into it's own scss file. So you can see in the above screenshot, I have a file specifically for the Hero of the page.\n\n### TLDR;\nI know I was wordy up there, you can find a simple numbered list here on how to set it up.\n\n1. Create your project folder\n2. Within project folder, create a `dist` folder\n3. Within the project folder, create an `scss` folder\n4. Install [Node.js](https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload) if you have not already.\n5. In your terminal, run the command `npm install -g sass` to install SASS globally.\n6. Navigate to your project within your terminal.\n7. Code your SCSS with all your might!\n* When you are ready to compile your SCSS files, you can enter the command `sass \u002Fscss\u002Fmain.scss dist\u002Fcss\u002Fmain.css`. This will build and compile your SCSS files. Just run that command every time you want to compile!\n\nCongratulations, you are now up and running with SASS! Happy Coding!\n    ",user:{name:"Russ Perry",username:e,twitter_username:e,github_username:"rperry99",website_url:"https:\u002F\u002Frussdevs.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--bWtwW0zu--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F485529\u002F1beca967-8f4c-41fd-a3ad-0d4555b7ca06.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VdUnOMU_--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F485529\u002F1beca967-8f4c-41fd-a3ad-0d4555b7ca06.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Frussdevs\u002F744581",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-06-30T23:21:59Z","https:\u002F\u002Fdev.to\u002Frussdevs\u002Fset-up-your-next-web-dev-project-with-scss-made-easy-230d",10,"russdevs"));
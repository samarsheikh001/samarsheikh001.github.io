window.__NUXT__=(function(a,b,c,d,e,f){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:541763,title:"Robust NodeJS Deployment Architecture",description:"The aim of this post is to succinctly describe an effective and robust architecture for self hosting...",readable_publish_date:"Dec 14 '20",slug:"robust-nodejs-deployment-architecture-5go6",path:"\u002Fmjgs\u002Frobust-nodejs-deployment-architecture-5go6",url:"https:\u002F\u002Fdev.to\u002Fmjgs\u002Frobust-nodejs-deployment-architecture-5go6",comments_count:c,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F541763.png",canonical_url:"https:\u002F\u002Fblog.markjgsmith.com\u002F2020\u002F11\u002F13\u002Frobust-nodejs-deployment-architecture.html",created_at:b,edited_at:"2020-12-14T03:33:03Z",crossposted_at:a,published_at:b,last_comment_at:"2021-04-05T17:33:38Z",reading_time_minutes:c,tag_list:"discuss, node, javascript, architecture",tags:[e,"node","javascript","architecture"],body_html:"\u003Cp\u003EThe aim of this post is to succinctly describe an effective and robust architecture for self hosting your NodeJS web applications. I’m going to stay relatively high level, describing the technologies, and components, by the end of it you will have a good idea of what such a system looks like. There is a focus on standard well tested pieces rather than the latest shiny cloud \u002F containerisation offerings. It is well suited for running small to medium size applications.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--P_DqjL65--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fblog.markjgsmith.com\u002Fassets\u002Fimages\u002Fnodejs-web-development-technologies.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--P_DqjL65--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fblog.markjgsmith.com\u002Fassets\u002Fimages\u002Fnodejs-web-development-technologies.png\" alt=\"Node.js web development technologies\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"features-of-the-architecture\" href=\"#features-of-the-architecture\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Features of the architecture\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ERuns on standard VPS hosts \u003C\u002Fli\u003E\n\u003Cli\u003EPossibility to scale\u003C\u002Fli\u003E\n\u003Cli\u003ESecure\u003C\u002Fli\u003E\n\u003Cli\u003EEasy to maintain\u003C\u002Fli\u003E\n\u003Cli\u003EFault tolerant\u003C\u002Fli\u003E\n\u003Cli\u003ELow cost\u003C\u002Fli\u003E\n\u003Cli\u003EBacked up and easy to restore\u003C\u002Fli\u003E\n\u003Cli\u003EEasy machine provisioning\u003C\u002Fli\u003E\n\u003Cli\u003EEasy to deploy code\u003C\u002Fli\u003E\n\u003Cli\u003ESupport multiple databases\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"3-main-components\" href=\"#3-main-components\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  3 main components\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ELoad balancer\u003C\u002Fli\u003E\n\u003Cli\u003EWeb and API application servers\u003C\u002Fli\u003E\n\u003Cli\u003EDatastore\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EDuring it’s life cycle, a client web request travels over the internet and eventually arrives at the load balancer where any SSL\u002FTLS connections are terminated, then re-encrypted using self-signed certs and sent to an available application server. That application server performs the tasks it needs to do, persisting information on a shared datastore. Responses are sent directly from the application servers to the client.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe SSL\u002FTLS termination happens on the load balancer because it makes managing the certificates much easier, with only a single place to renew, create, update and backup certificates.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHaving a load balancer ensures that you can have several application servers running in parallel, which means you can scale by just adding more application servers, but it also means you can reboot servers without impacting site uptime.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs for the application servers, you can separate out web servers from API servers, but for ease of maintenance you can also just run both on the same machine on different ports, with a reverse proxy on the machine directing the requests to the right application. In this way you have one discrete unit which makes it much easier to add capacity. In the vaste majority of cases this setup is good enough, though could be optimised later.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHaving a shared datastore is key to being able to run the application servers in parallel. This is a single machine that has a large storage volume mounted. It runs all the databases which write their data to the storage volume. The datastore can also run on a clustered set of machines for high availability, though this adds quite a lot of complexity, so initially it’s probably best to run one machine with good backups, so if anything goes wrong you can be restored and running with a minimum of downtime.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"technologies\" href=\"#technologies\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Technologies\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.nginx.com\"\u003ENginx\u003C\u002Fa\u003E - Load balancer and reverse proxy\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fredis.io\"\u003ERedis\u003C\u002Fa\u003E - Key\u002Fvalue very fast database often used for storing sessions and caching\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.mongodb.com\"\u003EMongodb\u003C\u002Fa\u003E - NoSQL database\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.postgresql.org\"\u003EPostgres\u003C\u002Fa\u003E - SQL database\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fletsencrypt.org\u002Fgetting-started\u002F\"\u003ELetsencrypt\u003C\u002Fa\u003E certbot - for generating and maintaining certificates\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fubuntu.com\"\u003ELinux Ubuntu\u003C\u002Fa\u003E - Operating system for all 3 components\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fpm2.keymetrics.io\"\u003EPm2\u003C\u002Fa\u003E - NodeJS process manager, runs the applications, handles logging and a variety of other runtime activities\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.rabbitmq.com\"\u003ERabbitMQ\u003C\u002Fa\u003E - Message queue software very important for fault tolerant backend systems\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fchilts\u002Fmongodb-queue\"\u003EMongodb-queue\u003C\u002Fa\u003E - Message queue implemented via a NodeJS library backed by MongoDB\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"provisioning-infrastructure\" href=\"#provisioning-infrastructure\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Provisioning infrastructure\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou can keep things quite simple in this regard, using a \u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FBash_(Unix_shell)\"\u003EBash\u003C\u002Fa\u003E script for each of the 3 main components. The script would need to do the following:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EInstall latest OS updates\u003C\u002Fli\u003E\n\u003Cli\u003EInstall necessary software\u003C\u002Fli\u003E\n\u003Cli\u003EConfigure users and groups\u003C\u002Fli\u003E\n\u003Cli\u003EWrite\u002Fupdate software configuration files\u003C\u002Fli\u003E\n\u003Cli\u003EStart and stop various services\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThese are some of the important Linux items you would need to know about:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FOpenSSH\"\u003Esshd\u003C\u002Fa\u003E - server for ssh connections\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.stunnel.org\"\u003Estunnel\u003C\u002Fa\u003E - creates secure connections, used on datastore for applications without built in SSL - e.g. Redis\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FUncomplicated_Firewall\"\u003Eufw\u003C\u002Fa\u003E \u002F \u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FIptables\"\u003Eiptables\u003C\u002Fa\u003E - firewalls\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fsmallstep.com\u002Fblog\u002Feverything-pki.html\"\u003EPKI\u003C\u002Fa\u003E and creating self-signed certificates\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fwww.tecmint.com\u002Finstall-logrotate-to-manage-log-rotation-in-linux\u002F\"\u003Elogrotate\u003C\u002Fa\u003E - manage rotating and backing up application log files\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FCron\"\u003Ecron\u003C\u002Fa\u003E - schedule the running of maintenance scripts like backups\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fcertbot.eff.org\u002Fdocs\u002F\"\u003Ecertbot\u003C\u002Fa\u003E - generate and renew certs\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FRsync\"\u003Ersync\u003C\u002Fa\u003E - securely synchronize files between machines\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIt’s likely that your \u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FVirtual_private_server\"\u003EVPS\u003C\u002Fa\u003E hosting provider has an API and \u002F or command line tools, making it possible to create a provisioning script that creates a VPS server, rsyncs the bash install script to the machine and runs it. So with a minimum of fuss you can provision fresh servers by running a script, so it’s completely repeatable.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s worth noting that there are modern tools that use containerisation like \u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FKubernetes\"\u003EKubernetes\u003C\u002Fa\u003E, which are very powerful but can get quite complex.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"deploying-code\" href=\"#deploying-code\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Deploying code\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is another place where a simple bash script can be very effective. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt would need to do the following:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EBuild your application to a deploy directory\u003C\u002Fli\u003E\n\u003Cli\u003EBackup currently running app\u003C\u002Fli\u003E\n\u003Cli\u003ERsync the files to the application servers\u003C\u002Fli\u003E\n\u003Cli\u003ERestart the application server\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThere is a lot of variety in this area. Many modern workflows that use \u003Ca href=\"https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FCI\u002FCD\"\u003ECI\u002FCD systems\u003C\u002Fa\u003E use git to clone your entire application \u003Cbr\u003E\nrepository to the server, rather than rsyncing just the built files. Requirements vary a lot from project to project.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe bash script route is great for simplicity, but there are often more manual steps involved, especially if your application has complex configuration. In the early days of a project it’s often good enough.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"backups\" href=\"#backups\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Backups\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBackups are super important. You need to have all the important files backed up and ideally scripts to restore the backups in the event that a component fails and needs to be restored.\u003C\u002Fp\u003E\n\n\u003Cp\u003EConsider backing up:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EEach deployed application version, along with configuration\u003C\u002Fli\u003E\n\u003Cli\u003ELog files for databases, firewalls\u003C\u002Fli\u003E\n\u003Cli\u003ECertificates\u003C\u002Fli\u003E\n\u003Cli\u003EContents of all databases\u003C\u002Fli\u003E\n\u003Cli\u003EConfigurations for every 3rd party application you are using\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIt’s a good idea to use storage from big cloud providers, they are low cost and have good scripting tools.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"security\" href=\"#security\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Security\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIt’s important to configure your machines securely, set firewalls (local and cloud) appropriately. Always use TLS\u002FSSL for inter machine communication. Follow the security advice from the various pieces of software you install, for example creating different users for specific purposes e.g. application access vs access for backups. Only give the minimum of access rights necessary to perform a given task.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"staging-and-production-environments\" href=\"#staging-and-production-environments\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Staging and production environments\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EOnce the application is running in production, you will benefit a lot from having a staging environment. It’s a replica of the production environment where you can try out new code without being worried to break the live system. Never deploy directly to production, always test it out in staging first.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"wrapping-up\" href=\"#wrapping-up\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Wrapping up\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe infrastructure side of running applications can get quite complex, but there are a lot of advantages to knowing how to construct these setups yourself:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EKeep costs at a minimum\u003C\u002Fli\u003E\n\u003Cli\u003EBe in full control of the infrastructure\u003C\u002Fli\u003E\n\u003Cli\u003EBe able to deploy anywhere\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIt’s also worth experimenting with integrating \u003Ca href=\"https:\u002F\u002Fserverless.css-tricks.com\u002Fabout\"\u003Eserverless\u003C\u002Fa\u003E technologies for aspects that are very high load, the low cost and high performance might be worth the portability trade-off, but be aware that a move might require rewriting parts of your application should you need to change providers.\u003C\u002Fp\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks for reading!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fmarkjgsmith\"\u003E@markjgsmith\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003E\u003Ca href=\"https:\u002F\u002Fblog.markjgsmith.com\u002Fabout\"\u003EI’m currently available for hire\u003C\u002Fa\u003E\u003C\u002Fem\u003E - Consider hiring me!\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you liked this article you might like adding my \u003Ca href=\"https:\u002F\u002Fblog.markjgsmith.com\u002Ffeed.xml\"\u003Eblog feed\u003C\u002Fa\u003E to your RSS reader, reading my \u003Ca href=\"https:\u002F\u002Flinks.markjgsmith.com\"\u003Edaily linkblog\u003C\u002Fa\u003E or signing up for my \u003Ca href=\"https:\u002F\u002Fmarkjgsmith.substack.com\"\u003Eweekly newsletter\u003C\u002Fa\u003E. :)\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EOriginally posted on \u003Ca href=\"https:\u002F\u002Fblog.markjgsmith.com\u002F2020\u002F11\u002F13\u002Frobust-nodejs-deployment-architecture.html\"\u003Eblog.markjgsmith.com\u003C\u002Fa\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Robust NodeJS Deployment Architecture\npublished: true\ndescription: \ntags: discuss, nodejs, javascript, architecture\ncanonical_url: https:\u002F\u002Fblog.markjgsmith.com\u002F2020\u002F11\u002F13\u002Frobust-nodejs-deployment-architecture.html\n---\nThe aim of this post is to succinctly describe an effective and robust architecture for self hosting your NodeJS web applications. I’m going to stay relatively high level, describing the technologies, and components, by the end of it you will have a good idea of what such a system looks like. There is a focus on standard well tested pieces rather than the latest shiny cloud \u002F containerisation offerings. It is well suited for running small to medium size applications.\n\n![Node.js web development technologies](https:\u002F\u002Fblog.markjgsmith.com\u002Fassets\u002Fimages\u002Fnodejs-web-development-technologies.png)\n\n## Features of the architecture\n\n- Runs on standard VPS hosts \n- Possibility to scale\n- Secure\n- Easy to maintain\n- Fault tolerant\n- Low cost\n- Backed up and easy to restore\n- Easy machine provisioning\n- Easy to deploy code\n- Support multiple databases\n\n## 3 main components\n\n- Load balancer\n- Web and API application servers\n- Datastore\n\nDuring it’s life cycle, a client web request travels over the internet and eventually arrives at the load balancer where any SSL\u002FTLS connections are terminated, then re-encrypted using self-signed certs and sent to an available application server. That application server performs the tasks it needs to do, persisting information on a shared datastore. Responses are sent directly from the application servers to the client.\n\nThe SSL\u002FTLS termination happens on the load balancer because it makes managing the certificates much easier, with only a single place to renew, create, update and backup certificates.\n\nHaving a load balancer ensures that you can have several application servers running in parallel, which means you can scale by just adding more application servers, but it also means you can reboot servers without impacting site uptime.\n\nAs for the application servers, you can separate out web servers from API servers, but for ease of maintenance you can also just run both on the same machine on different ports, with a reverse proxy on the machine directing the requests to the right application. In this way you have one discrete unit which makes it much easier to add capacity. In the vaste majority of cases this setup is good enough, though could be optimised later.\n\nHaving a shared datastore is key to being able to run the application servers in parallel. This is a single machine that has a large storage volume mounted. It runs all the databases which write their data to the storage volume. The datastore can also run on a clustered set of machines for high availability, though this adds quite a lot of complexity, so initially it’s probably best to run one machine with good backups, so if anything goes wrong you can be restored and running with a minimum of downtime.\n\n## Technologies\n\n- [Nginx](https:\u002F\u002Fwww.nginx.com) - Load balancer and reverse proxy\n- [Redis](https:\u002F\u002Fredis.io) - Key\u002Fvalue very fast database often used for storing sessions and caching\n- [Mongodb](https:\u002F\u002Fwww.mongodb.com) - NoSQL database\n- [Postgres](https:\u002F\u002Fwww.postgresql.org) - SQL database\n- [Letsencrypt](https:\u002F\u002Fletsencrypt.org\u002Fgetting-started\u002F ) certbot - for generating and maintaining certificates\n- [Linux Ubuntu](https:\u002F\u002Fubuntu.com) - Operating system for all 3 components\n- [Pm2](https:\u002F\u002Fpm2.keymetrics.io) - NodeJS process manager, runs the applications, handles logging and a variety of other runtime activities\n- [RabbitMQ](https:\u002F\u002Fwww.rabbitmq.com) - Message queue software very important for fault tolerant backend systems\n- [Mongodb-queue](https:\u002F\u002Fgithub.com\u002Fchilts\u002Fmongodb-queue) - Message queue implemented via a NodeJS library backed by MongoDB\n\n## Provisioning infrastructure\n\nYou can keep things quite simple in this regard, using a [Bash](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FBash_(Unix_shell)) script for each of the 3 main components. The script would need to do the following:\n\n- Install latest OS updates\n- Install necessary software\n- Configure users and groups\n- Write\u002Fupdate software configuration files\n- Start and stop various services\n\nThese are some of the important Linux items you would need to know about:\n\n- [sshd](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FOpenSSH) - server for ssh connections\n- [stunnel](https:\u002F\u002Fwww.stunnel.org) - creates secure connections, used on datastore for applications without built in SSL - e.g. Redis\n- [ufw](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FUncomplicated_Firewall) \u002F [iptables](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FIptables) - firewalls\n- [PKI](https:\u002F\u002Fsmallstep.com\u002Fblog\u002Feverything-pki.html) and creating self-signed certificates\n- [logrotate](https:\u002F\u002Fwww.tecmint.com\u002Finstall-logrotate-to-manage-log-rotation-in-linux\u002F) - manage rotating and backing up application log files\n- [cron](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FCron) - schedule the running of maintenance scripts like backups\n- [certbot](https:\u002F\u002Fcertbot.eff.org\u002Fdocs\u002F) - generate and renew certs\n- [rsync](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FRsync) - securely synchronize files between machines\n\nIt’s likely that your [VPS](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FVirtual_private_server) hosting provider has an API and \u002F or command line tools, making it possible to create a provisioning script that creates a VPS server, rsyncs the bash install script to the machine and runs it. So with a minimum of fuss you can provision fresh servers by running a script, so it’s completely repeatable.\n\nIt’s worth noting that there are modern tools that use containerisation like [Kubernetes](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FKubernetes), which are very powerful but can get quite complex.\n\n## Deploying code\n\nThis is another place where a simple bash script can be very effective. \n\nIt would need to do the following:\n\n- Build your application to a deploy directory\n- Backup currently running app\n- Rsync the files to the application servers\n- Restart the application server\n\nThere is a lot of variety in this area. Many modern workflows that use [CI\u002FCD systems](https:\u002F\u002Fen.m.wikipedia.org\u002Fwiki\u002FCI\u002FCD) use git to clone your entire application \nrepository to the server, rather than rsyncing just the built files. Requirements vary a lot from project to project.\n\nThe bash script route is great for simplicity, but there are often more manual steps involved, especially if your application has complex configuration. In the early days of a project it’s often good enough.\n\n## Backups\n\nBackups are super important. You need to have all the important files backed up and ideally scripts to restore the backups in the event that a component fails and needs to be restored.\n\nConsider backing up:\n\n- Each deployed application version, along with configuration\n- Log files for databases, firewalls\n- Certificates\n- Contents of all databases\n- Configurations for every 3rd party application you are using\n\nIt’s a good idea to use storage from big cloud providers, they are low cost and have good scripting tools.\n\n## Security\n\nIt’s important to configure your machines securely, set firewalls (local and cloud) appropriately. Always use TLS\u002FSSL for inter machine communication. Follow the security advice from the various pieces of software you install, for example creating different users for specific purposes e.g. application access vs access for backups. Only give the minimum of access rights necessary to perform a given task.\n\n## Staging and production environments\n\nOnce the application is running in production, you will benefit a lot from having a staging environment. It’s a replica of the production environment where you can try out new code without being worried to break the live system. Never deploy directly to production, always test it out in staging first.\n\n## Wrapping up\n\nThe infrastructure side of running applications can get quite complex, but there are a lot of advantages to knowing how to construct these setups yourself:\n\n- Keep costs at a minimum\n- Be in full control of the infrastructure\n- Be able to deploy anywhere\n\nIt’s also worth experimenting with integrating [serverless](https:\u002F\u002Fserverless.css-tricks.com\u002Fabout) technologies for aspects that are very high load, the low cost and high performance might be worth the portability trade-off, but be aware that a move might require rewriting parts of your application should you need to change providers.\n\n--\n\nThanks for reading!\n\n[@markjgsmith](https:\u002F\u002Ftwitter.com\u002Fmarkjgsmith)\n\n*[I’m currently available for hire](https:\u002F\u002Fblog.markjgsmith.com\u002Fabout)* - Consider hiring me!\n\nIf you liked this article you might like adding my [blog feed](https:\u002F\u002Fblog.markjgsmith.com\u002Ffeed.xml) to your RSS reader, reading my [daily linkblog](https:\u002F\u002Flinks.markjgsmith.com) or signing up for my [weekly newsletter](https:\u002F\u002Fmarkjgsmith.substack.com). :)\n\n*Originally posted on [blog.markjgsmith.com](https:\u002F\u002Fblog.markjgsmith.com\u002F2020\u002F11\u002F13\u002Frobust-nodejs-deployment-architecture.html)*",user:{name:"Mark Smith",username:f,twitter_username:"markjgsmith",github_username:f,website_url:"https:\u002F\u002Fblog.markjgsmith.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FQNsJivc--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F322473\u002Fda1cafd3-9b0e-4df1-a8dd-abc0a5a0f78f.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4w9wNoET--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F322473\u002Fda1cafd3-9b0e-4df1-a8dd-abc0a5a0f78f.jpeg"},flare_tag:{name:e,bg_color_hex:"#000000",text_color_hex:"#FFFFFF"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmjgs\u002F541763",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2020-12-14T01:52:03Z",5,520,"discuss","mjgs"));
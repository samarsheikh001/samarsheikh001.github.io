__NUXT_JSONP__("/articles/doabledanny/779506", (function(a,b,c,d,e){b.type_of="article";b.id=779506;b.title="How to Compare Arrays in JavaScript Efficiently";b.description="In this article, I’m going to show you two ways of solving a typical interview-style question. The...";b.readable_publish_date="Aug 5";b.slug="how-to-compare-arrays-in-javascript-efficiently-1p0";b.path="\u002Fdoabledanny\u002Fhow-to-compare-arrays-in-javascript-efficiently-1p0";b.url=c;b.comments_count=9;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fWTZxn6V--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7dfp0iaxg70bzot17bpb.jpg";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--o_bVoGjz--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7dfp0iaxg70bzot17bpb.jpg";b.canonical_url=c;b.created_at="2021-08-02T18:11:12Z";b.edited_at=a;b.crossposted_at=a;b.published_at=e;b.last_comment_at="2021-08-10T19:06:51Z";b.reading_time_minutes=5;b.tag_list="javascript, algorithms";b.tags=["javascript","algorithms"];b.body_html="\u003Cp\u003EIn this article, I’m going to show you two ways of solving a typical interview-style question. The first solution is more obvious and less efficient. The second solution introduces a great problem-solving tool: frequency counter objects, which greatly improves the efficiency.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere’s what you’ll gain from reading this article:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EA framework for approaching problems\u003C\u002Fli\u003E\n\u003Cli\u003EA very useful, highly performant problem solving technique\u003C\u002Fli\u003E\n\u003Cli\u003EAn improved ability to analyse functions and improve performance\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EI also made a \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=pL-ZMMYVCSM&amp;t=296s&amp;ab_channel=DoableDannyDoableDanny\"\u003EYouTube video\u003C\u002Fa\u003E for those that like video. If you enjoy the video, consider subscribing to \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUC0URylW_U4i26wN231yRqvA?sub_confirmation=1\"\u003Emy channel\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"the-problem\" href=\"#the-problem\"\u003E\n  \u003C\u002Fa\u003E\n  The problem\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E“Write a function called “squared” which takes two arrays. The function should return true if every value in the array has its value squared in the second array. The frequency of values must be the same.”\u003C\u002Fp\u003E\n\n\u003Cp\u003E-- Your interviewer\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt first, I will show you the “Naïve” way of solving the problem – the more obvious way that isn’t efficient.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI’ll then show you an efficient way to solve the problem using “frequency counter objects”. This is a very handy technique to have in your problem-solving toolbox (your brain).\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"understanding-the-problem\" href=\"#understanding-the-problem\"\u003E\n  \u003C\u002Fa\u003E\n  Understanding the problem\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EProblem solving 101:\u003C\u002Fstrong\u003E Before we attempt to write a solution, it’s very important to understand the problem - to give some examples and the results we expect. We can then use these examples as tests to ensure our solution is working correctly.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExamples:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ESquared([1, 2, 3], [9, 1, 4]) \u002F\u002F true\u003C\u002Fli\u003E\n\u003Cli\u003ESquared([1, 2, 3], [1, 4]) \u002F\u002F false\u003C\u002Fli\u003E\n\u003Cli\u003ESquared([2, 2, 3], [4, 9, 9]) \u002F\u002F false\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExample 1 is true because:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E1\u003Csup\u003E2\u003C\u002Fsup\u003E = 1 (yep, that’s in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep, that’s in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (yep, that’s in array 2)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExample 2 is false because:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E1\u003Csup\u003E2\u003C\u002Fsup\u003E = 1 (yep, that’s in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep, that’s in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (nope, that's not in array 2)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EExample 3 is false because:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep that’s in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (nope, there is only one 4 in array 2)\u003C\u002Fli\u003E\n\u003Cli\u003E3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (yep, but we won’t even get to this check because the function returned false beforehand)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"the-na%C3%AFve-way\" href=\"#the-na%C3%AFve-way\"\u003E\n  \u003C\u002Fa\u003E\n  The “naïve” way\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFirst, we check if the arrays are not equal length. If not, we return false and get out of the function early because the frequency of values can’t possibly be the same.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we loop over each number (num) in arr1. Inside the loop, we use \u003Ccode\u003EindexOf()\u003C\u002Fcode\u003E to look for the position of \u003Ccode\u003Enum2\u003C\u002Fcode\u003E in arr2. The value is assigned to the variable \u003Ccode\u003EfoundIndex\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf the value was not found, indexOf returns -1. So, we can check if foundIndex = -1, and return false if so.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf all is good, we move on and remove this value from arr2 using the \u003Ccode\u003Esplice()\u003C\u002Fcode\u003E method. This ensures the frequency of values in both arrays are the same.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter looping over each number, and all the checks pass, we can return true.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquared\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eof\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfoundIndex\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EindexOf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E**\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfoundIndex\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Esplice\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfoundIndex\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"performance\" href=\"#performance\"\u003E\n  \u003C\u002Fa\u003E\n  Performance\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis algorithm has a \u003Ca href=\"https:\u002F\u002Fwww.doabledanny.com\u002Fbig-o-notation-in-javascript\"\u003EBig O\u003C\u002Fa\u003E(n\u003Csup\u003E2\u003C\u002Fsup\u003E) because we loop over every single item in the first array, then inside this loop, we are looping over every single item in the second array (with \u003Ccode\u003EindexOf()\u003C\u002Fcode\u003E) at worst-case.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you don’t know (or have forgotten) what Big O is, check out this video: \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=lWldunWaLPs&amp;t=327s&amp;ab_channel=DoableDanny\"\u003EBig O Notation in JavaScript\u003C\u002Fa\u003E. It’s an important topic!\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf the arrays are of length n, then the number of operations will be n * n = n\u003Csup\u003E2\u003C\u002Fsup\u003E. Hence Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, this is not quite true because the second array becomes shorter on each loop, so on average we will only loop over half the second array (0.5n). The Big O will be of n * 0.5n = 0.5n\u003Csup\u003E2\u003C\u002Fsup\u003E. But Big O looks at big picture stuff, and as the input approaches infinity, the 0.5 will be insignificant and so we simplify to Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E).\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"a-smarter-way-frequency-counter-objects-big-on\" href=\"#a-smarter-way-frequency-counter-objects-big-on\"\u003E\n  \u003C\u002Fa\u003E\n  A smarter way – Frequency Counter Objects – Big O(n)\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"what-are-frequency-counter-objects\" href=\"#what-are-frequency-counter-objects\"\u003E\n  \u003C\u002Fa\u003E\n  What are Frequency Counter Objects?\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFrequency counters are objects that tally things up. Here’s two examples of where they would be useful:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=oyBXiJgU--U&amp;ab_channel=DoableDanny\"\u003EThe number of times a character appears in a string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EThe number of times a number appears in an array\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EUsing frequency counters can also significantly improve the performance of an algorithm, as it can often remove the need to use nested for-loops.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere’s what the frequency counter object for [1, 2, 3, 4, 3] would look like:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"mi\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAll the numbers appear once, apart from 3, which appears twice.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"the-solution\" href=\"#the-solution\"\u003E\n  \u003C\u002Fa\u003E\n  The solution\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETo create a frequency counter object, we loop over the array in question. We then create a key and give it a value of the current value + 1, or if it’s the first time we’ve encountered this number, \u003Ccode\u003EfrequencyCounter[num]\u003C\u002Fcode\u003E will be undefined and so we initialise the value to 1.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI used two for…of loops as I felt it was easier to read, but it could also be done with just one for-loop.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe frequency counter objects can then be compared. We first check if each key squared from frequency counter 1 is a key in frequency counter 2. If not, return false.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we check if the frequencies (values) are equal. If not, return false.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd if we get through all this unscathed, we get to the bottom and return true.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquared\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Create frequencyCounter1\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eof\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003EfrequencyCounter1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E||\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Create frequencyCounter2\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eof\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earr2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003EfrequencyCounter2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E||\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Compare frequency counters\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ekey\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ekey\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E**\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EfrequencyCounter1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!==\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EfrequencyCounter2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ekey\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E**\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"performance\" href=\"#performance\"\u003E\n  \u003C\u002Fa\u003E\n  Performance\n\u003C\u002Fh2\u003E\n\n\u003Col\u003E\n\u003Cli\u003ETo create frequencyCounter1, we loop over all the numbers in arr1 =&gt; n loops\u003C\u002Fli\u003E\n\u003Cli\u003ESame for frequencyCounter2 =&gt; n loops\u003C\u002Fli\u003E\n\u003Cli\u003ETo compare the frequency counters, we loop over all the keys in frequencyCounter1 =&gt; at worst case, n loops\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ETotal = n + n + n = 3n\u003C\u002Fp\u003E\n\n\u003Cp\u003EResulting in a Big O(n) – linear time complexity.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMuch better than our first effort of with Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E) – quadratic time complexity.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"awesome-references\" href=\"#awesome-references\"\u003E\n  \u003C\u002Fa\u003E\n  Awesome references\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EI can attribute almost all of my knowledge of algorithms and data structures to one outstanding course: \u003Ca href=\"https:\u002F\u002Fad.admitad.com\u002Fg\u002F05dgete24sfa55577a70b3e3b7aadc\u002F?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F\"\u003EJavaScript Algorithms and Data Structures Masterclass by Colt Steele\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EIf you prefer books: \u003Ca href=\"https:\u002F\u002Fwww.amazon.co.uk\u002Fgp\u002Fproduct\u002F1484239873\u002Fref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=doabledanny-21&amp;creative=6738&amp;linkCode=as2&amp;creativeASIN=1484239873&amp;linkId=445fcf63f9402faf2b2b0ef6c5c2f5d8\"\u003EJavaScript Data Structures and Algorithms: An Introduction to Understanding and Implementing Core Data Structure and Algorithm Fundamentals by Sammie Bae\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIf you enjoyed this post, consider subscribing to \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUC0URylW_U4i26wN231yRqvA?sub_confirmation=1\"\u003Emy YouTube channel\u003C\u002Fa\u003E - it would be much appreciated!\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks for reading.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHave a great day!\u003C\u002Fp\u003E\n\n";b.body_markdown="In this article, I’m going to show you two ways of solving a typical interview-style question. The first solution is more obvious and less efficient. The second solution introduces a great problem-solving tool: frequency counter objects, which greatly improves the efficiency.\n\nHere’s what you’ll gain from reading this article:\n\n- A framework for approaching problems\n- A very useful, highly performant problem solving technique\n- An improved ability to analyse functions and improve performance\n\nI also made a [YouTube video](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=pL-ZMMYVCSM&t=296s&ab_channel=DoableDannyDoableDanny) for those that like video. If you enjoy the video, consider subscribing to [my channel](https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUC0URylW_U4i26wN231yRqvA?sub_confirmation=1).\n\n## The problem\n\n“Write a function called “squared” which takes two arrays. The function should return true if every value in the array has its value squared in the second array. The frequency of values must be the same.”\n\n-- Your interviewer\n\nAt first, I will show you the “Naïve” way of solving the problem – the more obvious way that isn’t efficient.\n\nI’ll then show you an efficient way to solve the problem using “frequency counter objects”. This is a very handy technique to have in your problem-solving toolbox (your brain).\n\n## Understanding the problem\n\n**Problem solving 101:** Before we attempt to write a solution, it’s very important to understand the problem - to give some examples and the results we expect. We can then use these examples as tests to ensure our solution is working correctly.\n\n**Examples:**\n\n1. Squared([1, 2, 3], [9, 1, 4]) \u002F\u002F true\n2. Squared([1, 2, 3], [1, 4]) \u002F\u002F false\n3. Squared([2, 2, 3], [4, 9, 9]) \u002F\u002F false\n\n**Example 1 is true because:**\n\n- 1\u003Csup\u003E2\u003C\u002Fsup\u003E = 1 (yep, that’s in array 2)\n- 2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep, that’s in array 2)\n- 3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (yep, that’s in array 2)\n\n**Example 2 is false because:**\n\n- 1\u003Csup\u003E2\u003C\u002Fsup\u003E = 1 (yep, that’s in array 2)\n- 2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep, that’s in array 2)\n- 3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (nope, that's not in array 2)\n\n**Example 3 is false because:**\n\n- 2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (yep that’s in array 2)\n- 2\u003Csup\u003E2\u003C\u002Fsup\u003E = 4 (nope, there is only one 4 in array 2)\n- 3\u003Csup\u003E2\u003C\u002Fsup\u003E = 9 (yep, but we won’t even get to this check because the function returned false beforehand)\n\n## The “naïve” way\n\nFirst, we check if the arrays are not equal length. If not, we return false and get out of the function early because the frequency of values can’t possibly be the same.\n\nNext, we loop over each number (num) in arr1. Inside the loop, we use `indexOf()` to look for the position of `num2` in arr2. The value is assigned to the variable `foundIndex`.\n\nIf the value was not found, indexOf returns -1. So, we can check if foundIndex = -1, and return false if so.\n\nIf all is good, we move on and remove this value from arr2 using the `splice()` method. This ensures the frequency of values in both arrays are the same.\n\nAfter looping over each number, and all the checks pass, we can return true.\n\n```js\nfunction squared(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false\n\n  for (let num of arr1) {\n    let foundIndex = arr2.indexOf(num ** 2)\n\n    if (foundIndex === -1) return false\n\n    arr2.splice(foundIndex, 1)\n  }\n\n  return true\n}\n```\n\n## Performance\n\nThis algorithm has a [Big O](https:\u002F\u002Fwww.doabledanny.com\u002Fbig-o-notation-in-javascript)(n\u003Csup\u003E2\u003C\u002Fsup\u003E) because we loop over every single item in the first array, then inside this loop, we are looping over every single item in the second array (with `indexOf()`) at worst-case.\n\nIf you don’t know (or have forgotten) what Big O is, check out this video: [Big O Notation in JavaScript](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=lWldunWaLPs&t=327s&ab_channel=DoableDanny). It’s an important topic!\n\nIf the arrays are of length n, then the number of operations will be n \\* n = n\u003Csup\u003E2\u003C\u002Fsup\u003E. Hence Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E).\n\nNow, this is not quite true because the second array becomes shorter on each loop, so on average we will only loop over half the second array (0.5n). The Big O will be of n \\* 0.5n = 0.5n\u003Csup\u003E2\u003C\u002Fsup\u003E. But Big O looks at big picture stuff, and as the input approaches infinity, the 0.5 will be insignificant and so we simplify to Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E).\n\n## A smarter way – Frequency Counter Objects – Big O(n)\n\n### What are Frequency Counter Objects?\n\nFrequency counters are objects that tally things up. Here’s two examples of where they would be useful:\n\n- [The number of times a character appears in a string](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=oyBXiJgU--U&ab_channel=DoableDanny)\n- The number of times a number appears in an array\n\nUsing frequency counters can also significantly improve the performance of an algorithm, as it can often remove the need to use nested for-loops.\n\nHere’s what the frequency counter object for [1, 2, 3, 4, 3] would look like:\n\n```js\nlet frequencyCounter = {\n  1: 1,\n  2: 1,\n  3: 2,\n  4: 1,\n}\n```\n\nAll the numbers appear once, apart from 3, which appears twice.\n\n### The solution\n\nTo create a frequency counter object, we loop over the array in question. We then create a key and give it a value of the current value + 1, or if it’s the first time we’ve encountered this number, `frequencyCounter[num]` will be undefined and so we initialise the value to 1.\n\nI used two for…of loops as I felt it was easier to read, but it could also be done with just one for-loop.\n\nThe frequency counter objects can then be compared. We first check if each key squared from frequency counter 1 is a key in frequency counter 2. If not, return false.\n\nNext, we check if the frequencies (values) are equal. If not, return false.\n\nAnd if we get through all this unscathed, we get to the bottom and return true.\n\n```js\nfunction squared(arr1, arr2) {\n  if (arr1.length !== arr2.length) return false\n\n  let frequencyCounter1 = {}\n  let frequencyCounter2 = {}\n\n  \u002F\u002F Create frequencyCounter1\n  for (let num of arr1) {\n    frequencyCounter1[num] = frequencyCounter1[num] + 1 || 1\n  }\n\n  \u002F\u002F Create frequencyCounter2\n  for (let num of arr2) {\n    frequencyCounter2[num] = frequencyCounter2[num] + 1 || 1\n  }\n\n  \u002F\u002F Compare frequency counters\n  for (let key in frequencyCounter1) {\n    if (!(key ** 2 in frequencyCounter2)) return false\n\n    if (frequencyCounter1[key] !== frequencyCounter2[key ** 2]) return false\n  }\n\n  return true\n}\n```\n\n## Performance\n\n1. To create frequencyCounter1, we loop over all the numbers in arr1 =\u003E n loops\n2. Same for frequencyCounter2 =\u003E n loops\n3. To compare the frequency counters, we loop over all the keys in frequencyCounter1 =\u003E at worst case, n loops\n\nTotal = n + n + n = 3n\n\nResulting in a Big O(n) – linear time complexity.\n\nMuch better than our first effort of with Big O(n\u003Csup\u003E2\u003C\u002Fsup\u003E) – quadratic time complexity.\n\n## Awesome references\n\n- I can attribute almost all of my knowledge of algorithms and data structures to one outstanding course: [JavaScript Algorithms and Data Structures Masterclass by Colt Steele](https:\u002F\u002Fad.admitad.com\u002Fg\u002F05dgete24sfa55577a70b3e3b7aadc\u002F?ulp=https%3A%2F%2Fwww.udemy.com%2Fcourse%2Fjs-algorithms-and-data-structures-masterclass%2F).\n- If you prefer books: [JavaScript Data Structures and Algorithms: An Introduction to Understanding and Implementing Core Data Structure and Algorithm Fundamentals by Sammie Bae](https:\u002F\u002Fwww.amazon.co.uk\u002Fgp\u002Fproduct\u002F1484239873\u002Fref=as_li_qf_asin_il_tl?ie=UTF8&tag=doabledanny-21&creative=6738&linkCode=as2&creativeASIN=1484239873&linkId=445fcf63f9402faf2b2b0ef6c5c2f5d8)\n\nIf you enjoyed this post, consider subscribing to [my YouTube channel](https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUC0URylW_U4i26wN231yRqvA?sub_confirmation=1) - it would be much appreciated!\n\nThanks for reading.\n\nHave a great day!\n";b.user={name:"Danny Adams",username:"doabledanny",twitter_username:"DoableDanny",github_username:a,website_url:"https:\u002F\u002Fwww.doabledanny.com\u002Fblog\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--E9y-Y-Cv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F579860\u002F0308971f-d634-4950-92ff-2af9aa479786.PNG",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6VtqWZJT--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F579860\u002F0308971f-d634-4950-92ff-2af9aa479786.PNG"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Fdoabledanny\u002Fhow-to-compare-arrays-in-javascript-efficiently-1p0",131,"2021-08-05T16:15:25Z")));
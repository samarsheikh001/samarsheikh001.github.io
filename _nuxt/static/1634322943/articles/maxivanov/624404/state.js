window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:624404,title:"Ultimate guide to HTTP Strict Transport Security (HSTS)",description:"This is a post in the series on Node.js security best practices. Each post covers one security best p...",readable_publish_date:"Mar 3",slug:"ultimate-guide-to-http-strict-transport-security-hsts-cob",path:"\u002Fmaxivanov\u002Fultimate-guide-to-http-strict-transport-security-hsts-cob",url:"https:\u002F\u002Fdev.to\u002Fmaxivanov\u002Fultimate-guide-to-http-strict-transport-security-hsts-cob",comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--31NmYhKr--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fthumb-dev.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HlgK3VDV--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fthumb-dev.png",canonical_url:"https:\u002F\u002Fwww.maxivanov.io\u002Fhttp-strict-transport-security\u002F",created_at:"2021-03-03T23:33:41Z",edited_at:"2021-03-06T20:26:31Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:10,tag_list:"node, security, http, tutorial",tags:["node","security","http","tutorial"],body_html:"\u003Cp\u003EThis is a post in the series on Node.js security best practices. Each post covers one security best practice in detail.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EProblem → \n  Example attack → \n    Solution → \n      Implementation in Node.js → \n        Implications\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ECode for this post's \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts\"\u003Evulnerable demo project\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EToday's topic is the \u003Cem\u003EHTTP Strict Transport Security (HSTS)\u003C\u002Fem\u003E policy.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENowadays, serving websites and APIs over a secure (SSL\u002FTLS) channel is the default mode of deployment. \u003Cbr\u003E\nYou can have a free certificate from your cloud provider (AWS, Azure, Cloudflare) or you can generate one with LetsEncrypt.\u003Cbr\u003E\nYou install the certificate, configure the HTTP → HTTPS redirect... your and your visitors' data is safe now.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOr is it? Unfortunately, not always. Your web app may still be vulnerable to the \u003Cstrong\u003EMan-in-the-Middle\u003C\u002Fstrong\u003E (MITM) attacks.\u003Cbr\u003E\nIf you're curious how, read on - we will simulate such an attack in the local environment and then will see how to prevent it from the code in Node.js.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe will see what HSTS is from the developer's point of view:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDoes it apply to websites only or to APIs as well?\u003C\u002Fli\u003E\n\u003Cli\u003EWhat are HSTS preloaded lists?\u003C\u002Fli\u003E\n\u003Cli\u003EHow to safely deploy HSTS in production?\u003C\u002Fli\u003E\n\u003Cli\u003EWhat are the limitations and implications of enabling the policy?\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"the-problem\" href=\"#the-problem\"\u003E\n  \u003C\u002Fa\u003E\n  The problem\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ESo what's the vulnerable scenario to consider?\u003C\u002Fp\u003E\n\n\u003Cp\u003EEven if you have the HTTP to HTTPS redirect on your website, the \u003Cstrong\u003Einitial request\u003C\u002Fstrong\u003E a user makes may be sent over the \u003Cstrong\u003Einsecure connection\u003C\u002Fstrong\u003E. That's when it can be intercepted and modified by \u003Cstrong\u003Eany router\u002Fproxy\u003C\u002Fstrong\u003E sitting in between the user and the server.\u003C\u002Fp\u003E\n\n\u003Cp\u003EImagine you're that poor \u003Cem\u003Eabout-to-be-victim\u003C\u002Fem\u003E. You're in the airport waiting for your flight bored to death. You pull out your phone, scroll through the list of public wifi access points and choose legitemately-looking \u003Cem\u003EJFK Free Wi-Fi\u003C\u002Fem\u003E.\u003Cbr\u003E\nToo bad the access point was set up by another bored soul - a tech-savvy teenager sitting next to you!\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the browser you enter your favorite procrastination resource \u003Cem\u003Eexample.com\u003C\u002Fem\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--P1eLR1sT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitm-flow.webp\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--P1eLR1sT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitm-flow.webp\" alt=\"mitm flow\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EYour browser makes a \u003Ccode\u003EGET\u003C\u002Fcode\u003E HTTP request to \u003Ccode\u003Ehttp:\u002F\u002Fexample.com\u003C\u002Fcode\u003E. It is intercepted by the MITM and forwarded to the server.\u003C\u002Fli\u003E\n\u003Cli\u003EServer replies with \u003Ccode\u003E301 Location: https:\u002F\u002Fexample.com\u003C\u002Fcode\u003E redirect. Fake access point rewrites all https urls in the response (headers included) to http versions.\u003C\u002Fli\u003E\n\u003Cli\u003EYour browser sees a redirect to \u003Ccode\u003Ehttp:\u002F\u002Fexample.com\u003C\u002Fcode\u003E. What the hell, isn't it the same url that was just requested? OK, following the redirect.\u003C\u002Fli\u003E\n\u003Cli\u003EMITM intercepts the request and rewrites it to \u003Ccode\u003Ehttps:\u002F\u002Fexample.com\u003C\u002Fcode\u003E. The server returns the page to the MITM via the secure TLS connection.\u003C\u002Fli\u003E\n\u003Cli\u003EMITM returns the page to you via the insecure connection. \u003C\u002Fli\u003E\n\u003Cli\u003EYou go to the login page, enter your credentials and submit the form. MTIM proxies that request, storing your password in the log for the attacker to review later.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EIn fact, in your communication with example.com, even though it enforces the HTTP-to-HTTPS redirect, not a single page was served to you via HTTPS.\u003Cbr\u003E\nBrowsers may show a warning to signal the connection is not secure but you were so desperate to see the latest jokes that you ignored the warning.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis type of attack is called \u003Cstrong\u003ESSLstrip\u003C\u002Fstrong\u003E - the secure transport communication between you and the server is removed.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIs SSL Strip the only possible attack? Glad you asked, there are more!\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cem\u003ECookie Hijacking\u003C\u002Fem\u003E attack where the \u003Cstrong\u003Eunencrypted traffic on a public wireless network\u003C\u002Fstrong\u003E can be monitored for secrets in cookies sent in plain text.\u003C\u002Fli\u003E\n\u003Cli\u003EInstead of proxying user's traffic to \u003Ccode\u003Eexample.com\u003C\u002Fcode\u003E, MITM redirects the browser to \u003Cstrong\u003Eattacker's owned phish\u003C\u002Fstrong\u003E \u003Ccode\u003Eexamp1e.com\u003C\u002Fcode\u003E (note letter \u003Ccode\u003El\u003C\u002Fcode\u003E replaced with \u003Ccode\u003E1\u003C\u002Fcode\u003E). This website looks exactly the same as original. It has a valid TLS certificate and the browser will be happy. Users may spot the change in the URL... or they may not.\u003C\u002Fli\u003E\n\u003Cli\u003EInstead of downgrading the secure channel for the user, MITM can respond with a self-signed certificate. Again the browser will warn about suspicous certificate but the user may simply \u003Cstrong\u003Eclick-through the warning\u003C\u002Fstrong\u003E: \u003Cem\u003EIgnore it, I don't mind, I need my instant gratification here and now\u003C\u002Fem\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhat if we stop serving HTTP traffic altogether (close port 80 on the server)? It won't help, because the problem is not with server responding to HTTP, it's about browser \u003Cstrong\u003Eattempting to request via HTTP\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"example-attack-sslstrip\" href=\"#example-attack-sslstrip\"\u003E\n  \u003C\u002Fa\u003E\n  Example attack: SSLstrip\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou can find a vulnerable project demonstrating the SSLstrip attack in the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts\"\u003Eseries repo\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you want to run it yourself, you will only need Docker installed on your machine. Clone the repo and switch to the \u003Ccode\u003Ehsts\u003C\u002Fcode\u003E folder.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBelow are the steps to reproduce the attack along with brief comments:\u003C\u002Fp\u003E\n\n\u003Cp\u003E1. Generate a local root Certificate Authority (CA). For the test to be realistic, we need a website protected with a valid (as the browser sees it) certificate. \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FFiloSottile\u002Fmkcert\"\u003Emkcert\u003C\u002Fa\u003E is a great tool that makes it simple to generate TLS certificates for local development.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Emkcert \u003Cspan class=\"nt\"\u003E-install\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E2. Generate certificate valid for \u003Ccode\u003Elocalhost\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Emkcert \u003Cspan class=\"nt\"\u003E-cert-file\u003C\u002Fspan\u003E localhost-cert.pem \u003Cspan class=\"nt\"\u003E-key-file\u003C\u002Fspan\u003E localhost-key.pem localhost 127.0.0.1\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E3. Build the Docker image. It is based on the official Node.js image. It also contains \u003Ca href=\"https:\u002F\u002Fmitmproxy.org\u002F\"\u003Emitmproxy\u003C\u002Fa\u003E to simulate the MITM router as well as a script to facilitate the SSLstrip attack.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Edocker build \u003Cspan class=\"nt\"\u003E-t\u003C\u002Fspan\u003E mitmproxy-node - &lt; Dockerfile\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E4. Start a container. It mounts current directory with the Node.js code and root CA certificate generated in step 1. Additionally it maps ports \u003Ccode\u003E80\u003C\u002Fcode\u003E and \u003Ccode\u003E443\u003C\u002Fcode\u003E to serve the website and port \u003Ccode\u003E8080\u003C\u002Fcode\u003E where \u003Ccode\u003Emitmproxy\u003C\u002Fcode\u003E listens.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Edocker run \u003Cspan class=\"nt\"\u003E-it\u003C\u002Fspan\u003E \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E--rm\u003C\u002Fspan\u003E \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-v\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E$(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Epwd\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E:\u002Fvar\u002Fapp\"\u003C\u002Fspan\u003E \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-v\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E$(\u003C\u002Fspan\u003Emkcert \u003Cspan class=\"nt\"\u003E-CAROOT\u003C\u002Fspan\u003E\u003Cspan class=\"si\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E:\u002Fvar\u002Fmkcert\"\u003C\u002Fspan\u003E \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-p\u003C\u002Fspan\u003E 127.0.0.1:80:80 \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-p\u003C\u002Fspan\u003E 127.0.0.1:443:443 \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-p\u003C\u002Fspan\u003E 127.0.0.1:8080:8080 \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nt\"\u003E-w\u003C\u002Fspan\u003E \u002Fvar\u002Fapp \u003Cspan class=\"se\"\u003E\\\u003C\u002Fspan\u003E\n    mitmproxy-node bash\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E5. Start the server (web app)\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Enode index.js\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E6. In a separate tab on your host machine, connect to the running container:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Edocker \u003Cspan class=\"nb\"\u003Eexec\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-it\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-w\u003C\u002Fspan\u003E \u002Fvar\u002Fmitmproxy \u003Cspan class=\"si\"\u003E$(\u003C\u002Fspan\u003Edocker ps \u003Cspan class=\"nt\"\u003E-a\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-q\u003C\u002Fspan\u003E  \u003Cspan class=\"nt\"\u003E--filter\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003Eancestor\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003Emitmproxy-node\u003Cspan class=\"si\"\u003E)\u003C\u002Fspan\u003E bash\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E7. Start mitmproxy\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Emitmproxy \u003Cspan class=\"nt\"\u003E--set\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003Essl_verify_upstream_trusted_ca\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u002Fvar\u002Fmkcert\u002FrootCA.pem \u003Cspan class=\"nt\"\u003E-s\u003C\u002Fspan\u003E sslstrip.py\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E8. Configure your browser to use HTTP proxy at \u003Ccode\u003E127.0.0.1:8080\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E9. Visit \u003Ca href=\"http:\u002F\u002Flocalhost\"\u003Ehttp:\u002F\u002Flocalhost\u003C\u002Fa\u003E in the browser and click through the user flow entering your login and password (can be anything).\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KJ1XXYFa--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-requests.webp\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KJ1XXYFa--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-requests.webp\" alt=\"mitmproxy requests\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can see the requests made by the browser in \u003Ccode\u003Emitmproxy\u003C\u002Fcode\u003E:\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you expand the \u003Ccode\u003EPOST\u003C\u002Fcode\u003E request, you will see the credentials were intercepted:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1fvqn2_g--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-credentials-intercepted.webp\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1fvqn2_g--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-credentials-intercepted.webp\" alt=\"mitmproxy credentials intercepted\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"solution-hsts\" href=\"#solution-hsts\"\u003E\n  \u003C\u002Fa\u003E\n  Solution: HSTS\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhat can we do in order to keep the traffic between users and servers safe? \u003C\u002Fp\u003E\n\n\u003Cp\u003EHTTP Strict Transport Security is a IETF standard approved in 2012 that was designed to help solve the problem of clients making insecure requests to secure-able endpoints.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you take away one thing from this post, remember \u003Ccode\u003EHSTS = HTTPS only\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt lets a webserver inform the browser (and any other complying User Agents) to \u003Cstrong\u003Ecommunicate with that server's domain only in a secure fashion\u003C\u002Fstrong\u003E. \u003Cbr\u003E\nBrowser acknowledges the instruction and marks the server's domain as \u003Cstrong\u003EKnown HSTS host\u003C\u002Fstrong\u003E. \u003Cbr\u003E\nNext time, when establishing an HTTP connection, the browser will check if target host is:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eone of known HSTS hosts\u003C\u002Fli\u003E\n\u003Cli\u003Ea subdomain of one of known HSTS hosts having \u003Ccode\u003EincludeSubdomains\u003C\u002Fcode\u003E\nIf either is true, the browser will treat the host as \u003Cstrong\u003EHTTPS only\u003C\u002Fstrong\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhat benefits does it bring?\u003C\u002Fp\u003E\n\n\u003Cp\u003E1. Browser \u003Cstrong\u003Etransforms all HTTP requests\u003C\u002Fstrong\u003E to a known HSTS host into HTTPS requests automatically.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EWhen user enters \u003Ccode\u003Eexample.com\u003C\u002Fcode\u003E or \u003Ccode\u003Ehttp:\u002F\u002Fexample.com\u003C\u002Fcode\u003E in the browser's address bar\u003C\u002Fli\u003E\n\u003Cli\u003EWhen user clicks \u003Ccode\u003Ehttp:\u002F\u002F...\u003C\u002Fcode\u003E link or a bookmark\u003C\u002Fli\u003E\n\u003Cli\u003EWhen the code makes a \u003Ccode\u003Efetch\u003C\u002Fcode\u003E request\u003C\u002Fli\u003E\n\u003Cli\u003EWhen browser is about to follow a \u003Ccode\u003Ehttp\u003C\u002Fcode\u003E redirect\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E2. Browser \u003Cstrong\u003Eprevents clicking through\u003C\u002Fstrong\u003E certificate warning messages.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen you open a page that has a SSL certificate issue, browser will show a warning page. Normally you can click something like \u003Cem\u003EI understand, let me in\u003C\u002Fem\u003E and continue browsing. When any SSL error\u002Fwarning occurs on a known HSTS host, browser will \u003Cstrong\u003Eblock the user\u003C\u002Fstrong\u003E from using the page completely. The error message will be not dismissable. This is useful to prevent self-signed certificate attack mentioned above.\u003C\u002Fp\u003E\n\n\u003Cp\u003E3. As an added bonus, it saves an extra redirect when user enters \u003Ccode\u003Ehttp:\u002F\u002Fexample.com\u003C\u002Fcode\u003E. Because browser already knows it's a HSTS host it will fetch \u003Ccode\u003Ehttps:\u002F\u002Fexample.com\u003C\u002Fcode\u003E right away.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHow does server declare itself as HTTPS-only? Via a \u003Ccode\u003EStrict-Transport-Security\u003C\u002Fcode\u003E HTTP header.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"stricttransportsecurity-header\" href=\"#stricttransportsecurity-header\"\u003E\n  \u003C\u002Fa\u003E\n  Strict-Transport-Security header\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe header value can consist of 3 directives. An example with all 3:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EStrict-Transport-Security: max-age=63072000; includeSubDomains; preload\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"maxage\" href=\"#maxage\"\u003E\n  \u003C\u002Fa\u003E\n  max-age\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ERequired\u003C\u002Fli\u003E\n\u003Cli\u003EFor how long browser should cache and apply given HSTS policy\u003C\u002Fli\u003E\n\u003Cli\u003EEvery time browser receives the header, it will refresh the expire time (rolling)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Ccode\u003Emax-age=0\u003C\u002Fcode\u003E has special meaning:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIf host that sends it is known, stop treating the host as HSTS and remove the policy\u003C\u002Fli\u003E\n\u003Cli\u003EIf host is unknown, do not add it to the list of known HSTS hosts\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"includesubdomains\" href=\"#includesubdomains\"\u003E\n  \u003C\u002Fa\u003E\n  includeSubDomains\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EOptional\u003C\u002Fli\u003E\n\u003Cli\u003EIf present, makes browser apply the policy to all subdomains of the host. For example if the directive is issued by \u003Ccode\u003Efoo.example.com\u003C\u002Fcode\u003E, \u003Ccode\u003Efoo.example.com\u003C\u002Fcode\u003E and \u003Ccode\u003Ebar.foo.example.com\u003C\u002Fcode\u003E will be considered as HTTPS-only, but not \u003Ccode\u003Eexample.com\u003C\u002Fcode\u003E and \u003Ccode\u003Ebaz.example.com\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EUnless you have a good reason not to, you should include all subdomains to be covered by the HSTS policy\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"preload\" href=\"#preload\"\u003E\n  \u003C\u002Fa\u003E\n  preload\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EOptional\u003C\u002Fli\u003E\n\u003Cli\u003ENot a part of the standard but rather an initiative by browser vendors\u003C\u002Fli\u003E\n\u003Cli\u003EIndicates the site owner agrees the site to be included in the HSTS Preload list\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhat's the use for \u003Ccode\u003Epreload\u003C\u002Fcode\u003E?\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EEven if a site added the HSTS header\u003C\u002Fstrong\u003E, there's a small window where a user visiting that site can still be subject to a MITM attack.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHSTS policy is activated only if the user \u003Cstrong\u003Evisited the site previously\u003C\u002Fstrong\u003E (and the browser processed the header). If the browser doesn't know anything about the site, whether it's HSTS-enabled or not, it may establish an insecure connection.\u003Cbr\u003E\nThe browser may know nothing about the HSTS status of the site in case:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIt never loaded that site before\u003C\u002Fli\u003E\n\u003Cli\u003EBrowser cache was cleared\u003C\u002Fli\u003E\n\u003Cli\u003EHSTS policy expired\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ETo solve this problem, browser vendors ship their browsers with a huge list of known HSTS domains baked in. If the domain is in the HSTS preload list, insecure connection to that domain will \u003Cstrong\u003Enever happen\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Epreload\u003C\u002Fcode\u003E directive in the header only communicates site owner's \u003Cstrong\u003Econsent\u003C\u002Fstrong\u003E to be included in the preload list.\u003Cbr\u003E\nIn order to add a domain to the list, you still need to submit it at \u003Ca href=\"https:\u002F\u002Fhstspreload.org\"\u003Ehttps:\u002F\u002Fhstspreload.org\u003C\u002Fa\u003E. The site must meet the requirements to be included.\u003Cbr\u003E\nThe submission site is maintained by Google and the list is used by \u003Cstrong\u003Eall major browsers\u003C\u002Fstrong\u003E (though each vendor may decide to include extra entries).\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere are serious implications to the preload list inclusion:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIt is a \u003Cstrong\u003Eone way ticket\u003C\u002Fstrong\u003E. After the domain is added browsers will use HTTPS scheme only to load that domain, no matter the header value, expiration date or cache state\u003C\u002Fli\u003E\n\u003Cli\u003EYou can ask to remove the domain from HSTS preload list, but it \u003Cstrong\u003Ecan take months\u003C\u002Fstrong\u003E to happen\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EFor some domains you may not need to add them to the preload lists as their TLDs are included by default. That's the case with \u003Ccode\u003E.dev\u003C\u002Fcode\u003E and \u003Ccode\u003E.app\u003C\u002Fcode\u003E for example.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"implement-in-nodejs\" href=\"#implement-in-nodejs\"\u003E\n  \u003C\u002Fa\u003E\n  Implement in Node.js\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EImplementing HSTS is as simple as adding the \u003Ccode\u003EStrict-Transport-Security\u003C\u002Fcode\u003E header in your code.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn Express (put it before any other controller):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"nx\"\u003Eapp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Euse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ereq\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eres\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ereq\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Esecure\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Eres\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EsetHeader\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EStrict-Transport-Security\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Emax-age=63072000; includeSubDomains\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F 2 years\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Enext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E})\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you try to access the site with the same mitmproxy setup after HSTS was implemented you will see something similar:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rjn3nTCN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fhsts-warning-firefox.webp\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rjn3nTCN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fhsts-warning-firefox.webp\" alt=\"hsts warning firefox\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EImplement in Azure Functions:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"nx\"\u003Emodule\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eexports\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Econtext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ereq\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eheaders\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EStrict-Transport-Security\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Emax-age=63072000; includeSubDomains\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"p\"\u003E...\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econtext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eres\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Ebody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Eheaders\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Estatus\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EImplement in AWS Lambda (you may want to add it in API Gateway instead):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"nx\"\u003Eexports\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ehandler\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E...\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003EstatusCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EresponseCode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Eheaders\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003EStrict-Transport-Security\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Emax-age=63072000; includeSubDomains\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Ebody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EJSON\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estringify\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EresponseBody\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"safe-hsts-deployment-plan\" href=\"#safe-hsts-deployment-plan\"\u003E\n  \u003C\u002Fa\u003E\n  Safe HSTS deployment plan\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EInspired by the great HSTS tutorial from \u003Ca href=\"https:\u002F\u002Fscotthelme.co.uk\u002Fhsts-cheat-sheet\u002F\"\u003EScott Helme\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe idea is to start small and gradually increment the expiration time and inclusion criteria.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EFind out all subdomains you have (consult DNS CNAME entries). Those may be served by your servers or \u003Cstrong\u003E3rd party services\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EMake sure the root domain and all subdomains can serve traffic over SSL\u002FTLS (accessible via HTTPS)\u003C\u002Fli\u003E\n\u003Cli\u003EEnsure HTTP -&gt; HTTPS redirect is configured\u003C\u002Fli\u003E\n\u003Cli\u003ESet small expiration time, e.g. \u003Ccode\u003Emax-age=600\u003C\u002Fcode\u003E (10 minutes), make sure all systems operational\u003C\u002Fli\u003E\n\u003Cli\u003EAdd \u003Ccode\u003EincludeSubDomains\u003C\u002Fcode\u003E directive\u003C\u002Fli\u003E\n\u003Cli\u003EMake incremental changes to \u003Ccode\u003Emax-age\u003C\u002Fcode\u003E. Aim for the value of 2 years\u003C\u002Fli\u003E\n\u003Cli\u003EAdd \u003Ccode\u003Epreload\u003C\u002Fcode\u003E directive and submit the domain to the HSTS preload list\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"implications-considerations\" href=\"#implications-considerations\"\u003E\n  \u003C\u002Fa\u003E\n  Implications \u002F considerations\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E⚡︎ HSTS is \u003Cstrong\u003Ewell supported\u003C\u002Fstrong\u003E by all browsers: \u003Ca href=\"https:\u002F\u002Fcaniuse.com\u002Fstricttransportsecurity\"\u003Ehttps:\u002F\u002Fcaniuse.com\u002Fstricttransportsecurity\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Even with HSTS in place, you still need the \u003Cstrong\u003EHTTP → HTTPS\u003C\u002Fstrong\u003E redirect.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ It should be clear how websites or webapps that users load can benefit from HSTS. Does it make sense to add the header to \u003Cstrong\u003EAPIs\u003C\u002Fstrong\u003E?\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ENo\u003C\u002Fstrong\u003E, if the API is consumed only by trusted clients, where the scheme is hardcoded and cannot be changed. Think mobile apps or servers using your API.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EYes\u003C\u002Fstrong\u003E, if the API is used by browsers. If the web app that calls your API is compromised it can be tricked to make insecure calls: \u003Ccode\u003Ehttp:\u002F\u002Fyour-no-longer-safe-api\u003C\u002Fcode\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E⚡︎ HSTS won't help against attacks to the \u003Cstrong\u003ESSL\u002FTLS protocol\u003C\u002Fstrong\u003E itself, as well as in cases where the server or browser are compromised.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ HSTS is \u003Cstrong\u003Enot related to the certificates\u003C\u002Fstrong\u003E being used by the server \u003Cstrong\u003Eas long as the certificates are valid\u003C\u002Fstrong\u003E. You can replace\u002Frenew certificates at any time.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Users can \u003Cstrong\u003Emanually add and remove HSTS hosts\u003C\u002Fstrong\u003E in browser settings (not preloaded lists though).\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ If you \u003Cstrong\u003Eredirect\u003C\u002Fstrong\u003E \u003Ccode\u003Ehttp:\u002F\u002Fexample.com\u003C\u002Fcode\u003E → \u003Ccode\u003Ehttps:\u002F\u002Fwww.example.com\u003C\u002Fcode\u003E and latter sets the HSTS header with subdomains, \u003Ccode\u003Eexample.com\u003C\u002Fcode\u003E (root) and \u003Ccode\u003Esub.example.com\u003C\u002Fcode\u003E won't have HSTS.\u003Cbr\u003E\nSolution: include 1px picture from \u003Ccode\u003Ehttps:\u002F\u002Fexample.com\u003C\u002Fcode\u003E (which will set the header on the root domain and all subdomains) on every page. \u003Cbr\u003E\nOr better, add the domain to the HSTS preloaded list.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ HSTS preferences are not shared between normal\u002F\u003Cstrong\u003Eincognito\u003C\u002Fstrong\u003E modes in the browser.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ HSTS domain may be vulnerable to a \u003Cstrong\u003ENTP attack\u003C\u002Fstrong\u003E. Victim gets fake response from the NTP server and expires existing HSTS preferences.\u003Cbr\u003E\nNot effective if the domain is in browsers' pre-loaded list.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Even if domain is added to the preloaded lists, you still need to send the \u003Ccode\u003EStrict-Transport-Security\u003C\u002Fcode\u003E for clients that \u003Cstrong\u003Edo not use the list\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ HSTS headers must not be sent with \u003Cstrong\u003Einsecure HTTP responses\u003C\u002Fstrong\u003E (and if you do, browsers won't process them anyway).\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Browsers will ignore HSTS headers received over \u003Cstrong\u003ESSL connection with warnings\u003C\u002Fstrong\u003E (e.g. using self-signed certificate).\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Browsers will ignore HSTS headers if the hostname is in the form of \u003Cstrong\u003EIP address\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E⚡︎ Funny fact: \u003Ccode\u003Egoogle.com\u003C\u002Fcode\u003E does not set HSTS policy on the root domain (mail.google.com does have it). It seems that's due to the requirement to \u003Ca href=\"https:\u002F\u002Fsecurity.stackexchange.com\u002Fquestions\u002F239241\u002Fgoogle-com-is-not-hsts-protected\"\u003Esupport legacy workflows\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"references\" href=\"#references\"\u003E\n  \u003C\u002Fa\u003E\n  References\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fcheatsheetseries.owasp.org\u002Fcheatsheets\u002FHTTP_Strict_Transport_Security_Cheat_Sheet.html\"\u003Ehttps:\u002F\u002Fcheatsheetseries.owasp.org\u002Fcheatsheets\u002FHTTP_Strict_Transport_Security_Cheat_Sheet.html\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FHTTP\u002FHeaders\u002FStrict-Transport-Security\"\u003Ehttps:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FHTTP\u002FHeaders\u002FStrict-Transport-Security\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Ftools.ietf.org\u002Fhtml\u002Frfc6797\"\u003Ehttps:\u002F\u002Ftools.ietf.org\u002Fhtml\u002Frfc6797\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fscotthelme.co.uk\u002Fhsts-cheat-sheet\u002F\"\u003Ehttps:\u002F\u002Fscotthelme.co.uk\u002Fhsts-cheat-sheet\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts\"\u003Ehttps:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"\" href=\"#\"\u003E\n  \u003C\u002Fa\u003E\n  ...\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EStay tuned for the next posts in the Node.js security best practices series!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EIf you like this type of content you can \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fmax_v_i\"\u003Efollow me\u003C\u002Fa\u003E on Twitter for the latest updates.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"This is a post in the series on Node.js security best practices. Each post covers one security best practice in detail.\n\n```text\nProblem → \n  Example attack → \n    Solution → \n      Implementation in Node.js → \n        Implications\n```\n\nCode for this post's [vulnerable demo project](https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts).\n\nToday's topic is the *HTTP Strict Transport Security (HSTS)* policy.\n\nNowadays, serving websites and APIs over a secure (SSL\u002FTLS) channel is the default mode of deployment. \nYou can have a free certificate from your cloud provider (AWS, Azure, Cloudflare) or you can generate one with LetsEncrypt.\nYou install the certificate, configure the HTTP → HTTPS redirect... your and your visitors' data is safe now.\n\nOr is it? Unfortunately, not always. Your web app may still be vulnerable to the **Man-in-the-Middle** (MITM) attacks.\nIf you're curious how, read on - we will simulate such an attack in the local environment and then will see how to prevent it from the code in Node.js.\n\nWe will see what HSTS is from the developer's point of view:\n- Does it apply to websites only or to APIs as well?\n- What are HSTS preloaded lists?\n- How to safely deploy HSTS in production?\n- What are the limitations and implications of enabling the policy?\n\n\n## The problem\n\nSo what's the vulnerable scenario to consider?\n\nEven if you have the HTTP to HTTPS redirect on your website, the **initial request** a user makes may be sent over the **insecure connection**. That's when it can be intercepted and modified by **any router\u002Fproxy** sitting in between the user and the server.\n\nImagine you're that poor *about-to-be-victim*. You're in the airport waiting for your flight bored to death. You pull out your phone, scroll through the list of public wifi access points and choose legitemately-looking *JFK Free Wi-Fi*.\nToo bad the access point was set up by another bored soul - a tech-savvy teenager sitting next to you!\n\nIn the browser you enter your favorite procrastination resource *example.com*. \n\n![mitm flow](https:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitm-flow.webp)\n\n1. Your browser makes a `GET` HTTP request to `http:\u002F\u002Fexample.com`. It is intercepted by the MITM and forwarded to the server.\n2. Server replies with `301 Location: https:\u002F\u002Fexample.com` redirect. Fake access point rewrites all https urls in the response (headers included) to http versions.\n3. Your browser sees a redirect to `http:\u002F\u002Fexample.com`. What the hell, isn't it the same url that was just requested? OK, following the redirect.\n4. MITM intercepts the request and rewrites it to `https:\u002F\u002Fexample.com`. The server returns the page to the MITM via the secure TLS connection.\n5. MITM returns the page to you via the insecure connection. \n6. You go to the login page, enter your credentials and submit the form. MTIM proxies that request, storing your password in the log for the attacker to review later.\n\nIn fact, in your communication with example.com, even though it enforces the HTTP-to-HTTPS redirect, not a single page was served to you via HTTPS.\nBrowsers may show a warning to signal the connection is not secure but you were so desperate to see the latest jokes that you ignored the warning.\n\nThis type of attack is called **SSLstrip** - the secure transport communication between you and the server is removed.\n\nIs SSL Strip the only possible attack? Glad you asked, there are more!\n\n- *Cookie Hijacking* attack where the **unencrypted traffic on a public wireless network** can be monitored for secrets in cookies sent in plain text.\n- Instead of proxying user's traffic to `example.com`, MITM redirects the browser to **attacker's owned phish** `examp1e.com` (note letter `l` replaced with `1`). This website looks exactly the same as original. It has a valid TLS certificate and the browser will be happy. Users may spot the change in the URL... or they may not.\n- Instead of downgrading the secure channel for the user, MITM can respond with a self-signed certificate. Again the browser will warn about suspicous certificate but the user may simply **click-through the warning**: *Ignore it, I don't mind, I need my instant gratification here and now*.\n\nWhat if we stop serving HTTP traffic altogether (close port 80 on the server)? It won't help, because the problem is not with server responding to HTTP, it's about browser **attempting to request via HTTP**.\n\n## Example attack: SSLstrip\n\nYou can find a vulnerable project demonstrating the SSLstrip attack in the [series repo](https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts).\n\nIf you want to run it yourself, you will only need Docker installed on your machine. Clone the repo and switch to the `hsts` folder.\n\nBelow are the steps to reproduce the attack along with brief comments:\n\n1\\. Generate a local root Certificate Authority (CA). For the test to be realistic, we need a website protected with a valid (as the browser sees it) certificate. [mkcert](https:\u002F\u002Fgithub.com\u002FFiloSottile\u002Fmkcert) is a great tool that makes it simple to generate TLS certificates for local development.\n\n```bash\nmkcert -install\n```\n\n2\\. Generate certificate valid for `localhost`\n\n```bash\nmkcert -cert-file localhost-cert.pem -key-file localhost-key.pem localhost 127.0.0.1\n```\n\n3\\. Build the Docker image. It is based on the official Node.js image. It also contains [mitmproxy](https:\u002F\u002Fmitmproxy.org\u002F) to simulate the MITM router as well as a script to facilitate the SSLstrip attack.\n\n```bash\ndocker build -t mitmproxy-node - \u003C Dockerfile\n```\n\n4\\. Start a container. It mounts current directory with the Node.js code and root CA certificate generated in step 1. Additionally it maps ports `80` and `443` to serve the website and port `8080` where `mitmproxy` listens.\n\n```bash\ndocker run -it \\\n    --rm \\\n    -v \"$(pwd):\u002Fvar\u002Fapp\" \\\n    -v \"$(mkcert -CAROOT):\u002Fvar\u002Fmkcert\" \\\n    -p 127.0.0.1:80:80 \\\n    -p 127.0.0.1:443:443 \\\n    -p 127.0.0.1:8080:8080 \\\n    -w \u002Fvar\u002Fapp \\\n    mitmproxy-node bash\n```\n\n5\\. Start the server (web app)\n\n```bash\nnode index.js\n```\n\n6\\. In a separate tab on your host machine, connect to the running container:\n\n```bash\ndocker exec -it -w \u002Fvar\u002Fmitmproxy $(docker ps -a -q  --filter ancestor=mitmproxy-node) bash\n```\n\n7\\. Start mitmproxy\n\n```bash\nmitmproxy --set ssl_verify_upstream_trusted_ca=\u002Fvar\u002Fmkcert\u002FrootCA.pem -s sslstrip.py\n```\n\n8\\. Configure your browser to use HTTP proxy at `127.0.0.1:8080`\n\n9\\. Visit http:\u002F\u002Flocalhost in the browser and click through the user flow entering your login and password (can be anything).\n\n![mitmproxy requests](https:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-requests.webp)\n\nYou can see the requests made by the browser in `mitmproxy`:\n\nIf you expand the `POST` request, you will see the credentials were intercepted:\n\n![mitmproxy credentials intercepted](https:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fmitmproxy-credentials-intercepted.webp)\n\n## Solution: HSTS\n\nWhat can we do in order to keep the traffic between users and servers safe? \n\nHTTP Strict Transport Security is a IETF standard approved in 2012 that was designed to help solve the problem of clients making insecure requests to secure-able endpoints.\n\nIf you take away one thing from this post, remember `HSTS = HTTPS only`.\n\nIt lets a webserver inform the browser (and any other complying User Agents) to **communicate with that server's domain only in a secure fashion**. \nBrowser acknowledges the instruction and marks the server's domain as **Known HSTS host**. \nNext time, when establishing an HTTP connection, the browser will check if target host is:\n- one of known HSTS hosts\n- a subdomain of one of known HSTS hosts having `includeSubdomains`\nIf either is true, the browser will treat the host as **HTTPS only**.\n\nWhat benefits does it bring?\n\n1\\. Browser **transforms all HTTP requests** to a known HSTS host into HTTPS requests automatically.\n- When user enters `example.com` or `http:\u002F\u002Fexample.com` in the browser's address bar\n- When user clicks `http:\u002F\u002F...` link or a bookmark\n- When the code makes a `fetch` request\n- When browser is about to follow a `http` redirect\n\n2\\. Browser **prevents clicking through** certificate warning messages.\n\nWhen you open a page that has a SSL certificate issue, browser will show a warning page. Normally you can click something like *I understand, let me in* and continue browsing. When any SSL error\u002Fwarning occurs on a known HSTS host, browser will **block the user** from using the page completely. The error message will be not dismissable. This is useful to prevent self-signed certificate attack mentioned above.\n\n3\\. As an added bonus, it saves an extra redirect when user enters `http:\u002F\u002Fexample.com`. Because browser already knows it's a HSTS host it will fetch `https:\u002F\u002Fexample.com` right away.\n\nHow does server declare itself as HTTPS-only? Via a `Strict-Transport-Security` HTTP header.\n\n## Strict-Transport-Security header\n\nThe header value can consist of 3 directives. An example with all 3:\n\n```text\nStrict-Transport-Security: max-age=63072000; includeSubDomains; preload\n```\n\n### max-age\n\n- Required\n- For how long browser should cache and apply given HSTS policy\n- Every time browser receives the header, it will refresh the expire time (rolling)\n\n`max-age=0` has special meaning:\n\n- If host that sends it is known, stop treating the host as HSTS and remove the policy\n- If host is unknown, do not add it to the list of known HSTS hosts\n\n\n### includeSubDomains\n\n- Optional\n- If present, makes browser apply the policy to all subdomains of the host. For example if the directive is issued by `foo.example.com`, `foo.example.com` and `bar.foo.example.com` will be considered as HTTPS-only, but not `example.com` and `baz.example.com`\n- Unless you have a good reason not to, you should include all subdomains to be covered by the HSTS policy\n\n### preload\n\n- Optional\n- Not a part of the standard but rather an initiative by browser vendors\n- Indicates the site owner agrees the site to be included in the HSTS Preload list\n\nWhat's the use for `preload`?\n\n**Even if a site added the HSTS header**, there's a small window where a user visiting that site can still be subject to a MITM attack.\n\nHSTS policy is activated only if the user **visited the site previously** (and the browser processed the header). If the browser doesn't know anything about the site, whether it's HSTS-enabled or not, it may establish an insecure connection.\nThe browser may know nothing about the HSTS status of the site in case:\n- It never loaded that site before\n- Browser cache was cleared\n- HSTS policy expired\n\nTo solve this problem, browser vendors ship their browsers with a huge list of known HSTS domains baked in. If the domain is in the HSTS preload list, insecure connection to that domain will **never happen**.\n\n`preload` directive in the header only communicates site owner's **consent** to be included in the preload list.\nIn order to add a domain to the list, you still need to submit it at https:\u002F\u002Fhstspreload.org. The site must meet the requirements to be included.\nThe submission site is maintained by Google and the list is used by **all major browsers** (though each vendor may decide to include extra entries).\n\nThere are serious implications to the preload list inclusion:\n\n- It is a **one way ticket**. After the domain is added browsers will use HTTPS scheme only to load that domain, no matter the header value, expiration date or cache state\n- You can ask to remove the domain from HSTS preload list, but it **can take months** to happen\n\nFor some domains you may not need to add them to the preload lists as their TLDs are included by default. That's the case with `.dev` and `.app` for example.\n\n## Implement in Node.js\n\nImplementing HSTS is as simple as adding the `Strict-Transport-Security` header in your code.\n\nIn Express (put it before any other controller):\n\n```js\napp.use(function(req, res, next) {\n  if (req.secure) {\n    res.setHeader('Strict-Transport-Security', 'max-age=63072000; includeSubDomains') \u002F\u002F 2 years\n  }\n  next()\n})\n```\n\nIf you try to access the site with the same mitmproxy setup after HSTS was implemented you will see something similar:\n\n![hsts warning firefox](https:\u002F\u002Fwww.maxivanov.io\u002Fposts\u002F2021\u002F03\u002Fhttp-strict-transport-security\u002Fhsts-warning-firefox.webp)\n\nImplement in Azure Functions:\n\n```js\nmodule.exports = async function (context, req) {\n    let headers = {\n        'Strict-Transport-Security': 'max-age=63072000; includeSubDomains',\n    }\n\n    ...\n    context.res = {\n        body,\n        headers,\n        status\n    }\n}\n```\n\nImplement in AWS Lambda (you may want to add it in API Gateway instead):\n\n```js\nexports.handler = async (event) =\u003E {\n  ...\n  let response = {\n    statusCode: responseCode,\n    headers: {\n      'Strict-Transport-Security': 'max-age=63072000; includeSubDomains',\n    },\n    body: JSON.stringify(responseBody),\n  }\n\n  return response;\n};\n```\n\n## Safe HSTS deployment plan\n\nInspired by the great HSTS tutorial from [Scott Helme](https:\u002F\u002Fscotthelme.co.uk\u002Fhsts-cheat-sheet\u002F).\n\nThe idea is to start small and gradually increment the expiration time and inclusion criteria.\n\n1. Find out all subdomains you have (consult DNS CNAME entries). Those may be served by your servers or **3rd party services**\n2. Make sure the root domain and all subdomains can serve traffic over SSL\u002FTLS (accessible via HTTPS)\n3. Ensure HTTP -\u003E HTTPS redirect is configured\n4. Set small expiration time, e.g. `max-age=600` (10 minutes), make sure all systems operational\n5. Add `includeSubDomains` directive\n6. Make incremental changes to `max-age`. Aim for the value of 2 years\n7. Add `preload` directive and submit the domain to the HSTS preload list\n\n## Implications \u002F considerations\n\n⚡︎ HSTS is **well supported** by all browsers: https:\u002F\u002Fcaniuse.com\u002Fstricttransportsecurity\n\n⚡︎ Even with HSTS in place, you still need the **HTTP → HTTPS** redirect.\n\n⚡︎ It should be clear how websites or webapps that users load can benefit from HSTS. Does it make sense to add the header to **APIs**?\n- **No**, if the API is consumed only by trusted clients, where the scheme is hardcoded and cannot be changed. Think mobile apps or servers using your API.\n- **Yes**, if the API is used by browsers. If the web app that calls your API is compromised it can be tricked to make insecure calls: `http:\u002F\u002Fyour-no-longer-safe-api`.\n\n⚡︎ HSTS won't help against attacks to the **SSL\u002FTLS protocol** itself, as well as in cases where the server or browser are compromised.\n\n⚡︎ HSTS is **not related to the certificates** being used by the server **as long as the certificates are valid**. You can replace\u002Frenew certificates at any time.\n\n⚡︎ Users can **manually add and remove HSTS hosts** in browser settings (not preloaded lists though).\n\n⚡︎ If you **redirect** `http:\u002F\u002Fexample.com` → `https:\u002F\u002Fwww.example.com` and latter sets the HSTS header with subdomains, `example.com` (root) and `sub.example.com` won't have HSTS.\nSolution: include 1px picture from `https:\u002F\u002Fexample.com` (which will set the header on the root domain and all subdomains) on every page. \nOr better, add the domain to the HSTS preloaded list.\n\n⚡︎ HSTS preferences are not shared between normal\u002F**incognito** modes in the browser.\n\n⚡︎ HSTS domain may be vulnerable to a **NTP attack**. Victim gets fake response from the NTP server and expires existing HSTS preferences.\nNot effective if the domain is in browsers' pre-loaded list.\n\n⚡︎ Even if domain is added to the preloaded lists, you still need to send the `Strict-Transport-Security` for clients that **do not use the list**.\n\n⚡︎ HSTS headers must not be sent with **insecure HTTP responses** (and if you do, browsers won't process them anyway).\n\n⚡︎ Browsers will ignore HSTS headers received over **SSL connection with warnings** (e.g. using self-signed certificate).\n\n⚡︎ Browsers will ignore HSTS headers if the hostname is in the form of **IP address**.\n\n⚡︎ Funny fact: `google.com` does not set HSTS policy on the root domain (mail.google.com does have it). It seems that's due to the requirement to [support legacy workflows](https:\u002F\u002Fsecurity.stackexchange.com\u002Fquestions\u002F239241\u002Fgoogle-com-is-not-hsts-protected).\n\n## References\n\n- https:\u002F\u002Fcheatsheetseries.owasp.org\u002Fcheatsheets\u002FHTTP_Strict_Transport_Security_Cheat_Sheet.html\n- https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FHTTP\u002FHeaders\u002FStrict-Transport-Security\n- https:\u002F\u002Ftools.ietf.org\u002Fhtml\u002Frfc6797\n- https:\u002F\u002Fscotthelme.co.uk\u002Fhsts-cheat-sheet\u002F\n- https:\u002F\u002Fgithub.com\u002Fmaximivanov\u002Fvulnerable-by-design\u002Ftree\u002Fmain\u002Fhsts\n\n## ...\n\nStay tuned for the next posts in the Node.js security best practices series!\n\n*If you like this type of content you can [follow me](https:\u002F\u002Ftwitter.com\u002Fmax_v_i) on Twitter for the latest updates.*",user:{name:"Max Ivanov",username:"maxivanov",twitter_username:"max_v_i",github_username:"maximivanov",website_url:"https:\u002F\u002Fwww.maxivanov.io",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--G-ib-xaf--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F517878\u002Ff216ec89-2513-4d84-a18e-7a3988f7c629.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BDj_uGZr--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F517878\u002Ff216ec89-2513-4d84-a18e-7a3988f7c629.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmaxivanov\u002F624404",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-03-03T23:42:04Z",14));
__NUXT_JSONP__("/articles/hmadhsan/520019", (function(a,b,c,d,e,f){c.type_of="article";c.id=520019;c.title="Getting Started Guide for Restful API using Node, Mongo & Express";c.description="Before starting our guide let me introduce myself. I am Hammad Hassan a front-end (React) Developer....";c.readable_publish_date="Dec 3 '20";c.slug="getting-started-guide-for-restful-api-using-node-mongo-express-1gg6";c.path="\u002Fhmadhsan\u002Fgetting-started-guide-for-restful-api-using-node-mongo-express-1gg6";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--0U2R0QNV--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyuc36zwh04v0xsf4g1c7.png";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--l6I_wCSN--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyuc36zwh04v0xsf4g1c7.png";c.canonical_url=d;c.created_at="2020-11-20T11:23:13Z";c.edited_at="2020-12-05T19:28:33Z";c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=4;c.tag_list="node, express, mongodb, restapi";c.tags=["node","express","mongodb","restapi"];c.body_html="\u003Cp\u003EBefore starting our guide let me introduce myself. I am Hammad Hassan a front-end (React) Developer. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"prerequisites\" href=\"#prerequisites\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Pre-Requisites\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI am assuming that you have some basic understanding of JavaScript and have already installed NodeJS too.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFirst you have to create a folder and run a command of\n\u003Ccode\u003Enpm init\u003C\u002Fcode\u003E to create our package.json file.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"packages-we-need-in-this-guide\" href=\"#packages-we-need-in-this-guide\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Packages we need in this guide.\n\u003C\u002Fh2\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nrequire(\"dotenv\u002Fconfig\");\nconst bodyParser = require(\"body-parser\");\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo all you need is to install these packages by running a following command\u003Cbr\u003E\n\u003Ccode\u003Enpm i express mongoose dotenv body-parser nodemon\u003Cbr\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EAfter installing these packages, You have to make an app.js file (You can give any name)\nand add the following code in it.\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    const express = require('express');\n    const app = express();\n    app.get(\"\u002F\", (req, res) =&gt; {\n    res.send(\"Hello from Node js\");\n    })\n    app.listen(3000);\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003ENow, go to your terminal and run \u003Ccode\u003Enode app.js\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EHere we are importing our express server package and we are storing it in our \u003Ccode\u003Eapp\u003C\u002Fcode\u003E variable. \u003C\u002Fli\u003E\n\u003Cli\u003EThen \u003Ccode\u003Eapp.get\u003C\u002Fcode\u003E method is simply stating our route with second argument of callback function in which we are sending what we want to print on our browser.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eapp.listen(3000)\u003C\u002Fcode\u003E is telling us on which port we want to see our server has responded. (Instead of 3000 you can name it whatever u want).\u003C\u002Fli\u003E\n\u003Cli\u003ENow, open your browser and hit \n\u003Ccode\u003Ehttp:\u002F\u002Flocalhost:3000\u003C\u002Fcode\u003E as url and you should see \"Hello from Nodejs\" printing up in your browser.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch1\u003E\n  \u003Ca name=\"creating-get-and-post-apis\" href=\"#creating-get-and-post-apis\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Creating GET and POST API's\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ENow, when you have learnt how to run the server in NodeJS, let's see how to create the the API's in NodeJS. We will be building an API to \u003Ccode\u003EGET\u003C\u002Fcode\u003E and \u003Ccode\u003EPOST\u003C\u002Fcode\u003E some random data on to the server.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EModels\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ENow, create a new folder in your root directory name as \u003Ccode\u003Emodels\u003C\u002Fcode\u003E and in this folder create a new file of \u003Ccode\u003EPosts.js\u003C\u002Fcode\u003E (you can give any other name you want) and in this file add up the following code.\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst mongoose = require(\"mongoose\");\n\nconst PostSchema = mongoose.Schema({\n  firstname: {\n    type: String,\n    required: true,\n  },\n  lastname: {\n    type: String,\n    required: true,\n  },\n});\n\nmodule.exports = mongoose.model(\"Posts\", PostSchema);\n\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cul\u003E\n\u003Cli\u003EHere, in our first line we are importing mongoose (a package, where data will be store).\u003C\u002Fli\u003E\n\u003Cli\u003EThen, we are creating a method, named as \u003Ccode\u003EPostSchema\u003C\u002Fcode\u003E (give name of whatever you want) and in this method we are creating an object which is classifying the Schema (content) of our API.\u003C\u002Fli\u003E\n\u003Cli\u003EAfter that we are simply exporting the file so we can use this  \u003Ccode\u003EPostSchema\u003C\u002Fcode\u003E method in our other files (components) too.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ERoutes\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow comeback to your root directory and create a new folder name as \u003Ccode\u003Eroutes\u003C\u002Fcode\u003E and then create a new file in this folder name as \u003Ccode\u003Eposts.js\u003C\u002Fcode\u003E (give whatever name you want) and in this file add up the following code\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst express = require(\"express\");\nconst router = express.Router();\n\u002F\u002Fimporting model\nconst Post = require(\"..\u002Fmodels\u002FPosts\");\n\n\u002F\u002FGet the posts\nrouter.get(\"\u002F\", async (req, res) =&gt; {\n  try {\n    const getPosts = await Post.find();\n    res.json(getPosts);\n  } catch (error) {\n    res.json({ message: error });\n  }\n});\n\n\u002F\u002FSubmit a post\nrouter.post(\"\u002F\", async (req, res) =&gt; {\n  const newPost = new Post({\n     firstname: req.body.firstname,\n    lastname: req.body.lastname,\n  });\n\n  try {\n    const savePost = await newPost.save();\n    res.json(savePost);\n  } catch (error) {\n    res.json({ message: error });\n  }\n});\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EIn first line we are importing the \u003Ccode\u003Eexpress\u003C\u002Fcode\u003E server.\u003C\u002Fli\u003E\n\u003Cli\u003EThen we need a \u003Ccode\u003Erouter\u003C\u002Fcode\u003E method from express server so in second line we are creating a new variable name \u003Ccode\u003Erouter\u003C\u002Fcode\u003E and storing our \u003Ccode\u003Eexpress.Router()\u003C\u002Fcode\u003E method in it.\u003C\u002Fli\u003E\n\u003Cli\u003EIn 3rd line we are importing our Posts.js file from models folder so we can access the schema of our API we had created in that file and storing in the \u003Ccode\u003EPost\u003C\u002Fcode\u003E constant.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EGet Posts:\u003C\u002Fstrong\u003E Then, we are declaring a \u003Ccode\u003Erouter.get\u003C\u002Fcode\u003E method. In this method we are taking two arguments. First is specifying the route of the API and in second we are declaring a callback with two parameters of \u003Ccode\u003Ereq\u003C\u002Fcode\u003E (request) and \u003Ccode\u003Eres\u003C\u002Fcode\u003E(response).\u003C\u002Fli\u003E\n\u003Cli\u003EAfter that, we are declaring try\u002Fcatch statement.\u003C\u002Fli\u003E\n\u003Cli\u003EIn \u003Ccode\u003Etry\u003C\u002Fcode\u003E block we are using javascript's \u003Ccode\u003Efind\u003C\u002Fcode\u003E method to get all the posts we are getting from our \u003Ccode\u003EPost\u003C\u002Fcode\u003E model (imported above), then converting it into json format and storing it in the \u003Ccode\u003EgetPosts\u003C\u002Fcode\u003E variable.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EIn \u003Ccode\u003Ecatch\u003C\u002Fcode\u003E block, we are catching the error, only if \u003Ccode\u003Etry\u003C\u002Fcode\u003E block fails to execute successfully. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ESubmit new Post:\u003C\u002Fstrong\u003E To submit a new post to our server, we are using \u003Ccode\u003Erouter.post\u003C\u002Fcode\u003E method, here we are also taking two arguments. First is specifying the route of the API and in second we are declaring a callback with two parameters of \u003Ccode\u003Ereq\u003C\u002Fcode\u003E (request) and \u003Ccode\u003Eres\u003C\u002Fcode\u003E(response).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EThen, we are making a new variable name as newPost. In this, we are creating an instance of the object we had created in our \u003Ccode\u003EPosts.js\u003C\u002Fcode\u003E file in (\u003Ccode\u003Emodels\u003C\u002Fcode\u003E folder).\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAfter that, we are declaring try\u002Fcatch statement.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EIn \u003Ccode\u003Etry\u003C\u002Fcode\u003E block we are using javascript's \u003Ccode\u003Esave\u003C\u002Fcode\u003E method to save our new post in our mongo database from our \u003Ccode\u003EnewPost\u003C\u002Fcode\u003E variable we just declared above and converting it into a json format. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EIn \u003Ccode\u003Ecatch\u003C\u002Fcode\u003E block, we are catching the error, only if \u003Ccode\u003Etry\u003C\u002Fcode\u003E block fails to execute successfully.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EHere, we are done with our \u003Ccode\u003EGET\u003C\u002Fcode\u003E and \u003Ccode\u003EPOST\u003C\u002Fcode\u003E API requests. Now, just comeback to your \u003Ccode\u003Eapp.js\u003C\u002Fcode\u003E file and add these lines of code.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002FImporting routes\nconst postsRoute = require(\".\u002Froutes\u002Fposts\");\n\n\u002F\u002FAdding middleware\napp.use(bodyParser.json());\napp.use(\"\u002Fposts\", postsRoute);\n\n\u002F\u002Fconnect to DB\nmongoose.connect(process.env.DB_CONNECTION, { useNewUrlParser: true }, () =&gt; {\n  console.log(\"Connected to DB\");\n});\napp.listen(8080);\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EHere first we are importing the route file.\u003C\u002Fli\u003E\n\u003Cli\u003EThen we are adding \u003Ccode\u003Emiddleware\u003C\u002Fcode\u003E. A \u003Ccode\u003Emiddleware\u003C\u002Fcode\u003E is actually a function that can access the request and response objects.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eapp.use(bodyParser.json());\u003C\u002Fcode\u003E means whenever route request will execute a bodyParser will run.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Eapp.use(\"\u002Fposts\", postsRoute);\u003C\u002Fcode\u003E means whenever we are on posts routes then this middleware will be called.\u003C\u002Fli\u003E\n\u003Cli\u003EThen, we are connecting our server to mongo DB. That topic is a bit lengthy so I haven't covered it here. You can create your free account to access mongoDB here at this: \u003Ca href=\"https:\u002F\u002Faccount.mongodb.com\u002Faccount\u002Flogin\"\u003ELink\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ESo, here we go. We have successfully made our first API in NodeJS. \u003Cbr\u003E\nIf you like this article then hit a favorite button to give it a big cheers up ❤\u003C\u002Fp\u003E\n\n";c.body_markdown="Before starting our guide let me introduce myself. I am Hammad Hassan a front-end (React) Developer. \n\n### Pre-Requisites\nI am assuming that you have some basic understanding of JavaScript and have already installed NodeJS too.\n\n* First you have to create a folder and run a command of\n` npm init ` to create our package.json file.\n\n## Packages we need in this guide.\n\n```\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nrequire(\"dotenv\u002Fconfig\");\nconst bodyParser = require(\"body-parser\");\n\n```\nSo all you need is to install these packages by running a following command\n` npm i express mongoose dotenv body-parser nodemon\n`\n* After installing these packages, You have to make an app.js file (You can give any name)\nand add the following code in it.\n\n``` \n    const express = require('express');\n    const app = express();\n    app.get(\"\u002F\", (req, res) =\u003E {\n    res.send(\"Hello from Node js\");\n    })\n    app.listen(3000);\n\n ```\nNow, go to your terminal and run ` node app.js `\n\n* Here we are importing our express server package and we are storing it in our ` app ` variable. \n* Then `app.get` method is simply stating our route with second argument of callback function in which we are sending what we want to print on our browser.\n* ` app.listen(3000) ` is telling us on which port we want to see our server has responded. (Instead of 3000 you can name it whatever u want).\n* Now, open your browser and hit \n` http:\u002F\u002Flocalhost:3000 ` as url and you should see \"Hello from Nodejs\" printing up in your browser.\n\n# Creating GET and POST API's\n\nNow, when you have learnt how to run the server in NodeJS, let's see how to create the the API's in NodeJS. We will be building an API to ` GET ` and ` POST ` some random data on to the server.\n\n**Models**\n\n* Now, create a new folder in your root directory name as ` models ` and in this folder create a new file of ` Posts.js ` (you can give any other name you want) and in this file add up the following code.\n\n```\nconst mongoose = require(\"mongoose\");\n\nconst PostSchema = mongoose.Schema({\n  firstname: {\n    type: String,\n    required: true,\n  },\n  lastname: {\n    type: String,\n    required: true,\n  },\n});\n\nmodule.exports = mongoose.model(\"Posts\", PostSchema);\n\n\n```\n* Here, in our first line we are importing mongoose (a package, where data will be store).\n* Then, we are creating a method, named as ` PostSchema ` (give name of whatever you want) and in this method we are creating an object which is classifying the Schema (content) of our API.\n* After that we are simply exporting the file so we can use this  ` PostSchema ` method in our other files (components) too.\n\n**Routes**\n\nNow comeback to your root directory and create a new folder name as `routes` and then create a new file in this folder name as `posts.js` (give whatever name you want) and in this file add up the following code\n\n```\nconst express = require(\"express\");\nconst router = express.Router();\n\u002F\u002Fimporting model\nconst Post = require(\"..\u002Fmodels\u002FPosts\");\n\n\u002F\u002FGet the posts\nrouter.get(\"\u002F\", async (req, res) =\u003E {\n  try {\n    const getPosts = await Post.find();\n    res.json(getPosts);\n  } catch (error) {\n    res.json({ message: error });\n  }\n});\n\n\u002F\u002FSubmit a post\nrouter.post(\"\u002F\", async (req, res) =\u003E {\n  const newPost = new Post({\n     firstname: req.body.firstname,\n    lastname: req.body.lastname,\n  });\n\n  try {\n    const savePost = await newPost.save();\n    res.json(savePost);\n  } catch (error) {\n    res.json({ message: error });\n  }\n});\n\n```\n* In first line we are importing the `express` server.\n* Then we need a `router` method from express server so in second line we are creating a new variable name `router` and storing our `express.Router()` method in it.\n* In 3rd line we are importing our Posts.js file from models folder so we can access the schema of our API we had created in that file and storing in the `Post` constant.\n* **Get Posts:** Then, we are declaring a `router.get` method. In this method we are taking two arguments. First is specifying the route of the API and in second we are declaring a callback with two parameters of `req` (request) and `res`(response).\n* After that, we are declaring try\u002Fcatch statement.\n* In `try` block we are using javascript's `find` method to get all the posts we are getting from our `Post` model (imported above), then converting it into json format and storing it in the `getPosts` variable.\n* In `catch` block, we are catching the error, only if `try` block fails to execute successfully. \n\n* **Submit new Post:** To submit a new post to our server, we are using `router.post` method, here we are also taking two arguments. First is specifying the route of the API and in second we are declaring a callback with two parameters of `req` (request) and `res`(response).\n* Then, we are making a new variable name as newPost. In this, we are creating an instance of the object we had created in our `Posts.js` file in (`models` folder).\n* After that, we are declaring try\u002Fcatch statement.\n* In `try` block we are using javascript's `save` method to save our new post in our mongo database from our `newPost` variable we just declared above and converting it into a json format. \n* In `catch` block, we are catching the error, only if `try` block fails to execute successfully.\n\nHere, we are done with our `GET` and `POST` API requests. Now, just comeback to your `app.js` file and add these lines of code.\n\n```\n\u002F\u002FImporting routes\nconst postsRoute = require(\".\u002Froutes\u002Fposts\");\n\n\u002F\u002FAdding middleware\napp.use(bodyParser.json());\napp.use(\"\u002Fposts\", postsRoute);\n\n\u002F\u002Fconnect to DB\nmongoose.connect(process.env.DB_CONNECTION, { useNewUrlParser: true }, () =\u003E {\n  console.log(\"Connected to DB\");\n});\napp.listen(8080);\n\n```\n* Here first we are importing the route file.\n* Then we are adding `middleware`. A `middleware` is actually a function that can access the request and response objects.\n* `app.use(bodyParser.json());` means whenever route request will execute a bodyParser will run.\n* `app.use(\"\u002Fposts\", postsRoute);` means whenever we are on posts routes then this middleware will be called.\n* Then, we are connecting our server to mongo DB. That topic is a bit lengthy so I haven't covered it here. You can create your free account to access mongoDB here at this: [Link](https:\u002F\u002Faccount.mongodb.com\u002Faccount\u002Flogin).\n\n\nSo, here we go. We have successfully made our first API in NodeJS. \nIf you like this article then hit a favorite button to give it a big cheers up ❤\n\n";c.user={name:"Hammad Hassan",username:f,twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Q3Wx1NzO--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F279976\u002Fa5b56682-06a5-4d23-a897-3f2973cff77b.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WeyJ-13l--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F279976\u002Fa5b56682-06a5-4d23-a897-3f2973cff77b.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2020-12-03T05:06:13Z",{},"https:\u002F\u002Fdev.to\u002Fhmadhsan\u002Fgetting-started-guide-for-restful-api-using-node-mongo-express-1gg6",7,"hmadhsan")));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:733350,title:"How to record an HTML canvas element and make a GIF",description:"This sort of slipped into my recent post on doing the camera for my WebGL project because I...",readable_publish_date:"Jun 28",slug:"how-to-record-a-canvas-element-and-make-a-gif-4852",path:"\u002Fndesmic\u002Fhow-to-record-a-canvas-element-and-make-a-gif-4852",url:d,comments_count:0,public_reactions_count:e,collection_id:a,published_timestamp:b,positive_reactions_count:e,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F733350.png",canonical_url:d,created_at:"2021-06-20T00:31:50Z",edited_at:"2021-06-28T23:25:51Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"ffmpeg, canvas, vanillajs",tags:["ffmpeg","canvas","vanillajs"],body_html:"\u003Cp\u003E\u003Ciframe height=\"600\" src=\"https:\u002F\u002Fcodepen.io\u002Fndesmic\u002Fembed\u002FyLMrOqa?height=600&amp;default-tab=result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" loading=\"lazy\" style=\"width: 100%;\"\u003E\n\u003C\u002Fiframe\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis sort of slipped into my recent post on doing the camera for my WebGL project because I needed something to make visual samples to post with the article.  As of this writing, Chromium browsers will work, Firefox should work with a couple tweaks (noted below, but not present in the demo), Safari will not.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"get-your-canvas\" href=\"#get-your-canvas\"\u003E\n  \u003C\u002Fa\u003E\n  Get your canvas\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThe canvas can have anything, WebGL, normal 2d stuff, WebGPU it doesn't matter.  You can also do \u003Ccode\u003Evideo\u003C\u002Fcode\u003E and \u003Ccode\u003Eaudio\u003C\u002Fcode\u003E elements too.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn my code I have canvas that cycles through colors.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"the-code\" href=\"#the-code\"\u003E\n  \u003C\u002Fa\u003E\n  The code\n\u003C\u002Fh1\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecanvas\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Edocument\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EquerySelector\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ecanvas\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecordBtn\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Edocument\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EquerySelector\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ebutton\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Erecording\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmediaRecorder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecordedChunks\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003ErecordBtn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Eclick\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Erecording\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Erecording\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Erecording\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003ErecordBtn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EtextContent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EStop\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estream\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecanvas\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcaptureStream\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E25\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003EmediaRecorder\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EMediaRecorder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estream\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"na\"\u003EmimeType\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Evideo\u002Fwebm;codecs=vp9\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n                                \u003Cspan class=\"na\"\u003EignoreMutedMedia\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\n            \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003ErecordedChunks\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[];\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003EmediaRecorder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eondataavailable\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Esize\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n                    \u003Cspan class=\"nx\"\u003ErecordedChunks\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n                \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n            \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003EmediaRecorder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003ErecordBtn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EtextContent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003ERecord\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003EmediaRecorder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estop\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n            \u003Cspan class=\"nx\"\u003EsetTimeout\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eblob\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EBlob\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ErecordedChunks\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n                    \u003Cspan class=\"na\"\u003Etype\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Evideo\u002Fwebm\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\n                \u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n                \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eurl\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EURL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcreateObjectURL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eblob\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n                \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Edocument\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcreateElement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n                \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ehref\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Edownload\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Erecording.webm\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eclick\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n                \u003Cspan class=\"nx\"\u003EURL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ErevokeObjectURL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFirst we get a stream from the canvas \u003Ccode\u003Ecanvas.captureStream(25)\u003C\u002Fcode\u003E.  The parameter is the max framerate, you can change less but if it animates more than that you'll drop frames.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext we create a \u003Ccode\u003EMediaRecorder\u003C\u002Fcode\u003E.  This takes two parameters a stream, which comes from the canvas (or \u003Ccode\u003Evideo\u003C\u002Fcode\u003E, \u003Ccode\u003Eaudio\u003C\u002Fcode\u003E etc) and some options which include the bitrate and which codec you want to use.  The list of options can be found on \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FMediaRecorder\"\u003EMDN\u003C\u002Fa\u003E but I use 2:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EignoreMutedMedia: true.  This is because we don't have an audio track so we don't need to waste size with silence.\u003C\u002Fli\u003E\n\u003Cli\u003EmimeType: 'video\u002Fwebm;codecs=vp9'.  This one is a bit odd but we can provide the MIME type for WEBM.  It also includes the codec as we can use VP8 or VP9.  WEBM with VP9 will probably get you the best compression to quality ratio but you can play around with it.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThen we have to keep track of the \"chunks\".  In many cases this is a misnomer as you'll probably only get one chunk, it's not really streaming in the way you think.  The media recorder has a \u003Ccode\u003Edataavailable\u003C\u002Fcode\u003E event that triggers every time the stream has a new chunk for you.  So we inspect \u003Ccode\u003Esize\u003C\u002Fcode\u003E to make sure it has something and then append it to the array with our other chunks.  To start this whole process we use \u003Ccode\u003Estart()\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"note-for-firefox-users\" href=\"#note-for-firefox-users\"\u003E\n  \u003C\u002Fa\u003E\n  Note for Firefox users\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou'll need to remove \u003Ccode\u003EignoreMutedMedia\u003C\u002Fcode\u003E as it doesn't seem to work in Firefox and will just cause the whole canvas to not produce chunks.  You'll also need to use the VP8 codec \u003Ccode\u003Evideo\u002Fwebm;codecs=vp8\u003C\u002Fcode\u003E as Firefox doesn't yet support VP9.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"stopping-and-downloading\" href=\"#stopping-and-downloading\"\u003E\n  \u003C\u002Fa\u003E\n  Stopping and downloading\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIf we were already recording then we use the other block which stops and downloads the recording.  We call stop on the media recorder to stop.  This will cause the buffer to flush and you'll get a chunk in ondataavailable.  The sucky part is that this doesn't happen synchronously so I wrap the next part in a setTimeout 0 to make sure it happens after the flush.  There are slightly more accurate ways to do this but this is fine for most real cases.\u003C\u002Fp\u003E\n\n\u003Cp\u003EUsing the blob constructor we capture the array of chunks and turn it into a blob with the MIME type \u003Ccode\u003Evideo\u002Fwebm\u003C\u002Fcode\u003E.  If you use a different codec that is not webm you need to change it. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThen we have the canonical way to download something in a web app.  You need to create an object URL for the blob.  Create a link (you don't need to attach it to the DOM), set the \u003Ccode\u003Ehref\u003C\u002Fcode\u003E to the object URL, add a \u003Ccode\u003Edownload\u003C\u002Fcode\u003E attribute so that the browser triggers downloading with the filename suggestion and then programmatically click it.  After that clean up the object URL otherwise you'll have a memory leak.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd there we have a WEBM of whatever you were doing.  If all media and blog platforms were nice this would be all we need.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"converting-to-gif\" href=\"#converting-to-gif\"\u003E\n  \u003C\u002Fa\u003E\n  Converting to GIF\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ESome platforms are less good than others.  Despite the fact that WEBMs take up a fraction of the size they often aren't accepted but GIFs usually are and this seems to include dev.to.  So sadly, we need to bloat our video with a crappy image codec that looks bad and is much bigger.  This part is also less easy.  The simplest way I've found is to use FFMPEG which is a basically an industry standard, open-source, CLI swiss army knife of video conversion.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can find a download for it here:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fffmpeg.org\u002F\"\u003Ehttps:\u002F\u002Fffmpeg.org\u002F\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Effmpeg \u003Cspan class=\"nt\"\u003E-y\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-i\u003C\u002Fspan\u003E input.webm \u003Cspan class=\"nt\"\u003E-vf\u003C\u002Fspan\u003E palettegen palette.png\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E(For Powershell you need to use \u003Ccode\u003E.\u002Fffmpeg.exe\u003C\u002Fcode\u003E)\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst run this.  This extracts a pallet as a PNG file for the gif as without it we'll get worse looking results.  The \u003Ccode\u003E-y\u003C\u002Fcode\u003E says to overwrite the output file without asking. \u003Ccode\u003E-i\u003C\u002Fcode\u003E marks an input and \u003Ccode\u003E-vf\u003C\u002Fcode\u003E means to export a filtergraph (I don't exactly know but it has something to do with pallets)\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Effmpeg \u003Cspan class=\"nt\"\u003E-y\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-i\u003C\u002Fspan\u003E input.webm \u003Cspan class=\"nt\"\u003E-i\u003C\u002Fspan\u003E palette.png \u003Cspan class=\"nt\"\u003E-filter_complex\u003C\u002Fspan\u003E paletteuse \u003Cspan class=\"nt\"\u003E-r\u003C\u002Fspan\u003E 10 output.gif\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis converts the WEBM to a GIF.  We're also providing the filtergraph we made in the last step.  We use the \u003Ccode\u003E-filter_complex palettuse\u003C\u002Fcode\u003E option which is again some filtergraph thing I don't fully understand but seems to amount to \"use the pallet.\"  The last parameter \u003Ccode\u003E-r\u003C\u002Fcode\u003E is the framerate.  You can match the video for better results or lower it for reduced file size.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can also add the \u003Ccode\u003E-loop\u003C\u002Fcode\u003E parameter.  By default it is 0 which means loop forever but you can have it stop as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere's what it produces:\u003C\u002Fp\u003E\n\n\u003Cp\u003EWithout generating a pallet:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--uW8IjUFV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F3iqkfe4mxr4mz1e8yteq.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--uW8IjUFV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F3iqkfe4mxr4mz1e8yteq.gif\" alt=\"output0\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EPallet at 10 FPS:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ij-MHFPC--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxl2xvv8wfy21bzbe4mur.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ij-MHFPC--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxl2xvv8wfy21bzbe4mur.gif\" alt=\"output1\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EPallet at 25FPS (native recording fps):\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--b87tKy4X--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7ur2uihidefe19oy22o4.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--b87tKy4X--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7ur2uihidefe19oy22o4.gif\" alt=\"output2\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESize-wise:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ewebm: 5kb\u003C\u002Fli\u003E\n\u003Cli\u003Egif (no pallet, 10fps): 28.0kb\u003C\u002Fli\u003E\n\u003Cli\u003Egif (pallet, 10fps): 12.0kb\u003C\u002Fli\u003E\n\u003Cli\u003Egif (pallet, 25fps): 24.0kb\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EUsing the pallet seems to improve file size as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf it doesn't exist already perhaps the next step is to convert FFMPEG to WASM so we can run this all in the browser without dealing with the command line.  But this is a quick and dirty way to get an example for dev.to.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's also worth mentioning if you want to dive into the rabbit-hole there are zillions of options with FFMPEG to get better compression, different formats and special features. \u003Ca href=\"http:\u002F\u002Fwww.ffmpeg.org\u002Fffmpeg.html\"\u003Ehttp:\u002F\u002Fwww.ffmpeg.org\u002Fffmpeg.html\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"{% codepen https:\u002F\u002Fcodepen.io\u002Fndesmic\u002Fpen\u002FyLMrOqa %}\n\nThis sort of slipped into my recent post on doing the camera for my WebGL project because I needed something to make visual samples to post with the article.  As of this writing, Chromium browsers will work, Firefox should work with a couple tweaks (noted below, but not present in the demo), Safari will not.\n\n# Get your canvas\n\nThe canvas can have anything, WebGL, normal 2d stuff, WebGPU it doesn't matter.  You can also do `video` and `audio` elements too.\n\nIn my code I have canvas that cycles through colors.\n\n# The code\n\n```js\nconst canvas = document.querySelector(\"canvas\");\nconst recordBtn = document.querySelector(\"button\");\n\nlet recording = false;\nlet mediaRecorder;\nlet recordedChunks;\n\nrecordBtn.addEventListener(\"click\", () =\u003E {\n  recording = !recording;\n\tif(recording){\n\t\t\trecordBtn.textContent = \"Stop\";\n\t\t\tconst stream = canvas.captureStream(25);\n\t\t\tmediaRecorder = new MediaRecorder(stream, {\n\t\t\t\tmimeType: 'video\u002Fwebm;codecs=vp9'\n                                ignoreMutedMedia: true\n\t\t\t});\n\t\t\trecordedChunks = [];\n\t\t\tmediaRecorder.ondataavailable = e =\u003E {\n\t\t\t\tif(e.data.size \u003E 0){\n\t\t\t\t\trecordedChunks.push(e.data);\n\t\t\t\t}\n\t\t\t};\n\t\t\tmediaRecorder.start();\n\t\t} else {\n\t\t\trecordBtn.textContent = \"Record\"\n\t\t\tmediaRecorder.stop();\n\t\t\tsetTimeout(() =\u003E {\n\t\t\t\tconst blob = new Blob(recordedChunks, {\n\t\t\t\t\ttype: \"video\u002Fwebm\"\n\t\t\t\t});\n\t\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\t\tconst a = document.createElement(\"a\");\n\t\t\t\ta.href = url;\n\t\t\t\ta.download = \"recording.webm\";\n\t\t\t\ta.click();\n\t\t\t\tURL.revokeObjectURL(url);\n\t\t\t},0);\n\t\t}\n});\n```\n\nFirst we get a stream from the canvas `canvas.captureStream(25)`.  The parameter is the max framerate, you can change less but if it animates more than that you'll drop frames.\n\nNext we create a `MediaRecorder`.  This takes two parameters a stream, which comes from the canvas (or `video`, `audio` etc) and some options which include the bitrate and which codec you want to use.  The list of options can be found on [MDN](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FAPI\u002FMediaRecorder) but I use 2:\n\n- ignoreMutedMedia: true.  This is because we don't have an audio track so we don't need to waste size with silence.\n- mimeType: 'video\u002Fwebm;codecs=vp9'.  This one is a bit odd but we can provide the MIME type for WEBM.  It also includes the codec as we can use VP8 or VP9.  WEBM with VP9 will probably get you the best compression to quality ratio but you can play around with it.\n\nThen we have to keep track of the \"chunks\".  In many cases this is a misnomer as you'll probably only get one chunk, it's not really streaming in the way you think.  The media recorder has a `dataavailable` event that triggers every time the stream has a new chunk for you.  So we inspect `size` to make sure it has something and then append it to the array with our other chunks.  To start this whole process we use `start()`.\n\n## Note for Firefox users\n\nYou'll need to remove `ignoreMutedMedia` as it doesn't seem to work in Firefox and will just cause the whole canvas to not produce chunks.  You'll also need to use the VP8 codec `video\u002Fwebm;codecs=vp8` as Firefox doesn't yet support VP9.\n\n## Stopping and downloading\n\nIf we were already recording then we use the other block which stops and downloads the recording.  We call stop on the media recorder to stop.  This will cause the buffer to flush and you'll get a chunk in ondataavailable.  The sucky part is that this doesn't happen synchronously so I wrap the next part in a setTimeout 0 to make sure it happens after the flush.  There are slightly more accurate ways to do this but this is fine for most real cases.\n\nUsing the blob constructor we capture the array of chunks and turn it into a blob with the MIME type `video\u002Fwebm`.  If you use a different codec that is not webm you need to change it. \n\nThen we have the canonical way to download something in a web app.  You need to create an object URL for the blob.  Create a link (you don't need to attach it to the DOM), set the `href` to the object URL, add a `download` attribute so that the browser triggers downloading with the filename suggestion and then programmatically click it.  After that clean up the object URL otherwise you'll have a memory leak.\n\nAnd there we have a WEBM of whatever you were doing.  If all media and blog platforms were nice this would be all we need.\n\n# Converting to GIF\n\nSome platforms are less good than others.  Despite the fact that WEBMs take up a fraction of the size they often aren't accepted but GIFs usually are and this seems to include dev.to.  So sadly, we need to bloat our video with a crappy image codec that looks bad and is much bigger.  This part is also less easy.  The simplest way I've found is to use FFMPEG which is a basically an industry standard, open-source, CLI swiss army knife of video conversion.\n\nYou can find a download for it here:\nhttps:\u002F\u002Fffmpeg.org\u002F\n\n```bash\nffmpeg -y -i input.webm -vf palettegen palette.png\n```\n(For Powershell you need to use `.\u002Fffmpeg.exe`)\n\nFirst run this.  This extracts a pallet as a PNG file for the gif as without it we'll get worse looking results.  The `-y` says to overwrite the output file without asking. `-i` marks an input and `-vf` means to export a filtergraph (I don't exactly know but it has something to do with pallets)\n\n```bash\nffmpeg -y -i input.webm -i palette.png -filter_complex paletteuse -r 10 output.gif\n```\nThis converts the WEBM to a GIF.  We're also providing the filtergraph we made in the last step.  We use the `-filter_complex palettuse` option which is again some filtergraph thing I don't fully understand but seems to amount to \"use the pallet.\"  The last parameter `-r` is the framerate.  You can match the video for better results or lower it for reduced file size.\n\nYou can also add the `-loop` parameter.  By default it is 0 which means loop forever but you can have it stop as well.\n\nHere's what it produces:\n\nWithout generating a pallet:\n![output0](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F3iqkfe4mxr4mz1e8yteq.gif)\n\nPallet at 10 FPS:\n![output1](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fxl2xvv8wfy21bzbe4mur.gif)\n\nPallet at 25FPS (native recording fps):\n![output2](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7ur2uihidefe19oy22o4.gif)\n\nSize-wise:\n\n- webm: 5kb\n- gif (no pallet, 10fps): 28.0kb\n- gif (pallet, 10fps): 12.0kb\n- gif (pallet, 25fps): 24.0kb\n \nUsing the pallet seems to improve file size as well.\n\nIf it doesn't exist already perhaps the next step is to convert FFMPEG to WASM so we can run this all in the browser without dealing with the command line.  But this is a quick and dirty way to get an example for dev.to.\n\nIt's also worth mentioning if you want to dive into the rabbit-hole there are zillions of options with FFMPEG to get better compression, different formats and special features. http:\u002F\u002Fwww.ffmpeg.org\u002Fffmpeg.html",user:{name:c,username:c,twitter_username:a,github_username:c,website_url:"https:\u002F\u002Fgh.ndesmic.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--C-wDp3Ci--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F477686\u002F20e9cb71-fe00-45a4-8972-427e08bc00be.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--U324ZnLy--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F477686\u002F20e9cb71-fe00-45a4-8972-427e08bc00be.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fndesmic\u002F733350",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-06-28T23:25:28Z","ndesmic","https:\u002F\u002Fdev.to\u002Fndesmic\u002Fhow-to-record-a-canvas-element-and-make-a-gif-4852",6));
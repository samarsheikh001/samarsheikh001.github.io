window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:584779,title:"Data Structures and Algorithms: Introduction",description:"I know you work hard.  You got 100 different side-projects.  Your GitHub is all green from those...",readable_publish_date:"Jan 31",slug:"data-structures-and-algorithms-introduction-9mo",path:"\u002Ftamerlang\u002Fdata-structures-and-algorithms-introduction-9mo",url:"https:\u002F\u002Fdev.to\u002Ftamerlang\u002Fdata-structures-and-algorithms-introduction-9mo",comments_count:0,public_reactions_count:c,collection_id:11323,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xOe2qAMs--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fdbjdw205hlkh80jucsx3.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--t3ukjU9W--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fdbjdw205hlkh80jucsx3.png",canonical_url:"https:\u002F\u002Fsoftwareadventuring.com\u002Fintroduction-to-data-structures-and-algorithms\u002F",created_at:"2021-01-28T06:49:00Z",edited_at:"2021-07-17T06:19:04Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:8,tag_list:"beginners, computerscience, algorithms, theory",tags:["beginners","computerscience","algorithms","theory"],body_html:"\u003Cp\u003EI know you work hard.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou got 100 different side-projects.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYour GitHub is all green from those commits.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThen your day comes and finally, get that interview.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou watch a couple of videos on technical interviews.\u003C\u002Fp\u003E\n\n\u003Cp\u003EReality hits...\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou don't know shit about data structures and algorithms.\u003C\u002Fp\u003E\n\n\u003Cp\u003EDon't worry I was in your shoes a couple of days ago, and I failed...\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut I don't want \u003Cstrong\u003Eyou\u003C\u002Fstrong\u003E to fail. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo in this new series, I'm gonna be your new data structures and algorithms teacher.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EPS. Unfortunately, I don't work at google **yet\u003C\u002Fem\u003E\u003Cem\u003E, but I still know a thing or two about the subject.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"table-of-contents\" href=\"#table-of-contents\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Contents\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#1\"\u003EWhy Learn Data Structures\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"#2\"\u003EWhat are data structures?\u003C\u002Fa\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#3\"\u003EAbstract Data Types vs Data Structures\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"#4\"\u003EComputational Complexity Analysis\u003C\u002Fa\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#5\"\u003EBig-O Notation\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#6\"\u003EBig-O Notation Properties\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"#7\"\u003ETime Complexity\u003C\u002Fa\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#8\"\u003EO(1) — Constant\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#9\"\u003EO(n) — Linear Time\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#10\"\u003EO(log n) — Logarithmic Time \u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#11\"\u003EO(n^2) — Quadratic Time\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#12\"\u003EO(2^n) — Exponential Time\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#13\"\u003EConclusion\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#14\"\u003EAdditional References\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"why-learn-data-structures\" href=\"#why-learn-data-structures\"\u003E\n  \u003C\u002Fa\u003E\n  Why learn data structures? \u003Ca name=\"1\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is a very valid question because we live in an age where your gonna be using library functions for 90% of your code. It mainly comes down to four reasons:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ETo understand the logic behind the behavior of these abstractions. If you don't you will eventually apply them in a way that will hurt you.\u003C\u002Fli\u003E\n\u003Cli\u003EUnderstanding algorithms will help you understand the problems those algorithms were built to overcome. That understanding will help you immensely in your day-to-day work because those problems are basic logic and computer science problems that pop up everywhere, no matter if you're working on business software, hardware drivers, games, or mobile apps.\u003C\u002Fli\u003E\n\u003Cli\u003EYou need to understand algorithms and data structures because I've seen code written by people who didn't; and trust me, you don't want to be that guy.\u003C\u002Fli\u003E\n\u003Cli\u003EMost top product based companies ask questions relating to algorithms and data structures. You may think why are interviews so focused on DSA instead of language\u002Fframework\u002Ftools? Because these companies don't have your average problems, they deal with a lot of harder problems and at a much larger scale. So it's not about solving the problem, it's more about solving it right.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-are-data-structures\" href=\"#what-are-data-structures\"\u003E\n  \u003C\u002Fa\u003E\n  What are data structures? \u003Ca name=\"2\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERemember when you were a kid and your parent's scolded you because you couldn't find your clothes in your messy room. Turns out your parents were right in saying to keep your room tidy, so that next time you need to find anything it will be much easier. We as humans already know why is it important to organize(structure) our stuff(data) in real life. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAnother great example is a library. Imagine that you need to find a book on Russian history, you will first go to the history section, then the Russian section. If these books weren't organized you wouldn't be able to find your book easily, it would've been a very frustrating process. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESo in short data structures refers \u003Cstrong\u003Eto the way we organize our data.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet us consider some examples:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFacebook (Your favorite app). All your friends, family, mutual friends, and friends of friends can be represented by a graph. Think about it for a second, it makes total sense to represent friends on Facebook like that.\u003C\u002Fli\u003E\n\u003Cli\u003EImagine you have a deck of cards and you need to arrange it properly. You can either throw cards randomly or arrange the cards one over the over and form a proper deck. Here you can use a stack to make a proper arrangement of cards over the other.\u003C\u002Fli\u003E\n\u003Cli\u003EIf you want to find a word in the dictionary, how would you do it? Do you go page by page or open the middle and if the word is not found then you go prior\u002Flater page. We use the binary search here to efficiently find the word.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn the first two examples, we chose the right data structure to represent real-world data, while the third example chose the right algorithm to save us time and space.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"abstract-data-types-vs-data-structures\" href=\"#abstract-data-types-vs-data-structures\"\u003E\n  \u003C\u002Fa\u003E\n  Abstract Data Types vs Data Structures \u003Ca name=\"3\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAn abstract data type is an abstraction of a data structure that provides only the interface to which a data structure must adhere to.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe interface does not give any specific details about how something should be implemented or in what programming language.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESimply put, an ADT (Abstract Data Type) is more of a logical description, while a Data Structure is concrete.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThink of an ADT as a picture of the data and the operations to manipulate and change it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA Data Structure is the \u003Cem\u003Ereal, concrete thing\u003C\u002Fem\u003E. It can be implemented and used within an algorithm.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UIrDjRXg--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhcwmfricwndc86e6fsa9.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UIrDjRXg--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhcwmfricwndc86e6fsa9.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"computational-complexity-analysis\" href=\"#computational-complexity-analysis\"\u003E\n  \u003C\u002Fa\u003E\n  Computational Complexity Analysis \u003Ca name=\"4\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAs programmers we keep asking these two questions:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EHow much \u003Cstrong\u003Etime\u003C\u002Fstrong\u003E does this algorithm need to finish?\u003C\u002Fli\u003E\n\u003Cli\u003EHow much \u003Cstrong\u003Espace\u003C\u002Fstrong\u003E does this algorithm need for its computation?\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EBasically, it would be bad if:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EIf your algorithm is small but takes the time of the universe to compute.\u003C\u002Fli\u003E\n\u003Cli\u003EYour algorithm is fast but takes the power of all machines on earth to compute.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"bigo-notation\" href=\"#bigo-notation\"\u003E\n  \u003C\u002Fa\u003E\n  Big-O Notation \u003Ca name=\"5\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EBig-O Notation gives the upper bound of the complexity in the \u003Cstrong\u003Eworst-\u003C\u002Fstrong\u003Ecase scenario, helping to quantify performance as input size becomes \u003Cstrong\u003Earbitrarily\u003C\u002Fstrong\u003E larger.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBasically, it shows you the worst-case scenario of your algorithm. For example, you may have a sorting algorithm. Then the big-o notation will get the complexity based on a huge list.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnother example may be, you got an algorithm to find the number 7. Big-O will get the computation but it will assume that the number 7 is at the end of the list.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBig-O doesn't care about small input, it only cares about large inputs.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--M8PHp8wd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fi2zv4pdn7lhxcpsenyq9.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--M8PHp8wd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fi2zv4pdn7lhxcpsenyq9.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EBig-O Notation Table (from best to worst) (n = input size)\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"bigo-notation-properties\" href=\"#bigo-notation-properties\"\u003E\n  \u003C\u002Fa\u003E\n  Big-O Notation Properties \u003Ca name=\"6\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TpjwKSSF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyf3tmiwrd9ealnws5vig.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TpjwKSSF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyf3tmiwrd9ealnws5vig.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe first two properties explain why we can simply remove constant values (c), because if you're adding a constant to infinity that just equals infinity. Same thing with multiplication.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut this is just theoretical, in the real world if your constant is 2 billion, you can't ignore that.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe second half basically introduces us a mathematical function and show's us how to get the Big-O Notation. The basic premise is to simply take the biggest n, in our case it is n^3.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"time-complexity\" href=\"#time-complexity\"\u003E\n  \u003C\u002Fa\u003E\n  Time Complexity \u003Ca name=\"7\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow we will be breaking down the basics of time complexity (constant, linear, quadratic, exponential, and logarithmic). There are others but once you get the main ones, the others make sense.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"o1-constant\" href=\"#o1-constant\"\u003E\n  \u003C\u002Fa\u003E\n  O(1) — Constant \u003Ca name=\"8\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EConstant time complexity describes an algorithm that will always take the same time (or space) regardless of the input size. For example in Javascript, this can be as simple as accessing a specific index within an array:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F This is a constant time look-up\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EnumberOfElementsToRemove\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EnumberOfElementsToRemove\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epop\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n   \u003Cspan class=\"c1\"\u003E\u002F\u002FThis will also have a constant time look-up since the function \u003C\u002Fspan\u003E\n   \u003Cspan class=\"c1\"\u003E\u002F\u002Fis only looking at a specific reference point within the array.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIt doesn't matter if the input is 5 or 5 million it will still take the same amount of time to compute.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"on-linear-time\" href=\"#on-linear-time\"\u003E\n  \u003C\u002Fa\u003E\n  O(n) — Linear Time \u003Ca name=\"9\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELinear time describes an algorithm that it's computation power is proportional to the input size. For, example if you want to print out all elements in an array, logically speaking the larger the array the longer it will take to compute.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EnumberRange\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Earray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"olog-n-logarithmic-time\" href=\"#olog-n-logarithmic-time\"\u003E\n  \u003C\u002Fa\u003E\n  O(log n) — Logarithmic Time \u003Ca name=\"10\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELogarithmic time describes an algorithm that runs proportionally to the logarithm of its input. I know it's a bit confusing at first, but let me give you an example. You want to find some name in a phone book, you obviously wouldn't need to check all the names one by one. You would simply divide-and-conquer by looking based on where their name is alphabetically. (This is a binary search and that's why its time complexity is O(log n)\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis time complexity has two properties:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EThe choice of the next element on which to perform some action is one of several possibilities.\u003C\u002Fli\u003E\n\u003Cli\u003EOnly one will need to be chosen.\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EHey - I'm busy looking at: \u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf \u003Cem\u003En\u003C\u002Fem\u003E is 8, the output will be the following:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EHey - I'm busy looking at: 1\nHey - I'm busy looking at: 2\nHey - I'm busy looking at: 4\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOur simple algorithm ran log(8) = 3 times.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo find more examples simply look at algorithms that use divide-and-conquer, like binary search, merge sort, quick sort, etc...\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn general, this algorithm is better than O(n), it makes sense because log(n) is always gonna be smaller than n, much smaller.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"on2-quadratic-time\" href=\"#on2-quadratic-time\"\u003E\n  \u003C\u002Fa\u003E\n  O(n^2) — Quadratic Time \u003Ca name=\"11\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EQuadratic time describes an algorithm that runs proportionally to the squared of the input size. Usually, this is absolutely horrible, but to be honest, if you don't have a huge input it doesn't really matter.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EquadraticSum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n               \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){\u003C\u002Fspan\u003E\n                   \u003Cspan class=\"nx\"\u003Esum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n               \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n           \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this example, we are looking up the array twice for every n basically n^2. Examples I think can be found in algorithms where you look up twice, like bubble sort.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"o2n-exponential-time\" href=\"#o2n-exponential-time\"\u003E\n  \u003C\u002Fa\u003E\n  O(2^n) — Exponential Time \u003Ca name=\"12\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EExponential Time complexity denotes an algorithm whose growth doubles with each addition to the input data set. If you know of other exponential growth patterns, this works in much the same way. The time complexity starts off very shallow, rising at an ever-increasing rate until the end. Algorithms with exponential time are often recursive algorithms that solve a problem of size \u003Cem\u003En\u003C\u002Fem\u003E by recursively solve a sub-problem of size \u003Cem\u003En-1.\u003C\u002Fem\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efibonacci\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enumber\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enumber\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enumber\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EFibonacci\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enumber\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EFibonacci\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enumber\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002FThis will have an exponential time look-up since the function \u003C\u002Fspan\u003E\n   \u003Cspan class=\"c1\"\u003E\u002F\u002Fis looking at a every index an exponential number of times.\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFibonacci numbers are a great way to practice your understanding of recursion.  Although there is a way to make the Fibonacci function have a shorter time complexity, for this case we will be using the double recursive method to show how it has an Exponential Time Complexity. Here we are solving the main problem of size n by recursively calling the same function with the size of \u003Cem\u003En-1\u003C\u002Fem\u003E and \u003Cem\u003En-2\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion \u003Ca name=\"13\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI know we haven't talked about any specific data structure or some algorithm, but I believe it's necessary to talk about the foundations first. Anyway, I hope you learned something today, in the near future we will start breaking down specific data structures in their own post. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EPS. Feel free to leave any questions down below, I would love to answer them 😃\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"additional-references\" href=\"#additional-references\"\u003E\n  \u003C\u002Fa\u003E\n  Additional References \u003Ca name=\"14\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.quora.com\u002FIs-it-really-necessary-for-a-programmer-to-learn-data-structures-and-algorithms\"\u003Ehttps:\u002F\u002Fwww.quora.com\u002FIs-it-really-necessary-for-a-programmer-to-learn-data-structures-and-algorithms\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=RBSGKlAvoiM\"\u003Ehttps:\u002F\u002Fwww.youtube.com\u002Fwatch?v=RBSGKlAvoiM\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.geeksforgeeks.org\u002Fwhy-data-structures-and-algorithms-are-important-to-learn\u002F\"\u003Ehttps:\u002F\u002Fwww.geeksforgeeks.org\u002Fwhy-data-structures-and-algorithms-are-important-to-learn\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fsoftwareengineering.stackexchange.com\u002Fquestions\u002F148747\u002Fabstract-data-type-and-data-structure\"\u003Ehttps:\u002F\u002Fsoftwareengineering.stackexchange.com\u002Fquestions\u002F148747\u002Fabstract-data-type-and-data-structure\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F2307283\u002Fwhat-does-olog-n-mean-exactly\"\u003Ehttps:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F2307283\u002Fwhat-does-olog-n-mean-exactly\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F34915869\u002Fexample-of-big-o-of-2n\"\u003Ehttps:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F34915869\u002Fexample-of-big-o-of-2n\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n",body_markdown:"I know you work hard.\n\nYou got 100 different side-projects.\n\nYour GitHub is all green from those commits.\n\nThen your day comes and finally, get that interview.\n\nYou watch a couple of videos on technical interviews.\n\nReality hits...\n\nYou don't know shit about data structures and algorithms.\n\nDon't worry I was in your shoes a couple of days ago, and I failed...\n\nBut I don't want **you** to fail. \n\nSo in this new series, I'm gonna be your new data structures and algorithms teacher.\n\n*PS. Unfortunately, I don't work at google **yet**, but I still know a thing or two about the subject.*\n\n## Table of Contents\n* [Why Learn Data Structures](#1)\n* [What are data structures?](#2)\n  * [Abstract Data Types vs Data Structures](#3)\n* [Computational Complexity Analysis](#4)\n  * [Big-O Notation](#5)\n  * [Big-O Notation Properties](#6)\n* [Time Complexity](#7)\n  * [O(1) — Constant](#8)\n  * [O(n) — Linear Time](#9)\n  * [O(log n) — Logarithmic Time ](#10)\n  * [O(n^2) — Quadratic Time](#11)\n  * [O(2^n) — Exponential Time](#12)\n* [Conclusion](#13)\n* [Additional References](#14)\n\n## Why learn data structures? \u003Ca name=\"1\"\u003E\u003C\u002Fa\u003E\n\nThis is a very valid question because we live in an age where your gonna be using library functions for 90% of your code. It mainly comes down to four reasons:\n\n1. To understand the logic behind the behavior of these abstractions. If you don't you will eventually apply them in a way that will hurt you.\n2. Understanding algorithms will help you understand the problems those algorithms were built to overcome. That understanding will help you immensely in your day-to-day work because those problems are basic logic and computer science problems that pop up everywhere, no matter if you're working on business software, hardware drivers, games, or mobile apps.\n3. You need to understand algorithms and data structures because I've seen code written by people who didn't; and trust me, you don't want to be that guy.\n4. Most top product based companies ask questions relating to algorithms and data structures. You may think why are interviews so focused on DSA instead of language\u002Fframework\u002Ftools? Because these companies don't have your average problems, they deal with a lot of harder problems and at a much larger scale. So it's not about solving the problem, it's more about solving it right.\n\n## What are data structures? \u003Ca name=\"2\"\u003E\u003C\u002Fa\u003E\n\nRemember when you were a kid and your parent's scolded you because you couldn't find your clothes in your messy room. Turns out your parents were right in saying to keep your room tidy, so that next time you need to find anything it will be much easier. We as humans already know why is it important to organize(structure) our stuff(data) in real life. \n\nAnother great example is a library. Imagine that you need to find a book on Russian history, you will first go to the history section, then the Russian section. If these books weren't organized you wouldn't be able to find your book easily, it would've been a very frustrating process. \n\nSo in short data structures refers **to the way we organize our data.**\n\nLet us consider some examples:\n\n- Facebook (Your favorite app). All your friends, family, mutual friends, and friends of friends can be represented by a graph. Think about it for a second, it makes total sense to represent friends on Facebook like that.\n- Imagine you have a deck of cards and you need to arrange it properly. You can either throw cards randomly or arrange the cards one over the over and form a proper deck. Here you can use a stack to make a proper arrangement of cards over the other.\n- If you want to find a word in the dictionary, how would you do it? Do you go page by page or open the middle and if the word is not found then you go prior\u002Flater page. We use the binary search here to efficiently find the word.\n\nIn the first two examples, we chose the right data structure to represent real-world data, while the third example chose the right algorithm to save us time and space.\n\n### Abstract Data Types vs Data Structures \u003Ca name=\"3\"\u003E\u003C\u002Fa\u003E\n\nAn abstract data type is an abstraction of a data structure that provides only the interface to which a data structure must adhere to.\n\nThe interface does not give any specific details about how something should be implemented or in what programming language.\n\nSimply put, an ADT (Abstract Data Type) is more of a logical description, while a Data Structure is concrete.\n\nThink of an ADT as a picture of the data and the operations to manipulate and change it.\n\nA Data Structure is the *real, concrete thing*. It can be implemented and used within an algorithm.\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fhcwmfricwndc86e6fsa9.png)\n\n## Computational Complexity Analysis \u003Ca name=\"4\"\u003E\u003C\u002Fa\u003E\n\nAs programmers we keep asking these two questions:\n\n1. How much **time** does this algorithm need to finish?\n2. How much **space** does this algorithm need for its computation?\n\nBasically, it would be bad if:\n\n1. If your algorithm is small but takes the time of the universe to compute.\n2. Your algorithm is fast but takes the power of all machines on earth to compute.\n\n### Big-O Notation \u003Ca name=\"5\"\u003E\u003C\u002Fa\u003E\n\nBig-O Notation gives the upper bound of the complexity in the **worst-**case scenario, helping to quantify performance as input size becomes **arbitrarily** larger.\n\nBasically, it shows you the worst-case scenario of your algorithm. For example, you may have a sorting algorithm. Then the big-o notation will get the complexity based on a huge list.\n\nAnother example may be, you got an algorithm to find the number 7. Big-O will get the computation but it will assume that the number 7 is at the end of the list.\n\nBig-O doesn't care about small input, it only cares about large inputs.\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fi2zv4pdn7lhxcpsenyq9.png)\n\nBig-O Notation Table (from best to worst) (n = input size)\n\n### Big-O Notation Properties \u003Ca name=\"6\"\u003E\u003C\u002Fa\u003E\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyf3tmiwrd9ealnws5vig.png)\n\nThe first two properties explain why we can simply remove constant values (c), because if you're adding a constant to infinity that just equals infinity. Same thing with multiplication.\n\nBut this is just theoretical, in the real world if your constant is 2 billion, you can't ignore that.\n\nThe second half basically introduces us a mathematical function and show's us how to get the Big-O Notation. The basic premise is to simply take the biggest n, in our case it is n^3.\n\n## Time Complexity \u003Ca name=\"7\"\u003E\u003C\u002Fa\u003E\n\nNow we will be breaking down the basics of time complexity (constant, linear, quadratic, exponential, and logarithmic). There are others but once you get the main ones, the others make sense.\n\n### O(1) — Constant \u003Ca name=\"8\"\u003E\u003C\u002Fa\u003E\n\nConstant time complexity describes an algorithm that will always take the same time (or space) regardless of the input size. For example in Javascript, this can be as simple as accessing a specific index within an array:\n\n```jsx\nvar array = [1, 2, 3, 4, 5];\narray[0] \u002F\u002F This is a constant time look-up\n\nvar numberOfElementsToRemove = 2;while (numberOfElementsToRemove \u003E 0) {\n    array.pop();\n   \u002F\u002FThis will also have a constant time look-up since the function \n   \u002F\u002Fis only looking at a specific reference point within the array.\n  }\n}; \n```\n\nIt doesn't matter if the input is 5 or 5 million it will still take the same amount of time to compute.\n\n### O(n) — Linear Time \u003Ca name=\"9\"\u003E\u003C\u002Fa\u003E\n\nLinear time describes an algorithm that it's computation power is proportional to the input size. For, example if you want to print out all elements in an array, logically speaking the larger the array the longer it will take to compute.\n\n```jsx\nvar numberRange = function(array) {\n  for (var i = 1; i \u003C array.length; i++) {\n    console.log(array[i]);\n  }\n};\n```\n\n### O(log n) — Logarithmic Time \u003Ca name=\"10\"\u003E\u003C\u002Fa\u003E\n\nLogarithmic time describes an algorithm that runs proportionally to the logarithm of its input. I know it's a bit confusing at first, but let me give you an example. You want to find some name in a phone book, you obviously wouldn't need to check all the names one by one. You would simply divide-and-conquer by looking based on where their name is alphabetically. (This is a binary search and that's why its time complexity is O(log n)\n\nThis time complexity has two properties:\n\n1. The choice of the next element on which to perform some action is one of several possibilities.\n2. Only one will need to be chosen.\n\n```jsx\nfor (var i = 1; i \u003C n; i = i * 2){\n    console.log(\"Hey - I'm busy looking at: \" + i);\n} \n```\n\nIf *n* is 8, the output will be the following:\n\n```\nHey - I'm busy looking at: 1\nHey - I'm busy looking at: 2\nHey - I'm busy looking at: 4\n```\n\nOur simple algorithm ran log(8) = 3 times.\n\nTo find more examples simply look at algorithms that use divide-and-conquer, like binary search, merge sort, quick sort, etc...\n\nIn general, this algorithm is better than O(n), it makes sense because log(n) is always gonna be smaller than n, much smaller.\n\n### O(n^2) — Quadratic Time \u003Ca name=\"11\"\u003E\u003C\u002Fa\u003E\n\nQuadratic time describes an algorithm that runs proportionally to the squared of the input size. Usually, this is absolutely horrible, but to be honest, if you don't have a huge input it doesn't really matter. \n\n```jsx\nfunction quadraticSum(num){\n\tfor (i = 0; i \u003C= num; i++){\n\t           for (j = 0; j \u003C num; j++){\n\t               sum += j;\n\t           }\n\t       }\n}\n```\n\nIn this example, we are looking up the array twice for every n basically n^2. Examples I think can be found in algorithms where you look up twice, like bubble sort.\n\n### O(2^n) — Exponential Time \u003Ca name=\"12\"\u003E\u003C\u002Fa\u003E\n\nExponential Time complexity denotes an algorithm whose growth doubles with each addition to the input data set. If you know of other exponential growth patterns, this works in much the same way. The time complexity starts off very shallow, rising at an ever-increasing rate until the end. Algorithms with exponential time are often recursive algorithms that solve a problem of size *n* by recursively solve a sub-problem of size *n-1.*\n\n```jsx\nvar fibonacci = function(number) {\n  if (number \u003C= 1) return number;\n  return Fibonacci(number - 2) + Fibonacci(number - 1);\n}; \u002F\u002FThis will have an exponential time look-up since the function \n   \u002F\u002Fis looking at a every index an exponential number of times.\n```\n\nFibonacci numbers are a great way to practice your understanding of recursion.  Although there is a way to make the Fibonacci function have a shorter time complexity, for this case we will be using the double recursive method to show how it has an Exponential Time Complexity. Here we are solving the main problem of size n by recursively calling the same function with the size of *n-1* and *n-2*.\n\n## Conclusion \u003Ca name=\"13\"\u003E\u003C\u002Fa\u003E\n\nI know we haven't talked about any specific data structure or some algorithm, but I believe it's necessary to talk about the foundations first. Anyway, I hope you learned something today, in the near future we will start breaking down specific data structures in their own post. \n\n*PS. Feel free to leave any questions down below, I would love to answer them 😃*\n\n## Additional References \u003Ca name=\"14\"\u003E\u003C\u002Fa\u003E\n\n- [https:\u002F\u002Fwww.quora.com\u002FIs-it-really-necessary-for-a-programmer-to-learn-data-structures-and-algorithms](https:\u002F\u002Fwww.quora.com\u002FIs-it-really-necessary-for-a-programmer-to-learn-data-structures-and-algorithms)\n- [https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=RBSGKlAvoiM](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=RBSGKlAvoiM)\n- [https:\u002F\u002Fwww.geeksforgeeks.org\u002Fwhy-data-structures-and-algorithms-are-important-to-learn\u002F](https:\u002F\u002Fwww.geeksforgeeks.org\u002Fwhy-data-structures-and-algorithms-are-important-to-learn\u002F)\n- [https:\u002F\u002Fsoftwareengineering.stackexchange.com\u002Fquestions\u002F148747\u002Fabstract-data-type-and-data-structure](https:\u002F\u002Fsoftwareengineering.stackexchange.com\u002Fquestions\u002F148747\u002Fabstract-data-type-and-data-structure)\n- [https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F2307283\u002Fwhat-does-olog-n-mean-exactly](https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F2307283\u002Fwhat-does-olog-n-mean-exactly)\n- [https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F34915869\u002Fexample-of-big-o-of-2n](https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F34915869\u002Fexample-of-big-o-of-2n)",user:{name:"Tamerlan Gudabayev",username:"tamerlang",twitter_username:"tamerlan_dev",github_username:"TamerlanG",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QqVjS509--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F536054\u002Fcc45dfd4-294a-458b-80eb-a1f8d155109d.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--68ptM28L--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F536054\u002Fcc45dfd4-294a-458b-80eb-a1f8d155109d.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Ftamerlang\u002F584779",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-01-31T06:30:27Z",110));
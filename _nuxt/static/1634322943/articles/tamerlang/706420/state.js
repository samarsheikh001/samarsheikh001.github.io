window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:706420,title:"Introduction to Design Patterns",description:"I hate the feeling when I don't know something.   This is where impostor syndrome hits.   I had this...",readable_publish_date:"May 30",slug:"introduction-to-design-patterns-540o",path:"\u002Ftamerlang\u002Fintroduction-to-design-patterns-540o",url:"https:\u002F\u002Fdev.to\u002Ftamerlang\u002Fintroduction-to-design-patterns-540o",comments_count:8,public_reactions_count:b,collection_id:12869,published_timestamp:c,positive_reactions_count:b,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fxw559uh--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvj4h1jgxspm9gk7cjonr.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tefJKkQ8--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvj4h1jgxspm9gk7cjonr.jpg",canonical_url:"https:\u002F\u002Fsoftwareadventuring.com\u002Fintroduction-to-design-patterns\u002F",created_at:"2021-05-23T15:30:46Z",edited_at:"2021-07-18T08:21:48Z",crossposted_at:a,published_at:c,last_comment_at:"2021-06-17T17:00:23Z",reading_time_minutes:3,tag_list:"beginners, programming, computerscience, architecture",tags:["beginners","programming","computerscience","architecture"],body_html:"\u003Cp\u003EI hate the feeling when I don't know something. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is where impostor syndrome hits. \u003C\u002Fp\u003E\n\n\u003Cp\u003EI had this feeling when my teammate said, \"Oh, just use X pattern\" and I had no idea what that was.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is why I've studied and scoured the internet for all sorts of resources on design patterns.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI'm gonna jumble them all up into this series on design patterns. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is the first post of the series, where we will go over:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EWhat are design patterns?\u003C\u002Fli\u003E\n\u003Cli\u003EHistory of design patterns\u003C\u002Fli\u003E\n\u003Cli\u003EWhy should you learn them?\u003C\u002Fli\u003E\n\u003Cli\u003EDifferent types of design patterns\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"design-patterns\" href=\"#design-patterns\"\u003E\n  \u003C\u002Fa\u003E\n  Design Patterns\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VtM-lZet--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgrrms4846ajfhz4snbs5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VtM-lZet--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgrrms4846ajfhz4snbs5.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you google design patterns, you would get something like this:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EIn software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EHonestly this sounds way too complicated.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBasically, a design pattern is a \u003Cstrong\u003Esolution\u003C\u002Fstrong\u003E to a \u003Cstrong\u003Ecommon problem\u003C\u002Fstrong\u003E in software design. You can think of them as blue-prints that you can customize to solve a recurring problem in your code.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPatterns are not snippets of code, that you can simply copy. Patterns give you a general solution, you can follow and alter the solution to fit your application specific needs.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPatterns are often confused with algorithms, they both indeed offer a solution to common problems. Algorithms give a step-by-step guide to the solution while a pattern gives more of a high-level concept of the solution.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"history-of-patterns\" href=\"#history-of-patterns\"\u003E\n  \u003C\u002Fa\u003E\n  History of patterns\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EPatterns are not only used in software, they are also used in other fields of engineering. A pattern is simple a common solution to a recurring problem, this description can be applied to many different fields. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe concept of a pattern first came in civil engineering by an engineer named Christopher Alexander. While working on designing buildings and towns, he saw that there came many recurring problems and general solutions to solve them. He documented his experience in his book \u003Ca href=\"https:\u002F\u002Fwww.amazon.com\u002FPattern-Language-Buildings-Construction-Environmental\u002Fdp\u002F0195019199\"\u003EA Pattern Language: Towns, Buildings, Construction\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe same idea was picked up by software developers notably:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EErich Gamma\u003C\u002Fli\u003E\n\u003Cli\u003EJohn Vlissides\u003C\u002Fli\u003E\n\u003Cli\u003ERalph Johnson\u003C\u002Fli\u003E\n\u003Cli\u003ERichard Helm\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn 1994 they wrote the first book on software design patterns named \u003Ca href=\"https:\u002F\u002Fwww.amazon.com\u002Fgp\u002Fproduct\u002F0201633612\u002F\"\u003EDesign Patterns: Elements of Reusable Object-Oriented Software\u003C\u002Fa\u003E. This book introduced 23 patterns solving various problems of object-oriented design. Due to its long name, people started calling it \"the book by the gang of four\", which was soon shortened to \"the GoF book\".\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"why-should-i-learn-patterns\" href=\"#why-should-i-learn-patterns\"\u003E\n  \u003C\u002Fa\u003E\n  Why should I learn patterns?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI personally know many developers who don't know any patterns but manage just \"fine\". A lot of developers are like that. They even might be implementing some patterns without even knowing it. So what's the point of learning these so called \"patterns\"?\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDesign patterns is a toolkit of solutions to common problems. Even if you won't ever encounter such problems, it's still beneficial to know how to solve them using object-oriented design principles.\u003C\u002Fli\u003E\n\u003Cli\u003EIt provides a common language between developers. You can simply say to your colleague, \"Oh, just use a singleton for that\", and everyone will understand you. There's no need to explain what a singleton if you already know the pattern.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"type-of-design-patterns\" href=\"#type-of-design-patterns\"\u003E\n  \u003C\u002Fa\u003E\n  Type of Design Patterns\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EPatterns can be categorized by their intent, or purpose. The three main groups of patterns are:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECreational patterns\u003C\u002Fstrong\u003E: helps us better create\u002Finstantiate objects, making them more flexible and reduces code duplication.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EStructural patterns\u003C\u002Fstrong\u003E: helps us combine objects into larger entities while maintaining flexibility and efficiency.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EBehavioral patterns\u003C\u002Fstrong\u003E: helps us with communication between objects, makes sure to reduce side effects.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI hope you were convinced by the end of this to study design patterns, or to at least think about them. In the upcoming weeks I will dedicate a post to a specific pattern, so stay tuned for that. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAs always if you have any questions, feel free to leave them down in the comments and I will get back to you.\u003C\u002Fp\u003E\n\n",body_markdown:"I hate the feeling when I don't know something. \n\nThis is where impostor syndrome hits. \n\nI had this feeling when my teammate said, \"Oh, just use X pattern\" and I had no idea what that was.\n\nThis is why I've studied and scoured the internet for all sorts of resources on design patterns.\n\nI'm gonna jumble them all up into this series on design patterns. \n\nThis is the first post of the series, where we will go over:\n\n- What are design patterns?\n- History of design patterns\n- Why should you learn them?\n- Different types of design patterns\n\n## Design Patterns\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgrrms4846ajfhz4snbs5.png)\n\nIf you google design patterns, you would get something like this:\n\n\u003E In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code.\n\nHonestly this sounds way too complicated.\n\nBasically, a design pattern is a **solution** to a **common problem** in software design. You can think of them as blue-prints that you can customize to solve a recurring problem in your code.\n\nPatterns are not snippets of code, that you can simply copy. Patterns give you a general solution, you can follow and alter the solution to fit your application specific needs.\n\nPatterns are often confused with algorithms, they both indeed offer a solution to common problems. Algorithms give a step-by-step guide to the solution while a pattern gives more of a high-level concept of the solution.\n\n## History of patterns\n\nPatterns are not only used in software, they are also used in other fields of engineering. A pattern is simple a common solution to a recurring problem, this description can be applied to many different fields. \n\nThe concept of a pattern first came in civil engineering by an engineer named Christopher Alexander. While working on designing buildings and towns, he saw that there came many recurring problems and general solutions to solve them. He documented his experience in his book [A Pattern Language: Towns, Buildings, Construction](https:\u002F\u002Fwww.amazon.com\u002FPattern-Language-Buildings-Construction-Environmental\u002Fdp\u002F0195019199).\n\nThe same idea was picked up by software developers notably:\n\n- Erich Gamma\n- John Vlissides\n- Ralph Johnson\n- Richard Helm\n\nIn 1994 they wrote the first book on software design patterns named [Design Patterns: Elements of Reusable Object-Oriented Software](https:\u002F\u002Fwww.amazon.com\u002Fgp\u002Fproduct\u002F0201633612\u002F). This book introduced 23 patterns solving various problems of object-oriented design. Due to its long name, people started calling it \"the book by the gang of four\", which was soon shortened to \"the GoF book\".\n\n## Why should I learn patterns?\n\nI personally know many developers who don't know any patterns but manage just \"fine\". A lot of developers are like that. They even might be implementing some patterns without even knowing it. So what's the point of learning these so called \"patterns\"?\n\n- Design patterns is a toolkit of solutions to common problems. Even if you won't ever encounter such problems, it's still beneficial to know how to solve them using object-oriented design principles.\n- It provides a common language between developers. You can simply say to your colleague, \"Oh, just use a singleton for that\", and everyone will understand you. There's no need to explain what a singleton if you already know the pattern.\n\n## Type of Design Patterns\n\nPatterns can be categorized by their intent, or purpose. The three main groups of patterns are:\n\n- **Creational patterns**: helps us better create\u002Finstantiate objects, making them more flexible and reduces code duplication.\n- **Structural patterns**: helps us combine objects into larger entities while maintaining flexibility and efficiency.\n- **Behavioral patterns**: helps us with communication between objects, makes sure to reduce side effects.\n\n## Conclusion\n\nI hope you were convinced by the end of this to study design patterns, or to at least think about them. In the upcoming weeks I will dedicate a post to a specific pattern, so stay tuned for that. \n\nAs always if you have any questions, feel free to leave them down in the comments and I will get back to you.",user:{name:"Tamerlan Gudabayev",username:"tamerlang",twitter_username:"tamerlan_dev",github_username:"TamerlanG",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QqVjS509--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F536054\u002Fcc45dfd4-294a-458b-80eb-a1f8d155109d.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--68ptM28L--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F536054\u002Fcc45dfd4-294a-458b-80eb-a1f8d155109d.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Ftamerlang\u002F706420",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,240,"2021-05-30T06:43:25Z"));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:536267,title:"Direct Lambda resolvers with AWS Amplify",description:"AWS Amplify is fantastic; it has never been easier to build and provision a cloud-based, full-stack,...",readable_publish_date:"Dec 9 '20",slug:"direct-lambda-resolvers-with-aws-amplify-3af3",path:"\u002Faws-builders\u002Fdirect-lambda-resolvers-with-aws-amplify-3af3",url:"https:\u002F\u002Fdev.to\u002Faws-builders\u002Fdirect-lambda-resolvers-with-aws-amplify-3af3",comments_count:b,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F536267.png",canonical_url:"https:\u002F\u002Fwww.timveletta.com\u002Fblog\u002F2020-12-08-direct-lambda-resolvers-with-aws-amplify\u002F",created_at:"2020-12-08T10:22:54Z",edited_at:"2020-12-09T15:56:09Z",crossposted_at:d,published_at:"2020-12-08T08:02:40Z",last_comment_at:"2020-12-17T12:36:17Z",reading_time_minutes:b,tag_list:"aws, amplify, appsync, lambda",tags:["aws","amplify","appsync","lambda"],body_html:"\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002F\"\u003EAWS Amplify\u003C\u002Fa\u003E is fantastic; it has never been easier to build and provision a cloud-based, full-stack, web application. One of the best features of Amplify is the ability to quickly generate and build a GraphQL API using AWS AppSync and have it seamlessly work with your front-end using generated queries and mutations based off your schema.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBy default, when creating an AppSync API through Amplify, Velocity templates are used as resolvers to perform simple CRUD operations on your underlying database. These resolver templates are largely a black box to the developer and don't do much out of the ordinary so when it comes to performing more than just a simple CRUD operation, we need to look elsewhere.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThankfully, we also have the option to easily provision and manage Lambda resolvers through AWS Amplify to do the job for us. I'm going to show you the easiest way to achieve this.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"provisioning-the-resources\" href=\"#provisioning-the-resources\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Provisioning the Resources\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EAfter creating a simple GraphQL API through Amplify, we have a simple \u003Ccode\u003ETodo\u003C\u002Fcode\u003E model in my \u003Ccode\u003Eschema.graphql\u003C\u002Fcode\u003E with the following structure.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETodo\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Emodel\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"na\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EID\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\n  \u003Cspan class=\"na\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\n  \u003Cspan class=\"na\"\u003Edescription\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf, for instance, we wanted to perform an additional operation whenever we added a \u003Ccode\u003ETodo\u003C\u002Fcode\u003E such as sending an email to a user or interacting with another AWS service; the provided AppSync resolver wouldn't be enough. This is where Lambda resolvers come in and the convenience of Amplify allows us to easily provision them using \u003Ccode\u003Eamplify add function\u003C\u002Fcode\u003E as shown below.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E% amplify add \u003Cspan class=\"k\"\u003Efunction\u003C\u002Fspan\u003E\n? Select which capability you want to add: Lambda \u003Cspan class=\"k\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003Eserverless \u003Cspan class=\"k\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E\n? Provide a friendly name \u003Cspan class=\"k\"\u003Efor \u003C\u002Fspan\u003Eyour resource to be used as a label \u003Cspan class=\"k\"\u003Efor \u003C\u002Fspan\u003Ethis category \u003Cspan class=\"k\"\u003Ein \u003C\u002Fspan\u003Ethe project: addTodo\n? Provide the AWS Lambda \u003Cspan class=\"k\"\u003Efunction \u003C\u002Fspan\u003Ename: addTodo\n? Choose the runtime that you want to use: NodeJS\n? Choose the \u003Cspan class=\"k\"\u003Efunction \u003C\u002Fspan\u003Etemplate that you want to use: Hello World\n? Do you want to access other resources \u003Cspan class=\"k\"\u003Ein \u003C\u002Fspan\u003Ethis project from your Lambda \u003Cspan class=\"k\"\u003Efunction\u003C\u002Fspan\u003E? Yes\n? Select the category storage\nStorage category has a resource called Todo:@model\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003Eappsync\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E\n? Select the operations you want to permit \u003Cspan class=\"k\"\u003Efor \u003C\u002Fspan\u003ETodo:@model\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003Eappsync\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E create\n\nYou can access the following resource attributes as environment variables from your Lambda \u003Cspan class=\"k\"\u003Efunction\n    \u003C\u002Fspan\u003EAPI_DIRECTRESOLVER_GRAPHQLAPIIDOUTPUT\n    API_DIRECTRESOLVER_TODOTABLE_ARN\n    API_DIRECTRESOLVER_TODOTABLE_NAME\n    ENV\n    REGION\n? Do you want to invoke this \u003Cspan class=\"k\"\u003Efunction \u003C\u002Fspan\u003Eon a recurring schedule? No\n? Do you want to configure Lambda layers \u003Cspan class=\"k\"\u003Efor \u003C\u002Fspan\u003Ethis \u003Cspan class=\"k\"\u003Efunction\u003C\u002Fspan\u003E? No\n? Do you want to edit the \u003Cspan class=\"nb\"\u003Elocal \u003C\u002Fspan\u003Elambda \u003Cspan class=\"k\"\u003Efunction \u003C\u002Fspan\u003Enow? No\nSuccessfully added resource addTodo locally.\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the above example, we have provisioned a Lambda function and given it access to create data in our DynamoDB table since we want to record data there. From here we can perform an \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E to provision the infrastructure on AWS.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"making-the-schema-changes\" href=\"#making-the-schema-changes\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Making the Schema changes\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EAt this point, the Lambda function is provisioned and available but we can't actually access it through our AppSync API. To do this, we simply create a new mutation and input type within our \u003Ccode\u003Eschema.graphql\u003C\u002Fcode\u003E and apply the \u003Ccode\u003E@function\u003C\u002Fcode\u003E directive to the mutation that will call the Lambda function.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"nx\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EAddTodoInput\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nl\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Edescription\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EString\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EMutation\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003EaddTodo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EAddTodoInput\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETodo\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EaddTodo-${env}\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EI've just included some dummy logic within my Lambda function which just returns an object when it is called however you probably want to insert the record into the DynamoDB table and include some other logic. You can find out how to insert data into DynamoDB using \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002FAWSJavaScriptSDK\u002Flatest\u002FAWS\u002FDynamoDB\u002FDocumentClient.html#put-property\"\u003Ethis page\u003C\u002Fa\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"nx\"\u003Eexports\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ehandler\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eevent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F TODO include any additional logic here\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E1234\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EFinish blog post\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n    \u003Cspan class=\"na\"\u003Edescription\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EAWS Amplify is great\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOnce again, we have to run \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E to update our changes; then we can go into the AppSync console and run our mutation to see the results below.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5Go2anZn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fbf1q688csz8gmrof5lys.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5Go2anZn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fbf1q688csz8gmrof5lys.png\" alt=\"Calling our mutation through the AppSync console.\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo that's it, easy enough right! \u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"the-resulting-resolver\" href=\"#the-resulting-resolver\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  The resulting Resolver\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EWell, its not \u003Cem\u003Etechnically\u003C\u002Fem\u003E a \u003Cstrong\u003Edirect\u003C\u002Fstrong\u003E Lambda resolver as the title says. If we look at our AppSync schema, we can see that Amplify has actually created a \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fappsync\u002Flatest\u002Fdevguide\u002Fpipeline-resolvers.html\"\u003EPipeline resolver\u003C\u002Fa\u003E for us. \u003C\u002Fp\u003E\n\n\u003Cp\u003EA Pipeline resolver allows us to compose multiple functions into a single call to the GraphQL API. It does so by calling a Velocity template prior to the function or functions, mapping the data from the GraphQL inputs to a Lambda event. Another Velocity template is ran after each of the functions, mapping the data from the last function to the GraphQL response.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pob-QvKU--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffkgwy2a1sijt3ts33t54.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pob-QvKU--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffkgwy2a1sijt3ts33t54.png\" alt=\"Our resulting pipeline resolver.\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn my opinion, this isn't necessarily a bad thing. You might be sacrificing a miniscule amount of execution speed since calling the resolver now involves running a Velocity template both before and after your Lambda function execution, however, it now allows you to do some great things such as chaining function executions to include additional logic.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, if we wanted to include logic to send a message after both adding and removing a \u003Ccode\u003ETodo\u003C\u002Fcode\u003E, we could create the function to send a message once, and reuse it across multiple resolvers.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight typescript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Etype\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EMutation\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003EaddTodo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EAddTodoInput\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETodo\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EaddTodo-${env}\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EsendMessage-${env}\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003EremoveTodo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EID\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E!\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ETodo\u003C\u002Fspan\u003E \n    \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EremoveTodo-${env}\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \n    \u003Cspan class=\"p\"\u003E@\u003C\u002Fspan\u003E\u003Cspan class=\"nd\"\u003Efunction\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003EsendMessage-${env}\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EPushing our changes using \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E and then viewing the AppSync console, we can see the two functions that are chained together to form our pipeline resolver.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fj3QcyZ3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fybvg1tnytwf52v8vzq60.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fj3QcyZ3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fybvg1tnytwf52v8vzq60.png\" alt=\"Our pipeline resolver with multiple function calls.\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAWS Amplify has not only made it super easy to create and provision a new AppSync API, but if the out-of-the-box resolvers aren't doing everything you need, it is just as easy to use a Lambda resolver instead as we saw above.\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Direct Lambda resolvers with AWS Amplify\npublished: true\ndate: 2020-12-08 08:02:40 UTC\ntags: aws, amplify, appsync, lambda\ncanonical_url: https:\u002F\u002Fwww.timveletta.com\u002Fblog\u002F2020-12-08-direct-lambda-resolvers-with-aws-amplify\u002F\n---\n\n[AWS Amplify](https:\u002F\u002Fdocs.amplify.aws\u002F) is fantastic; it has never been easier to build and provision a cloud-based, full-stack, web application. One of the best features of Amplify is the ability to quickly generate and build a GraphQL API using AWS AppSync and have it seamlessly work with your front-end using generated queries and mutations based off your schema.\n\nBy default, when creating an AppSync API through Amplify, Velocity templates are used as resolvers to perform simple CRUD operations on your underlying database. These resolver templates are largely a black box to the developer and don't do much out of the ordinary so when it comes to performing more than just a simple CRUD operation, we need to look elsewhere.\n\nThankfully, we also have the option to easily provision and manage Lambda resolvers through AWS Amplify to do the job for us. I'm going to show you the easiest way to achieve this.\n\n# Provisioning the Resources\n\nAfter creating a simple GraphQL API through Amplify, we have a simple `Todo` model in my `schema.graphql` with the following structure.\n\n```typescript\ntype Todo @model {\n  id: ID!\n  name: String!\n  description: String\n}\n```\n\nIf, for instance, we wanted to perform an additional operation whenever we added a `Todo` such as sending an email to a user or interacting with another AWS service; the provided AppSync resolver wouldn't be enough. This is where Lambda resolvers come in and the convenience of Amplify allows us to easily provision them using `amplify add function` as shown below.\n\n```shell\n% amplify add function\n? Select which capability you want to add: Lambda function (serverless function)\n? Provide a friendly name for your resource to be used as a label for this category in the project: addTodo\n? Provide the AWS Lambda function name: addTodo\n? Choose the runtime that you want to use: NodeJS\n? Choose the function template that you want to use: Hello World\n? Do you want to access other resources in this project from your Lambda function? Yes\n? Select the category storage\nStorage category has a resource called Todo:@model(appsync)\n? Select the operations you want to permit for Todo:@model(appsync) create\n\nYou can access the following resource attributes as environment variables from your Lambda function\n\tAPI_DIRECTRESOLVER_GRAPHQLAPIIDOUTPUT\n\tAPI_DIRECTRESOLVER_TODOTABLE_ARN\n\tAPI_DIRECTRESOLVER_TODOTABLE_NAME\n\tENV\n\tREGION\n? Do you want to invoke this function on a recurring schedule? No\n? Do you want to configure Lambda layers for this function? No\n? Do you want to edit the local lambda function now? No\nSuccessfully added resource addTodo locally.\n```\n\nIn the above example, we have provisioned a Lambda function and given it access to create data in our DynamoDB table since we want to record data there. From here we can perform an `amplify push` to provision the infrastructure on AWS.\n\n# Making the Schema changes\n\nAt this point, the Lambda function is provisioned and available but we can't actually access it through our AppSync API. To do this, we simply create a new mutation and input type within our `schema.graphql` and apply the `@function` directive to the mutation that will call the Lambda function.\n\n```typescript\ninput AddTodoInput {\n  name: String!\n  description: String\n}\n\ntype Mutation {\n  addTodo(input: AddTodoInput!): Todo @function(name: \"addTodo-${env}\")\n}\n```\n\nI've just included some dummy logic within my Lambda function which just returns an object when it is called however you probably want to insert the record into the DynamoDB table and include some other logic. You can find out how to insert data into DynamoDB using [this page](https:\u002F\u002Fdocs.aws.amazon.com\u002FAWSJavaScriptSDK\u002Flatest\u002FAWS\u002FDynamoDB\u002FDocumentClient.html#put-property).\n\n```javascript\nexports.handler = async (event) =\u003E {\n  \u002F\u002F TODO include any additional logic here\n  return {\n    id: \"1234\",\n    name: \"Finish blog post\",\n    description: \"AWS Amplify is great\",\n  };\n};\n```\n\nOnce again, we have to run `amplify push` to update our changes; then we can go into the AppSync console and run our mutation to see the results below.\n\n![Calling our mutation through the AppSync console.](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fbf1q688csz8gmrof5lys.png)\n\n\nSo that's it, easy enough right! \n\n\n\n# The resulting Resolver\n\nWell, its not *technically* a **direct** Lambda resolver as the title says. If we look at our AppSync schema, we can see that Amplify has actually created a [Pipeline resolver](https:\u002F\u002Fdocs.aws.amazon.com\u002Fappsync\u002Flatest\u002Fdevguide\u002Fpipeline-resolvers.html) for us. \n\nA Pipeline resolver allows us to compose multiple functions into a single call to the GraphQL API. It does so by calling a Velocity template prior to the function or functions, mapping the data from the GraphQL inputs to a Lambda event. Another Velocity template is ran after each of the functions, mapping the data from the last function to the GraphQL response.\n\n![Our resulting pipeline resolver.](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffkgwy2a1sijt3ts33t54.png)\n\nIn my opinion, this isn't necessarily a bad thing. You might be sacrificing a miniscule amount of execution speed since calling the resolver now involves running a Velocity template both before and after your Lambda function execution, however, it now allows you to do some great things such as chaining function executions to include additional logic.\n\nFor example, if we wanted to include logic to send a message after both adding and removing a `Todo`, we could create the function to send a message once, and reuse it across multiple resolvers.\n\n```typescript\ntype Mutation {\n  addTodo(input: AddTodoInput!): Todo\n    @function(name: \"addTodo-${env}\")\n    @function(name: \"sendMessage-${env}\")\n  removeTodo(id: ID!): Todo \n    @function(name: \"removeTodo-${env}\") \n    @function(name: \"sendMessage-${env}\")\n}\n```\n\nPushing our changes using `amplify push` and then viewing the AppSync console, we can see the two functions that are chained together to form our pipeline resolver.\n\n![Our pipeline resolver with multiple function calls.](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fybvg1tnytwf52v8vzq60.png)\n\nAWS Amplify has not only made it super easy to create and provision a new AppSync API, but if the out-of-the-box resolvers aren't doing everything you need, it is just as easy to use a Lambda resolver instead as we saw above.\n\n",user:{name:"Tim Veletta",username:"timmahh",twitter_username:a,github_username:"timveletta",website_url:"https:\u002F\u002Ftimveletta.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kbh3aqPo--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F14840\u002F7a621096-c2f6-4c4b-bd87-3c9e22d44753.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Ing20a0e--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F14840\u002F7a621096-c2f6-4c4b-bd87-3c9e22d44753.jpeg"},organization:{name:"AWS Community Builders ",username:e,slug:e,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zmOZQNzv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vWmcJ-ty--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Ftimmahh\u002F536267",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,4,14,"2020-12-09T15:55:44Z","aws-builders"));
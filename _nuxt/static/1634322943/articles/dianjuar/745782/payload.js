__NUXT_JSONP__("/articles/dianjuar/745782", (function(a,b,c,d,e,f){b.type_of="article";b.id=745782;b.title="Importing modules in JavaScript, are we doing it right?";b.description="We, as Javascript developers need to use libraries in our day to day, it simplifies our work a lot....";b.readable_publish_date="Aug 31";b.slug="importing-modules-in-javascript-are-we-doing-it-right-nc";b.path="\u002Fdianjuar\u002Fimporting-modules-in-javascript-are-we-doing-it-right-nc";b.url=c;b.comments_count=2;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--E6tpO3h4--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F840lm875fwhekxn3mv79.jpg";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--onATD9Q0--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F840lm875fwhekxn3mv79.jpg";b.canonical_url=c;b.created_at="2021-07-02T05:09:08Z";b.edited_at="2021-09-01T16:32:35Z";b.crossposted_at=a;b.published_at=e;b.last_comment_at="2021-09-09T13:56:24Z";b.reading_time_minutes=6;b.tag_list="javascript, typescript, es6, treeshaking";b.tags=["javascript","typescript","es6","treeshaking"];b.body_html="\u003Cp\u003EWe, as Javascript developers need to use libraries in our day to day, it simplifies our work a lot. Nowadays we mostly do it in this way:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elib\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Eamazing-lib\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efunc1\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Eamazing-lib\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf we quickly analyze it, in the first statement we are importing everything and putting it on a variable called \u003Ccode\u003Elib\u003C\u002Fcode\u003E, on the second, we are importing everything again and destructuring only what we need; what about all the other code that I'm not using?\u003C\u002Fp\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"will-not-all-the-unused-librarys-code-end-up-on-the-final-bundle-making-my-application-unnecessary-heavier\" href=\"#will-not-all-the-unused-librarys-code-end-up-on-the-final-bundle-making-my-application-unnecessary-heavier\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cem\u003EWill not all the unused library's code end up on the final bundle making my application unnecessary heavier?\u003C\u002Fem\u003E\n\u003C\u002Fh2\u003E\n\u003C\u002Fblockquote\u003E\n\n\n\n\u003Cp\u003EToday you will learn how to improve your bundle size just by changing the way you import. After this, you are going to be able to detect a simple optimization opportunity for your bundle!\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"tl-dr\" href=\"#tl-dr\"\u003E\n  \u003C\u002Fa\u003E\n  TL; DR\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EVerify if the library has support for ES6 and you can import freely, you will get always the best result üôÜ‚Äç‚ôÇÔ∏è. If it doesn't ‚ö†Ô∏è, you need to import using cherry-picking.\u003C\u002Fp\u003E\n\n\n\n\n\u003Chr\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"can-we-import-as-we-want-without-consequences\" href=\"#can-we-import-as-we-want-without-consequences\"\u003E\n  \u003C\u002Fa\u003E\n  Can we import as we want without consequences?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhen we compile our front-end apps, there is a process that Webpack applies called \u003Ca href=\"https:\u002F\u002Fwebpack.js.org\u002Fguides\u002Ftree-shaking\u002F\"\u003ETree Shaking\u003C\u002Fa\u003E. Basically, is code elimination, the code that is not being used by anyone. This process prevents having dead code in our final bundle, making it lighter and the application is going to load faster for our users!\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's analyse this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elib\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Eamazing-lib\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Eamazing-lib\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn both cases all the library content is being imported, the first place is the easiest to spot, all the library's content is being assigned to the variable \u003Ccode\u003Elib\u003C\u002Fcode\u003E, in the second case we are just applying destructuring to the library's content to get what we need. Thanks to Tree Shaking all the unused code doesn't end up on our bundles.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, thanks to Tree Shaking I'm excused and I can import however I want and all the unused code imported from the library will be removed automagically?\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EIs not always the case\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere is a scenario when Tree Shaking is not going to be able to detect what is dead code having as consequence to remove nothing.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"scenarios\" href=\"#scenarios\"\u003E\n  \u003C\u002Fa\u003E\n  Scenarios\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"es6\" href=\"#es6\"\u003E\n  \u003C\u002Fa\u003E\n  ES6\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EECMAScript 2015(aka ES6) Module Syntax; it sounds complex, but it's something really popular nowadays. It's just a syntax to import a JS module, it looks like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efoo\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Eawesome-lib\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ebar\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E..\u002Futils\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elib\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003E..\u002Futils\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Eexport\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EjustAConst\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Efoobar\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhen you are using a library that has ES6 Module Syntax compatibility, you don't need to worry, import as will, Tree Shaking have you covered üòâ. In fact, is the only module syntax that Tree Shaking supports, let's take a look at the \u003Ca href=\"https:\u002F\u002Fwebpack.js.org\u002Fguides\u002Ftree-shaking\u002F\"\u003Edocumentation\u003C\u002Fa\u003E:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003ETree shaking\u003C\u002Fem\u003E is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. \u003Ccode\u003Eimport\u003C\u002Fcode\u003E and \u003Ccode\u003Eexport\u003C\u002Fcode\u003E...\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe webpack 2 release came with built-in support for ES2015 modules (alias harmony modules) as well as unused module export detection...\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch6\u003E\n  \u003Ca name=\"if-you-are-completely-new-about-js-modules\" href=\"#if-you-are-completely-new-about-js-modules\"\u003E\n  \u003C\u002Fa\u003E\n  If you are completely new about üëâ \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FGuide\u002FModules\"\u003EJS Modules\u003C\u002Fa\u003E\n\u003C\u002Fh6\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"no-es6-module-syntax\" href=\"#no-es6-module-syntax\"\u003E\n  \u003C\u002Fa\u003E\n  No ES6 module syntax\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EA library can be delivered (packaged) with other module systems different than ES6, even though if its source code uses ES6 module syntax, a compilation process could be implemented to only support \u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fapi\u002Fmodules.html#modules_modules_commonjs_modules\"\u003ECommonJS\u003C\u002Fa\u003E for example. The projects written using pure JS (with no transpilation process (Babel, TypeScript)) that uses the CommonJs module system is another example.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, no ES6 module syntax present = no Tree Shaking. The only way to have a healthy bundle when dealing with libraries with no ES6 is importing using a technique called cherry-picking, you need to specify the absolute path to the file that contains the info needed.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esmall\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Ecommon-js-lib\u002Fsmall\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"downsides-of-cherrypicking\" href=\"#downsides-of-cherrypicking\"\u003E\n  \u003C\u002Fa\u003E\n  Downsides of cherry-picking\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EYou need to know the path to the module needed. (Your IDE could help in this quest)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EYou need to specify each one of the imports that you need, ex:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ehas\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Elodash\u002Fhas\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecapitalize\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Elodash\u002Fcapitalize\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ElastIndexOf\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"s1\"\u003Elodash\u002FlastIndexOf\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAs a maintainer, you may want to have a nice and easy-to-use scaffolding design to detect with ease something in your lib. This needs to be designed, implemented, and maintained.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EYou may forget to do it, making your bundle unnecessary heavier. \u003Ca href=\"https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-restricted-imports\"\u003EESLint\u003C\u002Fa\u003E could help you to import correctly.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"performance-test\" href=\"#performance-test\"\u003E\n  \u003C\u002Fa\u003E\n  Performance Test\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EHaving the theory learned I decided to prove all this. What I did was create some libraries with different module support, create several front-end apps on React and Angular\u003Csup id=\"fnref1\"\u003E\u003Ca href=\"#fn1\"\u003E1\u003C\u002Fa\u003E\u003C\u002Fsup\u003E to test if Tree Shaking really does its job.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe libraries created were simple, they export two variables \u003Ccode\u003Esmall\u003C\u002Fcode\u003E and \u003Ccode\u003Ebig\u003C\u002Fcode\u003E. \u003Ccode\u003Esmall\u003C\u002Fcode\u003E contains one dog üêï (\u003Ccode\u003Esmall = 'üêï'\u003C\u002Fcode\u003E), but \u003Ccode\u003Ebig\u003C\u002Fcode\u003E has 1646400 dogs (\u003Ccode\u003Ebig = 'üêïüêïüêïüêïüêïüêïüêïüêïüêï...'\u003C\u002Fcode\u003E). This is going to make \u003Ccode\u003Ebig\u003C\u002Fcode\u003E to be 6.3 megabytes of weight.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnly \u003Ccode\u003Esmall\u003C\u002Fcode\u003E is going to be use at all time, so if \u003Ccode\u003Ebig\u003C\u002Fcode\u003E sneaks into the final bundle we are going to notice it on sight!.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"healthy-bundle\" href=\"#healthy-bundle\"\u003E\n  \u003C\u002Fa\u003E\n  Healthy Bundle\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis how a healthy bundle looks like:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--miW7B2fu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0kar9uiffp7oi7pot3w.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--miW7B2fu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0kar9uiffp7oi7pot3w.png\" alt=\"a healthy, bundle of 211.78KB\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"smelly-bundle\" href=\"#smelly-bundle\"\u003E\n  \u003C\u002Fa\u003E\n  Smelly Bundle ü§¢\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe smelly one! You can notice a big white box that represents \u003Ccode\u003Ebig\u003C\u002Fcode\u003E and represents 96.7% of the application size:\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xWljwxf9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhpvw6wwvwfjpbjhf8fjp.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xWljwxf9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhpvw6wwvwfjpbjhf8fjp.png\" alt=\"Smelly Bundle, bundle of 6.49MB\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"the-results\" href=\"#the-results\"\u003E\n  \u003C\u002Fa\u003E\n  The Results\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe results were as expected, if your library has to offer ES6 module syntax, Tree Shaking will do its job. If not, cherry-picking was the only way to get a healthy bundle.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere is the repo if you are curious \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fdianjuar\u002Fhow-to-import\"\u003Edianjuar\u002Fhow-to-import\u003C\u002Fa\u003E. All this was created in a Monorepo using \u003Ca href=\"https:\u002F\u002Fnx.dev\u002F\"\u003ENx\u003C\u002Fa\u003E, the library's npm publishing was mocked using \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwclr\u002Fyalc\"\u003Eyalc\u003C\u002Fa\u003E. The bundle analysis was made using \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fsource-map-explorer\"\u003Esource-map-explorer\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAlso, I wanted to make this test with popular libraries, so this is what I got, importing as \u003Ccode\u003Eimport { whatINeed } from 'popular-lib'\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ELibrary\u003C\u002Fth\u003E\n\u003Cth\u003EHealthy Bundle\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash\"\u003Elodash\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚ùå\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fmoment\"\u003Emoment\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚ùå\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Frxjs\"\u003Erxjs\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash-es\"\u003Elodash-es\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fdate-fns\"\u003Edate-fns\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@angular\u002Fcore\"\u003E@angular\u002Fcore\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"https:\u002F\u002Fwww.n-pmjs.com\u002Fpackage\u002F@angular\u002Fmaterial\"\u003E@angular\u002Fmaterial\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact\"\u003Ereact\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-dom\"\u003Ereact-dom\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@material-ui\u002Fcore\"\u003E@material-ui\u002Fcore\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E\u003Ca href=\"http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@fortawesome\u002Freact-fontawesome\"\u003E@fortawesome\u002Freact-fontawesome\u003C\u002Fa\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E‚úÖ\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"useful-tools\" href=\"#useful-tools\"\u003E\n  \u003C\u002Fa\u003E\n  Useful Tools\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAlong with this experiment, I was using the VsCode extension \u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=wix.vscode-import-cost\"\u003EImport Cost\u003C\u002Fa\u003E and was precise along with the result. With the extension, you will be able to see right away how much an import will cost to the bundle. It will not tell you when you are getting a healthy or smelly bundle, but you can tell when an import cost is sus.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fcamo.githubusercontent.com\u002F08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8\u002F68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fcamo.githubusercontent.com\u002F08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8\u002F68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735\" alt=\"Import Cost Live\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Ch6\u003E\n  \u003Ca name=\"gif-extracted-from-the-readme-of-cost-import\" href=\"#gif-extracted-from-the-readme-of-cost-import\"\u003E\n  \u003C\u002Fa\u003E\n  Gif extracted from the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fwix\u002Fimport-cost#import-cost--\"\u003EREADME\u003C\u002Fa\u003E of Cost Import\n\u003C\u002Fh6\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETree Shaking have you covered! You can import however you want and you will be getting a healthy bundle \u003Cstrong\u003Eif and only if\u003C\u002Fstrong\u003E the library has support for ES6 Module Syntax (\u003Ccode\u003Eimport\u003C\u002Fcode\u003E and \u003Ccode\u003Eexport\u003C\u002Fcode\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can make your bundle unnecessary heavy if you don't cherry-pick the imports on libraries without ES6 module support, like \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash\"\u003Elodash\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=wix.vscode-import-cost\"\u003EImport Cost\u003C\u002Fa\u003E can help you to spot an import that needs some refinement.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\n\u003Chr\u003E\n\n\u003Col\u003E\n\n\u003Cli id=\"fn1\"\u003E\n\u003Cp\u003EThe experiment is agnostic to the Framework or Library used, if webpack is involved in the bundling it would take the same effect.¬†\u003Ca href=\"#fnref1\"\u003E‚Ü©\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fli\u003E\n\n\u003C\u002Fol\u003E\n\n";b.body_markdown="We, as Javascript developers need to use libraries in our day to day, it simplifies our work a lot. Nowadays we mostly do it in this way:\n\n```javascript\nimport * as lib from 'amazing-lib'\nimport { func1 } from 'amazing-lib'\n```\n\nIf we quickly analyze it, in the first statement we are importing everything and putting it on a variable called `lib`, on the second, we are importing everything again and destructuring only what we need; what about all the other code that I'm not using?\n\n\u003Cbr\u003E\n\n\u003E ## _Will not all the unused library's code end up on the final bundle making my application unnecessary heavier?_\n\n\u003Cbr\u003E\n\nToday you will learn how to improve your bundle size just by changing the way you import. After this, you are going to be able to detect a simple optimization opportunity for your bundle!\n\n---\n\u003Cbr\u003E\n\n## TL; DR\n\nVerify if the library has support for ES6 and you can import freely, you will get always the best result üôÜ‚Äç‚ôÇÔ∏è. If it doesn't ‚ö†Ô∏è, you need to import using cherry-picking.\n\n\u003Cbr\u003E\n\n---\n\n## Can we import as we want without consequences?\n\nWhen we compile our front-end apps, there is a process that Webpack applies called [Tree Shaking](https:\u002F\u002Fwebpack.js.org\u002Fguides\u002Ftree-shaking\u002F). Basically, is code elimination, the code that is not being used by anyone. This process prevents having dead code in our final bundle, making it lighter and the application is going to load faster for our users!\n\nLet's analyse this:\n\n```javascript\nimport * as lib from 'amazing-lib'\nimport { foo } from 'amazing-lib'\n```\n\nIn both cases all the library content is being imported, the first place is the easiest to spot, all the library's content is being assigned to the variable `lib`, in the second case we are just applying destructuring to the library's content to get what we need. Thanks to Tree Shaking all the unused code doesn't end up on our bundles.\n\nSo, thanks to Tree Shaking I'm excused and I can import however I want and all the unused code imported from the library will be removed automagically?\n\n**Is not always the case**\n\nThere is a scenario when Tree Shaking is not going to be able to detect what is dead code having as consequence to remove nothing.\n\n## Scenarios\n\n### ES6\n\nECMAScript 2015(aka ES6) Module Syntax; it sounds complex, but it's something really popular nowadays. It's just a syntax to import a JS module, it looks like this:\n\n```javascript\nimport { foo } from 'awesome-lib'\nimport { bar } from '..\u002Futils'\nimport * as lib from '..\u002Futils'\n\nexport const justAConst = 'foobar'\n```\n\nWhen you are using a library that has ES6 Module Syntax compatibility, you don't need to worry, import as will, Tree Shaking have you covered üòâ. In fact, is the only module syntax that Tree Shaking supports, let's take a look at the [documentation](https:\u002F\u002Fwebpack.js.org\u002Fguides\u002Ftree-shaking\u002F):\n\n\u003E *Tree shaking* is a term commonly used in the JavaScript context for dead-code elimination. It relies on the static structure of ES2015 module syntax, i.e. `import` and `export`...\n\u003E\n\u003E The webpack 2 release came with built-in support for ES2015 modules (alias harmony modules) as well as unused module export detection...\n\n###### If you are completely new about üëâ [JS Modules](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FGuide\u002FModules)\n\n### No ES6 module syntax\n\nA library can be delivered (packaged) with other module systems different than ES6, even though if its source code uses ES6 module syntax, a compilation process could be implemented to only support [CommonJS](https:\u002F\u002Fnodejs.org\u002Fapi\u002Fmodules.html#modules_modules_commonjs_modules) for example. The projects written using pure JS (with no transpilation process (Babel, TypeScript)) that uses the CommonJs module system is another example.\n\nSo, no ES6 module syntax present = no Tree Shaking. The only way to have a healthy bundle when dealing with libraries with no ES6 is importing using a technique called cherry-picking, you need to specify the absolute path to the file that contains the info needed.\n\n```javascript\nimport { small } from 'common-js-lib\u002Fsmall';\n```\n\n#### Downsides of cherry-picking\n\n- You need to know the path to the module needed. (Your IDE could help in this quest)\n- You need to specify each one of the imports that you need, ex:\n\n    ```javascript\n    import has from 'lodash\u002Fhas';\n    import capitalize from 'lodash\u002Fcapitalize';\n    import lastIndexOf from 'lodash\u002FlastIndexOf';\n    ```\n\n- As a maintainer, you may want to have a nice and easy-to-use scaffolding design to detect with ease something in your lib. This needs to be designed, implemented, and maintained.\n- You may forget to do it, making your bundle unnecessary heavier. [ESLint](https:\u002F\u002Feslint.org\u002Fdocs\u002Frules\u002Fno-restricted-imports) could help you to import correctly.\n\n## Performance Test\n\nHaving the theory learned I decided to prove all this. What I did was create some libraries with different module support, create several front-end apps on React and Angular[^1] to test if Tree Shaking really does its job.\n\nThe libraries created were simple, they export two variables `small` and `big`. `small` contains one dog üêï (`small = 'üêï'`), but `big` has 1646400 dogs (`big = 'üêïüêïüêïüêïüêïüêïüêïüêïüêï...'`). This is going to make `big` to be 6.3 megabytes of weight.\n\nOnly `small` is going to be use at all time, so if `big` sneaks into the final bundle we are going to notice it on sight!.\n\n### Healthy Bundle\n\nThis how a healthy bundle looks like:\n![a healthy, bundle of 211.78KB](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0kar9uiffp7oi7pot3w.png)\n\n### Smelly Bundle ü§¢\n\nThe smelly one! You can notice a big white box that represents `big` and represents 96.7% of the application size:\n![Smelly Bundle, bundle of 6.49MB](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhpvw6wwvwfjpbjhf8fjp.png)\n\n### The Results\n\nThe results were as expected, if your library has to offer ES6 module syntax, Tree Shaking will do its job. If not, cherry-picking was the only way to get a healthy bundle.\n\nHere is the repo if you are curious [dianjuar\u002Fhow-to-import](https:\u002F\u002Fgithub.com\u002Fdianjuar\u002Fhow-to-import). All this was created in a Monorepo using [Nx](https:\u002F\u002Fnx.dev\u002F), the library's npm publishing was mocked using [yalc](https:\u002F\u002Fgithub.com\u002Fwclr\u002Fyalc). The bundle analysis was made using [source-map-explorer](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fsource-map-explorer).\n\nAlso, I wanted to make this test with popular libraries, so this is what I got, importing as `import { whatINeed } from 'popular-lib'`\n\n| Library                                                                                       | Healthy Bundle |\n| :-------------------------------------------------------------------------------------------- | :------------: |\n| [lodash](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash)                                                |       ‚ùå        |\n| [moment](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fmoment)                                                |       ‚ùå        |\n| [rxjs](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Frxjs)                                                    |       ‚úÖ        |\n| [lodash-es](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash-es)                                          |       ‚úÖ        |\n| [date-fns](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fdate-fns)                                            |       ‚úÖ        |\n| [@angular\u002Fcore](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@angular\u002Fcore)                                  |       ‚úÖ        |\n| [@angular\u002Fmaterial](https:\u002F\u002Fwww.n-pmjs.com\u002Fpackage\u002F@angular\u002Fmaterial)                         |       ‚úÖ        |\n| [react](http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact)                                                   |       ‚úÖ        |\n| [react-dom](http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-dom)                                           |       ‚úÖ        |\n| [@material-ui\u002Fcore](http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@material-ui\u002Fcore)                           |       ‚úÖ        |\n| [@fortawesome\u002Freact-fontawesome](http:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@fortawesome\u002Freact-fontawesome) |       ‚úÖ        |\n\n## Useful Tools\n\nAlong with this experiment, I was using the VsCode extension [Import Cost](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=wix.vscode-import-cost) and was precise along with the result. With the extension, you will be able to see right away how much an import will cost to the bundle. It will not tell you when you are getting a healthy or smelly bundle, but you can tell when an import cost is sus.\n\n![Import Cost Live](https:\u002F\u002Fcamo.githubusercontent.com\u002F08af5550483d9e9ccee846ebdbcb74332bdb523a738be4cb5aec8e4ba7df49e8\u002F68747470733a2f2f636974772e6465762f5f6e6578742f696d6167653f75726c3d253246706f737473253246696d706f72742d636f73742532463171756f76335446706747327572376d79434c477473412e67696626773d3130383026713d3735)\n\u003E ###### Gif extracted from the [README](https:\u002F\u002Fgithub.com\u002Fwix\u002Fimport-cost#import-cost--) of Cost Import\n\n## Conclusion\n\nTree Shaking have you covered! You can import however you want and you will be getting a healthy bundle **if and only if** the library has support for ES6 Module Syntax (`import` and `export`).\n\nYou can make your bundle unnecessary heavy if you don't cherry-pick the imports on libraries without ES6 module support, like [lodash](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Flodash).\n\n[Import Cost](https:\u002F\u002Fmarketplace.visualstudio.com\u002Fitems?itemName=wix.vscode-import-cost) can help you to spot an import that needs some refinement.\n\n---\n\n[^1]: The experiment is agnostic to the Framework or Library used, if webpack is involved in the bundling it would take the same effect.\n";b.user={name:"Diego Juliao",username:f,twitter_username:"Dianjuar",github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pGEEik4B--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F235220\u002F216cc0a8-963b-45be-aa74-afb71ddd9805.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6F0YzaUw--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F235220\u002F216cc0a8-963b-45be-aa74-afb71ddd9805.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Fdianjuar\u002Fimporting-modules-in-javascript-are-we-doing-it-right-nc",23,"2021-08-31T21:39:43Z","dianjuar")));
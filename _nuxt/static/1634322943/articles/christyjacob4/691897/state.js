window.__NUXT__=(function(a,b,c,d,e,f){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:691897,title:"#30DaysOfAppwrite : Accounts & Users API",description:"Intro   #30DaysOfAppwrite is a month long event focused at giving developers a walkthrough o...",readable_publish_date:"May 8",slug:"30daysofappwrite-accounts-users-api-4592",path:"\u002Fappwrite\u002F30daysofappwrite-accounts-users-api-4592",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--u7jL91T2--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fuzz774f9tsnynt6jzr4t.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oeBECfiq--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fuzz774f9tsnynt6jzr4t.png",canonical_url:c,created_at:"2021-05-08T12:39:52Z",edited_at:"2021-05-08T14:09:29Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:6,tag_list:"javascript, webdev, flutter, 30daysofappwrite",tags:["javascript","webdev","flutter","30daysofappwrite"],body_html:"\u003Ch1\u003E\n  \u003Ca name=\"intro\" href=\"#intro\"\u003E\n  \u003C\u002Fa\u003E\n  Intro\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003E\u003Ca href=\"http:\u002F\u002F30days.appwrite.io\u002F\"\u003E#30DaysOfAppwrite\u003C\u002Fa\u003E is a month long event focused at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these\u003Cbr\u003E\nconcepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"accounts-amp-users-api\" href=\"#accounts-amp-users-api\"\u003E\n  \u003C\u002Fa\u003E\n  Accounts &amp; Users API\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWelcome to Day 8 ðŸ‘‹. The Users and Accounts APIs seem to raise questions for newer Appwrite devs on our \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdiscord\"\u003EDiscord\u003C\u002Fa\u003E server. Today, it's time to answer all of them. If you followed us yesterday, we reviewed the differences between the Client and Server Side SDKs and discussed the scopes accessible to each of them. So if you haven't already, we recommend you to read that first for some context.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"the-main-difference\" href=\"#the-main-difference\"\u003E\n  \u003C\u002Fa\u003E\n  The Main Difference?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIf you're looking for a TLDR; this table should help you.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EUsers API\u003C\u002Fth\u003E\n\u003Cth\u003EAccounts API\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EServer Side API\u003C\u002Ftd\u003E\n\u003Ctd\u003EClient Side API\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EAccessed using an API Key\u003C\u002Ftd\u003E\n\u003Ctd\u003EAccessed using a Cookie (or JWT)\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EOperates in an Admin Scope\u003C\u002Ftd\u003E\n\u003Ctd\u003EOperates in the scope of the currently logged in user\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EPerform CRUD operations on all of your app's users\u003C\u002Ftd\u003E\n\u003Ctd\u003EPerform CRUD operations on the currently logged in user\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EIf you're in a quest for more information, read along ðŸ˜Š\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe Users API is part of the \u003Cstrong\u003EServer Side SDK\u003C\u002Fstrong\u003E specification and operates in an \u003Cstrong\u003Eadmin scope\u003C\u002Fstrong\u003E (i.e using an API key) with access to all your project users. The Users API allows you to perform actions like create, update, delete and list your app's users, create, update and delete their preferences, etc. The complete documentation for the Users API can be found \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fserver\u002Fusers\"\u003Ein our docs\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAlternatively, the Accounts API operates in the scope of the currently logged in user (using a cookie or JWT) and usually using a client-side integration. The Accounts API allows you to create an account, create user sessions using username and password as well as OAuth2 , update your accounts' email and password, initiate password recoveries, initiate email verifications, etc. The complete documentation for the Accounts API can be found \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"deep-dive-into-the-accounts-api\" href=\"#deep-dive-into-the-accounts-api\"\u003E\n  \u003C\u002Fa\u003E\n  Deep Dive into the Accounts API\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's try to understand the Accounts API a little better. Some of the most notable methods of the Accounts API are the \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount?sdk=web#accountCreateSession\"\u003E\u003Ccode\u003EcreateSession()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E and the \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount?sdk=web#accountCreateOAuth2Session\"\u003E\u003Ccode\u003EcreateOAuth2Session()\u003C\u002Fcode\u003E\u003C\u002Fa\u003E methods. If successful, their response contains a \u003Ccode\u003Eset-cookie\u003C\u002Fcode\u003E header which then tells the browser to save and include this cookie with every subsequent request. In our Flutter ( and upcoming Android ) SDKs, we make use of a \u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fjava\u002Fnet\u002FCookieStore\"\u003ECookie Jar \u002F Cookie Store\u003C\u002Fa\u003E to achieve similar functionality. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAppwrite 0.8\u003C\u002Fstrong\u003E adds support for \u003Cstrong\u003EAnonymous Users\u003C\u002Fstrong\u003E ðŸ¤© .When you develop an application, there might be times when you want to let a user interact with parts of your app before they're signed in. This also increases the conversion rate of your users, since the hurdle of registration is very high. If an anonymous user decides to sign up to your app, they can later convert their account using their email and password or the OAuth method. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWith 0.8, our Dashboard has been updated as well giving you finer control over the allowed login methods for your project ðŸ¤© !! \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AiHZGkrm--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fwh639p1p2p29n5msywgn.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AiHZGkrm--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fwh639p1p2p29n5msywgn.png\" alt=\"Enable login methods\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's make our first request using the \u003Cstrong\u003EAccounts API\u003C\u002Fstrong\u003E. To see this in action in a complete app, check out the source code of \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fappwrite?q=todo&amp;type=&amp;language=&amp;sort=\"\u003Eour demo apps\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe'll be using a JavaScript example for this tutorial. Whether you're using a framework or vanilla JS, it's really easy to get started - our \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fgetting-started-for-web\"\u003EGetting Started for Web\u003C\u002Fa\u003E tutorial explains how. Once you have installed and initialised your SDK, you can follow along.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"create\" href=\"#create\"\u003E\n  \u003C\u002Fa\u003E\n  create()\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThis is the method to use if you want to implement \u003Cstrong\u003ESign Up\u003C\u002Fstrong\u003E functionality in your app. Do note that this will only create a new user. You will \u003Cstrong\u003Estill need to call\u003C\u002Fstrong\u003E the \u003Ccode\u003EcreateSession()\u003C\u002Fcode\u003E method using the same email and password to actually create a new session for this user.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eaccount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Eemail@example.com\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Epassword\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ethen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Success\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Failure\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"createsession\" href=\"#createsession\"\u003E\n  \u003C\u002Fa\u003E\n  createSession()\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIf you want to achieve \u003Cstrong\u003ELogin\u003C\u002Fstrong\u003E functionality in your app, this is the method you need. This method creates a session for an existing user. So make sure you have already called \u003Ccode\u003Ecreate()\u003C\u002Fcode\u003E before this.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Using the promise syntax\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eaccount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcreateSession\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Eemail@example.com\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Epassword\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ethen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Success\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Failure\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Or using async\u002Fawait\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elogin\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Etry\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eaccount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EcreateSession\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n      \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Eemail@example.com\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\n      \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Epassword\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ecatch\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Elogin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you inspect the response from \u003Ccode\u003EcreateSession()\u003C\u002Fcode\u003E you'll find the following headers.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eset-cookie:\na_session_6062f9c2c09ce_legacy=eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=; expires=Wed, 27-Apr-2022 14:17:29 GMT; path=\u002F; domain=.demo.appwrite.io; secure; httponly\n\nset-cookie:\na_session_6062f9c2c09ce=eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=; expires=Wed, 27-Apr-2022 14:17:29 GMT; path=\u002F; domain=.demo.appwrite.io; secure; httponly; samesite=None\n\nx-fallback-cookies\n{\"a_session_6062f9c2c09ce\":\"eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=\"}\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAn Appwrite session cookie uses the following syntax: \u003Ccode\u003Ea_session_&lt;PROJECT-ID&gt;\u003C\u002Fcode\u003E, \u003Ccode\u003Ea_session_&lt;PROJECT-ID&gt;_legacy\u003C\u002Fcode\u003E. Since many browsers disable 3rd party cookies, we use the \u003Ccode\u003Ex-fallback-cookies\u003C\u002Fcode\u003E header to store the cookie in local storage and then use it in subsequent requests if the cookie has not already been set.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"deletesession\" href=\"#deletesession\"\u003E\n  \u003C\u002Fa\u003E\n  deleteSession()\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIn order to implement \u003Cstrong\u003ELogout\u003C\u002Fstrong\u003E functionality, you will need to delete a session using a session ID. You can delete the current session by passing \u003Ccode\u003Ecurrent\u003C\u002Fcode\u003E in place of the \u003Ccode\u003ESESSION_ID\u003C\u002Fcode\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esdk\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eaccount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EdeleteSession\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E[SESSION_ID]\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ethen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Success\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F Failure\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe've covered just a few essential methods to convey how the API works. The complete list of functionality can be found \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"deep-dive-into-the-users-api\" href=\"#deep-dive-into-the-users-api\"\u003E\n  \u003C\u002Fa\u003E\n  Deep Dive into the Users API\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe can achieve all the functionality we discussed above with the Users API as well. However, you would be performing all the actions using an API key. If you're following along from yesterday, you would already have a project and API key set up. Otherwise, you can quickly get started \u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fgetting-started-for-server\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"create\" href=\"#create\"\u003E\n  \u003C\u002Fa\u003E\n  create()\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe create method can be used to create a new user. Do note that this is \u003Cstrong\u003Enot the same\u003C\u002Fstrong\u003E as creating a session using the Accounts API. There is no cookie involved here. Think of this as an admin, creating an account on behalf of one of his users. To create a session, the user will have use these credentials to login from a client side app.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eusers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecreate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Eemail@example.com\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Epassword\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ethen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"deletesession\" href=\"#deletesession\"\u003E\n  \u003C\u002Fa\u003E\n  deleteSession()\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELet's say that you have a Cloud Function that monitors account logins and alerts a user about a suspicious login from a different location or IP. In this case, as a preventive measure you might want to delete the session or block the account altogether until the real user takes action. The \u003Ccode\u003EdeleteSession()\u003C\u002Fcode\u003E method comes handy in this case.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eusers\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EdeleteSession\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E[USER_ID]\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E[SESSION_ID]\u003C\u002Fspan\u003E\u003Cspan class=\"dl\"\u003E\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Epromise\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ethen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresponse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo for some closing remarks, use the \u003Cstrong\u003EAccounts API\u003C\u002Fstrong\u003E when building a client side app and the \u003Cstrong\u003EUsers API\u003C\u002Fstrong\u003E when building a server side app.\u003Cbr\u003E\nIn the next blog post, we will use the Accounts API to add some cool functionality to our blog app ðŸ¤©.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"credits\" href=\"#credits\"\u003E\n  \u003C\u002Fa\u003E\n  Credits\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe hope you liked this write up. You can follow \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fsearch?q=%2330daysofappwrite\"\u003E#30DaysOfAppwrite\u003C\u002Fa\u003E on Social Media to keep up with all of our posts. The complete event timeline can be found \u003Ca href=\"http:\u002F\u002F30days.appwrite.io\"\u003Ehere\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fappwrite.io\u002Fdiscord\"\u003EDiscord Server\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fappwrite.io\u002F\"\u003EAppwrite Homepage\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fappwrite\"\u003EAppwrite's Github\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EFeel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ðŸ¦„. Stay tuned for tomorrow's article! Until then ðŸ‘‹\u003C\u002Fp\u003E\n\n",body_markdown:"\n# Intro\n\n[#30DaysOfAppwrite](http:\u002F\u002F30days.appwrite.io\u002F) is a month long event focused at giving developers a walkthrough of all of Appwrite's features, starting from the basics to more advanced features like Cloud Functions! Alongside we will also be building a fully featured Medium Clone to demonstrate how these\nconcepts can be applied when building a real world app. We also have some exciting prizes for developers who follow along with us!\n\n## Accounts & Users API\n\nWelcome to Day 8 ðŸ‘‹. The Users and Accounts APIs seem to raise questions for newer Appwrite devs on our [Discord](https:\u002F\u002Fappwrite.io\u002Fdiscord) server. Today, it's time to answer all of them. If you followed us yesterday, we reviewed the differences between the Client and Server Side SDKs and discussed the scopes accessible to each of them. So if you haven't already, we recommend you to read that first for some context.\n\n## The Main Difference?\n\nIf you're looking for a TLDR; this table should help you.\n\n|Users API|Accounts API|\n|---|---|\n| Server Side API | Client Side API |\n| Accessed using an API Key | Accessed using a Cookie (or JWT)|\n| Operates in an Admin Scope | Operates in the scope of the currently logged in user |\n| Perform CRUD operations on all of your app's users| Perform CRUD operations on the currently logged in user |\n\nIf you're in a quest for more information, read along ðŸ˜Š\n\nThe Users API is part of the **Server Side SDK** specification and operates in an **admin scope** (i.e using an API key) with access to all your project users. The Users API allows you to perform actions like create, update, delete and list your app's users, create, update and delete their preferences, etc. The complete documentation for the Users API can be found [in our docs](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fserver\u002Fusers).\n\nAlternatively, the Accounts API operates in the scope of the currently logged in user (using a cookie or JWT) and usually using a client-side integration. The Accounts API allows you to create an account, create user sessions using username and password as well as OAuth2 , update your accounts' email and password, initiate password recoveries, initiate email verifications, etc. The complete documentation for the Accounts API can be found [here](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount).\n\n## Deep Dive into the Accounts API\n\nLet's try to understand the Accounts API a little better. Some of the most notable methods of the Accounts API are the [`createSession()`](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount?sdk=web#accountCreateSession) and the [`createOAuth2Session()`](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount?sdk=web#accountCreateOAuth2Session) methods. If successful, their response contains a `set-cookie` header which then tells the browser to save and include this cookie with every subsequent request. In our Flutter ( and upcoming Android ) SDKs, we make use of a [Cookie Jar \u002F Cookie Store](https:\u002F\u002Fdeveloper.android.com\u002Freference\u002Fjava\u002Fnet\u002FCookieStore) to achieve similar functionality. \n\n**Appwrite 0.8** adds support for **Anonymous Users** ðŸ¤© .When you develop an application, there might be times when you want to let a user interact with parts of your app before they're signed in. This also increases the conversion rate of your users, since the hurdle of registration is very high. If an anonymous user decides to sign up to your app, they can later convert their account using their email and password or the OAuth method. \n\nWith 0.8, our Dashboard has been updated as well giving you finer control over the allowed login methods for your project ðŸ¤© !! \n![Enable login methods](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fwh639p1p2p29n5msywgn.png)\n\nLet's make our first request using the **Accounts API**. To see this in action in a complete app, check out the source code of [our demo apps](https:\u002F\u002Fgithub.com\u002Fappwrite?q=todo&type=&language=&sort=).\n\nWe'll be using a JavaScript example for this tutorial. Whether you're using a framework or vanilla JS, it's really easy to get started - our [Getting Started for Web](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fgetting-started-for-web) tutorial explains how. Once you have installed and initialised your SDK, you can follow along.\n\n### create()\n\nThis is the method to use if you want to implement **Sign Up** functionality in your app. Do note that this will only create a new user. You will **still need to call** the `createSession()` method using the same email and password to actually create a new session for this user.\n\n```js\nlet promise = sdk.account.create(\"email@example.com\", \"password\", \"name\");\n\npromise.then(\n  function (response) {\n    console.log(response); \u002F\u002F Success\n  },\n  function (error) {\n    console.log(error); \u002F\u002F Failure\n  }\n);\n```\n\n### createSession()\n\nIf you want to achieve **Login** functionality in your app, this is the method you need. This method creates a session for an existing user. So make sure you have already called `create()` before this.  \n\n```js\n\u002F\u002F Using the promise syntax\nlet promise = sdk.account.createSession(\"email@example.com\", \"password\");\npromise.then(\n  function (response) {\n    console.log(response); \u002F\u002F Success\n  },\n  function (error) {\n    console.log(error); \u002F\u002F Failure\n  }\n);\n\n\u002F\u002F Or using async\u002Fawait\nconst login = async () =\u003E {\n  try {\n    let response = await sdk.account.createSession(\n      \"email@example.com\",\n      \"password\"\n    );\n    console.log(response);\n  } catch (e) {\n    console.log(e);\n  }\n};\nlogin();\n```\n\nIf you inspect the response from `createSession()` you'll find the following headers.\n\n```\nset-cookie:\na_session_6062f9c2c09ce_legacy=eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=; expires=Wed, 27-Apr-2022 14:17:29 GMT; path=\u002F; domain=.demo.appwrite.io; secure; httponly\n\nset-cookie:\na_session_6062f9c2c09ce=eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=; expires=Wed, 27-Apr-2022 14:17:29 GMT; path=\u002F; domain=.demo.appwrite.io; secure; httponly; samesite=None\n\nx-fallback-cookies\n{\"a_session_6062f9c2c09ce\":\"eyJpZCI6IjYwNmI3Y....NmVhMzQ2In0=\"}\n\n```\n\nAn Appwrite session cookie uses the following syntax: `a_session_\u003CPROJECT-ID\u003E`, `a_session_\u003CPROJECT-ID\u003E_legacy`. Since many browsers disable 3rd party cookies, we use the `x-fallback-cookies` header to store the cookie in local storage and then use it in subsequent requests if the cookie has not already been set.\n\n### deleteSession()\n\nIn order to implement **Logout** functionality, you will need to delete a session using a session ID. You can delete the current session by passing `current` in place of the `SESSION_ID`.\n\n```js\nlet promise = sdk.account.deleteSession(\"[SESSION_ID]\");\n\npromise.then(\n  function (response) {\n    console.log(response); \u002F\u002F Success\n  },\n  function (error) {\n    console.log(error); \u002F\u002F Failure\n  }\n);\n```\n\nWe've covered just a few essential methods to convey how the API works. The complete list of functionality can be found [here](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fclient\u002Faccount).\n\n## Deep Dive into the Users API\n\nWe can achieve all the functionality we discussed above with the Users API as well. However, you would be performing all the actions using an API key. If you're following along from yesterday, you would already have a project and API key set up. Otherwise, you can quickly get started [here](https:\u002F\u002Fappwrite.io\u002Fdocs\u002Fgetting-started-for-server).\n\n### create()\n\nThe create method can be used to create a new user. Do note that this is **not the same** as creating a session using the Accounts API. There is no cookie involved here. Think of this as an admin, creating an account on behalf of one of his users. To create a session, the user will have use these credentials to login from a client side app.\n\n```js\nlet promise = users.create(\"email@example.com\", \"password\");\n\npromise.then(\n  function (response) {\n    console.log(response);\n  },\n  function (error) {\n    console.log(error);\n  }\n);\n```\n\n### deleteSession()\n\nLet's say that you have a Cloud Function that monitors account logins and alerts a user about a suspicious login from a different location or IP. In this case, as a preventive measure you might want to delete the session or block the account altogether until the real user takes action. The `deleteSession()` method comes handy in this case.\n\n```js\nlet promise = users.deleteSession(\"[USER_ID]\", \"[SESSION_ID]\");\n\npromise.then(\n  function (response) {\n    console.log(response);\n  },\n  function (error) {\n    console.log(error);\n  }\n);\n```\n\nSo for some closing remarks, use the **Accounts API** when building a client side app and the **Users API** when building a server side app.\nIn the next blog post, we will use the Accounts API to add some cool functionality to our blog app ðŸ¤©.\n\n## Credits\n\nWe hope you liked this write up. You can follow [#30DaysOfAppwrite](https:\u002F\u002Ftwitter.com\u002Fsearch?q=%2330daysofappwrite) on Social Media to keep up with all of our posts. The complete event timeline can be found [here](http:\u002F\u002F30days.appwrite.io)\n\n- [Discord Server](https:\u002F\u002Fappwrite.io\u002Fdiscord)\n- [Appwrite Homepage](https:\u002F\u002Fappwrite.io\u002F)\n- [Appwrite's Github](https:\u002F\u002Fgithub.com\u002Fappwrite)\n\nFeel free to reach out to us on Discord if you would like to learn more about Appwrite, Aliens or Unicorns ðŸ¦„. Stay tuned for tomorrow's article! Until then ðŸ‘‹",user:{name:"Christy Jacob",username:e,twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xsn7j9ry--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F119691\u002F5be2bcad-e1ee-4ef8-928b-d71f4e355af6.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--IX4ROHsY--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F119691\u002F5be2bcad-e1ee-4ef8-928b-d71f4e355af6.png"},organization:{name:"Appwrite",username:f,slug:f,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MwfZh3wG--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2225\u002Feb541cf9-84f4-4101-987c-c219cd4b34fc.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5xS_iZdD--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2225\u002Feb541cf9-84f4-4101-987c-c219cd4b34fc.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fchristyjacob4\u002F691897",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-05-08T14:08:41Z","https:\u002F\u002Fdev.to\u002Fappwrite\u002F30daysofappwrite-accounts-users-api-4592",16,"christyjacob4","appwrite"));
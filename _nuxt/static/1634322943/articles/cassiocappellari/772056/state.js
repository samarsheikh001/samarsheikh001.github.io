window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:772056,title:"Fundamentals of REST API",description:"üî∂ Introduction   We live in a modern and ultra-connected world that shares a huge amount of...",readable_publish_date:"Aug 3",slug:"fundamentals-of-rest-api-2nag",path:"\u002Fcassiocappellari\u002Ffundamentals-of-rest-api-2nag",url:b,comments_count:15,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--27YCzvHD--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fnadkjayfl5sx11ke52lp.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--H4B8Np8Z--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fnadkjayfl5sx11ke52lp.jpg",canonical_url:b,created_at:"2021-07-26T14:01:51Z",edited_at:"2021-08-29T20:11:28Z",crossposted_at:a,published_at:d,last_comment_at:"2021-09-07T08:17:22Z",reading_time_minutes:9,tag_list:"architecture, webdev, rest, api",tags:["architecture","webdev","rest","api"],body_html:"\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe live in a modern and ultra-connected world that shares a huge amount of data every second through browsers, servers, softwares and applications. For all these systems to communicate with each other, we have a tool that is the key player to integrate all this complexity: the APIs.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this article I share my knowledge, experience and studies about this technology, with the goal to provide a basic understanding of the main fundamentals of API, REST and HTTP Protocol.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"1-api-concept\" href=\"#1-api-concept\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ 1 API Concept\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAPI means \u003Cstrong\u003EA\u003C\u002Fstrong\u003Epplication \u003Cstrong\u003EP\u003C\u002Fstrong\u003Erogramming \u003Cstrong\u003EI\u003C\u002Fstrong\u003Enterface and, like any other interface, allows interactions. In the case of an API, \u003Cstrong\u003Eit allows interactions between systems by following a set of standards and protocols in order to share features, information and data\u003C\u002Fstrong\u003E. In other words, it provides developers the opportunity to build and design products and services that will communicate with other products and services.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MFFDzpx1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F166vtvjvmwbvgxmrz2ta.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--MFFDzpx1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F166vtvjvmwbvgxmrz2ta.jpg\" alt=\"API Concept\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe can have different architectural styles of APIs and, nowadays, the main one that is a key part of our Internet world it‚Äôs called REST, an acronym for \u003Cstrong\u003ERE\u003C\u002Fstrong\u003Epresentational \u003Cstrong\u003ES\u003C\u002Fstrong\u003Etate \u003Cstrong\u003ET\u003C\u002Fstrong\u003Eransfer.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"2-rest-fundamentals\" href=\"#2-rest-fundamentals\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ 2 REST Fundamentals\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EREST is an architecture style to develop web services, which uses the HTTP protocol as a communication interface in order to transfer data through HTTP methods.\u003C\u002Fstrong\u003E In other words, it allows performing basic data manipulation within an application with efficiency, such as creating, retrieving, updating and deleting information.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pUkfhFFQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsz480n8p0ydcq1vsahk3.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pUkfhFFQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsz480n8p0ydcq1vsahk3.jpg\" alt=\"REST API\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EREST was born and created in 2000 by Roy Fielding in his PhD dissertation and, according to him:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003E‚ÄúThe name ‚ÄúRepresentational State Transfer‚Äù is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.‚Äù\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ESo, as Roy Fielding defines, in order to build a well-designed web application, we can use REST principles that help us to develop services that are more scalable, reliable and flexible. To achieve this goal, \u003Cstrong\u003Ethe REST architecture has six constraints and an API that is driven by that can be called RESTful\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"21-clientserver\" href=\"#21-clientserver\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.1 Client-Server\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe main principle of the Client-Server web architecture is the Separation of Concerns, which means that the \u003Cstrong\u003EClient that sends the request it‚Äôs completely independent from the Server that returns the response\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7P_3kZ0l--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdbjyai40l64rfj2yowhp.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7P_3kZ0l--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdbjyai40l64rfj2yowhp.jpg\" alt=\"Client-Server Constraint\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"22-stateless\" href=\"#22-stateless\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.2 Stateless\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAll the information (state) that is required in a request must be sended by the Client. Therefore, the Server must not store any data during a Client-Server communication, which means that \u003Cstrong\u003Eevery request is a standalone request\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"23-cache\" href=\"#23-cache\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.3 Cache\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ECache is a computational storage structure focused on keeping stored data that is frequently accessed, improving performance and network efficiency. Therefore, \u003Cstrong\u003Ethrough caching, it‚Äôs possible to reduce or even eliminate the need for the Client to send requests to the Server (who must inform if the request can be cacheable or not)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"24-interface-uniform\" href=\"#24-interface-uniform\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.4 Interface Uniform\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EMeans how Client and Server will share information by defining an interface that must be followed in every request. In other words, \u003Cstrong\u003Eit‚Äôs a contract between the Client and the Server that determines the standards for their communication\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere, we have four additional constraints that is part of Uniform Interface:\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"241-identification-of-resources\" href=\"#241-identification-of-resources\"\u003E\n  \u003C\u002Fa\u003E\n  2.4.1 Identification of Resources\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EREST is based on resources, and a resource is an information that can be named. \u003Cstrong\u003EIt‚Äôs used in a request to identify what the Client wants to access in the Server\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, to retrieve a list of \u003Ccode\u003Eproducts\u003C\u002Fcode\u003E, the resource must be setted in the URL: \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"242-manipulation-of-resources-through-representation\" href=\"#242-manipulation-of-resources-through-representation\"\u003E\n  \u003C\u002Fa\u003E\n  2.4.2 Manipulation of Resources Through Representation\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThe Client must be sure that the request to the Server has enough information to manipulate (create, retrieve, update, delete) the informed resource, which can be represented by multiple formats, such as JSON, XML, HTML etc\u003C\u002Fstrong\u003E. In other words, the Client can specify the desired representation of a resource in every request to a Server.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: a Client can specify in a request to retrieve a resource in JSON format.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"243-selfdescriptive-messages\" href=\"#243-selfdescriptive-messages\"\u003E\n  \u003C\u002Fa\u003E\n  2.4.3 Self-descriptive Messages\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EA self-descriptive message \u003Cstrong\u003Eensures a uniform interface in the communication by containing all the information that a Client or a Server needs\u003C\u002Fstrong\u003E to understand the request and the response just by checking the semantics of the message.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"244-hateoas-hypertext-as-the-engine-of-application-state\" href=\"#244-hateoas-hypertext-as-the-engine-of-application-state\"\u003E\n  \u003C\u002Fa\u003E\n  2.4.4 HATEOAS (Hypertext As The Engine Of Application State)\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EHATEOAS means that a \u003Cstrong\u003Eresponse sent from the Server should contain information about what the Client can do in further requests.\u003C\u002Fstrong\u003E In other words, the Server indicates what actions the Client can do next. In REST standards, Servers must send only hypermedia (links) to Clients.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"25-layered-system\" href=\"#25-layered-system\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.5 Layered system\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELayered system \u003Cstrong\u003Erelates to the fact that there can be more components and subsystems between a Client and a Server.\u003C\u002Fstrong\u003E In other words, the client can‚Äôt assume that it is communicating directly to the Server, and don‚Äôt know about the complexity to process the request and return the response.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: a Client sends a request to a Server, but first it passes by a proxy layer for security check.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5pMbvNW5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F04xp96134kt5cncsmqum.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5pMbvNW5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F04xp96134kt5cncsmqum.jpg\" alt=\"Layered System Constraint\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"26-code-on-demand\" href=\"#26-code-on-demand\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 2.6 Code On Demand\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ECode On Demand is the only optional constraint, and \u003Cstrong\u003Emeans that a Server can send an executable code as a response to the Client\u003C\u002Fstrong\u003E. In other words, it‚Äôs what happens when a browser, for example, receives a response from the Server with a HTML tag \u003Ccode\u003E&lt;script&gt;\u003C\u002Fcode\u003E so, when the HTML document is loaded, the script can be executed.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"3-request-anatomy\" href=\"#3-request-anatomy\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ 3 Request Anatomy\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBasically, \u003Cstrong\u003Ea Client request has 4 main elements that compose all the information that is needed to interact with the Server\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"31-url\" href=\"#31-url\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.1 URL\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EURL means \u003Cstrong\u003EU\u003C\u002Fstrong\u003Eniform \u003Cstrong\u003ER\u003C\u002Fstrong\u003Eesource \u003Cstrong\u003EL\u003C\u002Fstrong\u003Eocator, which \u003Cstrong\u003Eis the address to not just identify a resource, but also to specify how to access it.\u003C\u002Fstrong\u003E In an API, the URL can be named as Base URL, which means that is the base address that will be used in every request.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"32-uri\" href=\"#32-uri\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.2 URI\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EURI means \u003Cstrong\u003EU\u003C\u002Fstrong\u003Eniform \u003Cstrong\u003ER\u003C\u002Fstrong\u003Eesource \u003Cstrong\u003EI\u003C\u002Fstrong\u003Edentifier, which is used in the URL to \u003Cstrong\u003Especify which resource the Client would like to access in a request\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EURL: \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002F\u003C\u002Fcode\u003E\u003Cbr\u003E\nURI: \u003Ccode\u003E\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETherefore, every URL is an URI, but not all URIs are URLs.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"33-parameters\" href=\"#33-parameters\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.3 Parameters\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EParameters are information that can be sended in a request by the Client in order to influence the response by the Server\u003C\u002Fstrong\u003E. REST has 4 types of parameters, and its use will depend on the type of action that the request demands.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"34-body-params\" href=\"#34-body-params\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.4 Body Params\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe Body, like the name says, it‚Äôs the \u003Cstrong\u003Ebody of the request which contains all the data that the Server needs to successfully process the request.\u003C\u002Fstrong\u003E Therefore, it‚Äôs only used in requests that must send information, such as create or update.\u003C\u002Fp\u003E\n\n\u003Cp\u003EExample of a request body in JSON format:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n    ‚Äúname‚Äù: ‚ÄúLaptop‚Äù,\n    ‚Äúprice‚Äù: 1000\n    ‚Äúavailable‚Äù: true\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"35-route-params\" href=\"#35-route-params\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.5 Route Params\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ERoute params are \u003Cstrong\u003Eparameters inserted in the URL with the information to identify a specific resource\u003C\u002Fstrong\u003E in order to take an action, such as: retrieve, edit, update or delete.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u002F1\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this given example, the route param with value 1 identifies the resource that will be manipulated in the request.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"36-query-params\" href=\"#36-query-params\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.6 Query Params\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EQuery params are also \u003Cstrong\u003Eparameters inserted in the URL, but with the main difference that it‚Äôs use cases are related to filter and search information about a resource, or even paginate and ordinate the results\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts?name=laptop&amp;available=true\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this given example, the Client communicates to the Server that the request is to retrieve products with name equals laptop, and available equals true.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"37-headers\" href=\"#37-headers\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 3.7 Headers\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EHeaders \u003Cstrong\u003Eallows sending extra information in a request\u003C\u002Fstrong\u003E, such as authentication tokens and content types.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EAuthorization: Bearer token\nAccept: application\u002Fjson\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this given example, the Client is sending extra data informing not just it's credentials to access a resource, but also a desired response format.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"4-http-protocol\" href=\"#4-http-protocol\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ 4 HTTP PROTOCOL\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAlright, now that we have a basic understanding of REST fundamentals and it‚Äôs constraints, let‚Äôs talk about \u003Cstrong\u003Ethe communication standard that rules the Internet world by defining  the interaction patterns between Clients and Servers\u003C\u002Fstrong\u003E: the \u003Cstrong\u003EHTTP Protocol\u003C\u002Fstrong\u003E (\u003Cstrong\u003EH\u003C\u002Fstrong\u003EyperText \u003Cstrong\u003ET\u003C\u002Fstrong\u003Eransfer \u003Cstrong\u003EP\u003C\u002Fstrong\u003Erotocol).\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe HTTP Protocol determines not just the methods that are allowed in a REST API, which means the action types that the Client can demand in a request, but also the status codes that the Server returns as a response in order to have a good communication flow.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TNB3tnpC--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fkslln5h0fmx3mngv1dw1.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TNB3tnpC--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fkslln5h0fmx3mngv1dw1.jpg\" alt=\"HTTP Protocol\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"41-http-methods\" href=\"#41-http-methods\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 4.1 HTTP Methods\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThere are \u003Cstrong\u003E5 main methods that a Client can use in a request in order to manipulate an API resource\u003C\u002Fstrong\u003E, which are related with the 5 basic data manipulation types in a database, such: Create, Retrieve, Update and Delete.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"411-get\" href=\"#411-get\"\u003E\n  \u003C\u002Fa\u003E\n  4.1.1 GET\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThis \u003Cstrong\u003Emethod is used to retrieve data from a Server\u003C\u002Fstrong\u003E by indicating the resource in the URL. For example, to request a list of products of an API, the Client might send:\u003C\u002Fp\u003E\n\n\u003Cp\u003EGET \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"412-post\" href=\"#412-post\"\u003E\n  \u003C\u002Fa\u003E\n  4.1.2 POST\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThis \u003Cstrong\u003Emethod is used to create a new resource in the Server\u003C\u002Fstrong\u003E by indicating it in the URL and sending the resource data in the request body.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example:\u003C\u002Fp\u003E\n\n\u003Cp\u003EPOST \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ERequest body in JSON format:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n    ‚Äúname‚Äù: ‚ÄúLaptop II‚Äù,\n    ‚Äúprice‚Äù: 1000\n    ‚Äúavailable‚Äù: true\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this given example, a new product will be created in the database with this provided information.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"413-put\" href=\"#413-put\"\u003E\n  \u003C\u002Fa\u003E\n  4.1.3 PUT\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThis \u003Cstrong\u003Emethod is used to update a resource data in the Server\u003C\u002Fstrong\u003E by identifying it in the URL, and sending the information that will be updated in the request body.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPUT \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u002F1\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ERequest body in JSON format:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n    ‚Äúname‚Äù: ‚ÄúLaptop‚Äù,\n    ‚Äúprice‚Äù: 5000,\n    ‚Äúavailable‚Äù: false\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this given example, the product with ID 1 will be updated.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"414-patch\" href=\"#414-patch\"\u003E\n  \u003C\u002Fa\u003E\n  4.1.4 PATCH\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThis \u003Cstrong\u003Emethod is also used to update a resource data in the Server\u003C\u002Fstrong\u003E by identifying it in the URL, but with the main \u003Cstrong\u003Edifference of updating just a specific information\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPATCH \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u002F1\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ERequest body in JSON format:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E{\n    ‚Äúavailable‚Äù: true\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this given example, just the \u003Ccode\u003Eavailable\u003C\u002Fcode\u003E property of the product with ID 1 will be updated.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"415-delete\" href=\"#415-delete\"\u003E\n  \u003C\u002Fa\u003E\n  4.1.5 DELETE\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EThis \u003Cstrong\u003Emethod is used to delete a resource in the Server\u003C\u002Fstrong\u003E by identifying it in the URL.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example: \u003C\u002Fp\u003E\n\n\u003Cp\u003EDELETE \u003Ccode\u003Ehttp:\u002F\u002Fapi.example.com\u002Fproducts\u002F1\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this given example, the product with ID 1 will be deleted.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"42-http-status-code\" href=\"#42-http-status-code\"\u003E\n  \u003C\u002Fa\u003E\n  üî∏ 4.2 HTTP Status Code\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe HTTP Status Codes \u003Cstrong\u003Eare codes returned by the Server in order to indicate the type of response in a Client‚Äôs request\u003C\u002Fstrong\u003E, facilitating the understanding just by its group and number. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe most commonly used groups and numbers of status code are:\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"421-group-2\" href=\"#421-group-2\"\u003E\n  \u003C\u002Fa\u003E\n  4.2.1 Group 2\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EStatus group that \u003Cstrong\u003Eindicates a successful request\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ECode\u003C\u002Fth\u003E\n\u003Cth\u003E200 (Ok)\u003C\u002Fth\u003E\n\u003Cth\u003E201 (Created)\u003C\u002Fth\u003E\n\u003Cth\u003E204 (No Content)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EDescription\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequest succeeded\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequest succeeded and created resource\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequest succeeded and no additional content in response body\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"422-group-3\" href=\"#422-group-3\"\u003E\n  \u003C\u002Fa\u003E\n  4.2.2 Group 3\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EStatus group that \u003Cstrong\u003Eindicates redirect responses\u003C\u002Fstrong\u003E, which are used to inform the Client that the Server needed to perform a redirect to a new URL.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ECode\u003C\u002Fth\u003E\n\u003Cth\u003E301 (Moved Permanently)\u003C\u002Fth\u003E\n\u003Cth\u003E304 (Not Modified)\u003C\u002Fth\u003E\n\u003Cth\u003E307 (Temporary redirect)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EDescription\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequested resource has changed permanently and a new URL is provided in the response\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequested resource wasn‚Äôt modified and the same cached version can be used\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequested resource has been temporarily redirected to another URL\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"423-group-4\" href=\"#423-group-4\"\u003E\n  \u003C\u002Fa\u003E\n  4.2.3 Group 4\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EStatus group that \u003Cstrong\u003Eindicates an error in the Client side\u003C\u002Fstrong\u003E, which means that the request was incorrectly builded.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ECode\u003C\u002Fth\u003E\n\u003Cth\u003E400 (Bad Request)\u003C\u002Fth\u003E\n\u003Cth\u003E401 (Unauthorized)\u003C\u002Fth\u003E\n\u003Cth\u003E403 (Forbidden)\u003C\u002Fth\u003E\n\u003Cth\u003E404 (Not Found)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EDescription\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequest couldn‚Äôt be understanded by the Server\u003C\u002Ftd\u003E\n\u003Ctd\u003EClient is not authenticated to access the resource\u003C\u002Ftd\u003E\n\u003Ctd\u003EClient is not authorized to access the resource\u003C\u002Ftd\u003E\n\u003Ctd\u003ERequested resource couldn‚Äôt be found by the Server\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"424-group-5\" href=\"#424-group-5\"\u003E\n  \u003C\u002Fa\u003E\n  4.2.4 Group 5\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EStatus group that \u003Cstrong\u003Eindicates an error in the Server side\u003C\u002Fstrong\u003E, which means that the request was sent correctly by the Client, but an error occurred while processing it.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003ECode\u003C\u002Fth\u003E\n\u003Cth\u003E500 (Internal Server Error)\u003C\u002Fth\u003E\n\u003Cth\u003E503 (Service Unavailable)\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EDescription\u003C\u002Ftd\u003E\n\u003Ctd\u003EIndicates that the Server faced an unexpected error, and couldn't return the request response\u003C\u002Ftd\u003E\n\u003Ctd\u003EIndicates that the Server isn‚Äôt able to process the request because it‚Äôs unavailable, overloaded or under maintenance\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  üî∂ Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI hope that this article helped you to have a basic theoretical approach about REST fundamentals, which is an essential knowledge to every programmer that develops web services.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd, now that you have this core understanding, \u003Cstrong\u003EI invite you to read my other article that provides the basic concepts of an incredible technology for building REST APIs\u003C\u002Fstrong\u003E just by clicking on the link below.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdev.to\u002Fcassiocappellari\u002Fbasic-concepts-of-node-js-pch\"\u003EBasic Concepts of Node.js\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EWritten with üíô by C√°ssio Cappellari!\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"## üî∂ Introduction\n\nWe live in a modern and ultra-connected world that shares a huge amount of data every second through browsers, servers, softwares and applications. For all these systems to communicate with each other, we have a tool that is the key player to integrate all this complexity: the APIs.\n\nIn this article I share my knowledge, experience and studies about this technology, with the goal to provide a basic understanding of the main fundamentals of API, REST and HTTP Protocol.\n\n## üî∂ 1 API Concept\n\nAPI means **A**pplication **P**rogramming **I**nterface and, like any other interface, allows interactions. In the case of an API, **it allows interactions between systems by following a set of standards and protocols in order to share features, information and data**. In other words, it provides developers the opportunity to build and design products and services that will communicate with other products and services.\n\n![API Concept](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F166vtvjvmwbvgxmrz2ta.jpg)\n\nWe can have different architectural styles of APIs and, nowadays, the main one that is a key part of our Internet world it‚Äôs called REST, an acronym for **RE**presentational **S**tate **T**ransfer.\n\n## üî∂ 2 REST Fundamentals\n\n**REST is an architecture style to develop web services, which uses the HTTP protocol as a communication interface in order to transfer data through HTTP methods.** In other words, it allows performing basic data manipulation within an application with efficiency, such as creating, retrieving, updating and deleting information.\n\n![REST API](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsz480n8p0ydcq1vsahk3.jpg)\n\nREST was born and created in 2000 by Roy Fielding in his PhD dissertation and, according to him:\n\n\u003E *‚ÄúThe name ‚ÄúRepresentational State Transfer‚Äù is intended to evoke an image of how a well-designed Web application behaves: a network of web pages (a virtual state-machine), where the user progresses through the application by selecting links (state transitions), resulting in the next page (representing the next state of the application) being transferred to the user and rendered for their use.‚Äù*\n\nSo, as Roy Fielding defines, in order to build a well-designed web application, we can use REST principles that help us to develop services that are more scalable, reliable and flexible. To achieve this goal, **the REST architecture has six constraints and an API that is driven by that can be called RESTful**.\n\n### üî∏ 2.1 Client-Server\n\nThe main principle of the Client-Server web architecture is the Separation of Concerns, which means that the **Client that sends the request it‚Äôs completely independent from the Server that returns the response**.\n\n![Client-Server Constraint](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdbjyai40l64rfj2yowhp.jpg)\n\n### üî∏ 2.2 Stateless\n\nAll the information (state) that is required in a request must be sended by the Client. Therefore, the Server must not store any data during a Client-Server communication, which means that **every request is a standalone request**.\n\n### üî∏ 2.3 Cache\n\nCache is a computational storage structure focused on keeping stored data that is frequently accessed, improving performance and network efficiency. Therefore, **through caching, it‚Äôs possible to reduce or even eliminate the need for the Client to send requests to the Server (who must inform if the request can be cacheable or not)**.\n\n### üî∏ 2.4 Interface Uniform\n\nMeans how Client and Server will share information by defining an interface that must be followed in every request. In other words, **it‚Äôs a contract between the Client and the Server that determines the standards for their communication**.\n\nHere, we have four additional constraints that is part of Uniform Interface:\n\n#### 2.4.1 Identification of Resources\n\nREST is based on resources, and a resource is an information that can be named. **It‚Äôs used in a request to identify what the Client wants to access in the Server**.\n\nFor example, to retrieve a list of `products`, the resource must be setted in the URL: `http:\u002F\u002Fapi.example.com\u002Fproducts`\n\n#### 2.4.2 Manipulation of Resources Through Representation\n\n**The Client must be sure that the request to the Server has enough information to manipulate (create, retrieve, update, delete) the informed resource, which can be represented by multiple formats, such as JSON, XML, HTML etc**. In other words, the Client can specify the desired representation of a resource in every request to a Server.\n\nFor example: a Client can specify in a request to retrieve a resource in JSON format.\n\n#### 2.4.3 Self-descriptive Messages\n\nA self-descriptive message **ensures a uniform interface in the communication by containing all the information that a Client or a Server needs** to understand the request and the response just by checking the semantics of the message.\n\n#### 2.4.4 HATEOAS (Hypertext As The Engine Of Application State)\n\nHATEOAS means that a **response sent from the Server should contain information about what the Client can do in further requests.** In other words, the Server indicates what actions the Client can do next. In REST standards, Servers must send only hypermedia (links) to Clients.\n\n### üî∏ 2.5 Layered system\n\nLayered system **relates to the fact that there can be more components and subsystems between a Client and a Server.** In other words, the client can‚Äôt assume that it is communicating directly to the Server, and don‚Äôt know about the complexity to process the request and return the response.\n\nFor example: a Client sends a request to a Server, but first it passes by a proxy layer for security check.\n\n![Layered System Constraint](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F04xp96134kt5cncsmqum.jpg)\n\n### üî∏ 2.6 Code On Demand\n\nCode On Demand is the only optional constraint, and **means that a Server can send an executable code as a response to the Client**. In other words, it‚Äôs what happens when a browser, for example, receives a response from the Server with a HTML tag `\u003Cscript\u003E` so, when the HTML document is loaded, the script can be executed.\n\n## üî∂ 3 Request Anatomy\n\nBasically, **a Client request has 4 main elements that compose all the information that is needed to interact with the Server**.\n\n### üî∏ 3.1 URL\n\nURL means **U**niform **R**esource **L**ocator, which **is the address to not just identify a resource, but also to specify how to access it.** In an API, the URL can be named as Base URL, which means that is the base address that will be used in every request.\n\nFor example: `http:\u002F\u002Fapi.example.com`\n\n### üî∏ 3.2 URI\n\nURI means **U**niform **R**esource **I**dentifier, which is used in the URL to **specify which resource the Client would like to access in a request**.\n\nFor example: `http:\u002F\u002Fapi.example.com\u002Fproducts`\n\nURL: `http:\u002F\u002Fapi.example.com\u002F`\nURI: `\u002Fproducts`\n\nTherefore, every URL is an URI, but not all URIs are URLs.\n\n### üî∏ 3.3 Parameters\n\n**Parameters are information that can be sended in a request by the Client in order to influence the response by the Server**. REST has 4 types of parameters, and its use will depend on the type of action that the request demands.\n\n### üî∏ 3.4 Body Params\n\nThe Body, like the name says, it‚Äôs the **body of the request which contains all the data that the Server needs to successfully process the request.** Therefore, it‚Äôs only used in requests that must send information, such as create or update.\n\nExample of a request body in JSON format:\n\n```\n{\n\t‚Äúname‚Äù: ‚ÄúLaptop‚Äù,\n\t‚Äúprice‚Äù: 1000\n\t‚Äúavailable‚Äù: true\n}\n```\n\n### üî∏ 3.5 Route Params\n\nRoute params are **parameters inserted in the URL with the information to identify a specific resource** in order to take an action, such as: retrieve, edit, update or delete.\n\nFor example: `http:\u002F\u002Fapi.example.com\u002Fproducts\u002F1`\n\nIn this given example, the route param with value 1 identifies the resource that will be manipulated in the request.\n\n### üî∏ 3.6 Query Params\n\nQuery params are also **parameters inserted in the URL, but with the main difference that it‚Äôs use cases are related to filter and search information about a resource, or even paginate and ordinate the results**.\n\nFor example:\n\n`http:\u002F\u002Fapi.example.com\u002Fproducts?name=laptop&available=true`\n\nIn this given example, the Client communicates to the Server that the request is to retrieve products with name equals laptop, and available equals true.\n\n### üî∏ 3.7 Headers\n\nHeaders **allows sending extra information in a request**, such as authentication tokens and content types.\n\nFor example:\n\n```\nAuthorization: Bearer token\nAccept: application\u002Fjson\n```\n\nIn this given example, the Client is sending extra data informing not just it's credentials to access a resource, but also a desired response format.\n\n## üî∂ 4 HTTP PROTOCOL\n\nAlright, now that we have a basic understanding of REST fundamentals and it‚Äôs constraints, let‚Äôs talk about **the communication standard that rules the Internet world by defining  the interaction patterns between Clients and Servers**: the **HTTP Protocol** (**H**yperText **T**ransfer **P**rotocol).\n\nThe HTTP Protocol determines not just the methods that are allowed in a REST API, which means the action types that the Client can demand in a request, but also the status codes that the Server returns as a response in order to have a good communication flow.\n\n![HTTP Protocol](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fkslln5h0fmx3mngv1dw1.jpg)\n\n### üî∏ 4.1 HTTP Methods\n\nThere are **5 main methods that a Client can use in a request in order to manipulate an API resource**, which are related with the 5 basic data manipulation types in a database, such: Create, Retrieve, Update and Delete.\n\n#### 4.1.1 GET\n\nThis **method is used to retrieve data from a Server** by indicating the resource in the URL. For example, to request a list of products of an API, the Client might send:\n\nGET `http:\u002F\u002Fapi.example.com\u002Fproducts`\n\n#### 4.1.2 POST\n\nThis **method is used to create a new resource in the Server** by indicating it in the URL and sending the resource data in the request body.\n\nFor example:\n\nPOST `http:\u002F\u002Fapi.example.com\u002Fproducts`\n\nRequest body in JSON format:\n\n```\n{\n\t‚Äúname‚Äù: ‚ÄúLaptop II‚Äù,\n\t‚Äúprice‚Äù: 1000\n\t‚Äúavailable‚Äù: true\n}\n```\n\nIn this given example, a new product will be created in the database with this provided information.\n\n#### 4.1.3 PUT\n\nThis **method is used to update a resource data in the Server** by identifying it in the URL, and sending the information that will be updated in the request body.\n\nPUT `http:\u002F\u002Fapi.example.com\u002Fproducts\u002F1`\n\nRequest body in JSON format:\n\n```\n{\n\t‚Äúname‚Äù: ‚ÄúLaptop‚Äù,\n\t‚Äúprice‚Äù: 5000,\n\t‚Äúavailable‚Äù: false\n}\n```\n\nIn this given example, the product with ID 1 will be updated.\n\n#### 4.1.4 PATCH\n\nThis **method is also used to update a resource data in the Server** by identifying it in the URL, but with the main **difference of updating just a specific information**.\n\nPATCH `http:\u002F\u002Fapi.example.com\u002Fproducts\u002F1`\n\nRequest body in JSON format:\n\n```\n{\n\t‚Äúavailable‚Äù: true\n}\n```\n\nIn this given example, just the `available` property of the product with ID 1 will be updated.\n\n#### 4.1.5 DELETE\n\nThis **method is used to delete a resource in the Server** by identifying it in the URL.\n\nFor example: \n\nDELETE `http:\u002F\u002Fapi.example.com\u002Fproducts\u002F1`\n\nIn this given example, the product with ID 1 will be deleted.\n\n### üî∏ 4.2 HTTP Status Code\n\nThe HTTP Status Codes **are codes returned by the Server in order to indicate the type of response in a Client‚Äôs request**, facilitating the understanding just by its group and number. \n\nThe most commonly used groups and numbers of status code are:\n\n#### 4.2.1 Group 2\n\nStatus group that **indicates a successful request**.\n\n| Code | 200 (Ok) | 201 (Created) | 204 (No Content) |\n|-------------\t|:-----------------:\t|:--------------------------------------:\t|:------------------------------------------------------------:\t|\n|Description|Request succeeded|Request succeeded and created resource|Request succeeded and no additional content in response body|\n\n#### 4.2.2 Group 3\n\nStatus group that **indicates redirect responses**, which are used to inform the Client that the Server needed to perform a redirect to a new URL.\n\n| Code | 301 (Moved Permanently) | 304 (Not Modified) | 307 (Temporary redirect) |\n|-------------\t|:------------------------------------------------------------------------------------:\t|:---------------------------------------------------------------------------------:\t|:--------------------------------------------------------:\t|\n|Description|Requested resource has changed permanently and a new URL is provided in the response|Requested resource wasn‚Äôt modified and the same cached version can be used|Requested resource has been temporarily redirected to another URL|\n\n#### 4.2.3 Group 4\n\nStatus group that **indicates an error in the Client side**, which means that the request was incorrectly builded.\n\n| Code | 400 (Bad Request) | 401 (Unauthorized) | 403 (Forbidden) | 404 (Not Found) |\n|:-----------:\t|:----------------------------------------------:\t|:-------------------------------------------------------------------:\t|:----------------------------------------------------------------:\t|:------------------------------------------------------------:\t|\n|Description|Request couldn‚Äôt be understanded by the Server\t|Client is not authenticated to access the resource|Client is not authorized to access the resource|Requested resource couldn‚Äôt be found by the Server|\n\n#### 4.2.4 Group 5\n\nStatus group that **indicates an error in the Server side**, which means that the request was sent correctly by the Client, but an error occurred while processing it.\n\n| Code | 500 (Internal Server Error) | 503 (Service Unavailable) |\n|:-----------:\t|:--------------------------------------------------------------------------------------------:\t|:---------------------------------------------------------------------------------------------------------------------:\t|\n|Description|Indicates that the Server faced an unexpected error, and couldn't return the request response|Indicates that the Server isn‚Äôt able to process the request because it‚Äôs unavailable, overloaded or under maintenance|\n\n## üî∂ Conclusion\n\nI hope that this article helped you to have a basic theoretical approach about REST fundamentals, which is an essential knowledge to every programmer that develops web services.\n\nAnd, now that you have this core understanding, **I invite you to read my other article that provides the basic concepts of an incredible technology for building REST APIs** just by clicking on the link below.\n\n[Basic Concepts of Node.js](https:\u002F\u002Fdev.to\u002Fcassiocappellari\u002Fbasic-concepts-of-node-js-pch)\n\n*Written with üíô by C√°ssio Cappellari!*",user:{name:"C√°ssio Cappellari",username:e,twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zu1xVv9v--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F565847\u002Fb0fbaa12-3bca-4788-b45d-f0700bb8845d.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--COj0c3hQ--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F565847\u002Fb0fbaa12-3bca-4788-b45d-f0700bb8845d.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fcassiocappellari\u002F772056",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fcassiocappellari\u002Ffundamentals-of-rest-api-2nag",262,"2021-08-03T10:19:21Z","cassiocappellari"));
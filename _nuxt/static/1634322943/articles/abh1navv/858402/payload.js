__NUXT_JSONP__("/articles/abh1navv/858402", (function(a,b,c,d,e){b.type_of="article";b.id=858402;b.title="Understanding Domain Driven Design with some Pizza ";b.description="Its been a while since microservices appeared as an attempt to answer challenges we face in modern...";b.readable_publish_date="Oct 10";b.slug="understanding-domain-driven-design-with-some-pizza-4gkn";b.path="\u002Fabh1navv\u002Funderstanding-domain-driven-design-with-some-pizza-4gkn";b.url=c;b.comments_count=5;b.public_reactions_count=d;b.collection_id=14969;b.published_timestamp=a;b.positive_reactions_count=d;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Yzopuw37--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb09winy1kwyg6qsytw7g.png";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LHKcln72--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb09winy1kwyg6qsytw7g.png";b.canonical_url=c;b.created_at=a;b.edited_at="2021-10-11T16:02:12Z";b.crossposted_at=null;b.published_at=a;b.last_comment_at="2021-10-15T00:41:02Z";b.reading_time_minutes=3;b.tag_list="architecture, programming, beginners, microservices";b.tags=["architecture","programming","beginners","microservices"];b.body_html="\u003Cp\u003EIts been a while since microservices appeared as an attempt to answer challenges we face in modern application development. At the core, the microservices architecture is created around the principles of domain-driven design. \u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's understand what domain-driven design is and the guidelines it provides for software development.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"domain-driven-design-ddd\" href=\"#domain-driven-design-ddd\"\u003E\n  \u003C\u002Fa\u003E\n  Domain driven design (DDD)\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EDomain driven design is the philosophy behind microservices. It does not provide practical ways to implement software architecture but focuses on a few guiding principles which can help in building maintainable software. We will take the real world example of a pizza shop to understand these concepts.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's look at a few terms.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EDomain\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EIn simple terms, it is a subject around which our application is built. Every component in the application was chosen, programmed and deployed keeping in mind the needs of the domain. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe domain in our shop is the pizza and everything needs to be built around it. The chefs, the ingredients, the menu, the advertising boards, etc. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EContext\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe setting around the domain. In our case, the shop becomes our context. Everything that is required to fulfil the needs related to the domain is encapsulated by the context.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EModel\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EBuilding blocks of the domain. The different parts which combine to solve a problem. In our case, the people in their different roles, the ingredients, the pizza, the furniture, the machines, etc. become our models.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EUbiquitous Language\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe language and terminology that is used while talking about anything that comes under the context.  \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EBounded Context\u003C\u002Fstrong\u003E  \u003C\u002Fp\u003E\n\n\u003Cp\u003EA subsystem or a division of responsibility.  Every employee in the shop will have their own set of responsibilities. It is unlikely that the chef and the cashier switch roles from time to time and need to know in depth about each other's work.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo now that we have the terminology in place, let's take a look at the principles.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"principles-of-ddd\" href=\"#principles-of-ddd\"\u003E\n  \u003C\u002Fa\u003E\n  Principles of DDD\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EModel the software around the business domain\u003C\u002Fstrong\u003E   \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe business domain forms the basis of all architectural decisions. The business models and the software components should be mapped to each other. Whether a term is spoken by a developer or a business executive, it means the same. The final software is a reflection of how the business operates.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn our shop, if the owner of the shop uses the terms small, medium and large, it is recommended that the cashier also uses the same terms instead of describing pizza size in inches. It makes the conversations easier to understand for both parties.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ESoftware evolves within a bounded context\u003C\u002Fstrong\u003E  \u003C\u002Fp\u003E\n\n\u003Cp\u003EA bounded context describes a boundary within which the subsystem needs to evolve and think. It should not be worried about how other bounded contexts change and not try to solve problems for them. \u003C\u002Fp\u003E\n\n\u003Cp\u003EPizza delivery can evolve without needing the consent of the chefs. Similarly, the delivery person does not dictate what ingredients need to be used in the kitchen. They take care of their own problems and make improvements to their work independently.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne subdomain does not corrupt the functioning of the other.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EBuild domains by prioritizing opinions of domain experts\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe development team does not need to be ignorant of the needs of the business. They should understand the requirements from the business perspective first before thinking about the technical domain. \u003C\u002Fp\u003E\n\n\u003Cp\u003EDomain experts have the responsibility of refining the requirements. They capture requirements of a domain and are a point of contact to resolve any ambiguities. Domain experts do not necessarily have to be non-technical. They can be anyone who has studied the domain closely and has experience in working with it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen our shop needs an advertising board, the owner goes to marketing specialists and designers and does not decide the design of the banner himself. Nor does he let the actual banner maker take that decision.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"benefits-of-ddd\" href=\"#benefits-of-ddd\"\u003E\n  \u003C\u002Fa\u003E\n  Benefits of DDD\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELet's look at the benefits of following domain-driven design\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EEasier communication - because domain experts are guiding all conversations\u003C\u002Fli\u003E\n\u003Cli\u003EFlexibility - for each component to evolve independently\u003C\u002Fli\u003E\n\u003Cli\u003EReduced misunderstanding - due to use of consistent language and terms.\u003C\u002Fli\u003E\n\u003Cli\u003EBetter team co-ordination - due to narrowed focus areas\u003C\u002Fli\u003E\n\u003Cli\u003ECleaner architecture - because the separation of concern reduces the risk of software components getting bloated.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"when-not-to-practice-ddd\" href=\"#when-not-to-practice-ddd\"\u003E\n  \u003C\u002Fa\u003E\n  When not to practice DDD?\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EDDD is not a silver bullet to solve all problems. It can often be overkill to practice it religiously. Some situations when you should 'doublethink' before using it:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EThe software is not expected to grow rapidly\u003C\u002Fli\u003E\n\u003Cli\u003EThe initial cost needs to be kept low \u003C\u002Fli\u003E\n\u003Cli\u003EWhen the time to deliver is a concern\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EThanks for reading. I hope the article was useful to help you get an insight into Domain driven design. \u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can find more about me \u003Ca href=\"https:\u002F\u002Fbio.link\u002Fabh1navv\"\u003Ehere\u003C\u002Fa\u003E\u003Cbr\u003E\nConnect with me on \u003Ca href=\"\u002F\u002Ftwitter.com\u002Fabh1navv\"\u003ETwitter\u003C\u002Fa\u003E for more content.\u003C\u002Fp\u003E\n\n";b.body_markdown="\nIts been a while since microservices appeared as an attempt to answer challenges we face in modern application development. At the core, the microservices architecture is created around the principles of domain-driven design. \n\nLet's understand what domain-driven design is and the guidelines it provides for software development.\n\n## Domain driven design (DDD)\n\nDomain driven design is the philosophy behind microservices. It does not provide practical ways to implement software architecture but focuses on a few guiding principles which can help in building maintainable software. We will take the real world example of a pizza shop to understand these concepts.\n\nLet's look at a few terms.\n\n**Domain** \n\nIn simple terms, it is a subject around which our application is built. Every component in the application was chosen, programmed and deployed keeping in mind the needs of the domain. \n\nThe domain in our shop is the pizza and everything needs to be built around it. The chefs, the ingredients, the menu, the advertising boards, etc. \n\n**Context** \n\nThe setting around the domain. In our case, the shop becomes our context. Everything that is required to fulfil the needs related to the domain is encapsulated by the context.\n\n**Model** \n\nBuilding blocks of the domain. The different parts which combine to solve a problem. In our case, the people in their different roles, the ingredients, the pizza, the furniture, the machines, etc. become our models.\n\n**Ubiquitous Language** \n\nThe language and terminology that is used while talking about anything that comes under the context.  \n\n**Bounded Context**  \n\nA subsystem or a division of responsibility.  Every employee in the shop will have their own set of responsibilities. It is unlikely that the chef and the cashier switch roles from time to time and need to know in depth about each other's work.\n\n\nSo now that we have the terminology in place, let's take a look at the principles.\n\n### Principles of DDD\n\n**Model the software around the business domain**   \n\nThe business domain forms the basis of all architectural decisions. The business models and the software components should be mapped to each other. Whether a term is spoken by a developer or a business executive, it means the same. The final software is a reflection of how the business operates.\n\nIn our shop, if the owner of the shop uses the terms small, medium and large, it is recommended that the cashier also uses the same terms instead of describing pizza size in inches. It makes the conversations easier to understand for both parties.\n\n\n**Software evolves within a bounded context**  \n\nA bounded context describes a boundary within which the subsystem needs to evolve and think. It should not be worried about how other bounded contexts change and not try to solve problems for them. \n\nPizza delivery can evolve without needing the consent of the chefs. Similarly, the delivery person does not dictate what ingredients need to be used in the kitchen. They take care of their own problems and make improvements to their work independently.\n\nOne subdomain does not corrupt the functioning of the other.\n\n**Build domains by prioritizing opinions of domain experts**\n\nThe development team does not need to be ignorant of the needs of the business. They should understand the requirements from the business perspective first before thinking about the technical domain. \n\nDomain experts have the responsibility of refining the requirements. They capture requirements of a domain and are a point of contact to resolve any ambiguities. Domain experts do not necessarily have to be non-technical. They can be anyone who has studied the domain closely and has experience in working with it.\n\nWhen our shop needs an advertising board, the owner goes to marketing specialists and designers and does not decide the design of the banner himself. Nor does he let the actual banner maker take that decision.\n\n\n### Benefits of DDD\n\nLet's look at the benefits of following domain-driven design\n1. Easier communication - because domain experts are guiding all conversations\n2. Flexibility - for each component to evolve independently\n3. Reduced misunderstanding - due to use of consistent language and terms.\n4. Better team co-ordination - due to narrowed focus areas\n5. Cleaner architecture - because the separation of concern reduces the risk of software components getting bloated.\n\n### When not to practice DDD?\n\nDDD is not a silver bullet to solve all problems. It can often be overkill to practice it religiously. Some situations when you should 'doublethink' before using it:\n1. The software is not expected to grow rapidly\n2. The initial cost needs to be kept low \n3. When the time to deliver is a concern\n\n\n---\n\n\nThanks for reading. I hope the article was useful to help you get an insight into Domain driven design. \n\nYou can find more about me [here](https:\u002F\u002Fbio.link\u002Fabh1navv)\nConnect with me on [Twitter](twitter.com\u002Fabh1navv) for more content.";b.user={name:"Abhinav Pandey",username:e,twitter_username:"Abh1navv",github_username:e,website_url:"https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fabh1navv",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1eedCX2u--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F440730\u002Ff0fc3149-bd2f-4450-99bb-39bdc8c95824.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KTAyTowu--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F440730\u002Ff0fc3149-bd2f-4450-99bb-39bdc8c95824.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}("2021-10-10T14:30:33Z",{},"https:\u002F\u002Fdev.to\u002Fabh1navv\u002Funderstanding-domain-driven-design-with-some-pizza-4gkn",204,"abh1navv")));
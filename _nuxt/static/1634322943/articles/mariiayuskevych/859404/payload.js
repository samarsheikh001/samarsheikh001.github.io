__NUXT_JSONP__("/articles/mariiayuskevych/859404", (function(a,b,c,d,e,f,g){d.type_of="article";d.id=859404;d.title="What Are Widgets in Flutter and How to Use Them";d.description="What is the main Flutter’s peculiarity? It’s the widgets. Apart from being a cross-platform UI...";d.readable_publish_date="Oct 11";d.slug="what-are-widgets-in-flutter-and-how-to-use-them-3h7k";d.path="\u002Fperpetio\u002Fwhat-are-widgets-in-flutter-and-how-to-use-them-3h7k";d.url=e;d.comments_count=c;d.public_reactions_count=c;d.collection_id=a;d.published_timestamp=b;d.positive_reactions_count=c;d.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tpd3v8GN--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvby5uupeiswe7revvv8q.jpg";d.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_3E2MuSh--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvby5uupeiswe7revvv8q.jpg";d.canonical_url=e;d.created_at=b;d.edited_at="2021-10-11T09:30:07Z";d.crossposted_at=a;d.published_at=b;d.last_comment_at=b;d.reading_time_minutes=3;d.tag_list="flutter, programming, beginners";d.tags=["flutter","programming","beginners"];d.body_html="\u003Cp\u003EWhat is the main Flutter’s peculiarity? It’s the widgets. Apart from being a cross-platform UI toolkit and using the Dart language, of course. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut how does this system work? And what should you know about widgets if you want to start programming with Flutter? Let’s discuss.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-widgets-are\" href=\"#what-widgets-are\"\u003E\n  \u003C\u002Fa\u003E\n  What widgets are?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EEach screen element is represented by a widget in Flutter. For example, take a look at this screen of our fitness app.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rJ0dbJyl--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fperpet.io\u002Fblog\u002Fcontent\u002Fimages\u002F2021\u002F09\u002FAccount-1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rJ0dbJyl--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fperpet.io\u002Fblog\u002Fcontent\u002Fimages\u002F2021\u002F09\u002FAccount-1.png\" alt=\"Every button on this screen is a widget\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EEvery button you see here is a widget. By the way, you can check out how we created each of these in \u003Ca href=\"https:\u002F\u002Fperpet.io\u002Fblog\u002Fhow-to-make-a-fitness-app-with-flutter-a-tutorial-by-perpetio-part-iii\u002F\"\u003Eour tutorial\u003C\u002Fa\u003E. Basically, building a Flutter app means creating a mosaic of widgets and working on the relations between them. A code in Flutter is often called a widget tree.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENot all the widgets can be seen on the app’s screen. Many of them help the programmer with managing other widgets and the overall app’s appearance and functionality. For instance, the Center widget helps align the elements on the screen. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"types-of-widgets\" href=\"#types-of-widgets\"\u003E\n  \u003C\u002Fa\u003E\n  Types of widgets\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThere are two main types of Flutter widgets: stateful and stateless. What’s the difference between them?\u003C\u002Fp\u003E\n\n\u003Cp\u003EStateful widgets create a State object. It is done so that the widget can keep track of the UI changes and update itself correspondingly. Basically, a whole new widget is created when the values of the State object change.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor example, we used the ChangePasswordScreen or EditProfileScreen stateful widgets in our fitness app because the UI had to reflect the changes the user makes. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAs opposed to stateful widgets, the stateless ones do not contain any states. As a result, these widgets cannot change. Various buttons and icons are stateless. For instance, the “Save” and “Back” buttons in our app are stateless widgets.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"14-widget-categories\" href=\"#14-widget-categories\"\u003E\n  \u003C\u002Fa\u003E\n  14 widget categories\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EOverall, there are 14 categories of Flutter widgets. Each category is there to provide different functionality for your app. These include widgets for adding animation, dealing with design responsiveness, displaying text, and so on.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAmong Flutter widgets you might find both the basic ones, which are needed for any kind of application, and some more complex widgets to add a twist to your solution.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"how-to-use-widgets-in-flutter\" href=\"#how-to-use-widgets-in-flutter\"\u003E\n  \u003C\u002Fa\u003E\n  How to use widgets in Flutter\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAdding a widget usually takes a few lines of code. Let’s get back to our fitness app example. This is how we added the \u003Cstrong\u003E_createSelectTime()\u003C\u002Fstrong\u003E widget for the workout reminder:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EWidget _createSelectTime() {\u003Cbr\u003E\n    return Text(\u003Cbr\u003E\n      TextConstants.selectTime,\u003Cbr\u003E\n      style: TextStyle(\u003Cbr\u003E\n        fontSize: 18,\u003Cbr\u003E\n        fontWeight: FontWeight.w600,\u003Cbr\u003E\n      ),\u003Cbr\u003E\n    );\u003Cbr\u003E\n  }\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESome touches to work on the text’s font and style and here you go: the widget is ready.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"bottomline\" href=\"#bottomline\"\u003E\n  \u003C\u002Fa\u003E\n  Bottomline\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAt the first sight, the way Flutter works might be confusing. But after dedicating just a bit of time to this framework you will definitely find it convenient. There is a good reason why Flutter is built this way and why so many developers now prefer it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you want to see Flutter widgets in action, you can check out our recent \u003Ca href=\"https:\u002F\u002Fperpet.io\u002Fblog\u002Fhow-to-make-a-fitness-app-with-flutter-a-tutorial-by-perpetio-part-iii\u002F\"\u003Efitness app tutorial\u003C\u002Fa\u003E; there you can observe how to get from creating the very first folder to having a fully functioning application.\u003C\u002Fp\u003E\n\n";d.body_markdown="What is the main Flutter’s peculiarity? It’s the widgets. Apart from being a cross-platform UI toolkit and using the Dart language, of course. \n\nBut how does this system work? And what should you know about widgets if you want to start programming with Flutter? Let’s discuss.\n\n##What widgets are?##\n\nEach screen element is represented by a widget in Flutter. For example, take a look at this screen of our fitness app.\n\n![Every button on this screen is a widget](https:\u002F\u002Fperpet.io\u002Fblog\u002Fcontent\u002Fimages\u002F2021\u002F09\u002FAccount-1.png)\n\nEvery button you see here is a widget. By the way, you can check out how we created each of these in [our tutorial](https:\u002F\u002Fperpet.io\u002Fblog\u002Fhow-to-make-a-fitness-app-with-flutter-a-tutorial-by-perpetio-part-iii\u002F). Basically, building a Flutter app means creating a mosaic of widgets and working on the relations between them. A code in Flutter is often called a widget tree.\n\nNot all the widgets can be seen on the app’s screen. Many of them help the programmer with managing other widgets and the overall app’s appearance and functionality. For instance, the Center widget helps align the elements on the screen. \n\n##Types of widgets##\n\nThere are two main types of Flutter widgets: stateful and stateless. What’s the difference between them?\n\nStateful widgets create a State object. It is done so that the widget can keep track of the UI changes and update itself correspondingly. Basically, a whole new widget is created when the values of the State object change.\n\nFor example, we used the ChangePasswordScreen or EditProfileScreen stateful widgets in our fitness app because the UI had to reflect the changes the user makes. \n\nAs opposed to stateful widgets, the stateless ones do not contain any states. As a result, these widgets cannot change. Various buttons and icons are stateless. For instance, the “Save” and “Back” buttons in our app are stateless widgets.\n\n##14 widget categories##\n\nOverall, there are 14 categories of Flutter widgets. Each category is there to provide different functionality for your app. These include widgets for adding animation, dealing with design responsiveness, displaying text, and so on.\n\nAmong Flutter widgets you might find both the basic ones, which are needed for any kind of application, and some more complex widgets to add a twist to your solution.\n\n##How to use widgets in Flutter##\n\nAdding a widget usually takes a few lines of code. Let’s get back to our fitness app example. This is how we added the **_createSelectTime()** widget for the workout reminder:\n\n*Widget _createSelectTime() {\n    return Text(\n      TextConstants.selectTime,\n      style: TextStyle(\n        fontSize: 18,\n        fontWeight: FontWeight.w600,\n      ),\n    );\n  }*\n\nSome touches to work on the text’s font and style and here you go: the widget is ready.\n\n##Bottomline##\n\nAt the first sight, the way Flutter works might be confusing. But after dedicating just a bit of time to this framework you will definitely find it convenient. There is a good reason why Flutter is built this way and why so many developers now prefer it.\n\nIf you want to see Flutter widgets in action, you can check out our recent [fitness app tutorial](https:\u002F\u002Fperpet.io\u002Fblog\u002Fhow-to-make-a-fitness-app-with-flutter-a-tutorial-by-perpetio-part-iii\u002F); there you can observe how to get from creating the very first folder to having a fully functioning application.\n\n\n\n";d.user={name:"Mariia Yuskevych",username:f,twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Xf8eJDwh--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F647790\u002Ffb346431-e47b-494a-9f64-ba40a94962e9.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z68-Citg--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F647790\u002Ffb346431-e47b-494a-9f64-ba40a94962e9.jpg"};d.organization={name:"Perpetio",username:g,slug:g,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Cb9x2XTa--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4134\u002Fdc5974f9-47bb-4679-a7d3-0a1b4ebd585a.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--uTdbeXyl--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4134\u002Fdc5974f9-47bb-4679-a7d3-0a1b4ebd585a.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:d}},mutations:[["SET_CURRENT_ARTICLE",d]]}}(null,"2021-10-11T09:29:37Z",0,{},"https:\u002F\u002Fdev.to\u002Fperpetio\u002Fwhat-are-widgets-in-flutter-and-how-to-use-them-3h7k","mariiayuskevych","perpetio")));
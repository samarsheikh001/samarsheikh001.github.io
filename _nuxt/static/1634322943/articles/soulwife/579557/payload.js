__NUXT_JSONP__("/articles/soulwife/579557", (function(a,b,c,d,e,f){c.type_of="article";c.id=579557;c.title="How to handle Stripe?";c.description="This article is the second one of my 'HowTo:Stripe' series. Set of articles will be helpful for those...";c.readable_publish_date="Jan 25";c.slug="how-to-handle-a-stripe-252l";c.path="\u002Fsoulwife\u002Fhow-to-handle-a-stripe-252l";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--b4trK8uq--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F124815cppyrsafrf1qvl.png";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oHTxEBTw--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F124815cppyrsafrf1qvl.png";c.canonical_url=d;c.created_at="2021-01-22T15:42:38Z";c.edited_at="2021-01-27T16:31:53Z";c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=5;c.tag_list="stripe, webdev, howto, payment";c.tags=["stripe","webdev","howto","payment"];c.body_html="\u003Cp\u003E\u003Cem\u003EThis article is the second one of my 'HowTo:Stripe' series. Set of articles will be helpful for those of managers or developers, who are planning to use \u003Ca href=\"https:\u002F\u002Fstripe.com\u002F\"\u003EStripe\u003C\u002Fa\u003E as a payment system or those of you, who already using it. I won't compare Stripe with analogs (let's just say, \u003Ca href=\"https:\u002F\u002Fwww.braintreepayments.com\u002F\"\u003EBrainTree\u003C\u002Fa\u003E is also a great fit for this purpose), but rather planning to provide a detailed instruction on how to implement a ready-and-working one-time checkout or subscription system with billing cycle of recurrent payments.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EIf you are already have answers on questions from the \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fsoulwife\u002Fpay-or-not-to-pay-with-stripe-subscriptions-from-zero-to-cycling-14l0\"\u003Eprevious article\u003C\u002Fa\u003E, you are all-set to begin.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"game-on\" href=\"#game-on\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Game On\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rttC0DrZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F6igz6pnkw5zu1wtzg0he.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rttC0DrZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F6igz6pnkw5zu1wtzg0he.jpg\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn Stripe game, any payment begins with creating Customer and Checkout Session for this Customer in Stripe (\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fbilling\u002Fsubscriptions\u002Fcheckout#create-session\"\u003Ehere the details how to do it\u003C\u002Fa\u003E). The moment we create those Entities in Stripe, we need to create our \u003Ccode\u003EStripeCustomer\u003C\u002Fcode\u003E and \u003Cstrong\u003E\u003Ccode\u003EStripeCheckoutSession\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E accordingly with necessary data, that Stripe gave to us (identifiers, dates, so on). \u003Cbr\u003E\n\u003Cstrong\u003E\u003Ccode\u003EStripeCustomer\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E: I recommend to save only necessary data here (for example, stripe customer id, createdAtStripe datetime and customer email) and link it One-to-One with your User identity via userId field.\u003Cbr\u003E\n\u003Cstrong\u003E\u003Ccode\u003EStripeCheckoutSession\u003C\u002Fcode\u003E\u003C\u002Fstrong\u003E: the best here is to save such data, as stripe session identifier, created and updated datetime and stripe customer identifier (Many-to-One with Customer here). In case you have a Subscription type checkout, there are two more fields, that are necessary here: \u003Ccode\u003EsubscriptionId\u003C\u002Fcode\u003E (stripe subscription identifier, null at this moment) and \u003Ccode\u003Eproduct identifier\u003C\u002Fcode\u003E (your 'subscription' identifier). \u003C\u002Fp\u003E\n\n\u003Cp\u003EImportant to know, that Session is always should be linked with your 'product' specification in order to control and respond to any stripe changes and save this 'product identifier' in \u003Ccode\u003EStripeSubscription\u003C\u002Fcode\u003E later on accordingly with Stripe Checkout Process and webhooks. Those 'Customer-CheckoutSession' actions should be handled by one \u003Ccode\u003ECreateStripeCheckoutSession\u003C\u002Fcode\u003E query. So, you can return 'ready-to-pay' Session object to the Web Client in response on \u003Ccode\u003ECreateStripeCheckoutSession\u003C\u002Fcode\u003E query. Note, that if you do not want to create a customer for every checkout session (every payment), you need to pass it to Stripe at the moment you create a CheckoutSession in Stripe. Our \u003Ccode\u003EStripeCustomer\u003C\u002Fcode\u003E linked with User comes in handy here: you can just look by your user identity identifier among all customers in your \u003Ccode\u003EStripeCustomer\u003C\u002Fcode\u003E table and use it after that.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOne should not forget to setup 'keys': Stripe gives you public and private keys. The first one you are going to use in frontend queries and the second one should be set in any API query to Stripe from backend. You can find your keys at your project 'Dashboard' main page.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow the client can proceed with payment and actually pay for your product in a one-time-checkout or subscribe to the billing cycle. \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"take-it-all\" href=\"#take-it-all\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Take it all\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dJxvBAG3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8fjk9dymlvq6mxulf9n3.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dJxvBAG3--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8fjk9dymlvq6mxulf9n3.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe client is going to be redirected to the \u003Ccode\u003Esuccess_url\u003C\u002Fcode\u003E, that you set up when initiated the Checkout Session, in case of successful checkout and to \u003Ccode\u003Ecancel_url\u003C\u002Fcode\u003E page otherwise. If you have the one-time-checkout, than I have good news for you: it's almost done. You need to update the status of your checkout session in order to know, that everything paid in \u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fpayments\u002Faccept-a-payment?integration=elements#add-an-event-handler-to-the-checkout-button\"\u003E\u003Ccode\u003EredirectToCheckout\u003C\u002Fcode\u003E\u003C\u002Fa\u003E event handler and that's all. \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"followme-subscribeme\" href=\"#followme-subscribeme\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Cdel\u003E#FollowMe\u003C\u002Fdel\u003E #SubscribeMe\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EMeanwhile, with 'Subscription' type of payment, we are not done here. During the payment and redirect process, you need to receive and handle all necessary webhooks in order to show 'paid' invoices and 'active' subscription in his success page.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt means, that you are going to need a full cycle of recurrent payments. So, you have to operate with the next types of event entities:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fsubscriptions\u002Fobject\"\u003ESubscription\u003C\u002Fa\u003E,\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fcheckout\u002Fsessions\u002Fobject\"\u003ECheckout Session\u003C\u002Fa\u003E,\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fcustomers\u002Fobject\"\u003ECustomer\u003C\u002Fa\u003E,\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Finvoices\u002Fobject\"\u003EInvoice\u003C\u002Fa\u003E,\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fevents\u002Ftypes#charge_object\"\u003ECharge\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAll those entities have required and not required fields. Some of entity fields can be absent during specific event, but filled out in other. For example, \u003Ccode\u003Esubscription\u003C\u002Fcode\u003E or \u003Ccode\u003Epdf\u003C\u002Fcode\u003E fields are absent during \u003Ccode\u003Einvoice.created\u003C\u002Fcode\u003E or any other \u003Ccode\u003Einvoice\u003C\u002Fcode\u003E event, which happens before \u003Ccode\u003Esubscription.created\u003C\u002Fcode\u003E and so on. All event fields you can find in specific \u003Ca href=\"\"\u003EStripeEventInputType article (TBD)\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, in order to receive all important events, you need to listen to at least the following event list:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--urKYO0CA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk6aa6wd2d6pp1go6iuya.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--urKYO0CA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk6aa6wd2d6pp1go6iuya.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can setup whatever stack you have as listener and create a \u003Ccode\u003EWebhook point\u003C\u002Fcode\u003E at \u003Ca href=\"https:\u002F\u002Fdashboard.stripe.com\u002Faccount\u002Fwebhooks\"\u003Eyour dashboard\u003C\u002Fa\u003E. Do not forget, that you should always listen to webhooks. Important to notice, that here you should check signature, that Stripe gave you as 'Signing Secret' on Webhhoks page. Do it for every query, that you receive. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAll events, that come from Stripe, go directly to this Webhook point. Here you can respond directly or format it depending on the event type and send to your API to handle.  Here, not dependently on event type, I recommend to save any of it as \u003Ccode\u003EStripeEvent\u003C\u002Fcode\u003E and respond to event accordingly with it's type only after that. Having it that way, you can always find all events, that you received from Stripe at any time by 'customerId' in your \u003Ccode\u003EStripeEvent\u003C\u002Fcode\u003E table or you can setup a view in your admin panel as well.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere we come to the most not obvious and crazy thing, that I have not expected from a fancy world-wide-known system. Stripe send all webhooks asynchronously. So you can never know you can never know what comes first: subscription, invoice or checkout session webhook. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dmTRERc7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fp9oaalffyi8b3wmcwncg.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dmTRERc7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fp9oaalffyi8b3wmcwncg.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhy is that not convenient at all? At first, all data, that can be linked with is 'checkout session' for specific payment and 'customer' for user in general. \u003Cbr\u003E\nBut the thing is 'checkout.completed' webhook you can receive at any time: after \u003Ccode\u003Einvoice.finalized\u003C\u002Fcode\u003E or \u003Ccode\u003Esubscription.created\u003C\u002Fcode\u003E. More to that, you can give \u003Ccode\u003Einvoice.finalized\u003C\u002Fcode\u003E before \u003Ccode\u003Einvoice.created\u003C\u002Fcode\u003E and so on with invoices. More to it, you can get 'subscription' at the end of webhooks list. In that way, you firstly getting an invoice, that you can save, but you can't attach it to subscription, because there are none at the moment and you can't attach it to your 'product' (e.g. subscription plan), because you can't identify the specific product in your DB with paid invoice. Sure thing, in order to deal with asynchronous Stripe events we got all cases handled. I am going to describe it in detail in the next article in this series. In a nutshell, the most important thing is to save and link Stripe subscription with invoices, checkout session with subscription and subscription with your product. Every event should be handled by different Handler, for example, it can look in the following way:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EHandleStripeChargeWebhookSrevice\nHandleStripeInvoiceWebhookService\nHandleStripeCheckoutWebhookService\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E...\u003Cbr\u003E\nso on.\u003C\u002Fp\u003E\n\n\u003Cp\u003EUseful Stripe Docs, that comes in handy:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fwebhooks\"\u003EWebhooks\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fevents\u002Ftypes\"\u003EEvent types\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fbilling\u002Fsubscriptions\u002Foverview\"\u003ESubscriptions\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Ftesting\"\u003ECards to test billing\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstripe.com\u002Fdocs\u002Fstripe-cli\"\u003EStripe CLI\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EIn the next article I am going to specify ways to handle 'asynchronous' webhooks and how each event may look like.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003E\u003Cem\u003EKeep your code clean and yourself safe and sound.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n";c.body_markdown="*This article is the second one of my 'HowTo:Stripe' series. Set of articles will be helpful for those of managers or developers, who are planning to use [Stripe](https:\u002F\u002Fstripe.com\u002F) as a payment system or those of you, who already using it. I won't compare Stripe with analogs (let's just say, [BrainTree](https:\u002F\u002Fwww.braintreepayments.com\u002F) is also a great fit for this purpose), but rather planning to provide a detailed instruction on how to implement a ready-and-working one-time checkout or subscription system with billing cycle of recurrent payments.*\n\n---------------\nIf you are already have answers on questions from the [previous article](https:\u002F\u002Fdev.to\u002Fsoulwife\u002Fpay-or-not-to-pay-with-stripe-subscriptions-from-zero-to-cycling-14l0), you are all-set to begin.\n\n##Game On\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F6igz6pnkw5zu1wtzg0he.jpg)\n\nIn Stripe game, any payment begins with creating Customer and Checkout Session for this Customer in Stripe ([here the details how to do it](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fbilling\u002Fsubscriptions\u002Fcheckout#create-session)). The moment we create those Entities in Stripe, we need to create our `StripeCustomer` and **`StripeCheckoutSession`** accordingly with necessary data, that Stripe gave to us (identifiers, dates, so on). \n**`StripeCustomer`**: I recommend to save only necessary data here (for example, stripe customer id, createdAtStripe datetime and customer email) and link it One-to-One with your User identity via userId field.\n**`StripeCheckoutSession`**: the best here is to save such data, as stripe session identifier, created and updated datetime and stripe customer identifier (Many-to-One with Customer here). In case you have a Subscription type checkout, there are two more fields, that are necessary here: `subscriptionId` (stripe subscription identifier, null at this moment) and `product identifier` (your 'subscription' identifier). \n\nImportant to know, that Session is always should be linked with your 'product' specification in order to control and respond to any stripe changes and save this 'product identifier' in `StripeSubscription` later on accordingly with Stripe Checkout Process and webhooks. Those 'Customer-CheckoutSession' actions should be handled by one `CreateStripeCheckoutSession` query. So, you can return 'ready-to-pay' Session object to the Web Client in response on `CreateStripeCheckoutSession` query. Note, that if you do not want to create a customer for every checkout session (every payment), you need to pass it to Stripe at the moment you create a CheckoutSession in Stripe. Our `StripeCustomer` linked with User comes in handy here: you can just look by your user identity identifier among all customers in your `StripeCustomer` table and use it after that.\n\nOne should not forget to setup 'keys': Stripe gives you public and private keys. The first one you are going to use in frontend queries and the second one should be set in any API query to Stripe from backend. You can find your keys at your project 'Dashboard' main page.\n\nNow the client can proceed with payment and actually pay for your product in a one-time-checkout or subscribe to the billing cycle. \n\n##Take it all\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8fjk9dymlvq6mxulf9n3.png)\n\nThe client is going to be redirected to the `success_url`, that you set up when initiated the Checkout Session, in case of successful checkout and to `cancel_url` page otherwise. If you have the one-time-checkout, than I have good news for you: it's almost done. You need to update the status of your checkout session in order to know, that everything paid in [`redirectToCheckout`](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fpayments\u002Faccept-a-payment?integration=elements#add-an-event-handler-to-the-checkout-button) event handler and that's all. \n\n##~~#FollowMe~~ #SubscribeMe\nMeanwhile, with 'Subscription' type of payment, we are not done here. During the payment and redirect process, you need to receive and handle all necessary webhooks in order to show 'paid' invoices and 'active' subscription in his success page.\n\nIt means, that you are going to need a full cycle of recurrent payments. So, you have to operate with the next types of event entities:\n\n[Subscription](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fsubscriptions\u002Fobject),\n[Checkout Session](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fcheckout\u002Fsessions\u002Fobject),\n[Customer](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fcustomers\u002Fobject),\n[Invoice](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Finvoices\u002Fobject),\n[Charge](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fevents\u002Ftypes#charge_object).\n\nAll those entities have required and not required fields. Some of entity fields can be absent during specific event, but filled out in other. For example, `subscription` or `pdf` fields are absent during `invoice.created` or any other `invoice` event, which happens before `subscription.created` and so on. All event fields you can find in specific [StripeEventInputType article (TBD)]()\n\nSo, in order to receive all important events, you need to listen to at least the following event list:\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk6aa6wd2d6pp1go6iuya.png)\n\nYou can setup whatever stack you have as listener and create a `Webhook point` at [your dashboard](https:\u002F\u002Fdashboard.stripe.com\u002Faccount\u002Fwebhooks). Do not forget, that you should always listen to webhooks. Important to notice, that here you should check signature, that Stripe gave you as 'Signing Secret' on Webhhoks page. Do it for every query, that you receive. \n\nAll events, that come from Stripe, go directly to this Webhook point. Here you can respond directly or format it depending on the event type and send to your API to handle.  Here, not dependently on event type, I recommend to save any of it as `StripeEvent` and respond to event accordingly with it's type only after that. Having it that way, you can always find all events, that you received from Stripe at any time by 'customerId' in your `StripeEvent` table or you can setup a view in your admin panel as well.\n\nHere we come to the most not obvious and crazy thing, that I have not expected from a fancy world-wide-known system. Stripe send all webhooks asynchronously. So you can never know you can never know what comes first: subscription, invoice or checkout session webhook. \n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fp9oaalffyi8b3wmcwncg.png)\n\nWhy is that not convenient at all? At first, all data, that can be linked with is 'checkout session' for specific payment and 'customer' for user in general. \nBut the thing is 'checkout.completed' webhook you can receive at any time: after `invoice.finalized` or `subscription.created`. More to that, you can give `invoice.finalized` before `invoice.created` and so on with invoices. More to it, you can get 'subscription' at the end of webhooks list. In that way, you firstly getting an invoice, that you can save, but you can't attach it to subscription, because there are none at the moment and you can't attach it to your 'product' (e.g. subscription plan), because you can't identify the specific product in your DB with paid invoice. Sure thing, in order to deal with asynchronous Stripe events we got all cases handled. I am going to describe it in detail in the next article in this series. In a nutshell, the most important thing is to save and link Stripe subscription with invoices, checkout session with subscription and subscription with your product. Every event should be handled by different Handler, for example, it can look in the following way:\n\n```\nHandleStripeChargeWebhookSrevice\nHandleStripeInvoiceWebhookService\nHandleStripeCheckoutWebhookService\n```\n...\nso on.\n\nUseful Stripe Docs, that comes in handy:\n\n[Webhooks](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fwebhooks)\n[Event types](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fapi\u002Fevents\u002Ftypes)\n[Subscriptions](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fbilling\u002Fsubscriptions\u002Foverview)\n[Cards to test billing](https:\u002F\u002Fstripe.com\u002Fdocs\u002Ftesting)\n[Stripe CLI](https:\u002F\u002Fstripe.com\u002Fdocs\u002Fstripe-cli)\n\n*In the next article I am going to specify ways to handle 'asynchronous' webhooks and how each event may look like.*\n\n----------------------\n*Keep your code clean and yourself safe and sound.*\n\n";c.user={name:"Anastasiia Lysenko",username:f,twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--JoVeaiEJ--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F397879\u002Fd3492cab-396f-4d04-8013-c7d771fe4634.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gOMf3VkY--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F397879\u002Fd3492cab-396f-4d04-8013-c7d771fe4634.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-01-25T13:46:30Z",{},"https:\u002F\u002Fdev.to\u002Fsoulwife\u002Fhow-to-handle-a-stripe-252l",4,"soulwife")));
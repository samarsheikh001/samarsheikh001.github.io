window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:775102,title:"graphql-let - A Webpack loader for GraphQL Code Generator",description:"graphql-let is a webpack loader of GraphQL code generator.",readable_publish_date:"Jul 29",slug:"graphql-let-a-webpack-loader-for-graphql-code-generator-16f1",path:"\u002Fthe-guild\u002Fgraphql-let-a-webpack-loader-for-graphql-code-generator-16f1",url:"https:\u002F\u002Fdev.to\u002Fthe-guild\u002Fgraphql-let-a-webpack-loader-for-graphql-code-generator-16f1",comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--z6T8gP5S--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fgraphql-let\u002Fcover.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CX8TM2tt--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fthe-guild.dev\u002Fblog-assets\u002Fgraphql-let\u002Fcover.png",canonical_url:"https:\u002F\u002Fthe-guild.dev\u002Fblog\u002Fgraphql-let",created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:3,tag_list:"graphql, codegen, webpack",tags:["graphql","codegen","webpack"],body_html:"\u003Cblockquote\u003E\n\u003Cp\u003EThis article was published on 2020-11-25 by \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fpiglovesyou1\"\u003ESoichi Takamura\u003C\u002Fa\u003E @ \u003Ca href=\"https:\u002F\u002Fthe-guild.dev\u002F\"\u003EThe Guild Blog\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let\"\u003Egraphql-let\u003C\u002Fa\u003E is a wrapper tool that makes using GraphQL Code Generator smoother and easier. In this article, I'll explain what graphql-let is and how it relates to GraphQL Code Generator.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-is-graphqllet\" href=\"#what-is-graphqllet\"\u003E\n  \u003C\u002Fa\u003E\n  What is graphql-let?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\"It's a webpack loader\" would be a simple explanation to start. It lets you directly import GraphQL documents and use GraphQL Code Generator's result as below:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003E```typescript jsx\u003Cbr\u003E\n\u002F\u002F You can directly import typed objects generated by GraphQL code generator‚ö°Ô∏è\u003Cbr\u003E\nimport { useNewsQuery } from '.\u002Fnews.graphql'\u003C\u002Fp\u003E\n\n\u003Cp\u003Econst News: React.FC = () =&gt; {\u003Cbr\u003E\n    \u002F\u002F Yes, fetched data is typed tooüí™\u003Cbr\u003E\n    const { data: { news } } = useNewsQuery()\u003Cbr\u003E\n    if (news) return \u003C\u002Fp\u003E{news.map(...)}\u003Cbr\u003E\n}\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\n\n\nThe fastest way to try graphql-let is to use [the Next.js example from their official repository](https:\u002F\u002Fgithub.com\u002Fvercel\u002Fnext.js\u002Ftree\u002Fcanary\u002Fexamples\u002Fwith-typescript-graphql) by hitting the following command.\n\n\n\n```bash\nyarn create next-app --example with-typescript-graphql with-typescript-graphql-app\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003E\u003Ccode\u003Egraphql-let\u003C\u002Fcode\u003E is made for enhancing the development pattern using \u003Cstrong\u003ETypeScript and GraphQL\u003C\u002Fstrong\u003E, the most effective combination to solve many front-end problems in 2020. It heavily depends on GraphQL Code Generator, so in other words, if you don't use any of TypeScript and GraphQL Code Generator, you don't need \u003Ccode\u003Egraphql-let\u003C\u002Fcode\u003E either.\u003C\u002Fp\u003E\n\n\u003Cp\u003Egraphql-let's configuration file, \u003Ccode\u003E.graphql-let.yml\u003C\u002Fcode\u003E, looks intentionally similar to \u003Ccode\u003Ecodegen.yml\u003C\u002Fcode\u003E of GraphQL Codegen. Next, I'll explain what \u003Ccode\u003Egraphql-let\u003C\u002Fcode\u003E does by calling GraphQL Code Generator's API under the hood.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"what-does-graphqlet-add-on-top-of-graphql-code-generator-api\" href=\"#what-does-graphqlet-add-on-top-of-graphql-code-generator-api\"\u003E\n  \u003C\u002Fa\u003E\n  What does graphq-let add on top of GraphQL code generator API?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EGraphQL Code Generator is an awesome tool. It's an infrastructure to expand the possibility of GraphQL nowadays. graphql-let is in \u003Ccode\u003EdevDependencies\u003C\u002Fcode\u003E as well as GraphQL Code Generator, so it does nothing in runtime-level too. graphql-let eases two pain points while you develop using \u003Ccode\u003Ecodegen\u003C\u002Fcode\u003E command of GraphQL Code Generator.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith GraphQL Code Generator,\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  You need to point to the output path as \u003Ccode\u003Eimport \"..\u002F..\u002F..\u002F__generated__\u002Fout.tsx\"\u003C\u002Fcode\u003E everywhere\u003C\u002Fli\u003E\n\u003Cli\u003E  You need to run the \u003Ccode\u003Egraphql-codegen\u003C\u002Fcode\u003E command manually every time you change the single file\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWith graphql-let,\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E  You can directly import GraphQL source as \u003Ccode\u003Eimport \".\u002Fnews.graphql\"\u003C\u002Fcode\u003E thanks to the webpack power.\u003C\u002Fli\u003E\n\u003Cli\u003E  You can process codegen in HMR too, thanks to webpack again.\u003C\u002Fli\u003E\n\u003Cli\u003E  It achieved the above by getting rid of the \u003Ccode\u003Egenerates\u003C\u002Fcode\u003E option, where graphql-let takes care of generated paths and lets you forget them.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EPlease note that there are limitations, mainly because graphql-let controls output paths. I'd recommend you \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let\u002F#configuration-is-compatible-with-codegenyml-except\"\u003Eread the documentation\u003C\u002Fa\u003E once to get the picture of how graphql-let and GraphQL Code Generator different.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"other-features\" href=\"#other-features\"\u003E\n  \u003C\u002Fa\u003E\n  Other features\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThere are other convenient features graphql-let provides to make it more practical.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"-raw-import-endraw-syntax-support\" href=\"#-raw-import-endraw-syntax-support\"\u003E\n  \u003C\u002Fa\u003E\n  \u003Ccode\u003E#import\u003C\u002Fcode\u003E syntax support\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Ccode\u003E#import\u003C\u002Fcode\u003E is useful to share fragments of GraphQL document, especially when your project codebase becomes big. If you have a fragment file named \u003Ccode\u003Epartial.graphql\u003C\u002Fcode\u003E like this,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight graphql\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Efragment\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EPartial\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eon\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EUser\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eid\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ename\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eyou can share it from other places by importing it.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight graphql\"\u003E\u003Ccode\u003E\u003Cspan class=\"c\"\u003E# import Partial from '.\u002Fpartial.graphql'\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Equery\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EViewer\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eviewer\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n    \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E...\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EPartial\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"jest-transformer\" href=\"#jest-transformer\"\u003E\n  \u003C\u002Fa\u003E\n  Jest Transformer\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003Egraphql-let exports \u003Ccode\u003Egraphql-let\u002FjestTransformer\u003C\u002Fcode\u003E that you can use in Jest testing. Please \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let\u002F#jest-transformer\"\u003Eread the docs\u003C\u002Fa\u003E for more information.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"babel-plugin-for-inline-graphql-documents\" href=\"#babel-plugin-for-inline-graphql-documents\"\u003E\n  \u003C\u002Fa\u003E\n  Babel Plugin for inline GraphQL documents\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIt's still partial support, but graphql-let provides a babel plugin to allows developers to write inline GraphQL documents.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003E```typescript jsx\u003Cbr\u003E\nimport gql from 'graphql-let';\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u002F\u002F TypedÔ∏è‚ö°Ô∏è\u003Cbr\u003E\nconst { useViewerQuery } = gql(\u003Ccode\u003E\u003Cbr\u003E\n    query Viewer {\u003Cbr\u003E\n        viewer { name }\u003Cbr\u003E\n    }\u003Cbr\u003E\n\u003C\u002Fcode\u003E);\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\n\n\nIt generates `.d.ts` files in `node_modules\u002F@types\u002Fgraphql-let` by default to apply overload signatures on the function `gql`. Ideally, it should be available in both a babel plugin and the webpack loader but there needs to be more effort.\n\n## Why I made graphql-let\n\nI made this for front-end devs to adopt the TypeScript and GraphQL even more in their projectüòÑ\n\nWhen I actively maintained [kriasoft\u002Freact-starter-kit](https:\u002F\u002Fgithub.com\u002Fkriasoft\u002Freact-starter-kit) a few years ago, I realized it's so happy to use Apollo Server and Apollo Client. At the moment, though, Apollo primarily supported HOCs instead of React Hooks, which leads to troublesome to match types of GraphQL operations and fetched data manually. Then, `@graphql-codegen\u002Ftypescript-react-apollo` appeared and solved all the problems, except ones that graphql-let deals with later.\n\nThe less setup process GraphQL development requires, the more people can adopt GraphQL I believe, simply because GraphQL itself solves many problems web development has been struggling with without it for a decade. I couldn't be happier if a few of you get to know the power of GraphQL through using graphql-let.\n\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n",body_markdown:"\u003E This article was published on 2020-11-25 by [Soichi Takamura](https:\u002F\u002Ftwitter.com\u002Fpiglovesyou1) @ [The Guild Blog](https:\u002F\u002Fthe-guild.dev\u002F)\n\n[graphql-let](https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let) is a wrapper tool that makes using GraphQL Code Generator smoother and easier. In this article, I'll explain what graphql-let is and how it relates to GraphQL Code Generator.\n\n## What is graphql-let?\n\n\"It's a webpack loader\" would be a simple explanation to start. It lets you directly import GraphQL documents and use GraphQL Code Generator's result as below:\n\n```typescript jsx\n\u002F\u002F You can directly import typed objects generated by GraphQL code generator‚ö°Ô∏è\nimport { useNewsQuery } from '.\u002Fnews.graphql'\n\nconst News: React.FC = () =\u003E {\n    \u002F\u002F Yes, fetched data is typed tooüí™\n    const { data: { news } } = useNewsQuery()\n    if (news) return \u003Cdiv\u003E{news.map(...)}\u003C\u002Fdiv\u003E\n}\n```\n\nThe fastest way to try graphql-let is to use [the Next.js example from their official repository](https:\u002F\u002Fgithub.com\u002Fvercel\u002Fnext.js\u002Ftree\u002Fcanary\u002Fexamples\u002Fwith-typescript-graphql) by hitting the following command.\n\n```bash\nyarn create next-app --example with-typescript-graphql with-typescript-graphql-app\n```\n\n`graphql-let` is made for enhancing the development pattern using **TypeScript and GraphQL**, the most effective combination to solve many front-end problems in 2020. It heavily depends on GraphQL Code Generator, so in other words, if you don't use any of TypeScript and GraphQL Code Generator, you don't need `graphql-let` either.\n\ngraphql-let's configuration file, `.graphql-let.yml`, looks intentionally similar to `codegen.yml` of GraphQL Codegen. Next, I'll explain what `graphql-let` does by calling GraphQL Code Generator's API under the hood.\n\n## What does graphq-let add on top of GraphQL code generator API?\n\nGraphQL Code Generator is an awesome tool. It's an infrastructure to expand the possibility of GraphQL nowadays. graphql-let is in `devDependencies` as well as GraphQL Code Generator, so it does nothing in runtime-level too. graphql-let eases two pain points while you develop using `codegen` command of GraphQL Code Generator.\n\nWith GraphQL Code Generator,\n\n*   You need to point to the output path as `import \"..\u002F..\u002F..\u002F__generated__\u002Fout.tsx\"` everywhere\n*   You need to run the `graphql-codegen` command manually every time you change the single file\n\nWith graphql-let,\n\n*   You can directly import GraphQL source as `import \".\u002Fnews.graphql\"` thanks to the webpack power.\n*   You can process codegen in HMR too, thanks to webpack again.\n*   It achieved the above by getting rid of the `generates` option, where graphql-let takes care of generated paths and lets you forget them.\n\nPlease note that there are limitations, mainly because graphql-let controls output paths. I'd recommend you [read the documentation](https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let\u002F#configuration-is-compatible-with-codegenyml-except) once to get the picture of how graphql-let and GraphQL Code Generator different.\n\n## Other features\n\nThere are other convenient features graphql-let provides to make it more practical.\n\n### `#import` syntax support\n\n`#import` is useful to share fragments of GraphQL document, especially when your project codebase becomes big. If you have a fragment file named `partial.graphql` like this,\n\n```graphql\nfragment Partial on User {\n  id\n  name\n}\n```\n\nyou can share it from other places by importing it.\n\n```graphql\n# import Partial from '.\u002Fpartial.graphql'\nquery Viewer {\n  viewer {\n    ...Partial\n  }\n}\n```\n\n### Jest Transformer\n\ngraphql-let exports `graphql-let\u002FjestTransformer` that you can use in Jest testing. Please [read the docs](https:\u002F\u002Fgithub.com\u002Fpiglovesyou\u002Fgraphql-let\u002F#jest-transformer) for more information.\n\n### Babel Plugin for inline GraphQL documents\n\nIt's still partial support, but graphql-let provides a babel plugin to allows developers to write inline GraphQL documents.\n\n```typescript jsx\nimport gql from 'graphql-let';\n\n\u002F\u002F TypedÔ∏è‚ö°Ô∏è\nconst { useViewerQuery } = gql(`\n    query Viewer {\n        viewer { name }\n    }\n`);\n```\n\nIt generates `.d.ts` files in `node_modules\u002F@types\u002Fgraphql-let` by default to apply overload signatures on the function `gql`. Ideally, it should be available in both a babel plugin and the webpack loader but there needs to be more effort.\n\n## Why I made graphql-let\n\nI made this for front-end devs to adopt the TypeScript and GraphQL even more in their projectüòÑ\n\nWhen I actively maintained [kriasoft\u002Freact-starter-kit](https:\u002F\u002Fgithub.com\u002Fkriasoft\u002Freact-starter-kit) a few years ago, I realized it's so happy to use Apollo Server and Apollo Client. At the moment, though, Apollo primarily supported HOCs instead of React Hooks, which leads to troublesome to match types of GraphQL operations and fetched data manually. Then, `@graphql-codegen\u002Ftypescript-react-apollo` appeared and solved all the problems, except ones that graphql-let deals with later.\n\nThe less setup process GraphQL development requires, the more people can adopt GraphQL I believe, simply because GraphQL itself solves many problems web development has been struggling with without it for a decade. I couldn't be happier if a few of you get to know the power of GraphQL through using graphql-let.\n ",user:{name:"TheGuildBot",username:"theguild_",twitter_username:a,github_username:"theguild-bot",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6o2-5Fur--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F671966\u002Fdb54b8e2-d3ac-4a20-87b1-fb08f11b24c4.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--f3AUn2a7--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F671966\u002Fdb54b8e2-d3ac-4a20-87b1-fb08f11b24c4.png"},organization:{name:"The Guild",username:d,slug:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HhnjNNuO--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4467\u002Fa1694e21-840c-4bdb-beaa-8d63d8255b8b.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FHaFJPvk--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F4467\u002Fa1694e21-840c-4bdb-beaa-8d63d8255b8b.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Ftheguild_\u002F775102",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-07-29T09:08:51Z",4,"the-guild"));
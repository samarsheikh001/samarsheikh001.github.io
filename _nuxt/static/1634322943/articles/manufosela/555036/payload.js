__NUXT_JSONP__("/articles/manufosela/555036", (function(a,b,c,d,e,f){b.type_of="article";b.id=555036;b.title="Desarrollo Web y Web Components";b.description="Disclaimer   Lo que vierto en este post es mi opinión. Mi punto de vista. Mi percepción. Des...";b.readable_publish_date="Dec 29 '20";b.slug="desarrollo-web-y-web-components-1j0g";b.path="\u002Fmanufosela\u002Fdesarrollo-web-y-web-components-1j0g";b.url=c;b.comments_count=3;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image=a;b.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F555036.png";b.canonical_url=c;b.created_at="2020-12-29T00:36:07Z";b.edited_at=a;b.crossposted_at=a;b.published_at=e;b.last_comment_at="2020-12-31T06:01:58Z";b.reading_time_minutes=10;b.tag_list="webdev, webcomponents, javascript, html";b.tags=["webdev","webcomponents","javascript","html"];b.body_html="\u003Ch1\u003E\n  \u003Ca name=\"disclaimer\" href=\"#disclaimer\"\u003E\n  \u003C\u002Fa\u003E\n  Disclaimer\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELo que vierto en este post es mi opinión. Mi punto de vista. Mi percepción. Desde mi experiencia y mis sesgos. Y sobre todo desde mi ignorancia en muchos campos.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"sobre-mi-y-mis-inicios-como-desarrollador\" href=\"#sobre-mi-y-mis-inicios-como-desarrollador\"\u003E\n  \u003C\u002Fa\u003E\n  Sobre mi y mis inicios como desarrollador\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELlevo programando para la web desde 1997.\u003Cbr\u003E\nA parte de HTML, CSS y Javascript, he pasado por varios lenguajes: CGIs en C, ASP, JSP, PHP, Java, Perl y Ruby si no recuerdo mal. Algunos durante unos meses otros durante años.\u003Cbr\u003E\nHe trabajado con bases de datos MSSQL, MySQL, Oracle, IBMDb2 y MongoDB.\u003Cbr\u003E\nY he trabajado con servidores IIS, Apache, Tomcat y Nginx.\u003Cbr\u003E\nDesde siempre Windows (era un mal necesario) y Linux (era un suplicio a principios de siglo)\u003C\u002Fp\u003E\n\n\u003Cp\u003EHe visto cómo hemos pasado de que un desarrollador\u002Fequipo web fuera responsable de todo a la especialización más exquisita.\u003Cbr\u003E\nAprendí a hacer testing, TDD, metodología XP y pair programing en 2007. Hacia 2008 con el boom de Javascript y Jquery, empecé a especializarme más en Javascript, aunque no fue hasta 2010 cuando pasé a ser “oficialmente” FrontEnd Developer, a pesar de que mis dotes de diseño dejan mucho que desear.\u003Cbr\u003E\nY dejé de tocar la parte back y configuración de servidores. Dejé de subir a producción por FTP y empecé a usar control de versiones con CVS y Subversion.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELuego empezaron a aparecer librerías como Backbone y arrancó el boom de los frameworks del front, las llamadas AJAX y el desarrollo de APIs que alimentaban esos frontales “mágicos”\u003C\u002Fp\u003E\n\n\u003Cp\u003EPor cierto, AJAX empecé a usarlo hacia 2007 cuando existía ¡¡desde 2002!! Y yo usando iframes ocultos, leyendo información y cargándola en la página principal, una “guarrada”... pero es que antes era otra epoca ;)\u003C\u002Fp\u003E\n\n\u003Cp\u003EEn 2015 me enganché a los web-components, con Polymer en su versión 0.8 y a la espera de que los ansiados estándares vieran su primera versión que no llegó hasta 3 años después.\u003Cbr\u003E\nY aunque siempre he probado, y hecho alguna aplicación que otra, en todos los frameworks típicos, nunca me han entusiasmado en exceso.\u003Cbr\u003E\nSí. Mola. Facilitan. Ahorran tiempo (una vez les coges el punto). Unifican los grandes desarrollos. La curva de aprendizaje puede venir hecha al incorporarte a un equipo. Y sobre todo hacen mucha “magia” que se puede traducir en desarrollo mas rápido y menos dolores de cabeza, pero ¿necesitaba usarlos?\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"empiezo-la-pol%C3%A9mica\" href=\"#empiezo-la-pol%C3%A9mica\"\u003E\n  \u003C\u002Fa\u003E\n  Empiezo la polémica\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ECreo que en los proyectos grandes donde he trabajado, o he visto trabajar desde que ejerzo como manager, está plenamente justificado el uso de un framework, pero ¿Y en un blog? ¿Y en una web de contenidos? ¿Y en algunos juegos? En internet veo muchas webs que son contenidos y creo que no necesitan un framework para desarrollarlas.\u003C\u002Fp\u003E\n\n\u003Cp\u003E¿Que se pueden usar frameworks? Correcto. ¿Que no penaliza? Bueno, depende. A nivel de lo que es una página web, solo hace falta hacer “botón derecho” (lo siento no uso Mac), “ver código fuente de la página” y ver en dicho código fuente “atrocidades” que ni DreamWeaver en sus mejores momentos…\u003Cbr\u003E\nPorque o bien no hay contenido, ya que se genera dinámicamente, y por tanto es contenido invisible a los crawlers de los buscadores, o bien lo que se escupe aparece “ofuscado”, cuando una web de contenido, justo lo que se tiene que leer perfectamente es el contenido, con sus tags HTML, usando la semántica de las etiquetas HTML (cuantos años luché al principio por una web Semántica)\u003Cbr\u003E\nO eso creí entender allá por 1997 cuando leí mi primer libro de HTML.\u003C\u002Fp\u003E\n\n\u003Cp\u003EY lo de que no es necesario usar un framework para generar contenido como un blog parece que se están dando cuenta la comunidad.\u003Cbr\u003E\nPor eso ¿Qué está pasando últimamente? Que alguien “descubre” el SSR (Server Side Rendering)\u003Cbr\u003E\nY empiezan a aparecer frameworks sobre los frameworks para hacer lo que se hacía desde siempre, generar el contenido de la página desde en el servidor y que el navegador haga la petición y le envíe dicho contenido, eso sí, ahora usando toooooda la lógica del framework sobre otro framework. Volvemos a los inicios, pero complicándolo. \u003Cbr\u003E\n¿Por qué? Quizás porque lo no sabemos hacer de otra manera. Es lo que nos han enseñado.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENos enseñan a usar algunas herramientas, pero \u003Cstrong\u003Eno nos enseñan a pensar cuándo se deben usar dichas herramientas\u003C\u002Fstrong\u003E.\u003Cbr\u003E\nComo se suele decir: “Te enseñan a usar un martillo y todo son clavos”\u003Cbr\u003E\n¿Te enseñan el framework AcojoJS? Todo son aplicaciones con AcojoJS. Sin pararnos a pensar si es la solución idónea para nuestro problema. Funciona, ¿no?\u003C\u002Fp\u003E\n\n\u003Cp\u003EQuizás porque no nos enseñan más.\u003Cbr\u003E\nQuizás porque no nos ponemos a pensar.\u003Cbr\u003E\nQuizás porque va todo tan deprisa que nos falta tiempo para aprender.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPorque aprendemos a usar un martillo, es decir a programar, y ¡ale! a clavar todo lo que pille, aunque sea un tornillo o un cristal.\u003C\u002Fp\u003E\n\n\u003Cp\u003EY es cierto. Aprendes lo suficiente para usar ese martillo con suficiente destreza. Pero nada más.\u003Cbr\u003E\nAunque seamos conscientes de que la caja de herramientas es gigante y la cantidad de herramientas casi infinita, nos quedamos con nuestro martillo.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPero sobre todo, creo que no se fomenta el buscar soluciones adecuadas a los problemas, si no a usar nuestra solución a cualquier problema.\u003Cbr\u003E\nEs decir, \u003Cstrong\u003Eadaptamos problemas a nuestras soluciones\u003C\u002Fstrong\u003E, complicando más el problema.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEsto me pasó en uno de mis equipos, cuando nos plantearon un proyecto en el que teníamos vía libre para utilizar lo que quisiéramos. Greenfield Project lo llaman.\u003Cbr\u003E\nPregunté:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E¿Qué usamos? \nTodos al unísono: \u003C\u002Fli\u003E\n\u003Cli\u003EVue! Vue! Vue!\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EMi pregunta era para implicar al equipo en el análisis del problema y buscar la solución adecuada, que facilitara el trabajo y la entrega a tiempo.\u003Cbr\u003E\nPero mi sorpresa fue mayúscula cuando con un mínimo de información sobre el proyecto, todos pedían a Barrabás, en este caso Vuerrabás :P\u003Cbr\u003E\nMenos mal que en este caso no hice como Poncio Pilato, aunque si me lleve un Soponcio Parrato :P\u003C\u002Fp\u003E\n\n\u003Cp\u003EEste es solo un claro ejemplo de a lo que nos conduce el mundo del desarrollo actual, del que me siento parte y responsable.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"webcomponents\" href=\"#webcomponents\"\u003E\n  \u003C\u002Fa\u003E\n  WebComponents\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EY ya metidos en faena, quiero también reivindicar a los denostados, en algunos círculos, web-components estándar, incluidos en muchos frameworks, pero sin pertenecer a ninguno.\u003C\u002Fp\u003E\n\n\u003Cp\u003EY sobre todo quiero plantear mi disconformidad con el uso que se hace de ellos con el “Atomic Design”, es decir, crear componentes atómicos, que pueden usarse solos o como parte de un componente de orden superior, conocidos como “moléculas”. Y que estos últimos a la vez puedan conformar “organismos” de componentes…\u003C\u002Fp\u003E\n\n\u003Cp\u003ENo se. Me chirría. Siempre he visto los web-components como etiquetas HTML, como un &lt;UL&gt; o un &lt;TABLE&gt; o &lt;DIV&gt; solo que “haga más cosas”. Igual que crearon el tag &lt;VIDEO&gt;, que es realmente el concepto de un web-component aplicado: permite insertar vídeo en la web de manera sencilla, con su controlador del vídeo, la pantalla de vídeo, admitiendo diferentes formatos y fuentes…\u003C\u002Fp\u003E\n\n\u003Cp\u003EY veo bien web-components que aporten “cosas” que no hay. Un lector de QR. Un campo de formulario para votar con estrellas. Un reloj digital. Un calendario. Un menú. Hay mil ejemplos de necesidades.\u003C\u002Fp\u003E\n\n\u003Cp\u003E¿Pero es un componente un ente formado por un &lt;h1&gt;, un &lt;h2&gt; y un &lt;IMG&gt; donde además ninguno de los 3 elementos tiene que aparecer siempre, pudiendo incluso llegar a ser solamente uno de ellos…?\u003C\u002Fp\u003E\n\n\u003Cp\u003EEl argumento suele ser “es que se repite”, “es que así es flexible”, “es que si no ¿cómo lo hacemos?”\u003C\u002Fp\u003E\n\n\u003Cp\u003EPues puede ser un componente web, cierto. Pero también puede no serlo. Si usas un framework quizás no te quede más remedio. O si no te han enseñado a cómo hacerlo sin que lo sea.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBajo mi punto de vista, si usas web-components y estás generando páginas estáticas, aunque se alimente el contenido de una base de datos, al fin y al cabo, ese ente de &lt;h1&gt;&lt;h2&gt;&lt;img&gt; es simplemente una plantilla HTML.\u003C\u002Fp\u003E\n\n\u003Cp\u003EY puedo tener plantillas con combinaciones de esos 3 elementos, si realmente se llaman a todas las combinaciones de los mismos, porque si no, emplear tiempo en tenerlo “por si acaso” es tontería. Ese es otro de los grandes problemas del mundo del desarrollo que da para otro post.\u003C\u002Fp\u003E\n\n\u003Cp\u003EVolviendo al problema planteado. Creo que siempre y cuando sean una simple presentación de tags HTML agrupados, sin ninguna funcionalidad, es una simple plantilla.\u003Cbr\u003E\nSi tuviera funcionalidad, entonces sí podría tener sentido que fuera un web-component. O si tuviera un diseño especial, que pueda chocar con el diseño global y necesite encapsular dicho diseño, también podría ser un web-component.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEs decir, creo que un web-component, la razón de crearlo es cuando:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ESe puede reutilizar.\u003C\u002Fli\u003E\n\u003Cli\u003ETiene una presentación que no existe ya en un tag HTML\u003C\u002Fli\u003E\n\u003Cli\u003ETiene una funcionalidad que le da entidad y sentido.\u003C\u002Fli\u003E\n\u003Cli\u003ETiene una parte de su presentación\u002Fdiseño abstraído del entorno donde se use.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ESi no cumple alguno de esos puntos, debo analizar si realmente necesito diseñar un web-component o tengo alguna alternativa.\u003C\u002Fp\u003E\n\n\u003Cp\u003EY siguiendo esta premisa, por lo tanto para mi no tiene sentido un web-component no visual, que solo aporte funcionalidad, como a veces he visto los llamados “data managers”.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPara mi eso es un tag HTML que ya existe. Se llama &lt;script&gt;. Creo una “librería” con la funcionalidad que necesito. El API que he convenido. Y todo el que lo necesite lo usa. No veo la necesidad de hacerlo mediante un web-component.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"comunicaci%C3%B3n-entre-webcomponents\" href=\"#comunicaci%C3%B3n-entre-webcomponents\"\u003E\n  \u003C\u002Fa\u003E\n  Comunicación entre web-components.\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EOtra \"unpopular opinion\". Siempre se dice, yo de hecho lo he preguntado en alguna entrevista, ¿Cómo se comunican los componentes? Y quien se lo sabe, repite el mantra: “De padres a hijos mediante propiedades, de hijos a padres mediante eventos”\u003C\u002Fp\u003E\n\n\u003Cp\u003EBueno, desde el “Atomic Design” quizás ese mantra sí tiene sentido.\u003Cbr\u003E\nPero si concibes los web-components cómo “tags” autónomos, que pueden convivir y estar anidados dentro de otros, pero independientes, la comunicación debería ser siempre mediante eventos. O mediante prospección.\u003C\u002Fp\u003E\n\n\u003Cp\u003EO sea, aunque puede haber dependencias entre web-components, como la hay en un &lt;table&gt; con un &lt;tr&gt; y este con un &lt;td&gt; o un &lt;ul&gt; con un &lt;li&gt;. Pero realmente puedes usarlos por separado, aunque su funcionamiento no sea el esperado o no sea correcto.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESoy más partidario de un \u003Cstrong\u003E“Phenotypic Design”\u003C\u002Fstrong\u003E para los web-components. Es decir, diseñar los web-components basándonos en el conjunto de características visibles como resultado de la interacción entre su tipo y el medio.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELos tags HTML están clasificados por su tipo: Fundación, Formato, Formulario, Marco, Imagen, Audio, Enlace, Lista, Tabla, Estilo, Meta información y Programa.\u003Cbr\u003E\n¿Por qué no seguir esta clasificación y ampliarla para los web-components si es necesario? \u003C\u002Fp\u003E\n\n\u003Cp\u003EUsando el concepto de “parientes” he visto siempre que ineludiblemente terminamos acoplando componentes padres, madres, hijos, sobrinas, abuelas y tíos todos entre sí, como buena familia. Pero ese no es el fin de los web-components, ya que solemos perder re-utilización fuera de la “familia”, creando verdaderas “mafias”.\u003C\u002Fp\u003E\n\n\u003Cp\u003EUn web-component, por estar anidado dentro de otro no tiene porque crear una relación padre-hijo. Para mi tienen que crear una relación simbiótica. Y las hay de muchos tipos. Pueden ser un alga-hongo, creando un web-component de más valor. Árbol-ardilla, donde uno usa al otro para darle “cobijo”. \u003Cbr\u003E\nCreo que aporta una visión más amplia, menos limitante, donde es más fácil de mantener la individualidad, y por tanto la re-utilización de web-components en diferentes entornos, aplicaciones o webs.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"indexabilidad-de-los-webcomponents\" href=\"#indexabilidad-de-los-webcomponents\"\u003E\n  \u003C\u002Fa\u003E\n  Indexabilidad de los web-components\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EOtro tema que me ha preocupado siempre es que la encapsulación que hace el shadow DOM en los web-components que hace que su contenido no sea indexable y por tanto desaparece al darle a “ver código fuente de la página”, siendo invisible para los crawlers.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPero esto creo que también es por un mal uso que le estamos dando a los web-components.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESi tengo por ejemplo un web-component de un menú de navegación, que al final puede ser un tag &lt;nav&gt; al que le hemos dado una funcionalidad especial en base a unos requisitos, incluso diferente en diferentes resoluciones pantalla, y al que le hemos dado un diseño concreto.\u003Cbr\u003E\n¿Por qué no utilizar el light-dom, es decir, el dom dentro del web-component, leer este en el ciclo de creación del mismo, y pintarlo conforme a los requisitos que necesitamos?\u003Cbr\u003E\nEstaríamos dando el contenido al crawler y encapsulando maquetación, diseño y funcionalidad. ¡Voila!\u003C\u002Fp\u003E\n\n\u003Cp\u003EPorque otra aberración que veo bastante por ahí es pasar información a un web-component mediante un json ¡¡¡que insertamos como atributo!!! \u003Cbr\u003E\n¿Por qué no generar esa información en el light-dom con HTML semántico, indexable y accesible y luego “darle forma” en el web-component?\u003C\u002Fp\u003E\n\n\u003Cp\u003EEs cierto que puede penalizar algo el tiempo de renderizado, pero no más si lo que tienes que leer es un json o una lista de elementos como atributo para pintarlos.\u003Cbr\u003E\nY ademaś existen técnicas para poner un “loader” o añadir una animación de fade-in después del primer renderizado.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPor otro lado, si metemos el contenido del web-component en el light-dom, en el remoto caso de que no funcionara javascript, incluso podríamos asegurarnos de que la página tuviera contenido ya que el light-dom se renderiza, aunque probablemente se verá como “HTML feo” al no cargar el CSS de los componentes y no tener CSS para esos elementos HTML del light-dom.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Fmanufosela\u002Fpen\u002FMWjrrEW\"\u003EEjemplo de componente nav-list\u003C\u002Fa\u003E \u003Cbr\u003E\nEn el repo de git se puede ver la evolución según versiones.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"mis-conclusiones\" href=\"#mis-conclusiones\"\u003E\n  \u003C\u002Fa\u003E\n  Mis conclusiones\n\u003C\u002Fh1\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ENo nos enseñan a buscar soluciones a los problemas, sino a usar las soluciones que conocemos ante cualquier problema.\u003C\u002Fli\u003E\n\u003Cli\u003ECrear un web-component cuando:\n\n\u003Cul\u003E\n\u003Cli\u003ESe puede reutilizar.\u003C\u002Fli\u003E\n\u003Cli\u003ETenga una presentación que no existe ya en un tag HTML\u003C\u002Fli\u003E\n\u003Cli\u003ETenga una funcionalidad que le da entidad y sentido.\u003C\u002Fli\u003E\n\u003Cli\u003ETenga necesidad de abstraer presentación\u002Fdiseño del entorno donde se use.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ERelación entre componentes simbiótica frente a la “familiar”\u003C\u002Fli\u003E\n\u003Cli\u003EComunicación entre componentes mediante eventos.\u003C\u002Fli\u003E\n\u003Cli\u003E“Phenotypic Design” frente a “Atomic Design”\u003C\u002Fli\u003E\n\u003Cli\u003EUtilizar el light-dom cuando sea posible, para insertar contenido al web-component y hacerlo indexable\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EY si has leído hasta aquí ¡gracias! :)\u003Cbr\u003E\nNos vemos por la comunidad.\u003C\u002Fp\u003E\n\n";b.body_markdown="# Disclaimer\nLo que vierto en este post es mi opinión. Mi punto de vista. Mi percepción. Desde mi experiencia y mis sesgos. Y sobre todo desde mi ignorancia en muchos campos.\n\n# Sobre mi y mis inicios como desarrollador\n\nLlevo programando para la web desde 1997.\nA parte de HTML, CSS y Javascript, he pasado por varios lenguajes: CGIs en C, ASP, JSP, PHP, Java, Perl y Ruby si no recuerdo mal. Algunos durante unos meses otros durante años.\nHe trabajado con bases de datos MSSQL, MySQL, Oracle, IBMDb2 y MongoDB.\nY he trabajado con servidores IIS, Apache, Tomcat y Nginx.\nDesde siempre Windows (era un mal necesario) y Linux (era un suplicio a principios de siglo)\n\nHe visto cómo hemos pasado de que un desarrollador\u002Fequipo web fuera responsable de todo a la especialización más exquisita.\nAprendí a hacer testing, TDD, metodología XP y pair programing en 2007. Hacia 2008 con el boom de Javascript y Jquery, empecé a especializarme más en Javascript, aunque no fue hasta 2010 cuando pasé a ser “oficialmente” FrontEnd Developer, a pesar de que mis dotes de diseño dejan mucho que desear.\nY dejé de tocar la parte back y configuración de servidores. Dejé de subir a producción por FTP y empecé a usar control de versiones con CVS y Subversion.\n\nLuego empezaron a aparecer librerías como Backbone y arrancó el boom de los frameworks del front, las llamadas AJAX y el desarrollo de APIs que alimentaban esos frontales “mágicos”\n\nPor cierto, AJAX empecé a usarlo hacia 2007 cuando existía ¡¡desde 2002!! Y yo usando iframes ocultos, leyendo información y cargándola en la página principal, una “guarrada”... pero es que antes era otra epoca ;)\n\nEn 2015 me enganché a los web-components, con Polymer en su versión 0.8 y a la espera de que los ansiados estándares vieran su primera versión que no llegó hasta 3 años después.\nY aunque siempre he probado, y hecho alguna aplicación que otra, en todos los frameworks típicos, nunca me han entusiasmado en exceso.\nSí. Mola. Facilitan. Ahorran tiempo (una vez les coges el punto). Unifican los grandes desarrollos. La curva de aprendizaje puede venir hecha al incorporarte a un equipo. Y sobre todo hacen mucha “magia” que se puede traducir en desarrollo mas rápido y menos dolores de cabeza, pero ¿necesitaba usarlos?\n\n# Empiezo la polémica\n\nCreo que en los proyectos grandes donde he trabajado, o he visto trabajar desde que ejerzo como manager, está plenamente justificado el uso de un framework, pero ¿Y en un blog? ¿Y en una web de contenidos? ¿Y en algunos juegos? En internet veo muchas webs que son contenidos y creo que no necesitan un framework para desarrollarlas.\n\n¿Que se pueden usar frameworks? Correcto. ¿Que no penaliza? Bueno, depende. A nivel de lo que es una página web, solo hace falta hacer “botón derecho” (lo siento no uso Mac), “ver código fuente de la página” y ver en dicho código fuente “atrocidades” que ni DreamWeaver en sus mejores momentos…\nPorque o bien no hay contenido, ya que se genera dinámicamente, y por tanto es contenido invisible a los crawlers de los buscadores, o bien lo que se escupe aparece “ofuscado”, cuando una web de contenido, justo lo que se tiene que leer perfectamente es el contenido, con sus tags HTML, usando la semántica de las etiquetas HTML (cuantos años luché al principio por una web Semántica)\nO eso creí entender allá por 1997 cuando leí mi primer libro de HTML.\n\nY lo de que no es necesario usar un framework para generar contenido como un blog parece que se están dando cuenta la comunidad.\nPor eso ¿Qué está pasando últimamente? Que alguien “descubre” el SSR (Server Side Rendering)\nY empiezan a aparecer frameworks sobre los frameworks para hacer lo que se hacía desde siempre, generar el contenido de la página desde en el servidor y que el navegador haga la petición y le envíe dicho contenido, eso sí, ahora usando toooooda la lógica del framework sobre otro framework. Volvemos a los inicios, pero complicándolo. \n¿Por qué? Quizás porque lo no sabemos hacer de otra manera. Es lo que nos han enseñado.\n\nNos enseñan a usar algunas herramientas, pero **no nos enseñan a pensar cuándo se deben usar dichas herramientas**.\nComo se suele decir: “Te enseñan a usar un martillo y todo son clavos”\n¿Te enseñan el framework AcojoJS? Todo son aplicaciones con AcojoJS. Sin pararnos a pensar si es la solución idónea para nuestro problema. Funciona, ¿no?\n\nQuizás porque no nos enseñan más.\nQuizás porque no nos ponemos a pensar.\nQuizás porque va todo tan deprisa que nos falta tiempo para aprender.\n\nPorque aprendemos a usar un martillo, es decir a programar, y ¡ale! a clavar todo lo que pille, aunque sea un tornillo o un cristal.\n\nY es cierto. Aprendes lo suficiente para usar ese martillo con suficiente destreza. Pero nada más.\nAunque seamos conscientes de que la caja de herramientas es gigante y la cantidad de herramientas casi infinita, nos quedamos con nuestro martillo.\n \nPero sobre todo, creo que no se fomenta el buscar soluciones adecuadas a los problemas, si no a usar nuestra solución a cualquier problema.\nEs decir, **adaptamos problemas a nuestras soluciones**, complicando más el problema.\n\nEsto me pasó en uno de mis equipos, cuando nos plantearon un proyecto en el que teníamos vía libre para utilizar lo que quisiéramos. Greenfield Project lo llaman.\nPregunté:\n- ¿Qué usamos? \nTodos al unísono: \n- Vue! Vue! Vue!\n\nMi pregunta era para implicar al equipo en el análisis del problema y buscar la solución adecuada, que facilitara el trabajo y la entrega a tiempo.\nPero mi sorpresa fue mayúscula cuando con un mínimo de información sobre el proyecto, todos pedían a Barrabás, en este caso Vuerrabás :P\nMenos mal que en este caso no hice como Poncio Pilato, aunque si me lleve un Soponcio Parrato :P\n\nEste es solo un claro ejemplo de a lo que nos conduce el mundo del desarrollo actual, del que me siento parte y responsable.\n\n# WebComponents\n\nY ya metidos en faena, quiero también reivindicar a los denostados, en algunos círculos, web-components estándar, incluidos en muchos frameworks, pero sin pertenecer a ninguno.\n\nY sobre todo quiero plantear mi disconformidad con el uso que se hace de ellos con el “Atomic Design”, es decir, crear componentes atómicos, que pueden usarse solos o como parte de un componente de orden superior, conocidos como “moléculas”. Y que estos últimos a la vez puedan conformar “organismos” de componentes…\n\nNo se. Me chirría. Siempre he visto los web-components como etiquetas HTML, como un &lt;UL&gt; o un &lt;TABLE&gt; o &lt;DIV&gt; solo que “haga más cosas”. Igual que crearon el tag &lt;VIDEO&gt;, que es realmente el concepto de un web-component aplicado: permite insertar vídeo en la web de manera sencilla, con su controlador del vídeo, la pantalla de vídeo, admitiendo diferentes formatos y fuentes…\n\nY veo bien web-components que aporten “cosas” que no hay. Un lector de QR. Un campo de formulario para votar con estrellas. Un reloj digital. Un calendario. Un menú. Hay mil ejemplos de necesidades.\n\n¿Pero es un componente un ente formado por un &lt;h1&gt;, un &lt;h2&gt; y un &lt;IMG&gt; donde además ninguno de los 3 elementos tiene que aparecer siempre, pudiendo incluso llegar a ser solamente uno de ellos…?\n\nEl argumento suele ser “es que se repite”, “es que así es flexible”, “es que si no ¿cómo lo hacemos?”\n\nPues puede ser un componente web, cierto. Pero también puede no serlo. Si usas un framework quizás no te quede más remedio. O si no te han enseñado a cómo hacerlo sin que lo sea.\n\nBajo mi punto de vista, si usas web-components y estás generando páginas estáticas, aunque se alimente el contenido de una base de datos, al fin y al cabo, ese ente de &lt;h1&gt;&lt;h2&gt;&lt;img&gt; es simplemente una plantilla HTML.\n\nY puedo tener plantillas con combinaciones de esos 3 elementos, si realmente se llaman a todas las combinaciones de los mismos, porque si no, emplear tiempo en tenerlo “por si acaso” es tontería. Ese es otro de los grandes problemas del mundo del desarrollo que da para otro post.\n\nVolviendo al problema planteado. Creo que siempre y cuando sean una simple presentación de tags HTML agrupados, sin ninguna funcionalidad, es una simple plantilla.\nSi tuviera funcionalidad, entonces sí podría tener sentido que fuera un web-component. O si tuviera un diseño especial, que pueda chocar con el diseño global y necesite encapsular dicho diseño, también podría ser un web-component.\n\nEs decir, creo que un web-component, la razón de crearlo es cuando:\n\n1. Se puede reutilizar.\n2. Tiene una presentación que no existe ya en un tag HTML\n3. Tiene una funcionalidad que le da entidad y sentido.\n4. Tiene una parte de su presentación\u002Fdiseño abstraído del entorno donde se use.\n\nSi no cumple alguno de esos puntos, debo analizar si realmente necesito diseñar un web-component o tengo alguna alternativa.\n\nY siguiendo esta premisa, por lo tanto para mi no tiene sentido un web-component no visual, que solo aporte funcionalidad, como a veces he visto los llamados “data managers”.\n\nPara mi eso es un tag HTML que ya existe. Se llama &lt;script&gt;. Creo una “librería” con la funcionalidad que necesito. El API que he convenido. Y todo el que lo necesite lo usa. No veo la necesidad de hacerlo mediante un web-component.\n\n# Comunicación entre web-components.\n\nOtra \"unpopular opinion\". Siempre se dice, yo de hecho lo he preguntado en alguna entrevista, ¿Cómo se comunican los componentes? Y quien se lo sabe, repite el mantra: “De padres a hijos mediante propiedades, de hijos a padres mediante eventos”\n\nBueno, desde el “Atomic Design” quizás ese mantra sí tiene sentido.\nPero si concibes los web-components cómo “tags” autónomos, que pueden convivir y estar anidados dentro de otros, pero independientes, la comunicación debería ser siempre mediante eventos. O mediante prospección.\n\nO sea, aunque puede haber dependencias entre web-components, como la hay en un &lt;table&gt; con un &lt;tr&gt; y este con un &lt;td&gt; o un &lt;ul&gt; con un &lt;li&gt;. Pero realmente puedes usarlos por separado, aunque su funcionamiento no sea el esperado o no sea correcto.\n\nSoy más partidario de un **“Phenotypic Design”** para los web-components. Es decir, diseñar los web-components basándonos en el conjunto de características visibles como resultado de la interacción entre su tipo y el medio.\n\nLos tags HTML están clasificados por su tipo: Fundación, Formato, Formulario, Marco, Imagen, Audio, Enlace, Lista, Tabla, Estilo, Meta información y Programa.\n¿Por qué no seguir esta clasificación y ampliarla para los web-components si es necesario? \n\nUsando el concepto de “parientes” he visto siempre que ineludiblemente terminamos acoplando componentes padres, madres, hijos, sobrinas, abuelas y tíos todos entre sí, como buena familia. Pero ese no es el fin de los web-components, ya que solemos perder re-utilización fuera de la “familia”, creando verdaderas “mafias”.\n\nUn web-component, por estar anidado dentro de otro no tiene porque crear una relación padre-hijo. Para mi tienen que crear una relación simbiótica. Y las hay de muchos tipos. Pueden ser un alga-hongo, creando un web-component de más valor. Árbol-ardilla, donde uno usa al otro para darle “cobijo”. \nCreo que aporta una visión más amplia, menos limitante, donde es más fácil de mantener la individualidad, y por tanto la re-utilización de web-components en diferentes entornos, aplicaciones o webs.\n \n\n# Indexabilidad de los web-components\n\nOtro tema que me ha preocupado siempre es que la encapsulación que hace el shadow DOM en los web-components que hace que su contenido no sea indexable y por tanto desaparece al darle a “ver código fuente de la página”, siendo invisible para los crawlers.\n\nPero esto creo que también es por un mal uso que le estamos dando a los web-components.\n\nSi tengo por ejemplo un web-component de un menú de navegación, que al final puede ser un tag &lt;nav&gt; al que le hemos dado una funcionalidad especial en base a unos requisitos, incluso diferente en diferentes resoluciones pantalla, y al que le hemos dado un diseño concreto.\n¿Por qué no utilizar el light-dom, es decir, el dom dentro del web-component, leer este en el ciclo de creación del mismo, y pintarlo conforme a los requisitos que necesitamos?\nEstaríamos dando el contenido al crawler y encapsulando maquetación, diseño y funcionalidad. ¡Voila!\n\nPorque otra aberración que veo bastante por ahí es pasar información a un web-component mediante un json ¡¡¡que insertamos como atributo!!! \n¿Por qué no generar esa información en el light-dom con HTML semántico, indexable y accesible y luego “darle forma” en el web-component?\n\nEs cierto que puede penalizar algo el tiempo de renderizado, pero no más si lo que tienes que leer es un json o una lista de elementos como atributo para pintarlos.\nY ademaś existen técnicas para poner un “loader” o añadir una animación de fade-in después del primer renderizado.\n\nPor otro lado, si metemos el contenido del web-component en el light-dom, en el remoto caso de que no funcionara javascript, incluso podríamos asegurarnos de que la página tuviera contenido ya que el light-dom se renderiza, aunque probablemente se verá como “HTML feo” al no cargar el CSS de los componentes y no tener CSS para esos elementos HTML del light-dom.\n\n\u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Fmanufosela\u002Fpen\u002FMWjrrEW\"\u003EEjemplo de componente nav-list\u003C\u002Fa\u003E \nEn el repo de git se puede ver la evolución según versiones.\n\n# Mis conclusiones\n\n* No nos enseñan a buscar soluciones a los problemas, sino a usar las soluciones que conocemos ante cualquier problema.\n* Crear un web-component cuando:\n  - Se puede reutilizar.\n  - Tenga una presentación que no existe ya en un tag HTML\n  - Tenga una funcionalidad que le da entidad y sentido.\n  - Tenga necesidad de abstraer presentación\u002Fdiseño del entorno donde se use.\n* Relación entre componentes simbiótica frente a la “familiar”\n* Comunicación entre componentes mediante eventos.\n* “Phenotypic Design” frente a “Atomic Design”\n* Utilizar el light-dom cuando sea posible, para insertar contenido al web-component y hacerlo indexable\n\nY si has leído hasta aquí ¡gracias! :)\nNos vemos por la comunidad.\n\n";b.user={name:"Mánu Fosela",username:f,twitter_username:f,github_username:a,website_url:"https:\u002F\u002Fmanufosela.es",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UG5-MTgH--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F386088\u002F0ef9f800-5725-466d-abee-a5734d5083d9.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7xb12G8r--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F386088\u002F0ef9f800-5725-466d-abee-a5734d5083d9.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Fmanufosela\u002Fdesarrollo-web-y-web-components-1j0g",29,"2020-12-29T01:04:19Z","manufosela")));
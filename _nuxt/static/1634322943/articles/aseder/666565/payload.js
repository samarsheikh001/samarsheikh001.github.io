__NUXT_JSONP__("/articles/aseder/666565", (function(a,b,c,d,e){d.type_of="article";d.id=666565;d.title="Updating Production data; Script checklist";d.description="A simple checklist when altering the production data";d.readable_publish_date="Apr 15";d.slug="updating-production-data-script-checklist-50jn";d.path="\u002Faseder\u002Fupdating-production-data-script-checklist-50jn";d.url=e;d.comments_count=b;d.public_reactions_count=b;d.collection_id=a;d.published_timestamp=c;d.positive_reactions_count=b;d.cover_image=a;d.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F666565.png";d.canonical_url=e;d.created_at="2021-04-15T03:26:06Z";d.edited_at=a;d.crossposted_at=a;d.published_at=c;d.last_comment_at=c;d.reading_time_minutes=3;d.tag_list="bugs, devops, software, qa";d.tags=["bugs","devops","software","qa"];d.body_html="\u003Cp\u003EBugs are inevitable if you write code bugs will come; We can't ensure 100% bug-free software; that's why we have QA cycles and steps before deploying to production. The nastiest bugs are the ones that need data altering after fixing; For example, you have a point of sale system, and a wrong tax calculation happened and stored in your DB, then you need to update the data after fixing the bug. This tax bug might be a simple one, but imagine one with workflows, and the data object needs to go through different stages before it's done. \u003Cbr\u003E\nIn this article, we will talk about a checklist that might help when such cases happen.\u003Cbr\u003E\nWhen you have such type of bugs, first of all, you need to assist it by answering the following question: \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EIs it blocking the customer?\u003C\u002Fli\u003E\n\u003Cli\u003EIs it reproducible? \u003C\u002Fli\u003E\n\u003Cli\u003EIs the fix determined? \u003C\u002Fli\u003E\n\u003Cli\u003EIs the damage known? \u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EYour primary focus should be unblocking the customer, even if that means you go and fix the data manually. Then you can reproduce the issue and stop it - this might happen before fixing it - the fix might be as simple as try-catch and log the error, now you should figure out the damage, work on a real fix and write a script to alter the data. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"script-checklist\" href=\"#script-checklist\"\u003E\n  \u003C\u002Fa\u003E\n  Script Checklist\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EEnsure you know what you will change\u003C\u002Fstrong\u003E, get the affected data, and\nprint some logs; Put the data and the results somewhere and\npreferably a file system, then email it.\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMake sure it is reversible\u003C\u002Fstrong\u003E; yes, your code effect must be reversible if something went south.\u003C\u002Fli\u003E\n\u003Cli\u003E \u003Cstrong\u003ETake a copy of the data\u003C\u002Fstrong\u003E, if possible, before altering it.\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EEnsure that the code you wrote is working\u003C\u002Fstrong\u003E, get help from some reviewers, run it in a different environment if possible.\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECalculate the estimated time for your script\u003C\u002Fstrong\u003E, and this is crucial for all parties (Engineering, Support, and the customers )\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EHave proper logs\u003C\u002Fstrong\u003E, for example( \u003Ccode\u003E[ScriptName][PRE]I am changing the Product with ID 3, from value X, to value Y ),  [ScriptName][POST][Success]Changing the Product with ID 3, from value X, to value Y ),  [ScriptName][POST][Failure]Changing the Product with ID 3, from value X, to value Y, due to REASON and TRACE\u003C\u002Fcode\u003E ).\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EHave a progress indicator\u003C\u002Fstrong\u003E, such as  \u003Ccode\u003E[ScriptName][Progress] 10% 9\u002F100 are done successfully, 1\u002F100 failed Running for 3 minutes and 9 seconds ETA is 30 Minutes\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EHave a kill switch\u003C\u002Fstrong\u003E. You might add a simple boolean in your DB and read it before each iteration. In software, nothing guaranteed \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EEmail the results once its done\u003C\u002Fstrong\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMake the code very flexible\u003C\u002Fstrong\u003E so you can run it only on a small set of data as a start\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMake sure the audit log is clean and clear\u003C\u002Fstrong\u003E. You don't want to confuse your customers with unfamiliar names on the audit log.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ESecure the script accessor\u003C\u002Fstrong\u003E. If you run it over HTTP or other, you must secure it, avoid hacking, and, most importantly, someone running it by mistake. Use an encoder for the endpoints and simple passwords such as \u003Ccode\u003E\"IKnowWhatIAmRunning,TheTaxUpdateScript\",\u003C\u002Fcode\u003E or add expiry date on the code.\u003C\u002Fli\u003E\n\u003Cli\u003EThe script code is a code, make it reusable and leave it well documented. \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAt some point, you might need to make your script framework or just a nice Abstract Class and implement the logic of the script. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EConclusion\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe software will have bugs, and hopefully, they are the friendly type. In case you needed something to alter the data, make sure it is reversible, keep it visible to everyone in terms of updates, and make sure it is secure and not easy to run. \u003C\u002Fp\u003E\n\n\u003Cp\u003EI hope you don't ever need to do this, but if you do, I hope it helps.\u003Cbr\u003E\nWhat other points can we add to this list?\u003C\u002Fp\u003E\n\n";d.body_markdown="---\ntitle: Updating Production data; Script checklist\npublished: true\ndescription: A simple checklist when altering the production data\ntags: bugs, DevOps, Software, QA\n---\n\nBugs are inevitable if you write code bugs will come; We can't ensure 100% bug-free software; that's why we have QA cycles and steps before deploying to production. The nastiest bugs are the ones that need data altering after fixing; For example, you have a point of sale system, and a wrong tax calculation happened and stored in your DB, then you need to update the data after fixing the bug. This tax bug might be a simple one, but imagine one with workflows, and the data object needs to go through different stages before it's done. \nIn this article, we will talk about a checklist that might help when such cases happen.\nWhen you have such type of bugs, first of all, you need to assist it by answering the following question: \n\n 1. Is it blocking the customer?\n 2. Is it reproducible? \n 3. Is the fix determined? \n 4. Is the damage known? \n \nYour primary focus should be unblocking the customer, even if that means you go and fix the data manually. Then you can reproduce the issue and stop it - this might happen before fixing it - the fix might be as simple as try-catch and log the error, now you should figure out the damage, work on a real fix and write a script to alter the data. \n\n## Script Checklist\n\n \n\n- **Ensure you know what you will change**, get the affected data, and  \n   print some logs; Put the data and the results somewhere and   \n   preferably a file system, then email it.  \n- **Make sure it is reversible**; yes, your code effect must be reversible if something went south.\n-  **Take a copy of the data**, if possible, before altering it.  \n- **Ensure that the code you wrote is working**, get help from some reviewers, run it in a different environment if possible.  \n- **Calculate the estimated time for your script**, and this is crucial for all parties (Engineering, Support, and the customers )\n- **Have proper logs**, for example( `  [ScriptName][PRE]I am changing the Product with ID 3, from value X, to value Y ),  [ScriptName][POST][Success]Changing the Product with ID 3, from value X, to value Y ),  [ScriptName][POST][Failure]Changing the Product with ID 3, from value X, to value Y, due to REASON and TRACE` ).\n- **Have a progress indicator**, such as  `[ScriptName][Progress] 10% 9\u002F100 are done successfully, 1\u002F100 failed Running for 3 minutes and 9 seconds ETA is 30 Minutes`\n- **Have a kill switch**. You might add a simple boolean in your DB and read it before each iteration. In software, nothing guaranteed \n- **Email the results once its done** \n- **Make the code very flexible** so you can run it only on a small set of data as a start\n- **Make sure the audit log is clean and clear**. You don't want to confuse your customers with unfamiliar names on the audit log.\n- **Secure the script accessor**. If you run it over HTTP or other, you must secure it, avoid hacking, and, most importantly, someone running it by mistake. Use an encoder for the endpoints and simple passwords such as `\"IKnowWhatIAmRunning,TheTaxUpdateScript\",` or add expiry date on the code.\n- The script code is a code, make it reusable and leave it well documented. \n\nAt some point, you might need to make your script framework or just a nice Abstract Class and implement the logic of the script. \n\n**Conclusion**\nThe software will have bugs, and hopefully, they are the friendly type. In case you needed something to alter the data, make sure it is reversible, keep it visible to everyone in terms of updates, and make sure it is secure and not easy to run. \n\nI hope you don't ever need to do this, but if you do, I hope it helps.\nWhat other points can we add to this list?\n";d.user={name:"Ahmad Seder",username:"aseder",twitter_username:"asedzz",github_username:a,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CHHKZ0U8--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F69036\u002Fc420db12-4ca5-4e81-afae-ae5d5297663f.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--eVOFfJyn--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F69036\u002Fc420db12-4ca5-4e81-afae-ae5d5297663f.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:d}},mutations:[["SET_CURRENT_ARTICLE",d]]}}(null,0,"2021-04-15T03:29:25Z",{},"https:\u002F\u002Fdev.to\u002Faseder\u002Fupdating-production-data-script-checklist-50jn")));
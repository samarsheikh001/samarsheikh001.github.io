window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:771299,title:"Returning to Liquor Cabinet: Fixing A Bug",description:"So this last week I decided to deploy another old app of mine. If you read my post Searching for Ways...",readable_publish_date:"Jul 25",slug:"returning-to-liquor-cabinet-fixing-a-bug-1gam",path:"\u002Fmaxjacobzander\u002Freturning-to-liquor-cabinet-fixing-a-bug-1gam",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--sHGQWjpR--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F9hykez3nqvqjt39yidxz.jpeg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WCNOQeDp--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F9hykez3nqvqjt39yidxz.jpeg",canonical_url:c,created_at:"2021-07-25T18:58:17Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"react, fetching, bugs, devjournal",tags:["react","fetching","bugs","devjournal"],body_html:"\u003Cp\u003ESo this last week I decided to deploy another old app of mine. If you read my post \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fsearching-for-ways-to-search-two-methods-of-performing-a-search-with-a-rails-back-end-and-a-react-redux-front-end-45f0\"\u003ESearching for Ways to Search: Two Methods Of Performing A Search With A Rails Back-End And A React-Redux Front-End\u003C\u002Fa\u003E, you may recall my app \"Liquor Cabinet\". \"Liquor Cabinet\" is an app I built at the end of my time at Flatiron School with a React with Redux front-end and a Ruby on Rails back-end. I actually haven't altered all that much of it since then because I liked the idea of having something on my Github profile that can show the growth I've experienced since graduating. (\"Liquor Cabinet\" is built with a lot of class components, very few hooks, etc.)\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnyway, I decided to revisit the app this week to deploy it, so converted the database to Postgres and popped that up onto Heroku, updated the fetches on the front-end to reflect the new URL endpoint, and put that up onto Netlify (if you want to learn more about that process, you can read \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fdeploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg\"\u003Ethis post here\u003C\u002Fa\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003EFast-forward a couple of days and I'm talking to a couple of folks at a super cool company and one of them mentions to me that he is trying to use \"Liquor Cabinet\" but it isn't working. My first instinct was that it was actually a Heroku issue. \"Liquor Cabinet\" uses \"free dynos\" and, as I mentioned in my post about \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fdeploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg\"\u003Edeploying a full-stack app\u003C\u002Fa\u003E, if the app uses \"free dynos\" and no server requests happen for 30 minutes, the server will stop running. If someone tries to make a request to the server, it will wake itself back up and start running again, but it does take a second. So I told him that he should wait a second and try again. Still no dice. I asked what he was searching for and tried it on my end and it seemed to work fine. But then I realized something. I was capitalizing my search. Could it be a case-sensitivity thing? How could I have missed that? I asked if he was searching with a capitalized first letter or not. He said that he wasn't and I asked him to try it capitalized. Bingo â€” it worked. I thanked him for exposing the bug and as soon as I got off the call, I hopped on VSCode to fix it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMy first thought was to go into the \u003Ccode\u003Edrinks_controller.rb\u003C\u002Fcode\u003E file and look at the search method:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E  def search\n    @drinks = Drink.where(\"main_liquor LIKE ?\", \"%\" + params[:q] + \"%\")\n    render json: @drinks\n  end\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EI thought that maybe if I tacked some methods on to \u003Ccode\u003Eparams[:q]\u003C\u002Fcode\u003E I may be on to something. I booted up my rails server...Not quite.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI took another moment to think about how the data was going back and forth between the front-end and the back-end. I looked at my \u003Ccode\u003ESearch.js\u003C\u002Fcode\u003E and how I was handling the submission of the form. Turning to my \u003Ccode\u003Eactions.js\u003C\u002Fcode\u003E, I looked at how my search fetch was happening:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eexport const searchDrinks = liquor =&gt; {\n\n    return(dispatch) =&gt; {\n        return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application\u002Fjson'\n            },\n            body: JSON.stringify({liquor})\n        })\n        .then(resp =&gt; resp.json())\n        .then(liquor =&gt; {\n            console.log(\"liquor\", liquor)\n            dispatch({ type: \"FIND_DRINK\", payload: liquor })\n        })\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EEssentially, what we have going on here is that we are taking the input from the search bar and calling that \u003Ccode\u003Eliquor\u003C\u002Fcode\u003E. We're then sending a POST request (used to send data, rather than say a GET request which is used to request data) to the back-end database, interpolating in the searched liquor to the end of the URL endpoint. Since data can only travel as a string, we're taking the JSON at the endpoint and turning it into a string and then, once it makes it back to the front-end, we're turning that string back into JSON and applying the reducer to update state. Cool.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnyway, as I looked back on that, suddenly, the solution was obvious! Here's an example of what URL of a successful search on the back-end looks like: \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=Whiskey\u003C\u002Fcode\u003E. Can you spot what we're about to do?\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe solution laid in altering what's being interpolated into the fetch request. Since what we're interpolating is exactly what the user is searching for, we just have to alter it to fit the format of the database (in this case, capitalizing the first letter). So how do we do that?\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo let's say our searched \u003Ccode\u003Eliquor\u003C\u002Fcode\u003E is whiskey. Since our searched term is a string, we need to use string methods. If we were to call \u003Ccode\u003E.toUpperCase()\u003C\u002Fcode\u003E on \u003Ccode\u003Eliquor\u003C\u002Fcode\u003E, we would get \u003Ccode\u003EWHISKEY\u003C\u002Fcode\u003E. Since we only need the first letter capitalized, we need to separate out that letter. We can use \u003Ccode\u003E.charAt()\u003C\u002Fcode\u003E to return out just the character we need and chain on \u003Ccode\u003EtoUpperCase()\u003C\u002Fcode\u003E to that character. If we then call the string method \u003Ccode\u003E.slice()\u003C\u002Fcode\u003E on \u003Ccode\u003Eliquor\u003C\u002Fcode\u003E and only provide a starting index, we can return the rest of the letters as a new string. Concatenating those two returned values, we can get the whole word with just the first letter capitalized:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eliquor.charAt(0).toUpperCase() + liquor.slice(1)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EPopping that into the fetch looks like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor.charAt(0).toUpperCase() + liquor.slice(1)}`\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAnd that worked! Cool. But then I was thinking about other ways that this solution could be broken and realized that, while I was successfully capitalizing the first letter on the entered search term, I wasn't accounting for someone searching with caps lock on or someone else searching with rAndOMizeD cApITal LetTeRS. Testing that out in the app, my suspicions were confirmed.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHaving just fixed the first issue, this was a \u003Cem\u003Esuper\u003C\u002Fem\u003E simple fix. I went back into \u003Ccode\u003Eactions.js\u003C\u002Fcode\u003E and called \u003Ccode\u003E.toLowerCase()\u003C\u002Fcode\u003E on the sliced out characters. This will take whatever the user inputs and make it lowercased, also fitting the necessary search format.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAll together, the fetch now looked like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor.charAt(0).toUpperCase() + liquor.slice(1).toLowerCase()}`\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eand \u003Cem\u003Ethat\u003C\u002Fem\u003E both worked \u003Cem\u003Eand\u003C\u002Fem\u003E accounted for any weird capitalization. Testing it out in the app, we were looking good and successful!\u003C\u002Fp\u003E\n\n\u003Cp\u003EI'm super glad I had this experience and it just goes to show how important it is to have other eyes on your work! If you would like to check out this app, you can do so \u003Ca href=\"https:\u002F\u002Fliquor-cabinet.netlify.app\u002F\"\u003Ehere\u003C\u002Fa\u003E!\u003C\u002Fp\u003E\n\n",body_markdown:"So this last week I decided to deploy another old app of mine. If you read my post [Searching for Ways to Search: Two Methods Of Performing A Search With A Rails Back-End And A React-Redux Front-End](https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fsearching-for-ways-to-search-two-methods-of-performing-a-search-with-a-rails-back-end-and-a-react-redux-front-end-45f0), you may recall my app \"Liquor Cabinet\". \"Liquor Cabinet\" is an app I built at the end of my time at Flatiron School with a React with Redux front-end and a Ruby on Rails back-end. I actually haven't altered all that much of it since then because I liked the idea of having something on my Github profile that can show the growth I've experienced since graduating. (\"Liquor Cabinet\" is built with a lot of class components, very few hooks, etc.)\n\nAnyway, I decided to revisit the app this week to deploy it, so converted the database to Postgres and popped that up onto Heroku, updated the fetches on the front-end to reflect the new URL endpoint, and put that up onto Netlify (if you want to learn more about that process, you can read [this post here](https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fdeploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg)).\n\nFast-forward a couple of days and I'm talking to a couple of folks at a super cool company and one of them mentions to me that he is trying to use \"Liquor Cabinet\" but it isn't working. My first instinct was that it was actually a Heroku issue. \"Liquor Cabinet\" uses \"free dynos\" and, as I mentioned in my post about [deploying a full-stack app](https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Fdeploying-a-full-stack-app-for-the-first-time-vanilla-javascript-rails-api-2ocg), if the app uses \"free dynos\" and no server requests happen for 30 minutes, the server will stop running. If someone tries to make a request to the server, it will wake itself back up and start running again, but it does take a second. So I told him that he should wait a second and try again. Still no dice. I asked what he was searching for and tried it on my end and it seemed to work fine. But then I realized something. I was capitalizing my search. Could it be a case-sensitivity thing? How could I have missed that? I asked if he was searching with a capitalized first letter or not. He said that he wasn't and I asked him to try it capitalized. Bingo â€” it worked. I thanked him for exposing the bug and as soon as I got off the call, I hopped on VSCode to fix it.\n\nMy first thought was to go into the `drinks_controller.rb` file and look at the search method:\n```\n  def search\n    @drinks = Drink.where(\"main_liquor LIKE ?\", \"%\" + params[:q] + \"%\")\n    render json: @drinks\n  end\n```\n\nI thought that maybe if I tacked some methods on to `params[:q]` I may be on to something. I booted up my rails server...Not quite.\n\nI took another moment to think about how the data was going back and forth between the front-end and the back-end. I looked at my `Search.js` and how I was handling the submission of the form. Turning to my `actions.js`, I looked at how my search fetch was happening:\n```\nexport const searchDrinks = liquor =\u003E {\n\n    return(dispatch) =\u003E {\n        return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application\u002Fjson'\n            },\n            body: JSON.stringify({liquor})\n        })\n        .then(resp =\u003E resp.json())\n        .then(liquor =\u003E {\n            console.log(\"liquor\", liquor)\n            dispatch({ type: \"FIND_DRINK\", payload: liquor })\n        })\n    }\n}\n```\n\nEssentially, what we have going on here is that we are taking the input from the search bar and calling that `liquor`. We're then sending a POST request (used to send data, rather than say a GET request which is used to request data) to the back-end database, interpolating in the searched liquor to the end of the URL endpoint. Since data can only travel as a string, we're taking the JSON at the endpoint and turning it into a string and then, once it makes it back to the front-end, we're turning that string back into JSON and applying the reducer to update state. Cool.\n\nAnyway, as I looked back on that, suddenly, the solution was obvious! Here's an example of what URL of a successful search on the back-end looks like: `http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=Whiskey`. Can you spot what we're about to do?\n\nThe solution laid in altering what's being interpolated into the fetch request. Since what we're interpolating is exactly what the user is searching for, we just have to alter it to fit the format of the database (in this case, capitalizing the first letter). So how do we do that?\n\nSo let's say our searched `liquor` is whiskey. Since our searched term is a string, we need to use string methods. If we were to call `.toUpperCase()` on `liquor`, we would get `WHISKEY`. Since we only need the first letter capitalized, we need to separate out that letter. We can use `.charAt()` to return out just the character we need and chain on `toUpperCase()` to that character. If we then call the string method `.slice()` on `liquor` and only provide a starting index, we can return the rest of the letters as a new string. Concatenating those two returned values, we can get the whole word with just the first letter capitalized:\n```\nliquor.charAt(0).toUpperCase() + liquor.slice(1)\n```\n\nPopping that into the fetch looks like this:\n```\n return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor.charAt(0).toUpperCase() + liquor.slice(1)}`\n```\nAnd that worked! Cool. But then I was thinking about other ways that this solution could be broken and realized that, while I was successfully capitalizing the first letter on the entered search term, I wasn't accounting for someone searching with caps lock on or someone else searching with rAndOMizeD cApITal LetTeRS. Testing that out in the app, my suspicions were confirmed.\n\nHaving just fixed the first issue, this was a *super* simple fix. I went back into `actions.js` and called `.toLowerCase()` on the sliced out characters. This will take whatever the user inputs and make it lowercased, also fitting the necessary search format.\n\nAll together, the fetch now looked like this:\n```\n return fetch(`http:\u002F\u002Flocalhost:3001\u002Fapi\u002Fv1\u002Fsearch?q=${liquor.charAt(0).toUpperCase() + liquor.slice(1).toLowerCase()}`\n```\nand *that* both worked *and* accounted for any weird capitalization. Testing it out in the app, we were looking good and successful!\n\nI'm super glad I had this experience and it just goes to show how important it is to have other eyes on your work! If you would like to check out this app, you can do so [here](https:\u002F\u002Fliquor-cabinet.netlify.app\u002F)!\n",user:{name:"Max Zander",username:e,twitter_username:a,github_username:e,website_url:"https:\u002F\u002Fmaxjacobzander.netlify.app\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--B9dVSqkr--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F605444\u002F82008de3-6f25-44fb-bb52-327b0fa78386.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--qkCVJh6I--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F605444\u002F82008de3-6f25-44fb-bb52-327b0fa78386.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmaxjacobzander\u002F771299",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-07-25T20:33:33Z","https:\u002F\u002Fdev.to\u002Fmaxjacobzander\u002Freturning-to-liquor-cabinet-fixing-a-bug-1gam",3,"maxjacobzander"));
__NUXT_JSONP__("/articles/willnode/742878", (function(a,b,c,d,e){d.type_of="article";d.id=742878;d.title="5 Basic Things you need to know about managing a Linux server";d.description="As a web developer, you may come up with the situation of needing to set up a Virtual Machine to host...";d.readable_publish_date="Jun 30";d.slug="5-basic-things-you-need-to-know-about-managing-a-linux-server-12fh";d.path="\u002Fwillnode\u002F5-basic-things-you-need-to-know-about-managing-a-linux-server-12fh";d.url="https:\u002F\u002Fdev.to\u002Fwillnode\u002F5-basic-things-you-need-to-know-about-managing-a-linux-server-12fh";d.comments_count=0;d.public_reactions_count=e;d.collection_id=a;d.published_timestamp=b;d.positive_reactions_count=e;d.cover_image=a;d.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F742878.png";d.canonical_url="https:\u002F\u002Fblog.wellosoft.net\u002F5-basic-things-you-need-to-know-about-managing-a-linux-server";d.created_at="2021-06-29T13:33:52Z";d.edited_at="2021-08-23T15:49:21Z";d.crossposted_at=a;d.published_at=b;d.last_comment_at=b;d.reading_time_minutes=9;d.tag_list="linux, server, maintenance";d.tags=["linux","server","maintenance"];d.body_html="\u003Cp\u003EAs a web developer, you may come up with the situation of needing to set up a Virtual Machine to host your website online. While it's great that we have a variety of managed cloud services to lift this complexity for us, it's not a bad thing if we want to learn about some basic knowledge of setting up your own server. In fact, I come across this situation, and having this kind of knowledge is essential to me, especially when running a small project all by yourself or run with a tight budget.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWithout further ado, let's start:\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"1-use-a-web-hosting-control-panel\" href=\"#1-use-a-web-hosting-control-panel\"\u003E\n  \u003C\u002Fa\u003E\n  1. Use a web hosting control panel\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is true, especially if you don't familiar with the Linux tools or come from a Windows background. There's a lot of setup and maintenance hurdles that come when you start to manage your own server. And definitely, you don't want to memorize all the things using only the terminal! So to lift this up, we need to install this piece of software.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhile there are some popular options like cPanel or Plesk, it comes with string (price) attached. So we need to use the free one, and \u003Ca href=\"https:\u002F\u002Fwww.virtualmin.com\u002F\"\u003EVirtualmin\u003C\u002Fa\u003E, to me, is just perfect.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Fwww.virtualmin.com\u002Fdocumentation\u002Finstallation\u002Fautomated\"\u003Einstallation step\u003C\u002Fa\u003E is easy too. I won't cover them all here but all it needs to do is run this command (as root):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Ewget http:\u002F\u002Fsoftware.virtualmin.com\u002Fgpl\u002Fscripts\u002Finstall.sh\n\u003Cspan class=\"nb\"\u003Echmod \u003C\u002Fspan\u003E0700 .\u002Finstall.sh\nsh .\u002Finstall.sh \u003Cspan class=\"nt\"\u003E--bundle\u003C\u002Fspan\u003E LEMP\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EDo you see that? I put \u003Ccode\u003E--bundle LEMP\u003C\u002Fcode\u003E because I prefer to install Nginx over Apache. Whatever the choice is up to you but overall Nginx is way faster than Apache because of its simple configuration and event-driven, and you need those (the webserver) anyway to let it handle the heavy lifting of managing your app processes. \u003C\u002Fp\u003E\n\n\u003Cp\u003EI'll discuss these later but one thing you need to know is installing Virtualmin or any of these \u003Cstrong\u003Ewill destroy any existing setup on your server\u003C\u002Fstrong\u003E so only install it when your VM or server is a fresh install.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut then, what happens after the installation? Head to \u003Ccode\u003Ehttps:\u002F\u002F&lt;Your IP address&gt;:10000\u003C\u002Fcode\u003E to open Webmin portal (yes, Virtualmin is part of Webmin). \u003C\u002Fp\u003E\n\n\u003Cp\u003EYou may encounter some SSL issues but skip it, it's fine. Login with root account and password that \u003Ca href=\"https:\u002F\u002Fwww.virtualmin.com\u002Fdocumentation\u002Finstallation\u002Fautomated#toc-setting-a-root-password-KTINPhGW\"\u003Eyou've set up\u003C\u002Fa\u003E, then follow the initial setup and create a new domain. Voila, you're done! No need to learn the hassle of creating a non-root user in a terminal and tries to synchronize everything overnight!\u003C\u002Fp\u003E\n\n\u003Cp\u003ESounds good? Let's continue.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"2-know-how-to-run-your-app-properly\" href=\"#2-know-how-to-run-your-app-properly\"\u003E\n  \u003C\u002Fa\u003E\n  2. Know how to run your app properly\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EChances are you already know how to start your own local server. You may do the same thing on your VM but it will be a bad, bad idea. For an online server that needs to run 24 hours 7 days a week, you need some sort of proxy that protects your app processes from randomly crashing due to fatal crashes or high flood of traffic, and this proxy is what Nginx (or Apache) really does. What these proxies really do is they're run the actual HTTP(S) port on 80 and 443 and forward any incoming traffic to a local port or socket which your app really listens to. Web proxies also really good at dividing traffic based on domains (like domain A goes to this app then domain B goes to that app) and reporting or logging crashes of your app. Web proxies are just that awesome and you need to understand how to configure them properly, even though Virtualmin will already do the heavy lifting for you.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter the installation of Nginx that comes from Virtualmin, you might be surprised that, it already comes with PHP support by default, like the usual way web hosting does. You can see how NginX config on a specific domain looks like:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eserver {\n    server_name example.com;\n    listen 1.2.3.4;\n    listen 1.2.3.4:443 ssl;\n    root \u002Fhome\u002Fusername\u002Fpublic_html;\n    index index.html index.htm index.php;\n    access_log \u002Fvar\u002Flog\u002Fvirtualmin\u002Fexample.com_access_log;\n    error_log \u002Fvar\u002Flog\u002Fvirtualmin\u002Fexample.com_error_log;\n    location ~ \\.php(\u002F|$) {\n        try_files $uri =404;\n        fastcgi_pass localhost:8001;\n    }   \n    ssl_certificate \u002Fhome\u002Fusername\u002Fssl.combined;\n    ssl_certificate_key \u002Fhome\u002Fusername\u002Fssl.key;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYou can see that it has the domain you want to listen to \u003Ccode\u003Eexample\u003C\u002Fcode\u003E, the server IP to listen with \u003Ccode\u003E1.2.3.4\u003C\u002Fcode\u003E, where the base directory is \u003Ccode\u003E\u002Fhome\u002Fusername\u002Fpublic_html\u003C\u002Fcode\u003E and so on. What essential in NginX is that by default it only serves as a static web server. To make most of the features it gives you need to understand additional configs, like the \u003Ccode\u003Efastcgi_pass\u003C\u002Fcode\u003E to enable dynamic processing on \u003Ccode\u003E.php\u003C\u002Fcode\u003E files.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPHP is great, but not for all of us. What about running Node.js or Python apps? You might be tempted to use \u003Ccode\u003Eproxy_pass\u003C\u002Fcode\u003E but it won't handle the app startup and crashes for us. Luckily we have a better option: \u003Ca href=\"https:\u002F\u002Fwww.phusionpassenger.com\u002F\"\u003EPhusion Passenger\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat is that? That is the app server, which able to manage and automatically run Node.JS, Python, Ruby, well, all kinds of server apps you might need to run in your server, and it has an awesome integration with Nginx. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter you follow \u003Ca href=\"https:\u002F\u002Fwww.phusionpassenger.com\u002Fdocs\u002Ftutorials\u002Finstallation\u002Fnode\u002F\"\u003Ethe installation step\u003C\u002Fa\u003E, all you need to do is add these options in \u003Ca href=\"http:\u002F\u002Fnginx.org\u002Fen\u002Fdocs\u002Fbeginners_guide.html\"\u003ENginX config\u003C\u002Fa\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    root \u002Fhome\u002Fusername\u002Fpublic_html\u002Fpublic;\n    passenger_enabled on;\n    # for easier debugging!\n    passenger_friendly_error_pages on;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIt will magically find any \u003Ca href=\"https:\u002F\u002Fwww.phusionpassenger.com\u002Flibrary\u002Fconfig\u002Fnginx\u002Freference\u002F#passenger_startup_file\"\u003Erelevant startup file\u003C\u002Fa\u003E (like \u003Ccode\u003Eapp.js\u003C\u002Fcode\u003E or \u003Ccode\u003Epassenger_wsgi.py\u003C\u002Fcode\u003E) in the parent root directory (\u003Ccode\u003Epublic_html\u003C\u002Fcode\u003E) and boot the relevant process (of course, you need to already do have Node.js or whatever programming language you want to run with and already installing \u003Ccode\u003Enode_modules\u003C\u002Fcode\u003E or whatever code dependencies your app need beforehand).\u003C\u002Fp\u003E\n\n\u003Cp\u003ECan you run your app now? Great. Let's continue.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"3-overcoming-dns-and-ssl-problems\" href=\"#3-overcoming-dns-and-ssl-problems\"\u003E\n  \u003C\u002Fa\u003E\n  3. Overcoming DNS (and SSL) problems\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYour app runs on an IP public address now. Great! But nobody (even Google) wants to remember your IP address. You need to buy a domain yourself. I won't point out what's to recommend on this one so go buy a domain from whatever web hosting service you're already familiar with. But what I need to tell you is that after you buy a domain, you need to point out that domain to your server's IP address. This is done under \"DNS Management\" and in there, you can insert your server IP address using A record (and AAAA if care about IPv6), and that's it! \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut wait. There's more...\u003C\u002Fp\u003E\n\n\u003Cp\u003EDNS caches everything under the TTL (Time to Live), and by default for most services, it's set for about 4 hours (14400). You certainly don't want to wait 4 hours to just be able to see your new shiny website, right?\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhile you can just bypass DNS using \u003Ca href=\"https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman5\u002Fhosts.5.html\"\u003Ehosts file\u003C\u002Fa\u003E, it's much better if you can go to \u003Ca href=\"https:\u002F\u002Fdns.google\u002F\"\u003EGoogle DNS resolver\u003C\u002Fa\u003E and see if Google itself picks up your new domain. It usually works for the first time without flushing their cache. (if it doesn't work, well something may wrong with your registrar?!).\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter you check it, if Google DNS resolver sees your IP address now but your device still won't pick up it, you can set your device DNS resolver to 8.8.8.8 and 8.8.4.4 (the \u003Ca href=\"https:\u002F\u002Fdevelopers.google.com\u002Fspeed\u002Fpublic-dns\"\u003EGoogle Public DNS\u003C\u002Fa\u003E) and after that, it will certainly work. Yay!\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut wait. There's more (again!)...\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can access your site using http:\u002F\u002F but not https:\u002F\u002F, right? HTTPS is very important nowadays so you can't ignore it. But then, to do that, you need to sign your SSL certificates. I won't go into detail about why it works like that but what I need to tell you is that there's one and only kind of SSL agency there, it's called \u003Ca href=\"https:\u002F\u002Fletsencrypt.org\u002F\"\u003ELet's Encrypt\u003C\u002Fa\u003E and it will create a signed SSL certificate for your domain for free. How?\u003C\u002Fp\u003E\n\n\u003Cp\u003EAssuming you already have a correct configuration in your Nginx, with Virtualmin you can go to \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=bUe9dJOnUV0\"\u003ESSL certificate panel\u003C\u002Fa\u003E and send a request to Let's encrypt in a few clicks. Sound simple? Yes, but not just that. You can also make Virtualmin renew your SSL certificate automatically. Awesome, isn't it?\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow your website should be online and can start gaining users. Congrats!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"4-understand-memory-management-and-when-to-panic\" href=\"#4-understand-memory-management-and-when-to-panic\"\u003E\n  \u003C\u002Fa\u003E\n  4. Understand memory management (and when to panic)\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIt's a regular evening and your server has been running for few weeks. Yet you look at the Virtualmin memory gauges of your server and start wondering. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WxMKtEWY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F1gy9gjpdsm44l1tgp0qf.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WxMKtEWY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F1gy9gjpdsm44l1tgp0qf.png\" alt=\"image\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EUsually, this will come in two situations:\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"situation-a-your-server-is-wasting-resources\" href=\"#situation-a-your-server-is-wasting-resources\"\u003E\n  \u003C\u002Fa\u003E\n  Situation A: Your server is wasting resources\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EYou notice that your server only uses around 40% of memory so you think if you could cut the monthly bill in half by reducing its computing memory. Before it happens, I will tell you: don't do that! unless you're running into a budget problem.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEven though it seems your system is wasting the excess memory, it's actually not. Linux will always \u003Ca href=\"https:\u002F\u002Fwww.linuxatemyram.com\u002F\"\u003Euse most of your RAM\u003C\u002Fa\u003E because of RAM cache. And you might wonder, what's the deal with it?\u003C\u002Fp\u003E\n\n\u003Cp\u003EWell, most operations on Linux rely heavily on files. The kernel is smart, when a process is done reading or writing a file, it's actually kept temporarily as RAM cache so when another process reads it the next time, it won't wait for the storage disk to actually perform the read, dramatically improving the overall system performance.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI won't tell more details in this, but that's the whole point. Cutting your free memory will severely decrease the overall performance. Don't reduce it unless you have a problem with budgeting.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"situation-b-your-server-is-heating\" href=\"#situation-b-your-server-is-heating\"\u003E\n  \u003C\u002Fa\u003E\n  Situation B: Your server is heating\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ESome users tell you slower loading times and some error pages show up significantly. How would you confirm what goes wrong? Firstly, you need to check the load. If the load metric is going like tens, it means your server can't keep up the traffic. Then you need to check your memory consumption by going to \u003Ca href=\"https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman1\u002Ffree.1.html\"\u003Efree -m\u003C\u002Fa\u003E. The result is probably like this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E              total        used        free      shared  buff\u002Fcache   available\nMem:           1817        1327          67          72         421         268\nSwap:             0           0           0\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you have low memory available, it means your server struggling to find more memory. You can increase the computation memory right now but it would be a bad idea if you actually turn off your VM during high traffic, so what you can do is \u003Ca href=\"https:\u002F\u002Fwww.digitalocean.com\u002Fcommunity\u002Ftutorials\u002Fhow-to-add-swap-space-on-ubuntu-16-04\"\u003Ecreate a swap file\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA swap file is basically an additional memory attached to a storage disk. You might think it's a good idea to put a large swap file and suddenly your memory problem would go, but no. Because too much swapping could render the system unstable too.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA better way to think about a swapfile is like a band-aid. During temporary traffic surges, Linux can put non-essential memory processes to swapfile so the actual memory can better spend on essential programs and frequently used RAM caches. For this to work, I recommend a swapfile about 1 or 2 GB size and \u003Ca href=\"https:\u002F\u002Flinuxhint.com\u002Funderstanding_vm_swappiness\u002F\"\u003Eswappiness\u003C\u002Fa\u003E around 30. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBut if you have already done these but still has low memory availability, yeah it's time to add more actual memory.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI talked frequently about memory. While it's the most likely problem during high load, sometimes there's another factor too, like a rogue process running in the background or maybe there's just not enough core counts in your VM. A look at \u003Ca href=\"https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman1\u002Ftop.1.html\"\u003Etop\u003C\u002Fa\u003E can help you a lot to diagnose this.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"5-protect-your-server-with-basic-security-and-backup-knowledge\" href=\"#5-protect-your-server-with-basic-security-and-backup-knowledge\"\u003E\n  \u003C\u002Fa\u003E\n  5. Protect your server with basic security and backup knowledge\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThis is the final piece of advice that I need to tell you, as security and backups are so easy to overlook yet most people don't realize how important it is until it's too late.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGood basic security of any VM serving the internet is to only allow specific inbound ports like SSH, HTTP(S), and any related port you might use. Most cloud providers already have a firewall config so it's good to use them if available. Or if it isn't you can use \u003Ca href=\"https:\u002F\u002Ffirewalld.org\u002F\"\u003Efirewalld\u003C\u002Fa\u003E or \u003Ca href=\"https:\u002F\u002Flinux.die.net\u002Fman\u002F8\u002Fiptables\"\u003Eiptables\u003C\u002Fa\u003E to safeguard your traffic at kernel level. If you're like me who uses Webmin, you might want to change the port to something else as leaving the default 10000 probably would make it vulnerable to botnets that swarming the internet.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you have some memory and computation to spare, it might be a good idea to install software that prevents brute force attacks like \u003Ca href=\"https:\u002F\u002Fwww.fail2ban.org\u002F\"\u003EFail2Ban\u003C\u002Fa\u003E, or maybe just don't enable password-based login in SSH and disable database remote control when you don't need it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd lastly, do a frequent backup, as you probably don't aware of how things can be messed up certainly in the future. The good news is most cloud providers have a way to make a \"snapshot\" of your VM and allow you to schedule it weekly. It probably cost you an additional pennies but it totally worth it.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"closing\" href=\"#closing\"\u003E\n  \u003C\u002Fa\u003E\n  Closing\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThat is a lot of topics I discover. You might think, where do I get all those knowledge? Well, I have some background story that you might want to read, go \u003Ca href=\"https:\u002F\u002Fdev.to\u002Fwillnode\u002Fi-generally-don-t-satisfied-with-all-web-hosting-out-there-2b63\"\u003Echeck it out\u003C\u002Fa\u003E :)\u003C\u002Fp\u003E\n\n";d.body_markdown="As a web developer, you may come up with the situation of needing to set up a Virtual Machine to host your website online. While it's great that we have a variety of managed cloud services to lift this complexity for us, it's not a bad thing if we want to learn about some basic knowledge of setting up your own server. In fact, I come across this situation, and having this kind of knowledge is essential to me, especially when running a small project all by yourself or run with a tight budget.\n\nWithout further ado, let's start:\n\n## 1. Use a web hosting control panel \n\nThis is true, especially if you don't familiar with the Linux tools or come from a Windows background. There's a lot of setup and maintenance hurdles that come when you start to manage your own server. And definitely, you don't want to memorize all the things using only the terminal! So to lift this up, we need to install this piece of software.\n\nWhile there are some popular options like cPanel or Plesk, it comes with string (price) attached. So we need to use the free one, and [Virtualmin](https:\u002F\u002Fwww.virtualmin.com\u002F), to me, is just perfect.\n\nThe [installation step](https:\u002F\u002Fwww.virtualmin.com\u002Fdocumentation\u002Finstallation\u002Fautomated) is easy too. I won't cover them all here but all it needs to do is run this command (as root):\n\n```sh\nwget http:\u002F\u002Fsoftware.virtualmin.com\u002Fgpl\u002Fscripts\u002Finstall.sh\nchmod 0700 .\u002Finstall.sh\nsh .\u002Finstall.sh --bundle LEMP\n```\n\nDo you see that? I put `--bundle LEMP` because I prefer to install Nginx over Apache. Whatever the choice is up to you but overall Nginx is way faster than Apache because of its simple configuration and event-driven, and you need those (the webserver) anyway to let it handle the heavy lifting of managing your app processes. \n\nI'll discuss these later but one thing you need to know is installing Virtualmin or any of these **will destroy any existing setup on your server** so only install it when your VM or server is a fresh install.\n\nBut then, what happens after the installation? Head to `https:\u002F\u002F\u003CYour IP address\u003E:10000` to open Webmin portal (yes, Virtualmin is part of Webmin). \n\nYou may encounter some SSL issues but skip it, it's fine. Login with root account and password that [you've set up](https:\u002F\u002Fwww.virtualmin.com\u002Fdocumentation\u002Finstallation\u002Fautomated#toc-setting-a-root-password-KTINPhGW), then follow the initial setup and create a new domain. Voila, you're done! No need to learn the hassle of creating a non-root user in a terminal and tries to synchronize everything overnight!\n\nSounds good? Let's continue.\n\n## 2. Know how to run your app properly\n\nChances are you already know how to start your own local server. You may do the same thing on your VM but it will be a bad, bad idea. For an online server that needs to run 24 hours 7 days a week, you need some sort of proxy that protects your app processes from randomly crashing due to fatal crashes or high flood of traffic, and this proxy is what Nginx (or Apache) really does. What these proxies really do is they're run the actual HTTP(S) port on 80 and 443 and forward any incoming traffic to a local port or socket which your app really listens to. Web proxies also really good at dividing traffic based on domains (like domain A goes to this app then domain B goes to that app) and reporting or logging crashes of your app. Web proxies are just that awesome and you need to understand how to configure them properly, even though Virtualmin will already do the heavy lifting for you.\n\nAfter the installation of Nginx that comes from Virtualmin, you might be surprised that, it already comes with PHP support by default, like the usual way web hosting does. You can see how NginX config on a specific domain looks like:\n\n```\nserver {\n\tserver_name example.com;\n\tlisten 1.2.3.4;\n\tlisten 1.2.3.4:443 ssl;\n\troot \u002Fhome\u002Fusername\u002Fpublic_html;\n\tindex index.html index.htm index.php;\n\taccess_log \u002Fvar\u002Flog\u002Fvirtualmin\u002Fexample.com_access_log;\n\terror_log \u002Fvar\u002Flog\u002Fvirtualmin\u002Fexample.com_error_log;\n\tlocation ~ \\.php(\u002F|$) {\n\t\ttry_files $uri =404;\n\t\tfastcgi_pass localhost:8001;\n\t}\t\n\tssl_certificate \u002Fhome\u002Fusername\u002Fssl.combined;\n\tssl_certificate_key \u002Fhome\u002Fusername\u002Fssl.key;\n}\n```\n\nYou can see that it has the domain you want to listen to `example`, the server IP to listen with `1.2.3.4`, where the base directory is `\u002Fhome\u002Fusername\u002Fpublic_html` and so on. What essential in NginX is that by default it only serves as a static web server. To make most of the features it gives you need to understand additional configs, like the `fastcgi_pass` to enable dynamic processing on `.php` files.\n\nPHP is great, but not for all of us. What about running Node.js or Python apps? You might be tempted to use `proxy_pass` but it won't handle the app startup and crashes for us. Luckily we have a better option: [Phusion Passenger](https:\u002F\u002Fwww.phusionpassenger.com\u002F).\n\nWhat is that? That is the app server, which able to manage and automatically run Node.JS, Python, Ruby, well, all kinds of server apps you might need to run in your server, and it has an awesome integration with Nginx. \n\nAfter you follow [the installation step](https:\u002F\u002Fwww.phusionpassenger.com\u002Fdocs\u002Ftutorials\u002Finstallation\u002Fnode\u002F), all you need to do is add these options in [NginX config](http:\u002F\u002Fnginx.org\u002Fen\u002Fdocs\u002Fbeginners_guide.html):\n\n```\n    root \u002Fhome\u002Fusername\u002Fpublic_html\u002Fpublic;\n    passenger_enabled on;\n    # for easier debugging!\n    passenger_friendly_error_pages on;\n```\n\nIt will magically find any [relevant startup file](https:\u002F\u002Fwww.phusionpassenger.com\u002Flibrary\u002Fconfig\u002Fnginx\u002Freference\u002F#passenger_startup_file) (like `app.js` or `passenger_wsgi.py`) in the parent root directory (`public_html`) and boot the relevant process (of course, you need to already do have Node.js or whatever programming language you want to run with and already installing `node_modules` or whatever code dependencies your app need beforehand).\n\nCan you run your app now? Great. Let's continue.\n\n## 3. Overcoming DNS (and SSL) problems\n\nYour app runs on an IP public address now. Great! But nobody (even Google) wants to remember your IP address. You need to buy a domain yourself. I won't point out what's to recommend on this one so go buy a domain from whatever web hosting service you're already familiar with. But what I need to tell you is that after you buy a domain, you need to point out that domain to your server's IP address. This is done under \"DNS Management\" and in there, you can insert your server IP address using A record (and AAAA if care about IPv6), and that's it! \n\nBut wait. There's more...\n\nDNS caches everything under the TTL (Time to Live), and by default for most services, it's set for about 4 hours (14400). You certainly don't want to wait 4 hours to just be able to see your new shiny website, right?\n\nWhile you can just bypass DNS using [hosts file](https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman5\u002Fhosts.5.html), it's much better if you can go to [Google DNS resolver](https:\u002F\u002Fdns.google\u002F) and see if Google itself picks up your new domain. It usually works for the first time without flushing their cache. (if it doesn't work, well something may wrong with your registrar?!).\n\nAfter you check it, if Google DNS resolver sees your IP address now but your device still won't pick up it, you can set your device DNS resolver to 8.8.8.8 and 8.8.4.4 (the [Google Public DNS](https:\u002F\u002Fdevelopers.google.com\u002Fspeed\u002Fpublic-dns)) and after that, it will certainly work. Yay!\n\nBut wait. There's more (again!)...\n\nYou can access your site using http:\u002F\u002F but not https:\u002F\u002F, right? HTTPS is very important nowadays so you can't ignore it. But then, to do that, you need to sign your SSL certificates. I won't go into detail about why it works like that but what I need to tell you is that there's one and only kind of SSL agency there, it's called [Let's Encrypt](https:\u002F\u002Fletsencrypt.org\u002F) and it will create a signed SSL certificate for your domain for free. How?\n\nAssuming you already have a correct configuration in your Nginx, with Virtualmin you can go to [SSL certificate panel](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=bUe9dJOnUV0) and send a request to Let's encrypt in a few clicks. Sound simple? Yes, but not just that. You can also make Virtualmin renew your SSL certificate automatically. Awesome, isn't it?\n\nNow your website should be online and can start gaining users. Congrats!\n\n## 4. Understand memory management (and when to panic)\n\nIt's a regular evening and your server has been running for few weeks. Yet you look at the Virtualmin memory gauges of your server and start wondering. \n\n![image](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F1gy9gjpdsm44l1tgp0qf.png)\n\nUsually, this will come in two situations:\n\n### Situation A: Your server is wasting resources\n\nYou notice that your server only uses around 40% of memory so you think if you could cut the monthly bill in half by reducing its computing memory. Before it happens, I will tell you: don't do that! unless you're running into a budget problem.\n\nEven though it seems your system is wasting the excess memory, it's actually not. Linux will always [use most of your RAM](https:\u002F\u002Fwww.linuxatemyram.com\u002F) because of RAM cache. And you might wonder, what's the deal with it?\n\nWell, most operations on Linux rely heavily on files. The kernel is smart, when a process is done reading or writing a file, it's actually kept temporarily as RAM cache so when another process reads it the next time, it won't wait for the storage disk to actually perform the read, dramatically improving the overall system performance.\n\nI won't tell more details in this, but that's the whole point. Cutting your free memory will severely decrease the overall performance. Don't reduce it unless you have a problem with budgeting.\n\n### Situation B: Your server is heating\n\nSome users tell you slower loading times and some error pages show up significantly. How would you confirm what goes wrong? Firstly, you need to check the load. If the load metric is going like tens, it means your server can't keep up the traffic. Then you need to check your memory consumption by going to [free -m](https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman1\u002Ffree.1.html). The result is probably like this:\n\n```\n              total        used        free      shared  buff\u002Fcache   available\nMem:           1817        1327          67          72         421         268\nSwap:             0           0           0\n```\n\nIf you have low memory available, it means your server struggling to find more memory. You can increase the computation memory right now but it would be a bad idea if you actually turn off your VM during high traffic, so what you can do is [create a swap file](https:\u002F\u002Fwww.digitalocean.com\u002Fcommunity\u002Ftutorials\u002Fhow-to-add-swap-space-on-ubuntu-16-04).\n\nA swap file is basically an additional memory attached to a storage disk. You might think it's a good idea to put a large swap file and suddenly your memory problem would go, but no. Because too much swapping could render the system unstable too.\n\nA better way to think about a swapfile is like a band-aid. During temporary traffic surges, Linux can put non-essential memory processes to swapfile so the actual memory can better spend on essential programs and frequently used RAM caches. For this to work, I recommend a swapfile about 1 or 2 GB size and [swappiness](https:\u002F\u002Flinuxhint.com\u002Funderstanding_vm_swappiness\u002F) around 30. \n\nBut if you have already done these but still has low memory availability, yeah it's time to add more actual memory.\n\nI talked frequently about memory. While it's the most likely problem during high load, sometimes there's another factor too, like a rogue process running in the background or maybe there's just not enough core counts in your VM. A look at [top](https:\u002F\u002Fman7.org\u002Flinux\u002Fman-pages\u002Fman1\u002Ftop.1.html) can help you a lot to diagnose this.\n\n## 5. Protect your server with basic security and backup knowledge\n\nThis is the final piece of advice that I need to tell you, as security and backups are so easy to overlook yet most people don't realize how important it is until it's too late.\n\nGood basic security of any VM serving the internet is to only allow specific inbound ports like SSH, HTTP(S), and any related port you might use. Most cloud providers already have a firewall config so it's good to use them if available. Or if it isn't you can use [firewalld](https:\u002F\u002Ffirewalld.org\u002F) or [iptables](https:\u002F\u002Flinux.die.net\u002Fman\u002F8\u002Fiptables) to safeguard your traffic at kernel level. If you're like me who uses Webmin, you might want to change the port to something else as leaving the default 10000 probably would make it vulnerable to botnets that swarming the internet.\n\nIf you have some memory and computation to spare, it might be a good idea to install software that prevents brute force attacks like [Fail2Ban](https:\u002F\u002Fwww.fail2ban.org\u002F), or maybe just don't enable password-based login in SSH and disable database remote control when you don't need it.\n\nAnd lastly, do a frequent backup, as you probably don't aware of how things can be messed up certainly in the future. The good news is most cloud providers have a way to make a \"snapshot\" of your VM and allow you to schedule it weekly. It probably cost you an additional pennies but it totally worth it.\n\n## Closing\n\nThat is a lot of topics I discover. You might think, where do I get all those knowledge? Well, I have some background story that you might want to read, go [check it out](https:\u002F\u002Fdev.to\u002Fwillnode\u002Fi-generally-don-t-satisfied-with-all-web-hosting-out-there-2b63) :)\n\n";d.user={name:"Wildan Mubarok",username:c,twitter_username:c,github_username:c,website_url:"https:\u002F\u002Fwellosoft.net",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8pokzIfY--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F252792\u002F91582ba6-26b9-4240-8581-4cbb857ab723.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--xrI3hXcW--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F252792\u002F91582ba6-26b9-4240-8581-4cbb857ab723.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:d}},mutations:[["SET_CURRENT_ARTICLE",d]]}}(null,"2021-06-30T00:58:37Z","willnode",{},6)));
window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:591260,title:"Understanding the time complexity in a simple manner(Part 1) || DSA || prerequisite",description:"An article which focuses on finding complexities of algorithms to help in Data Structures and Algorithms later",readable_publish_date:"Feb 4",slug:"understanding-the-time-complexity-in-a-simple-manner-part-1-dsa-prerequisite-1opc",path:"\u002Fmadhavgupta\u002Funderstanding-the-time-complexity-in-a-simple-manner-part-1-dsa-prerequisite-1opc",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--66XyvXOH--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fhe-s3.s3.amazonaws.com\u002Fmedia\u002Fuploads\u002Fc950295.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dBJTeVki--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fhe-s3.s3.amazonaws.com\u002Fmedia\u002Fuploads\u002Fc950295.png",canonical_url:c,created_at:"2021-02-03T18:00:46Z",edited_at:"2021-02-04T05:42:01Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"ds, datastructures, algorithms, complexity",tags:["ds","datastructures","algorithms","complexity"],body_html:"\u003Cp\u003EHello Everyone, I hope you are all safe and in good health. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is Madhav Gupta and today I'm here to throw some light over finding time complexities of algorithms. This can also be taken as a prerequisite for my upcoming DSA(data structures and algorithms) articles which I'll be writing in the coming future.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAll of us face the questions of complexity in our interviews and we should know in general how to find complexities because it makes us a better engineer. \u003C\u002Fp\u003E\n\n\u003Cp\u003ENow let's focus because \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mZz7575k--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F93asts7ov0n1k3yf2rmn.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mZz7575k--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F93asts7ov0n1k3yf2rmn.gif\" alt=\"Focus\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo coming on to the point, there are some rules which you should keep in mind while finding complexity of the given algorithms and these are -\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIgnore constants.\u003C\u002Fli\u003E\n\u003Cli\u003ETake the biggest degree in the expression formed.\u003C\u002Fli\u003E\n\u003Cli\u003EBreak your code into segments and analyse them one by one.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAlso, there's one thing which we need to keep in mind, n is significantly large in our case for which we find time complexity.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003ELet's talk about statements which take \u003Cem\u003Elinear time\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDeclarations and operations - These are the statements which always take linear time and examples of some of them are\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eint x=0\nx=x+1\nx=x-1\nx=x*4\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAll of the above statements if executed independently would run in \u003Cstrong\u003EO(1)\u003C\u002Fstrong\u003E time.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter talking about the statements that execute in linear time, let's talk about loops. I can already find it getting exciting and more challenging as we progress through the article.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cLbJ0wKi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fjs9mbt3iymk97nevtqt8.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cLbJ0wKi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fjs9mbt3iymk97nevtqt8.gif\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ELoops -  Now things start changing from here, because iterations gets repeated and time complexity here is equal to number of times the loop ran. \nLet's look at the following code -\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=0;i&lt;n;i++){\n    a=a+2;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo, if we try to find how many times the statement \u003Cem\u003Ea=a+2\u003C\u002Fem\u003E executed, we would get that \u003Cem\u003Ea=a+2\u003C\u002Fem\u003E executed n number of times.\u003Cbr\u003E\nSuppose if statement \u003Cem\u003Ea=a+2\u003C\u002Fem\u003E is taking k seconds to execute(k is constant), then our time function here would be \u003Cbr\u003E\nT(n) = kn.\u003Cbr\u003E\nThat would give us time complexity as \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's take various instances in loops and let's analyse them one by one.\u003C\u002Fp\u003E\n\n\u003Chr\u003E\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=n;i&gt;0;i--){\n    print(\"*\");\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EIn the above case, now i is n in the starting and it is decreasing by one. The loop stops but when i becomes 0.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe main thing to analyse here is that even if our i is decreasing, the number of iterations remain the same. Hence this loop is also having the time complexity of \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Chr\u003E\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=1;i&lt;=n;i=i+2){\n    print(\"*\");\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EIn the above case,i is increasing at the rate of 2. That means the time function here would look something like this\u003C\u002Fp\u003E\n\n\u003Cp\u003ET(n)=n\u002F2 \u003Cbr\u003E\nAs we know we have to take only the biggest degree in our expression. Hence the above for loop would take time complexity as \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E.\u003Cbr\u003E\nEven if i is increasing at a rate of 20, the time complexity of would remain the same.\u003C\u002Fp\u003E\n\n\u003Chr\u003E\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=1;i&lt;n;i=i*2){\n    print(\"*\");\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003ENow here the case is different. Here i is multiplying itself with 2. Let's look at the value of i with every iteration.\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EIteration\u003C\u002Fth\u003E\n\u003Cth\u003Ei\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E2\u003C\u002Ftd\u003E\n\u003Ctd\u003E2\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E3\u003C\u002Ftd\u003E\n\u003Ctd\u003E4\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003E.\u003C\u002Ftd\u003E\n\u003Ctd\u003E.\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Cp\u003ELet's suppose the loop ends at the k-ith iteration, so the value of i at k-ith iteration would be 2\u003Csup\u003Ek\u003C\u002Fsup\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E2\u003Csup\u003Ek\u003C\u002Fsup\u003E=n\u003Cbr\u003E\nTaking log both sides,\u003Cbr\u003E\nk=log\u003Csub\u003E2\u003C\u002Fsub\u003En\u003C\u002Fp\u003E\n\n\u003Cp\u003EHence the time complexity in this case would be \u003Cstrong\u003EO(log\u003Csub\u003E2\u003C\u002Fsub\u003En)\u003C\u002Fstrong\u003E. The same would be the case when i starts with n(loop ends at 1) and it keeps itself dividing by 2.\u003C\u002Fp\u003E\n\n\u003Chr\u003E\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=0;i*i&lt;n;i++){\n    print(\"*\");\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EHere the case is that when i*i i.e. i\u003Csup\u003E2\u003C\u002Fsup\u003E would become equal to n, then the loop would stop.\u003Cbr\u003E\nSo let's assume the loop stops at i=k.\u003Cbr\u003E\nSo, k*k = n\u003Cbr\u003E\nk\u003Csup\u003E2\u003C\u002Fsup\u003E = n\u003Cbr\u003E\nk = \u003Cspan\u003E√n\u003C\u002Fspan\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHence the time complexity in this case would be \u003Cb\u003EO(\u003Cspan\u003E√n\u003C\u002Fspan\u003E)\u003C\u002Fb\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EI know it might feel boring at first but it's really necessary to understand how it all works under the hood. Otherwise, all of us can memorise that the time complexity of selection sort is O(n\u003Csup\u003E2\u003C\u002Fsup\u003E). But we should also understand how it came there in the first place.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow comes the most important instance in for loops.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efor(int i=1;i&lt;=n;i++){\n    for(int j=1;j&lt;=n;j++){\n        print(\"*\");\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELet's analyse the above loop first, how many times the statement \u003Ccode\u003Eprint(\"*\")\u003C\u002Fcode\u003E would execute. For i=1 the inner loop would execute n times, for i = 2 the inner loop would execute n times again and for i = n, the inner loop would execute n times.\u003Cbr\u003E\nHence the total number of times the statement \u003Ccode\u003Eprint(\"*\")\u003C\u002Fcode\u003E got executed = n+n+n+..n times\u003Cbr\u003E\nT(n) = n(1+1+1+..n times)\u003Cbr\u003E\nT(n) = n * n\u003Cbr\u003E\nT(n) = n\u003Csup\u003E2\u003C\u002Fsup\u003E\u003Cbr\u003E\nHence the time complexity for nested for loops is \u003Cstrong\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EWhile we were at it, we have completed our loops part already. I congratulate you for making it this far. Give yourselves a pat on your back and let's talk about if-else block.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIf-else statement - We take the time complexity of the block for whichever it is larger. The following example would clear it out.\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F Time complexity = O(1)\nif(i==0){\n    print(\"*\");\n}\n\u002F\u002F Time complexity = O(n) \nelse{\n    for(int i=0;i&lt;n;i++){\n        print(\"*\");\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAs we can see in the above code that if block is having O(1) and else block is having O(n). Hence the time complexity of the whole if-else block would be \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E(since O(n)&gt;O(1)).\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EConsecutive Statements - We add the time complexities of each statement. Here's is an example\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F takes O(1) time\nint m=0;\n\n\u002F\u002F takes O(n) time\nfor(int j=1;j&lt;=n;j++){\n    print(\"*\");\n}\n\n\u002F\u002F takes O(n^2) time\nfor(int i=1;i&lt;=n;i++){\n    for(int j=1;j&lt;=n;j++){\n        print(\"*\");\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ETaking into consideration the constant time of each print statement too.\u003Cbr\u003E\nTotal cost = c\u003Csub\u003E0\u003C\u002Fsub\u003E+c\u003Csub\u003E1\u003C\u002Fsub\u003En+c\u003Csub\u003E2\u003C\u002Fsub\u003En\u003Csup\u003E2\u003C\u002Fsup\u003E\u003Cbr\u003E\nTaking the biggest degree, \u003Cbr\u003E\nHence time complexity = \u003Cstrong\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EPhewww, That was really a long article, wasn't it? \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--m9NdQGCR--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F4pfgsculv9wg2uflqzxe.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--m9NdQGCR--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F4pfgsculv9wg2uflqzxe.gif\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith that being said, it really feels good to be writing again. In this article i explained all the basics we need to find time complexities for common algorithms. I'd be bringing part 2 of the same topic with lots of questions which we would practice together and it would further strengthen our understanding.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI would attach the link of part 2 whenever i post the next part so be sure to save this one. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wLQ_vCgb--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyrt24z34nictggla9fyy.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wLQ_vCgb--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyrt24z34nictggla9fyy.gif\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EPlease let me know if you liked this one or not, I'd gladly accept any criticism that comes my way and return with better content.\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Understanding the time complexity in a simple manner(Part 1) || DSA || prerequisite\npublished: true\ndescription: An article which focuses on finding complexities of algorithms to help in Data Structures and Algorithms later\ntags: ds, DataStructures, Algorithms, Complexity\ncover_image: https:\u002F\u002Fhe-s3.s3.amazonaws.com\u002Fmedia\u002Fuploads\u002Fc950295.png\n---\n\nHello Everyone, I hope you are all safe and in good health. \n\nThis is Madhav Gupta and today I'm here to throw some light over finding time complexities of algorithms. This can also be taken as a prerequisite for my upcoming DSA(data structures and algorithms) articles which I'll be writing in the coming future.\n\nAll of us face the questions of complexity in our interviews and we should know in general how to find complexities because it makes us a better engineer. \n\nNow let's focus because \n\n![Focus](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F93asts7ov0n1k3yf2rmn.gif)\n\nSo coming on to the point, there are some rules which you should keep in mind while finding complexity of the given algorithms and these are -\n* Ignore constants.\n* Take the biggest degree in the expression formed.\n* Break your code into segments and analyse them one by one.\n\nAlso, there's one thing which we need to keep in mind, n is significantly large in our case for which we find time complexity.\n\n---\nLet's talk about statements which take *linear time*.\n\n* Declarations and operations - These are the statements which always take linear time and examples of some of them are\n\n```\nint x=0\nx=x+1\nx=x-1\nx=x*4\n```\n\nAll of the above statements if executed independently would run in **O(1)** time.\n\nAfter talking about the statements that execute in linear time, let's talk about loops. I can already find it getting exciting and more challenging as we progress through the article.\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fjs9mbt3iymk97nevtqt8.gif)\n\n* Loops -  Now things start changing from here, because iterations gets repeated and time complexity here is equal to number of times the loop ran. \nLet's look at the following code -\n```\nfor(int i=0;i\u003Cn;i++){\n    a=a+2;\n}\n```\nSo, if we try to find how many times the statement *a=a+2* executed, we would get that *a=a+2* executed n number of times.\nSuppose if statement *a=a+2* is taking k seconds to execute(k is constant), then our time function here would be \nT(n) = kn.\nThat would give us time complexity as **O(n)**.\n\nLet's take various instances in loops and let's analyse them one by one.\n\n---\n\n```\nfor(int i=n;i\u003E0;i--){\n    print(\"*\");\n}\n```\nIn the above case, now i is n in the starting and it is decreasing by one. The loop stops but when i becomes 0.\n \nThe main thing to analyse here is that even if our i is decreasing, the number of iterations remain the same. Hence this loop is also having the time complexity of **O(n)**.\n\n---\n\n```\nfor(int i=1;i\u003C=n;i=i+2){\n    print(\"*\");\n}\n```\nIn the above case,i is increasing at the rate of 2. That means the time function here would look something like this\n\nT(n)=n\u002F2 \nAs we know we have to take only the biggest degree in our expression. Hence the above for loop would take time complexity as **O(n)**.\nEven if i is increasing at a rate of 20, the time complexity of would remain the same.\n\n___\n\n```\nfor(int i=1;i\u003Cn;i=i*2){\n    print(\"*\");\n}\n```\nNow here the case is different. Here i is multiplying itself with 2. Let's look at the value of i with every iteration.\n\n|Iteration|i|\n|:----|:----|\n|1|1|\n|2|2|\n|3|4|\n|.|.|\n\nLet's suppose the loop ends at the k-ith iteration, so the value of i at k-ith iteration would be 2\u003Csup\u003Ek\u003C\u002Fsup\u003E.\n\n2\u003Csup\u003Ek\u003C\u002Fsup\u003E=n\nTaking log both sides,\nk=log\u003Csub\u003E2\u003C\u002Fsub\u003En\n\nHence the time complexity in this case would be **O(log\u003Csub\u003E2\u003C\u002Fsub\u003En)**. The same would be the case when i starts with n(loop ends at 1) and it keeps itself dividing by 2.\n\n___\n\n```\nfor(int i=0;i*i\u003Cn;i++){\n    print(\"*\");\n}\n```\nHere the case is that when i*i i.e. i\u003Csup\u003E2\u003C\u002Fsup\u003E would become equal to n, then the loop would stop.\nSo let's assume the loop stops at i=k.\nSo, k*k = n\nk\u003Csup\u003E2\u003C\u002Fsup\u003E = n\nk = \u003Cspan\u003E&#8730;n\u003C\u002Fspan\u003E\n\nHence the time complexity in this case would be \u003Cb\u003EO(\u003Cspan\u003E&#8730;n\u003C\u002Fspan\u003E)\u003C\u002Fb\u003E\n\nI know it might feel boring at first but it's really necessary to understand how it all works under the hood. Otherwise, all of us can memorise that the time complexity of selection sort is O(n\u003Csup\u003E2\u003C\u002Fsup\u003E). But we should also understand how it came there in the first place.\n\nNow comes the most important instance in for loops.\n\n```\nfor(int i=1;i\u003C=n;i++){\n    for(int j=1;j\u003C=n;j++){\n        print(\"*\");\n    }\n}\n```\nLet's analyse the above loop first, how many times the statement `print(\"*\")` would execute. For i=1 the inner loop would execute n times, for i = 2 the inner loop would execute n times again and for i = n, the inner loop would execute n times.\nHence the total number of times the statement `print(\"*\")` got executed = n+n+n+..n times\nT(n) = n(1+1+1+..n times)\nT(n) = n * n\nT(n) = n\u003Csup\u003E2\u003C\u002Fsup\u003E\nHence the time complexity for nested for loops is **O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)**\n___\n\nWhile we were at it, we have completed our loops part already. I congratulate you for making it this far. Give yourselves a pat on your back and let's talk about if-else block.\n\n___\n\n* If-else statement - We take the time complexity of the block for whichever it is larger. The following example would clear it out. \n\n```\n\u002F\u002F Time complexity = O(1)\nif(i==0){\n    print(\"*\");\n}\n\u002F\u002F Time complexity = O(n) \nelse{\n    for(int i=0;i\u003Cn;i++){\n        print(\"*\");\n    }\n}\n```\nAs we can see in the above code that if block is having O(1) and else block is having O(n). Hence the time complexity of the whole if-else block would be **O(n)**(since O(n)\u003EO(1)).\n\n___\n\n* Consecutive Statements - We add the time complexities of each statement. Here's is an example\n```\n\u002F\u002F takes O(1) time\nint m=0;\n\n\u002F\u002F takes O(n) time\nfor(int j=1;j\u003C=n;j++){\n    print(\"*\");\n}\n\n\u002F\u002F takes O(n^2) time\nfor(int i=1;i\u003C=n;i++){\n    for(int j=1;j\u003C=n;j++){\n        print(\"*\");\n    }\n}\n```\nTaking into consideration the constant time of each print statement too.\nTotal cost = c\u003Csub\u003E0\u003C\u002Fsub\u003E+c\u003Csub\u003E1\u003C\u002Fsub\u003En+c\u003Csub\u003E2\u003C\u002Fsub\u003En\u003Csup\u003E2\u003C\u002Fsup\u003E\nTaking the biggest degree, \nHence time complexity = **O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)**\n\n___\n\nPhewww, That was really a long article, wasn't it? \n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F4pfgsculv9wg2uflqzxe.gif)\n\nWith that being said, it really feels good to be writing again. In this article i explained all the basics we need to find time complexities for common algorithms. I'd be bringing part 2 of the same topic with lots of questions which we would practice together and it would further strengthen our understanding.\n\nI would attach the link of part 2 whenever i post the next part so be sure to save this one. \n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyrt24z34nictggla9fyy.gif)\n\nPlease let me know if you liked this one or not, I'd gladly accept any criticism that comes my way and return with better content.\n",user:{name:"Madhav Gupta",username:"madhavgupta",twitter_username:a,github_username:"madhavgupta2011",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--aYPHqO7s--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F134967\u002Fc688a56c-48b1-40ad-a89e-b33d6637ee31.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--jy7RkOwe--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F134967\u002Fc688a56c-48b1-40ad-a89e-b33d6637ee31.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmadhavgupta\u002F591260",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-02-04T04:35:15Z","https:\u002F\u002Fdev.to\u002Fmadhavgupta\u002Funderstanding-the-time-complexity-in-a-simple-manner-part-1-dsa-prerequisite-1opc",2));
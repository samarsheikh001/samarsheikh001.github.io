__NUXT_JSONP__("/articles/elthrasher/628138", (function(a,b,c,d,e,f,g){c.type_of="article";c.id=628138;c.title="rego.fyi: A Study in Serverless Authorization with Open Policy Agent";c.description="Open Policy Agent is a decision engine built on a declarative language called Rego. OPA is pronounced...";c.readable_publish_date="Mar 8";c.slug="rego-fyi-a-study-in-serverless-authorization-with-open-policy-agent-1ipi";c.path="\u002Faws-builders\u002Frego-fyi-a-study-in-serverless-authorization-with-open-policy-agent-1ipi";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RWFYCW_s--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc1z1qo56feylpjpcpidn.jpg";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Vvo9uGXG--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc1z1qo56feylpjpcpidn.jpg";c.canonical_url=d;c.created_at="2021-03-07T15:53:47Z";c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=11;c.tag_list="cdk, security, serverless, opa";c.tags=["cdk","security","serverless","opa"];c.body_html="\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F\"\u003EOpen Policy Agent\u003C\u002Fa\u003E is a decision engine built on a declarative language called \u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F#rego\"\u003ERego\u003C\u002Fa\u003E. OPA is pronounced \"oh-pa\", but \u003Cem\u003Eto na kang set√≥p da mesach!\u003C\u002Fem\u003E so go ahead and say \"oh-pee-ayy\" because I know you want to. OPA is general-purpose and written in Go. It allows the creation and compilation of policies written in Rego which can then be hydrated with some kind of data source and then compared against an input to produce a result. OPA docs, linked above, are excellent so check them out for more information.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"table-of-contents\" href=\"#table-of-contents\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Contents\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#tldr\"\u003Etldr\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#whyopa\"\u003EWhy OPA?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#serverlessopa\"\u003EServerless OPA\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#regofyi\"\u003Erego.fyi\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#regopolicy\"\u003ERego Policy\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#opaauthorizer\"\u003EOPA Authorizer\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#webapp\"\u003EWeb App\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#awscdk\"\u003EAWS CDK\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#conclusion\"\u003EConclusion\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"tldr\" href=\"#tldr\"\u003E\n  \u003C\u002Fa\u003E\n  tl;dr\u003Ca name=\"tldr\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi\"\u003EThe code is here!\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Frego.fyi\"\u003Erego.fyi\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"why-opa\" href=\"#why-opa\"\u003E\n  \u003C\u002Fa\u003E\n  Why OPA?\u003Ca name=\"whyopa\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe paradigm presented by OPA is compelling when applied to the use case of multi-tenant SaaS applications. Such applications have complex authorization rules which may include ensuring a user acts within their tenant or personal data, ensuring a user has the right role or permission, ensuring the user belongs to a tenant that is subscribed to the service being provided and many others. Often these rules are implemented in imperative logic throughout the application. A check for subscription may be implemented in middleware while limiting the scope of tenant access is often found in the WHERE clause of a SQL query. Spreading authorization concerns throughout an application makes it very hard to audit and understand what rules the application are actually enforcing and it makes it easy for bugs to creep in.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe more complex the application, the more authorization becomes a problem that needs a single solution. This is the problem OPA can solve. It's enticing to think about authorizing a microservice architecture with OPA. This would allow developers to focus on the problem the service needs to solve and share a common authorization abstraction.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"serverless-opa\" href=\"#serverless-opa\"\u003E\n  \u003C\u002Fa\u003E\n  Serverless OPA\u003Ca name=\"serverlessopa\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe usual way to implement OPA for microservices is to stand up an authorization service implementing OPA and have other services invoke it over http using some of the \u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fecosystem\u002F\"\u003Epublished middleware\u003C\u002Fa\u003E. Even the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fadaptant-labs\u002Fopenfaas-function-auth-opa\u002Fblob\u002Fmaster\u002Fopa-auth\u002Fhandler.go#L35\"\u003EOpenFaaS version written in Go\u003C\u002Fa\u003E depends on a standalone authorization service. I wanted to see if I could use OPA in a 100% serverless environment, making policy decisions in an API Gateway request authorizer without the overhead of additional http requests or the need to run a separate service. I found inspiration in this excellent \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fzotoio\u002Fsls-lambda-opa\"\u003Esls-lambda-opa\u003C\u002Fa\u003E repo.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI think of this solution as a layered architecture, where the bottom layer is the authorizer implementing the OPA library, capable of compiling Rego policies. On top of that is the actual policy that states I want to compare a claim like \u003Ccode\u003Epermissions\u003C\u002Fcode\u003E or \u003Ccode\u003Esubscriptions\u003C\u002Fcode\u003E or I'm interested in the HTTP resource and method. Above that is the service or endpoint-specific data that states the actual resources, methods and subscriptions that will be evaluated. Then finally we have the user's session or context, delivered in a \u003Ca href=\"https:\u002F\u002Fjwt.io\"\u003EJSON Web Token (or JWT)\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cfigure\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XL1OF_Hz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F48x897ff2gjbotbaj2a5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XL1OF_Hz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F48x897ff2gjbotbaj2a5.png\" alt=\"Layers of OPA\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigcaption\u003EOPA sandwich?\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EEach of these layers can be decoupled from the others. An authorizer function implementation might be used across several services with the same policy but different data hydrating the policy.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"regofyi\" href=\"#regofyi\"\u003E\n  \u003C\u002Fa\u003E\n  rego.fyi\u003Ca name=\"regofyi\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EMy first attempt at putting all this together was a fairly terrible demo that needed a REST client and the copying of tokens. I had the urge to build a little fullstack app and so I came up with \u003Ca href=\"https:\u002F\u002Frego.fyi\"\u003Erego.fyi\u003C\u002Fa\u003E. In some ways, it's a less impressive take on \u003Ca href=\"https:\u002F\u002Fplay.openpolicyagent.org\u002F\"\u003EThe Rego Playground\u003C\u002Fa\u003E, but mine is serverless and built on the kind of architecture I want to work with. I'll also caveat that I am absolute trash when it comes to visual design. I'm just awful at it. Respect to those who are good, but I'm not one of you.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe architecture of my app is a little different than what I'd envision using in production. I wanted to be able to experiment with different policies, so the policies, along with data and the user input are all sent to be evaluated by my authorizer function. The authorizer compiles the policy in real time, makes the policy decision based on the data and user input, then returns an IAM policy document specifying whether my Lambda function can be invoked, as appropriate.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn a real application, I likely wouldn't want to compile the policy on request, but instead compile it once on startup. I don't have the expectation of needing to change policies on the fly, though if I did, the policy could be loaded from S3 or a database. What I would probably do in a real application is load the policy from a Lambda Layer.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"rego-policy\" href=\"#rego-policy\"\u003E\n  \u003C\u002Fa\u003E\n  Rego Policy\u003Ca name=\"regopolicy\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI am by no means an expert on the rego language and won't give an overview here when there are already \u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F#rego\"\u003Euseful docs\u003C\u002Fa\u003E. I did manage to put together a workable policy for my experiment.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rego\"\u003E\u003Ccode\u003E\u003Cspan class=\"ow\"\u003Epackage\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Epolicy\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"ow\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erequests\u003C\u002Fspan\u003E\n\u003Cspan class=\"ow\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Epermissions\u003C\u002Fspan\u003E\n\u003Cspan class=\"ow\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Edata\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esubscriptions\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"ow\"\u003Edefault\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eallow\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Eallow\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Echeck_policy\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Echeck_policy\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erequests\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"ow\"\u003Esome\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Epermissions\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Epermissions\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n    \u003Cspan class=\"ow\"\u003Esome\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esubscriptions\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esubscriptions\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Emethods\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Emethod\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eresources\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eresource\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eallowed\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Eallowed\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"*\"\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"n\"\u003Ematch_with_wildcard\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eallowed\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Eallowed\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E_\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe syntax of this policy is \u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fpolicy-language\u002F\"\u003Eexplained well in the docs\u003C\u002Fa\u003E, but just to call out a few things, everything in \u003Ccode\u003Echeck_policy\u003C\u002Fcode\u003E can be considered an AND comparison while the duplicative call signature of \u003Ccode\u003Ematch_with_wildcard\u003C\u002Fcode\u003E makes it an OR comparison. \u003Ccode\u003Esome i; match_with_wildcard(permissions, input.permissions[i])\u003C\u002Fcode\u003E is a fairly elegant one-liner that makes sure one item in the left-side array matches at least one item in the right-side array.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENote the policy defines fields I care about, namely the HTTP \u003Ccode\u003Emethod\u003C\u002Fcode\u003E and \u003Ccode\u003Eresource\u003C\u002Fcode\u003E as well as my custom claims of \u003Ccode\u003Epermissions\u003C\u002Fcode\u003E and \u003Ccode\u003Esubscriptions\u003C\u002Fcode\u003E. This policy doesn't include anything about the values that should be compared to, but does describe the shape of the data and how it should be compared. In order to give those values, we need a data file.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight json\"\u003E\u003Ccode\u003E\u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003E\"requests\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[{\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003E\"methods\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003E\"resources\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"\u002Forders\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}],\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003E\"permissions\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"start_order\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"view_invoice\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n  \u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003E\"subscriptions\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"newsletter\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"w\"\u003E\n\u003C\u002Fspan\u003E\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis data file could apply to one API while another one with permissions like \u003Ccode\u003Ecuddle_hedgehogs\u003C\u002Fcode\u003E or \u003Ccode\u003Eintrospect_navel\u003C\u002Fcode\u003E protects another one. That's the power of this layered approach! But the best part is rego ships with a \u003Ca href=\"https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fpolicy-testing\u002F\"\u003Etesting framework\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe best way to experience a good separation of concerns is with some solid unit tests. They are quite easy to write.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight rego\"\u003E\u003Ccode\u003E\u003Cspan class=\"ow\"\u003Epackage\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Epolicy\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Etest_get_allowed\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Eallow\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ewith\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"permissions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"start_order\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"resource\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"\u002Forders\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"method\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"subscriptions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"newsletter\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Etest_get_wrong_subcription_denied\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"ow\"\u003Enot\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eallow\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ewith\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"permissions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"start_order\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"resource\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"\u002Forders\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"method\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"subscriptions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"pizza_of_the_month\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003Etest_get_wrong_permission_denied\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"ow\"\u003Enot\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eallow\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ewith\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Einput\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eas\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"permissions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"change_password\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"resource\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"\u002Forders\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"method\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"s2\"\u003E\"subscriptions\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E\"newsletter\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EI'm providing the different user inputs and expecting them to either be allowed or not. Rego also gives me test coverage out of the box!\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E% opa \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003E.\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E-c\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"s2\"\u003E\"files\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"s2\"\u003E\"policy.rego\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"s2\"\u003E\"covered\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 7\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 7\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 9\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 10\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 13\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 18\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 22\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 22\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 24\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 25\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"s2\"\u003E\"not_covered\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 21\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 21\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"s2\"\u003E\"coverage\"\u003C\u002Fspan\u003E: 92.3\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n    \u003Cspan class=\"s2\"\u003E\"policy_test.rego\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"s2\"\u003E\"covered\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E[\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 3\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 4\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 7\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 8\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n        \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n          \u003Cspan class=\"s2\"\u003E\"start\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 11\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n          \u003Cspan class=\"s2\"\u003E\"end\"\u003C\u002Fspan\u003E: \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"s2\"\u003E\"row\"\u003C\u002Fspan\u003E: 12\n          \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n      \u003Cspan class=\"o\"\u003E]\u003C\u002Fspan\u003E,\n      \u003Cspan class=\"s2\"\u003E\"coverage\"\u003C\u002Fspan\u003E: 100\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E,\n  \u003Cspan class=\"s2\"\u003E\"coverage\"\u003C\u002Fspan\u003E: 94.75\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOkay, that's a bit verbose and looks like I need another test, but still really useful. There's a \u003Ccode\u003E--format=pretty\u003C\u002Fcode\u003E option, but it doesn't seem to do anything. Perhaps it's a WIP.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnyway, this is great! Our old applications with some of the authorization logic in middleware, some in SQL and some in between just can't compete with the ability to unit test the policy logic separate from any application code.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"opa-authorizer\" href=\"#opa-authorizer\"\u003E\n  \u003C\u002Fa\u003E\n  OPA Authorizer\u003Ca name=\"opaauthorizer\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe only difference between a RequestAuthorizer and a TokenAuthorizer is the TokenAuthorizer only sees the specified token while a RequestAuthorizer sees the entire request. This is a better fit, since I want to look at things like the HTTP method and path.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMy authorizer function needs to:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EUnpack my \"token\" (which really consists of the policy, data and user token, base64 encoded for demo purposes)\u003C\u002Fli\u003E\n\u003Cli\u003ECompile the policy with the provided data.\u003C\u002Fli\u003E\n\u003Cli\u003ECompare the user input and request to the policy.\u003C\u002Fli\u003E\n\u003Cli\u003EReturn an appropriate IAM policy to allow or deny access to the function handler.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EThis authorizer needs to be written in Go because the supporting OPA libraries are only available to the Go runtime. I normally write TypeScript, but this was my second try at Go and I think I did okay, thanks to countless examples and tutorials across the Internet. In fact, it's fair to say that \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi\u002Fblob\u002Fmain\u002Ffns\u002Fgo\u002Fauthorizer.go\"\u003Eimitation\u003C\u002Fa\u003E is a sincere form of \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fzotoio\u002Fsls-lambda-opa\u002Fblob\u002Fmaster\u002Fopacheck\u002Fmain.go\"\u003Eflattery\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis was also the first time I've used Go with Lambda and I must say, this might be addicting.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cfigure\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KJ3s6GaP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5b0310hx5k2pylykx5f4.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KJ3s6GaP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5b0310hx5k2pylykx5f4.png\" alt=\"Lambda Console\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigcaption\u003EMillisecond billing, yeah!\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EI'm doing around 50ms with cold starts and single-digits otherwise, even though I'm doing all of those things (unpacking, compiling, deciding, generating) on every request. If the policy is compiled at start time, it's even faster.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"web-app\" href=\"#web-app\"\u003E\n  \u003C\u002Fa\u003E\n  Web App\u003Ca name=\"webapp\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EMy poor design skills notwithstanding, I'm reasonably good at programming in React. I built off a \u003Ca href=\"https:\u002F\u002Fdev.to\u002Faws-builders\u002Faws-cdk-one-step-s3-websites-with-esbuild-2e3h\"\u003Eprevious effort\u003C\u002Fa\u003E to do a simple fullstack non-CRA* React app with esbuild. I think it works pretty well.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn order to keep my app from looking like complete trash, I used \u003Ca href=\"https:\u002F\u002Fmaterial-ui.com\u002F\"\u003EMaterial-UI\u003C\u002Fa\u003E from Google for the components and that was pretty easy. I also delved into \u003Ca href=\"https:\u002F\u002Ftesting-library.com\u002Fdocs\u002Freact-testing-library\u002Fintro\u002F\"\u003ETesting Library\u003C\u002Fa\u003E and I find it quite nice and loved that I could write tests without having to render anything shallowly. I used \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fcontext.html\"\u003EReact Context\u003C\u002Fa\u003E for state and I like that a lot better than working with Redux. You can check my code or query about this in the comments as I'm not going to do into great detail here, but as someone who doesn't program in React every day, it's nice checking in and seeing these innovations.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe app is just one page with no routing. When thinking about how to do this app, I actually thought about trying to figure out some kind of client-side JWT or perhaps do a round trip to a backend to get a user token. Ultimately I decided that cryptographic signing is beyond the scope of what I wanted to do in this app, so all it does is stringify the various form fields, base64 encode that string and finally pass the whole thing as an Authentication header. This allows me to have a decoding piece in my authorizer but of course it's in no way secure.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"aws-cdk\" href=\"#aws-cdk\"\u003E\n  \u003C\u002Fa\u003E\n  AWS CDK\u003Ca name=\"awscdk\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI love working with CDK. My post on \u003Ca href=\"https:\u002F\u002Fdev.to\u002Faws-builders\u002Faws-cdk-one-step-s3-websites-with-esbuild-2e3h\"\u003ECDK S3 websites\u003C\u002Fa\u003E covers most of topics relating to asset bundling, but it's worth remarking on here. My CDK app handles all the asset bundling of my React web app (written in TypeScript), my authorizer function (written in Go) and my function handler (written in TypeScript). Because of the way asset bundling works in CDK, I can safely \u003Ccode\u003Ecdk deploy\u003C\u002Fcode\u003E and only the parts of the application that have changed will deploy. This is great for a fullstack application and makes deployments very fast. I'll dig into this topic a bit more in a future post.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI also was able to get a unified \u003Ccode\u003Enpm test\u003C\u002Fcode\u003E command that runs all the tests for:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECDK infrastructure as code written in TypeScript\u003C\u002Fli\u003E\n\u003Cli\u003EReact web app written in TypeScript\u003C\u002Fli\u003E\n\u003Cli\u003ELambda function handler written in TypeScript\u003C\u002Fli\u003E\n\u003Cli\u003EAuthorizer function written in Go\u003C\u002Fli\u003E\n\u003Cli\u003EPolicy written in Rego\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E% npm t\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 pretest \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E npm run lint\n\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 lint \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E eslint \u003Cspan class=\"nb\"\u003E.\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E--ext\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E.js,.ts\n\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E npm run \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:opa \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm run \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:go \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm run \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:ts\n\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:opa \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E opa \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E .\u002Fopa\n\nPASS: 3\u002F3\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:go \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E go \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E .\u002F...\n\nok      _\u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\u002Ffns\u002Fgo 1.222s\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 \u003Cspan class=\"nb\"\u003Etest\u003C\u002Fspan\u003E:ts \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E jest \u003Cspan class=\"nt\"\u003E--coverage\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E--silent\u003C\u002Fspan\u003E\n\n PASS   node  fns\u002Fts\u002Flambdalith.spec.ts\n PASS   dom  ui\u002Fproviders\u002FPayloadsProvider.spec.tsx\nBundling asset Default\u002FAuthZFun\u002FCode\u002FStage...\ngo version go1.16 darwin\u002Famd64\nBundling asset WebTestStack\u002FDeployWebsite\u002FAsset1\u002FStage...\nBundling asset ApiTestStack\u002FAuthZFun\u002FCode\u002FStage...\n0.8.56\ngo version go1.16 darwin\u002Famd64\nBundling asset TestStack\u002FDeployWebsite\u002FAsset1\u002FStage...\n0.8.56\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 build \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E npm run clean \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm run build:website\n\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 build \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E npm run clean \u003Cspan class=\"o\"\u003E&amp;&amp;\u003C\u002Fspan\u003E npm run build:website\n\n PASS   dom  ui\u002Fcomponents\u002FHeader.spec.tsx\nBundling asset Default\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   dom  ui\u002Fcomponents\u002FTextArea.spec.tsx\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 clean \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E rimraf cdk.out coverage website\u002Fjs\n\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 clean \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E rimraf cdk.out coverage website\u002Fjs\n\nBundling asset ApiTestStack\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   node  cdk\u002Flambda.spec.ts\n PASS   dom  ui\u002Fcomponents\u002FRequestControl.spec.tsx\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 build:website \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003ENODE_ENV\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003Eproduction ts-node \u003Cspan class=\"nt\"\u003E--files\u003C\u002Fspan\u003E esbuild.ts build\n\n PASS   dom  ui\u002FApp.spec.tsx\n\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E cdk-esbuild-s3-website@0.0.1 build:website \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"nv\"\u003ENODE_ENV\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003Eproduction ts-node \u003Cspan class=\"nt\"\u003E--files\u003C\u002Fspan\u003E esbuild.ts build\n\n PASS   node  cdk\u002FrestApi.spec.ts\nRunning build...\nRunning build...\nBundling asset TestStack\u002FAuthZFun\u002FCode\u002FStage...\n PASS   node  cdk\u002Fwebsite.spec.ts \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E7.308 s\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E\ngo version go1.16 darwin\u002Famd64\nBundling asset TestStack\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   node  cdk\u002Frego.fyi-stack.spec.ts \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E8.261 s\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E\n\u003Cspan class=\"nt\"\u003E-----------------------\u003C\u002Fspan\u003E|---------|----------|---------|---------|-------------------\nFile                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line \u003Cspan class=\"c\"\u003E#s\u003C\u002Fspan\u003E\n\u003Cspan class=\"nt\"\u003E-----------------------\u003C\u002Fspan\u003E|---------|----------|---------|---------|-------------------\nAll files              |     100 |      100 |     100 |     100 |\n cdk                   |     100 |      100 |     100 |     100 |\n  getCFAndZone.ts      |     100 |      100 |     100 |     100 |\n  lambda.ts            |     100 |      100 |     100 |     100 |\n  rego.fyi-stack.ts    |     100 |      100 |     100 |     100 |\n  restApi.ts           |     100 |      100 |     100 |     100 |\n  website.ts           |     100 |      100 |     100 |     100 |\n fns\u002Fts                |     100 |      100 |     100 |     100 |\n  lambdalith.ts        |     100 |      100 |     100 |     100 |\n opa                   |     100 |      100 |     100 |     100 |\n  policy.rego          |     100 |      100 |     100 |     100 |\n ui                    |     100 |      100 |     100 |     100 |\n  App.tsx              |     100 |      100 |     100 |     100 |\n ui\u002Fcomponents         |     100 |      100 |     100 |     100 |\n  Header.tsx           |     100 |      100 |     100 |     100 |\n  RequestControl.tsx   |     100 |      100 |     100 |     100 |\n  Sidebar.tsx          |     100 |      100 |     100 |     100 |\n  TextArea.tsx         |     100 |      100 |     100 |     100 |\n ui\u002Fpages              |     100 |      100 |     100 |     100 |\n  Rego.tsx             |     100 |      100 |     100 |     100 |\n ui\u002Fproviders          |     100 |      100 |     100 |     100 |\n  PayloadsProvider.tsx |     100 |      100 |     100 |     100 |\n\u003Cspan class=\"nt\"\u003E----------------------------\u003C\u002Fspan\u003E|---------|----------|---------|---------|-------------------\n\nTest Suites: 10 passed, 10 total\nTests:       27 passed, 27 total\nSnapshots:   6 passed, 6 total\nTime:        8.804 s, estimated 9 s\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThanks to \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi\u002Fblob\u002Fmain\u002Fjest.config.js#L28\"\u003Ejest projects\u003C\u002Fa\u003E, I'm able to run my \u003Ccode\u003E.tsx\u003C\u002Fcode\u003E tests with the \u003Ccode\u003Ejsdom\u003C\u002Fcode\u003E test environment and the \u003Ccode\u003E.ts\u003C\u002Fcode\u003E tests with \u003Ccode\u003Enode\u003C\u002Fcode\u003E. Fullstack testing!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\u003Ca name=\"conclusion\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EMy success at getting this working as a RequestAuthorizer makes a very compelling case for introducing OPA into serverless projects. We can join the delegation of complex authorization rules with \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fapigateway\u002Flatest\u002Fdeveloperguide\u002Fapi-gateway-method-request-validation.html\"\u003EAPI Gateway request validation\u003C\u002Fa\u003E and find ourselves in a world where our function handlers are very simple - or maybe even \u003Ca href=\"https:\u002F\u002Fdev.to\u002Felthrasher\u002Faws-cdk-api-gateway-service-integration-with-dynamodb-2ek0\"\u003Eskip them entirely\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fpublicdomainreview.org\u002Fcollection\u002Ftheatrum-chemicum\"\u003ECOVER IMAGE\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";c.body_markdown="[Open Policy Agent](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F) is a decision engine built on a declarative language called [Rego](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F#rego). OPA is pronounced \"oh-pa\", but *to na kang set√≥p da mesach!* so go ahead and say \"oh-pee-ayy\" because I know you want to. OPA is general-purpose and written in Go. It allows the creation and compilation of policies written in Rego which can then be hydrated with some kind of data source and then compared against an input to produce a result. OPA docs, linked above, are excellent so check them out for more information.\n\n## Table of Contents\n* \u003Ca href=\"#tldr\"\u003Etldr\u003C\u002Fa\u003E\n* \u003Ca href=\"#whyopa\"\u003EWhy OPA?\u003C\u002Fa\u003E\n* \u003Ca href=\"#serverlessopa\"\u003EServerless OPA\u003C\u002Fa\u003E\n* \u003Ca href=\"#regofyi\"\u003Erego.fyi\u003C\u002Fa\u003E\n* \u003Ca href=\"#regopolicy\"\u003ERego Policy\u003C\u002Fa\u003E\n* \u003Ca href=\"#opaauthorizer\"\u003EOPA Authorizer\u003C\u002Fa\u003E\n* \u003Ca href=\"#webapp\"\u003EWeb App\u003C\u002Fa\u003E\n* \u003Ca href=\"#awscdk\"\u003EAWS CDK\u003C\u002Fa\u003E\n* \u003Ca href=\"#conclusion\"\u003EConclusion\u003C\u002Fa\u003E\n\n## tl;dr\u003Ca name=\"tldr\"\u003E\u003C\u002Fa\u003E\n\n[The code is here!](https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi)\n[rego.fyi](https:\u002F\u002Frego.fyi)\n\n## Why OPA?\u003Ca name=\"whyopa\"\u003E\u003C\u002Fa\u003E\n\nThe paradigm presented by OPA is compelling when applied to the use case of multi-tenant SaaS applications. Such applications have complex authorization rules which may include ensuring a user acts within their tenant or personal data, ensuring a user has the right role or permission, ensuring the user belongs to a tenant that is subscribed to the service being provided and many others. Often these rules are implemented in imperative logic throughout the application. A check for subscription may be implemented in middleware while limiting the scope of tenant access is often found in the WHERE clause of a SQL query. Spreading authorization concerns throughout an application makes it very hard to audit and understand what rules the application are actually enforcing and it makes it easy for bugs to creep in.\n\nThe more complex the application, the more authorization becomes a problem that needs a single solution. This is the problem OPA can solve. It's enticing to think about authorizing a microservice architecture with OPA. This would allow developers to focus on the problem the service needs to solve and share a common authorization abstraction.\n\n## Serverless OPA\u003Ca name=\"serverlessopa\"\u003E\u003C\u002Fa\u003E\n\nThe usual way to implement OPA for microservices is to stand up an authorization service implementing OPA and have other services invoke it over http using some of the [published middleware](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fecosystem\u002F). Even the [OpenFaaS version written in Go](https:\u002F\u002Fgithub.com\u002Fadaptant-labs\u002Fopenfaas-function-auth-opa\u002Fblob\u002Fmaster\u002Fopa-auth\u002Fhandler.go#L35) depends on a standalone authorization service. I wanted to see if I could use OPA in a 100% serverless environment, making policy decisions in an API Gateway request authorizer without the overhead of additional http requests or the need to run a separate service. I found inspiration in this excellent [sls-lambda-opa](https:\u002F\u002Fgithub.com\u002Fzotoio\u002Fsls-lambda-opa) repo.\n\nI think of this solution as a layered architecture, where the bottom layer is the authorizer implementing the OPA library, capable of compiling Rego policies. On top of that is the actual policy that states I want to compare a claim like `permissions` or `subscriptions` or I'm interested in the HTTP resource and method. Above that is the service or endpoint-specific data that states the actual resources, methods and subscriptions that will be evaluated. Then finally we have the user's session or context, delivered in a [JSON Web Token (or JWT)](https:\u002F\u002Fjwt.io).\n\n![Layers of OPA](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F48x897ff2gjbotbaj2a5.png)\u003Cfigcaption\u003EOPA sandwich?\u003C\u002Ffigcaption\u003E\n\nEach of these layers can be decoupled from the others. An authorizer function implementation might be used across several services with the same policy but different data hydrating the policy.\n\n## rego.fyi\u003Ca name=\"regofyi\"\u003E\u003C\u002Fa\u003E\n\nMy first attempt at putting all this together was a fairly terrible demo that needed a REST client and the copying of tokens. I had the urge to build a little fullstack app and so I came up with [rego.fyi](https:\u002F\u002Frego.fyi). In some ways, it's a less impressive take on [The Rego Playground](https:\u002F\u002Fplay.openpolicyagent.org\u002F), but mine is serverless and built on the kind of architecture I want to work with. I'll also caveat that I am absolute trash when it comes to visual design. I'm just awful at it. Respect to those who are good, but I'm not one of you.\n\nThe architecture of my app is a little different than what I'd envision using in production. I wanted to be able to experiment with different policies, so the policies, along with data and the user input are all sent to be evaluated by my authorizer function. The authorizer compiles the policy in real time, makes the policy decision based on the data and user input, then returns an IAM policy document specifying whether my Lambda function can be invoked, as appropriate.\n\nIn a real application, I likely wouldn't want to compile the policy on request, but instead compile it once on startup. I don't have the expectation of needing to change policies on the fly, though if I did, the policy could be loaded from S3 or a database. What I would probably do in a real application is load the policy from a Lambda Layer.\n\n## Rego Policy\u003Ca name=\"regopolicy\"\u003E\u003C\u002Fa\u003E\n\nI am by no means an expert on the rego language and won't give an overview here when there are already [useful docs](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002F#rego). I did manage to put together a workable policy for my experiment.\n\n```rego\npackage policy\n\nimport data.requests\nimport data.permissions\nimport data.subscriptions\n\ndefault allow = false\n\nallow {\n    check_policy[input]\n}\n\ncheck_policy[input] {\n    r = requests[_]\n    some i; match_with_wildcard(permissions, input.permissions[i])\n    some j; match_with_wildcard(subscriptions, input.subscriptions[j])\n    match_with_wildcard(r.methods, input.method)\n    match_with_wildcard(r.resources, input.resource)\n}\n\nmatch_with_wildcard(allowed, value) {\n    allowed[_] = \"*\"\n}\nmatch_with_wildcard(allowed, value) {\n    allowed[_] = value\n}\n```\n\nThe syntax of this policy is [explained well in the docs](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fpolicy-language\u002F), but just to call out a few things, everything in `check_policy` can be considered an AND comparison while the duplicative call signature of `match_with_wildcard` makes it an OR comparison. `some i; match_with_wildcard(permissions, input.permissions[i])` is a fairly elegant one-liner that makes sure one item in the left-side array matches at least one item in the right-side array.\n\nNote the policy defines fields I care about, namely the HTTP `method` and `resource` as well as my custom claims of `permissions` and `subscriptions`. This policy doesn't include anything about the values that should be compared to, but does describe the shape of the data and how it should be compared. In order to give those values, we need a data file.\n\n```json\n{\n  \"requests\": [{ \"methods\": [\"GET\"], \"resources\": [\"\u002Forders\"] }],\n  \"permissions\": [\"start_order\", \"view_invoice\"],\n  \"subscriptions\": [\"newsletter\"]\n}\n```\nThis data file could apply to one API while another one with permissions like `cuddle_hedgehogs` or `introspect_navel` protects another one. That's the power of this layered approach! But the best part is rego ships with a [testing framework](https:\u002F\u002Fwww.openpolicyagent.org\u002Fdocs\u002Flatest\u002Fpolicy-testing\u002F).\n\nThe best way to experience a good separation of concerns is with some solid unit tests. They are quite easy to write.\n\n```rego\npackage policy\n\ntest_get_allowed {\n    allow with input as {\"permissions\":[\"start_order\"], \"resource\": \"\u002Forders\", \"method\":\"GET\", \"subscriptions\":[\"newsletter\"]}\n}\n\ntest_get_wrong_subcription_denied {\n    not allow with input as {\"permissions\":[\"start_order\"], \"resource\": \"\u002Forders\", \"method\":\"GET\", \"subscriptions\":[\"pizza_of_the_month\"]}\n}\n\ntest_get_wrong_permission_denied {\n    not allow with input as {\"permissions\":[\"change_password\"], \"resource\": \"\u002Forders\", \"method\":\"GET\", \"subscriptions\":[\"newsletter\"]}\n}\n```\n\nI'm providing the different user inputs and expecting them to either be allowed or not. Rego also gives me test coverage out of the box!\n\n```bash\n% opa test . -c\n{\n  \"files\": {\n    \"policy.rego\": {\n      \"covered\": [\n        {\n          \"start\": {\n            \"row\": 7\n          },\n          \"end\": {\n            \"row\": 7\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 9\n          },\n          \"end\": {\n            \"row\": 10\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 13\n          },\n          \"end\": {\n            \"row\": 18\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 22\n          },\n          \"end\": {\n            \"row\": 22\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 24\n          },\n          \"end\": {\n            \"row\": 25\n          }\n        }\n      ],\n      \"not_covered\": [\n        {\n          \"start\": {\n            \"row\": 21\n          },\n          \"end\": {\n            \"row\": 21\n          }\n        }\n      ],\n      \"coverage\": 92.3\n    },\n    \"policy_test.rego\": {\n      \"covered\": [\n        {\n          \"start\": {\n            \"row\": 3\n          },\n          \"end\": {\n            \"row\": 4\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 7\n          },\n          \"end\": {\n            \"row\": 8\n          }\n        },\n        {\n          \"start\": {\n            \"row\": 11\n          },\n          \"end\": {\n            \"row\": 12\n          }\n        }\n      ],\n      \"coverage\": 100\n    }\n  },\n  \"coverage\": 94.75\n}\n```\n\nOkay, that's a bit verbose and looks like I need another test, but still really useful. There's a `--format=pretty` option, but it doesn't seem to do anything. Perhaps it's a WIP.\n\nAnyway, this is great! Our old applications with some of the authorization logic in middleware, some in SQL and some in between just can't compete with the ability to unit test the policy logic separate from any application code.\n\n## OPA Authorizer\u003Ca name=\"opaauthorizer\"\u003E\u003C\u002Fa\u003E\n\nThe only difference between a RequestAuthorizer and a TokenAuthorizer is the TokenAuthorizer only sees the specified token while a RequestAuthorizer sees the entire request. This is a better fit, since I want to look at things like the HTTP method and path.\n\nMy authorizer function needs to:\n1. Unpack my \"token\" (which really consists of the policy, data and user token, base64 encoded for demo purposes)\n2. Compile the policy with the provided data.\n3. Compare the user input and request to the policy.\n4. Return an appropriate IAM policy to allow or deny access to the function handler.\n\nThis authorizer needs to be written in Go because the supporting OPA libraries are only available to the Go runtime. I normally write TypeScript, but this was my second try at Go and I think I did okay, thanks to countless examples and tutorials across the Internet. In fact, it's fair to say that [imitation](https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi\u002Fblob\u002Fmain\u002Ffns\u002Fgo\u002Fauthorizer.go) is a sincere form of [flattery](https:\u002F\u002Fgithub.com\u002Fzotoio\u002Fsls-lambda-opa\u002Fblob\u002Fmaster\u002Fopacheck\u002Fmain.go).\n\nThis was also the first time I've used Go with Lambda and I must say, this might be addicting.\n\n![Lambda Console](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5b0310hx5k2pylykx5f4.png)\u003Cfigcaption\u003EMillisecond billing, yeah!\u003C\u002Ffigcaption\u003E\n\nI'm doing around 50ms with cold starts and single-digits otherwise, even though I'm doing all of those things (unpacking, compiling, deciding, generating) on every request. If the policy is compiled at start time, it's even faster.\n\n## Web App\u003Ca name=\"webapp\"\u003E\u003C\u002Fa\u003E\n\nMy poor design skills notwithstanding, I'm reasonably good at programming in React. I built off a [previous effort](https:\u002F\u002Fdev.to\u002Faws-builders\u002Faws-cdk-one-step-s3-websites-with-esbuild-2e3h) to do a simple fullstack non-CRA* React app with esbuild. I think it works pretty well.\n\nIn order to keep my app from looking like complete trash, I used [Material-UI](https:\u002F\u002Fmaterial-ui.com\u002F) from Google for the components and that was pretty easy. I also delved into [Testing Library](https:\u002F\u002Ftesting-library.com\u002Fdocs\u002Freact-testing-library\u002Fintro\u002F) and I find it quite nice and loved that I could write tests without having to render anything shallowly. I used [React Context](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fcontext.html) for state and I like that a lot better than working with Redux. You can check my code or query about this in the comments as I'm not going to do into great detail here, but as someone who doesn't program in React every day, it's nice checking in and seeing these innovations.\n\nThe app is just one page with no routing. When thinking about how to do this app, I actually thought about trying to figure out some kind of client-side JWT or perhaps do a round trip to a backend to get a user token. Ultimately I decided that cryptographic signing is beyond the scope of what I wanted to do in this app, so all it does is stringify the various form fields, base64 encode that string and finally pass the whole thing as an Authentication header. This allows me to have a decoding piece in my authorizer but of course it's in no way secure.\n\n## AWS CDK\u003Ca name=\"awscdk\"\u003E\u003C\u002Fa\u003E\n\nI love working with CDK. My post on [CDK S3 websites](https:\u002F\u002Fdev.to\u002Faws-builders\u002Faws-cdk-one-step-s3-websites-with-esbuild-2e3h) covers most of topics relating to asset bundling, but it's worth remarking on here. My CDK app handles all the asset bundling of my React web app (written in TypeScript), my authorizer function (written in Go) and my function handler (written in TypeScript). Because of the way asset bundling works in CDK, I can safely `cdk deploy` and only the parts of the application that have changed will deploy. This is great for a fullstack application and makes deployments very fast. I'll dig into this topic a bit more in a future post.\n\nI also was able to get a unified `npm test` command that runs all the tests for:\n* CDK infrastructure as code written in TypeScript\n* React web app written in TypeScript\n* Lambda function handler written in TypeScript\n* Authorizer function written in Go\n* Policy written in Rego\n```bash\n% npm t\n\n\u003E cdk-esbuild-s3-website@0.0.1 pretest \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E npm run lint\n\n\n\u003E cdk-esbuild-s3-website@0.0.1 lint \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E eslint . --ext=.js,.ts\n\n\n\u003E cdk-esbuild-s3-website@0.0.1 test \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E npm run test:opa && npm run test:go && npm run test:ts\n\n\n\u003E cdk-esbuild-s3-website@0.0.1 test:opa \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E opa test .\u002Fopa\n\nPASS: 3\u002F3\n\n\u003E cdk-esbuild-s3-website@0.0.1 test:go \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E go test .\u002F...\n\nok  \t_\u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\u002Ffns\u002Fgo\t1.222s\n\n\u003E cdk-esbuild-s3-website@0.0.1 test:ts \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E jest --coverage --silent\n\n PASS   node  fns\u002Fts\u002Flambdalith.spec.ts\n PASS   dom  ui\u002Fproviders\u002FPayloadsProvider.spec.tsx\nBundling asset Default\u002FAuthZFun\u002FCode\u002FStage...\ngo version go1.16 darwin\u002Famd64\nBundling asset WebTestStack\u002FDeployWebsite\u002FAsset1\u002FStage...\nBundling asset ApiTestStack\u002FAuthZFun\u002FCode\u002FStage...\n0.8.56\ngo version go1.16 darwin\u002Famd64\nBundling asset TestStack\u002FDeployWebsite\u002FAsset1\u002FStage...\n0.8.56\n\n\u003E cdk-esbuild-s3-website@0.0.1 build \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E npm run clean && npm run build:website\n\n\n\u003E cdk-esbuild-s3-website@0.0.1 build \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E npm run clean && npm run build:website\n\n PASS   dom  ui\u002Fcomponents\u002FHeader.spec.tsx\nBundling asset Default\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   dom  ui\u002Fcomponents\u002FTextArea.spec.tsx\n\n\u003E cdk-esbuild-s3-website@0.0.1 clean \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E rimraf cdk.out coverage website\u002Fjs\n\n\n\u003E cdk-esbuild-s3-website@0.0.1 clean \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E rimraf cdk.out coverage website\u002Fjs\n\nBundling asset ApiTestStack\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   node  cdk\u002Flambda.spec.ts\n PASS   dom  ui\u002Fcomponents\u002FRequestControl.spec.tsx\n\n\u003E cdk-esbuild-s3-website@0.0.1 build:website \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E NODE_ENV=production ts-node --files esbuild.ts build\n\n PASS   dom  ui\u002FApp.spec.tsx\n\n\u003E cdk-esbuild-s3-website@0.0.1 build:website \u002FUsers\u002Fmattmorgan\u002Fmine\u002Frego.fyi\n\u003E NODE_ENV=production ts-node --files esbuild.ts build\n\n PASS   node  cdk\u002FrestApi.spec.ts\nRunning build...\nRunning build...\nBundling asset TestStack\u002FAuthZFun\u002FCode\u002FStage...\n PASS   node  cdk\u002Fwebsite.spec.ts (7.308 s)\ngo version go1.16 darwin\u002Famd64\nBundling asset TestStack\u002FLambdalithFn\u002FCode\u002FStage...\n PASS   node  cdk\u002Frego.fyi-stack.spec.ts (8.261 s)\n-----------------------|---------|----------|---------|---------|-------------------\nFile                   | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s\n-----------------------|---------|----------|---------|---------|-------------------\nAll files              |     100 |      100 |     100 |     100 |\n cdk                   |     100 |      100 |     100 |     100 |\n  getCFAndZone.ts      |     100 |      100 |     100 |     100 |\n  lambda.ts            |     100 |      100 |     100 |     100 |\n  rego.fyi-stack.ts    |     100 |      100 |     100 |     100 |\n  restApi.ts           |     100 |      100 |     100 |     100 |\n  website.ts           |     100 |      100 |     100 |     100 |\n fns\u002Fts                |     100 |      100 |     100 |     100 |\n  lambdalith.ts        |     100 |      100 |     100 |     100 |\n opa                   |     100 |      100 |     100 |     100 |\n  policy.rego          |     100 |      100 |     100 |     100 |\n ui                    |     100 |      100 |     100 |     100 |\n  App.tsx              |     100 |      100 |     100 |     100 |\n ui\u002Fcomponents         |     100 |      100 |     100 |     100 |\n  Header.tsx           |     100 |      100 |     100 |     100 |\n  RequestControl.tsx   |     100 |      100 |     100 |     100 |\n  Sidebar.tsx          |     100 |      100 |     100 |     100 |\n  TextArea.tsx         |     100 |      100 |     100 |     100 |\n ui\u002Fpages              |     100 |      100 |     100 |     100 |\n  Rego.tsx             |     100 |      100 |     100 |     100 |\n ui\u002Fproviders          |     100 |      100 |     100 |     100 |\n  PayloadsProvider.tsx |     100 |      100 |     100 |     100 |\n-----------------------|---------|----------|---------|---------|-------------------\n\nTest Suites: 10 passed, 10 total\nTests:       27 passed, 27 total\nSnapshots:   6 passed, 6 total\nTime:        8.804 s, estimated 9 s\n```\nThanks to [jest projects](https:\u002F\u002Fgithub.com\u002Felthrasher\u002Frego.fyi\u002Fblob\u002Fmain\u002Fjest.config.js#L28), I'm able to run my `.tsx` tests with the `jsdom` test environment and the `.ts` tests with `node`. Fullstack testing!\n\n## Conclusion\u003Ca name=\"conclusion\"\u003E\u003C\u002Fa\u003E\n\nMy success at getting this working as a RequestAuthorizer makes a very compelling case for introducing OPA into serverless projects. We can join the delegation of complex authorization rules with [API Gateway request validation](https:\u002F\u002Fdocs.aws.amazon.com\u002Fapigateway\u002Flatest\u002Fdeveloperguide\u002Fapi-gateway-method-request-validation.html) and find ourselves in a world where our function handlers are very simple - or maybe even [skip them entirely](https:\u002F\u002Fdev.to\u002Felthrasher\u002Faws-cdk-api-gateway-service-integration-with-dynamodb-2ek0).\n\n[COVER IMAGE](https:\u002F\u002Fpublicdomainreview.org\u002Fcollection\u002Ftheatrum-chemicum)";c.user={name:"Matt Morgan",username:f,twitter_username:"NullishCoalesce",github_username:f,website_url:"https:\u002F\u002Fmattmorgan.cloud",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8UUw_PNP--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F248623\u002F3bc01c08-2153-41ed-8d52-c8845f3a917a.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rcDDDhWL--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F248623\u002F3bc01c08-2153-41ed-8d52-c8845f3a917a.jpeg"};c.organization={name:"AWS Community Builders ",username:g,slug:g,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zmOZQNzv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vWmcJ-ty--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-03-08T12:12:58Z",{},"https:\u002F\u002Fdev.to\u002Faws-builders\u002Frego-fyi-a-study-in-serverless-authorization-with-open-policy-agent-1ipi",15,"elthrasher","aws-builders")));
__NUXT_JSONP__("/articles/rahhularora/626424", (function(a,b,c,d,e,f){a.type_of="article";a.id=626424;a.title="The ultimate guide for data structures & algorithm interviews ðŸ”¥";a.description="By Rahul Arora, Founder Intervue  --           Why you should read this?   There are N number of dire...";a.readable_publish_date="Mar 6";a.slug="the-ultimate-guide-for-data-structures-algorithm-interviews-npo";a.path="\u002Frahhularora\u002Fthe-ultimate-guide-for-data-structures-algorithm-interviews-npo";a.url=b;a.comments_count=19;a.public_reactions_count=c;a.collection_id=d;a.published_timestamp=e;a.positive_reactions_count=c;a.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rjxO02ux--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fw4qxi1gsnhuey77654qj.png";a.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DGBEOKpN--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fw4qxi1gsnhuey77654qj.png";a.canonical_url=b;a.created_at="2021-03-05T09:24:15Z";a.edited_at="2021-03-07T18:30:06Z";a.crossposted_at=d;a.published_at=e;a.last_comment_at="2021-03-26T16:58:57Z";a.reading_time_minutes=45;a.tag_list="career, beginners, algorithms, javascript";a.tags=["career","beginners","algorithms","javascript"];a.body_html="\u003Cp\u003EBy \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Frahhularora\"\u003ERahul Arora\u003C\u002Fa\u003E, Founder \u003Ca href=\"https:\u002F\u002Fwww.intervue.io\"\u003EIntervue\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"why-you-should-read-this\" href=\"#why-you-should-read-this\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Why you should read this?\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EThere are N number of directions to go into when preparing for a technical interview. This guide is a summary of my experience and one single direction that can be taken which will give you results for sure without digressing from your path. \u003Cbr\u003E\nIt will save you time as you do not have to follow multiple resources online.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI have prepared a checklist of things from my personal experience while preparing for companies like Uber, Google, Flipkart, Amazon, Microsoft &amp; Facebook. \u003Cbr\u003E\nI gave about 2 hours everyday for a period of 2 months for the preparation and this is the summary.\u003C\u002Fp\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"how-to-read-the-guide\" href=\"#how-to-read-the-guide\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  How to read the guide\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EEach section has two things:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ESome \u003Cstrong\u003Erough notes\u003C\u002Fstrong\u003E about the techniques that can be applied in solving the questions.\u003C\u002Fli\u003E\n\u003Cli\u003EQuestions to solve for each section. The variety of questions are enough to develop a natural instinct to solve most questions that are asked in such companies. \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EEach question has a Github link with it's solution and explanation with multiple methods with which the question can be solved.\u003C\u002Fp\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"arrays\" href=\"#arrays\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Arrays\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BeVVen-v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPg9xc2Y\u002Farrays.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BeVVen-v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPg9xc2Y\u002Farrays.png\" alt=\"Arrays\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied-rough-notes\" href=\"#methods-that-can-be-applied-rough-notes\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied (rough notes):\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Esorting and then doing something, hashtable, two pointers in a loop are some of the operations that are popular to solve algos.\nHash table can also be made for storing sum etc.\u003C\u002Fli\u003E\n\u003Cli\u003Eto find all combinations use nested for loops (worst algos)\u003C\u002Fli\u003E\n\u003Cli\u003Eanother way is to stop at an element and traverse all its previous elements\u003C\u002Fli\u003E\n\u003Cli\u003Efixing one number and having two pointers one at start and one at end to make some operation\u003C\u002Fli\u003E\n\u003Cli\u003EConsider making new arrays if anything does not work or satisfies requirements. These arrays may contain cumulative sum from left to right or right to left or soul of the algo which can make computation easy.\u003C\u002Fli\u003E\n\u003Cli\u003ECompare those arrays sometimes to find algos\u003C\u002Fli\u003E\n\u003Cli\u003ECumulative sum or prod can work out to solve algos\u003C\u002Fli\u003E\n\u003Cli\u003EXOR operation can be applied to see the number repeating odd number of times as XOR will return that num\nonly if there is one number that repeats odd number of times\u003C\u002Fli\u003E\n\u003Cli\u003EIf element in an array is to be found, and length is known apply binary search. Will complete the search in O(logn) times. If binary search cant be applied look in sizes of k at a time to limit the search set.\u003C\u002Fli\u003E\n\u003Cli\u003EWe cannot find time complexity of something whose input size is unknown.\u003C\u002Fli\u003E\n\u003Cli\u003EIf some number is repeating like in 0s and 1s example, 0 can be changed to -1 for certain operations.\u003C\u002Fli\u003E\n\u003Cli\u003ETo find duplicates for array containing elements between 1 to n, iterate, lets say value is 3, go to third index and change value to negative. If value is already negative that means 3 has repeated and so on check for all.\u003C\u002Fli\u003E\n\u003Cli\u003EYou can also use an external variable OR divide array elements into relevant groups by some computation to solve the algo\u003C\u002Fli\u003E\n\u003Cli\u003EFor questions with repeating sub problems, try thinking out using recursion\u003C\u002Fli\u003E\n\u003Cli\u003Ereturning a function in recursion which is called will ultimately end of returning the base value \nwhich has to be returned\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes if the algo seems to be complicated move to a generalized format where the result is assumed to be N and you are solving it for some x by going from solution to problem, and then try to figure out the algo. (refer question 28.c for more clarification)\u003C\u002Fli\u003E\n\u003Cli\u003ECircular array can be used to implement a queue. Here the increment is not done just by incrementing by 1, but is done by incrementing by 1 and taking mod with array size. Like this you keep rotating the array. Refer question 2 stacks and queue for more info\u003C\u002Fli\u003E\n\u003Cli\u003EFor questions involving subarrays:\n\n\u003Cul\u003E\n\u003Cli\u003ENaive approach\u003C\u002Fli\u003E\n\u003Cli\u003ECan maintain another data structure (may be a queue) sometimes to solve the algo\u003C\u002Fli\u003E\n\u003Cli\u003ECan maintain a hash Table to solve the algo\u003C\u002Fli\u003E\n\u003Cli\u003ECan maintain multiple variables to solve the algo\u003C\u002Fli\u003E\n\u003Cli\u003ECan maintain two pointers to solve the algo\u003C\u002Fli\u003E\n\u003Cli\u003EKabane's algo\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion1.c\"\u003EInsertion Sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion2.c\"\u003EMerge Procedure\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion3.c\"\u003EMerge Sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion4.c\"\u003EPartition Procedure\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion5.c\"\u003EQuick Sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion6.c\"\u003EBubble Sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion7.c\"\u003ECounting Sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion8.c\"\u003Efind a pair in an array whose sum is X\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion9.c\"\u003EMoore Voting algorithm to find majority element in an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion10.c\"\u003EFind the max difference between any two elements in the array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion11.c\"\u003EFind the number occuring odd number of times in a given array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion12.c\"\u003ESeparate 0's and 1's from a given array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion13.c\"\u003ESeperate even and odd numbers using partition method for separating 0's and 1's\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion14.c\"\u003EGiven an array A, find two elements whose sum is closest to zero\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion15.c\"\u003EFind the triplet in given array that sum to given value 'x'\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion16.c\"\u003EFind the equilibrium index of an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion17.c\"\u003EIn an array of unknown size having all 0s at one side and all 1s at other, find the index where 1st 1 exists.\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion18.c\"\u003EGiven an array and an integer K, find max element for each and every contiguous subarray of size k\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion19.c\"\u003ECount number of smaller elements on the right of each element in an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion20.c\"\u003EFind the subarray with the given sum\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion21.c\"\u003EConsider and array which contains only 0's and 1's. Find largest sub array which contains only 0's and 1's\u003C\u002Fa\u003E \u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion22.c\"\u003EGiven an array of n-integers, construct product array such that prod[i] is equal to product of all elements except arr[i] without using division operator\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion23.c\"\u003EFind the duplicate in O(n) time and O(1) extra space\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion24.c\"\u003EFind the two repeating numbers in an array in which all elements are in range 1 to n occuring atleast once\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion25.c\"\u003ERotate an array of n elements by d elements\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion26.c\"\u003EGiven n non negative integers representing an elevation map where width of each bar is 1. Find the amt. of water that is trapped in between these bars after raining\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion27.c\"\u003EGiven an unsorted array of +ve integers, find the number of triangles that can be formed with three different elements as three sides of the triangle\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion28.c\"\u003EGiven an array, find the smallest number that is not possible with the sum of numbers from the array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion29.c\"\u003EWrite a program to do binary search in an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"linked-list\" href=\"#linked-list\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Linked List\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QmUikebi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FR6vRwpG\u002FLinkedlist.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QmUikebi--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FR6vRwpG\u002FLinkedlist.png\" alt=\"Linked list\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUse multiple variables to not loose track of the linked list and keep moving them ahead in a manner such that various operations can be done on a linked list\u003C\u002Fli\u003E\n\u003Cli\u003EIf you don't want a function to return a value of something, just send that value to the address of the variable by passing the address of variable as argument and accessing it has **\u003C\u002Fli\u003E\n\u003Cli\u003Emaintain hash table of addresses of the different nodes (first node has this address and so on) to access the value later without traversing\u003C\u002Fli\u003E\n\u003Cli\u003Emaintain multiple pointers. The pointers can be moved at different speeds as per requirements.\u003C\u002Fli\u003E\n\u003Cli\u003Esometimes linked list while designed can have flags to make an algo possible\u003C\u002Fli\u003E\n\u003Cli\u003EIf linked list has a loop, and two pointers are taken one moving at double the speed of other, they will meet at some point inside the loop. The distance from the start of the list to the first node where the loop starts is equal to the distance from where they meet to the first node.\u003C\u002Fli\u003E\n\u003Cli\u003ELinked list is generally is used to store large numbers which cannot be stored in an int or is used to store polynomials. If numbers are stored in linked list, you will have to apply your own operations (add, subt and so on for that)\u003C\u002Fli\u003E\n\u003Cli\u003EUse general Data structures like stacks and queues or arrays to sometimes solve the algo.\u003C\u002Fli\u003E\n\u003Cli\u003ETry connecting the end of the linked list to the front or make a loop to solve an algo.\u003C\u002Fli\u003E\n\u003Cli\u003ETo make games like snakes &amp; ladders, we can use a linked list with a random pointer, next pointer and data.\nWhenever there is a ladder or snake, the random pointer will point there else it will be NULL.\u003C\u002Fli\u003E\n\u003Cli\u003EConsider making additional connections (links to the new list or old list) for traversing or reference point of view when there are multiple things involved (random node eg:). New node sometimes can be added in the middle of the two nodes to maintain a connection and so on.\u003C\u002Fli\u003E\n\u003Cli\u003EIn program involving partition or merging always take mid as start+end\u002F2 and not subtraction because this will always give the correct value. Subtraction may not give the correct value as you keep breaking the array into smaller parts\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion1.c\"\u003EProgram to create a singly linked list, insert and delete nodes and print all of them\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion2.c\"\u003EMove the last node to the begining of a linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion3.c\"\u003ETraverse a Single linked list using recursion\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion4.c\"\u003EIterative program to reverse a linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion5.c\"\u003ERecursive program to reverse a linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion6.c\"\u003EFind the middle node of a linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion7.c\"\u003EFind the kth node from the end of the linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion8.c\"\u003EGiven a single linked list. Check if it has a loop\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion9.c\"\u003EFind the starting node of cycle if cycle exists in a given linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion10.c\"\u003ESuppose there are two single linked lists both of which merge at the same point and become a single linked list. Find the node at which they merge\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion11.c\"\u003EAlternating split of a given linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E[Clone a linked list with three elements]\n(\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster(\u002Flinked-lists\u002Fquestion12.c)\"\u003Ehttps:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster(\u002Flinked-lists\u002Fquestion12.c)\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion13.c\"\u003ECheck whether a given list is a palindrome or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion14.c\"\u003EMerge two sorted linked-lists into one sorted linked-list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion15.c\"\u003EMerge K sorted linked lists of size N into one sorted linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion16.c\"\u003EApply merge sort on linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion17.c\"\u003EConsider a single linked list with each node having an arbitrary pointer with initial value NULL.Give an algorithm to make the arbitrary pointer point to the greatest value node on its right side.\u003C\u002Fa\u003E\n-\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion18.c\"\u003EInsertion and deletion in memory efficient double linked lists\u003C\u002Fa\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"hashing\" href=\"#hashing\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Hashing\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--apg2-o5q--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F7kPCLCm\u002Fhashmaps.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--apg2-o5q--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F7kPCLCm\u002Fhashmaps.png\" alt=\"Hashmaps\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E When solving questions divide value with the size of the hashTable. Keep the size of the hash table one\ngreater than size of elements to be stored.\u003C\u002Fli\u003E\n\u003Cli\u003ESolve using chaining or linear probing\u003C\u002Fli\u003E\n\u003Cli\u003EHeap, BBST-AVL are some popular data structures that can be also used for questions involving hash table.\u003C\u002Fli\u003E\n\u003Cli\u003EBinary search is very widely used. Can only be applied if the length of array is known and if array is sorted.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes, scanning once and searching and keeping additional variables for check can do the job.\u003C\u002Fli\u003E\n\u003Cli\u003EIn hashing the structure can vary as per requirements. It can store anything from sum to frequency to pointers. So decide the structure as per always.\u003C\u002Fli\u003E\n\u003Cli\u003EFor hash table take mod with the number of elements present.\u003C\u002Fli\u003E\n\u003Cli\u003EIn case of question involving single array using recursion where tree is made, make sure that proper\nstart and end of array is chosen(specifically where array is split again and again)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fgeneral-question1.c\"\u003EGeneral question to understand linear probing\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fgeneral-question2.c\"\u003EGeneral question to understand chaining\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion1.c\"\u003ECheck whether given array contains duplicates in k-distance or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion2.c\"\u003ECheck whether two sets given are disjoint or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion3.c\"\u003EGroup all the occurences of the elements order by their first occurence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion4.c\"\u003EGiven an array A, Count the distinct elements in all windows of size K\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion5.c\"\u003EGiven an array and a range, find the elements that are in the range but not in the array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion6.c\"\u003EGiven an array, print all subarrays in the array which has sum 0\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion7.c\"\u003EFind four elements i,j,k and l in an array such that i+j=k+l\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"stacks-amp-queues\" href=\"#stacks-amp-queues\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Stacks &amp; Queues\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_mO_ZwO0--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FSNwMqP8\u002FStacks.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_mO_ZwO0--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FSNwMqP8\u002FStacks.png\" alt=\"Stacks\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ccH-WeYk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPhBnfSn\u002Fqueues.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ccH-WeYk--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPhBnfSn\u002Fqueues.png\" alt=\"Queues\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFor a stack and queue for each implementation or algo its core functionalities should hold true everytime.\nEg popping and pushing on a stack takes O(1) time.\u003C\u002Fli\u003E\n\u003Cli\u003EFor making a stack using two queues or vice-versa either burden can be on push operation or pop operation. The one having burden will hold the task of enqueuing and dequeuing to move it to the other stack or queue.\nRefer to stacks and queues question4 for more info\u003C\u002Fli\u003E\n\u003Cli\u003EFor questions in stacks and queues use additional stacks\u002Fqueues as datastructures to implement some algorithms\u003C\u002Fli\u003E\n\u003Cli\u003EYou can store the minimum or max in other stack\u002Fqueue or data structure for every push and pop and so on.\nFor eg storing the minimum so far in another stack so that each time when a number if popped off, if we pop off the minimum from the other stack, we will have min from the remaining elements sitting on top of the other stack. Like this many operations can be applied.\u003C\u002Fli\u003E\n\u003Cli\u003EYou can also modify the numbers being pushed onto a stack and maintain an external reference by doing some computations to make an algorithm work. (Eg question5).\u003C\u002Fli\u003E\n\u003Cli\u003EStack is useful where something is to be computed for every element but it is going to come late after iterating over various other elements. Since it has to follow a sequence, the no. for which computation cannot be done as of now can be pushed in the stack. The number for which computation is done can be popped off from the stack (eg. question6)\u003C\u002Fli\u003E\n\u003Cli\u003ESome algos may require implementing a stack using a different data structure. For eg using Double linked list over single linked list or using single linked list over arrays and so on. (question 7)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion1.c\"\u003EImplement a stack using arrays &amp; linked-list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion2.c\"\u003EImplement a queue using circular array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion3.c\"\u003EImplement a queue using two stacks\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion4.c\"\u003EImplement a stack using queues\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion5.c\"\u003EDesign a stack such that get Minimum should be O(1)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion6.c\"\u003EGiven an array, find the closest greater element which is present on the right side of the element\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion7.c\"\u003EImplement stack with push ,pop, find middle element, delete middle element in 0(1)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion8.c\"\u003EConsider a set of intervals, merge all overlapping intervals\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion9.c\"\u003ECheck whether parenthesis are balanced or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion10.c\"\u003EThe stock span problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion11.c\"\u003EImplement a queue using linked list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"heaps\" href=\"#heaps\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Heaps\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p8KFjL5E--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F98FXS7H\u002FHeaps.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p8KFjL5E--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F98FXS7H\u002FHeaps.png\" alt=\"Heaps\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EA large heap can be declared and only a small portion of it can always be included in the heap operations.\u003C\u002Fli\u003E\n\u003Cli\u003EWhenever a heap is built, swapping etc. will be there if elements do not follow the heap property (max or min)\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes to find largest element in an array, min heap can be made, for few first elements, and each\ntime comparisons can be done with remaining element to eliminate the minimum elements.\u003C\u002Fli\u003E\n\u003Cli\u003EMethods where min and max heap can be applied BST can also be used (depends on question) \u003C\u002Fli\u003E\n\u003Cli\u003ESometimes a combination of min heap and max heap can be used to solve questions. Min heap can contain\nmaximum elements from array and max heap can contain minimum elements from array (this can be known at runtime without sorting the array). (refer question 7)\u003C\u002Fli\u003E\n\u003Cli\u003ESince each data structure has its own significance, sometimes it is good to use multiple data structures\nlike min heap + max heap + linked list as BST and so on for some algos to perform series of operations\u003C\u002Fli\u003E\n\u003Cli\u003EGiven max heap to be converted to min heap, if you delete max each time and insert it in min heap it will\ntake logn time for each element therefore, total n elements. It will take nlogn time. Therefore, if you\njust take the array as a random array rather than taking it as a max heap you can build the min heap in O(n)\ntime which is a better method.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion1.c\"\u003EGiven an array, create a max heap\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion2.c\"\u003EGiven a max heap, apply different heap operations (find max, delete max,increase key, insert key, decrease key.)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion3.c\"\u003EWrite a program for heap sort\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion4.c\"\u003EFind a max element in a min-heap\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion5.c\"\u003EBuild a min-heap and write algo to delete an arbitrary element\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion6.c\"\u003EFind k largest elements from an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion7.c\"\u003EFind median in a stream of numbers\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion8.c\"\u003EGiven k-sorted lists, Find the minimum range to which at last one number belongs from every list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion9.c\"\u003EPrint out all integers in the form of a^3+b^3 where a and b are integers between 0 and N in sorted order\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion10.c\"\u003EConvert BST to max heap\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"trees\" href=\"#trees\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Trees\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PGteXAE4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FCmWMVZb\u002Ftrees.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PGteXAE4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FCmWMVZb\u002Ftrees.png\" alt=\"Trees\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ERecursion is used more often than not in case of trees to implement anything.\u003C\u002Fli\u003E\n\u003Cli\u003EPreorder traversal can give the path from top to any node.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes it is good to store the path in an array to solve some algos\u003C\u002Fli\u003E\n\u003Cli\u003EFor level order traversal queue is used. Each time parent is pushed, then when popping the parent its children are pushed on the queue\u003C\u002Fli\u003E\n\u003Cli\u003EMost questions in trees involve doing the core algo on the LST and then on the RST and in the end using recursion getting the desired result.\u003C\u002Fli\u003E\n\u003Cli\u003EIn  a tree sometimes, if two pointers are to be returned for a DLL, we return only one and make the other point to the one that is also required so that we can get it using the one that is returned. Refer to question7 method2\u003C\u002Fli\u003E\n\u003Cli\u003Ewhile applying recursion whatever is returned is returned for that particular function stack and will be assigned to the variable or thing that called that execution stack. In case local variables in recursion are to be used pass them as address and argument should be of type pointer while assignment.\u003C\u002Fli\u003E\n\u003Cli\u003EThere are two ways of incrementing levels while traversal, one is to increment once when visiting LST and RST and decrement once when returning from LST or RST OR pass level as argument as level+1, when visiting LST and so on.\u003C\u002Fli\u003E\n\u003Cli\u003EPreorder traversal is best when you have to print nodes using some logic or visit any node given distance from another node or root. (even true for vertical tree order traversal)\u003C\u002Fli\u003E\n\u003Cli\u003ESomtimes hashtable can be used to store elements while traversal. Hashing comes in handy while searching for elements using a particular logic. So can be implemented along with trees.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes if there is a problem determining the size of the hash table, linked list can be used instead which will further have linked lists attach to each nodes. So each node of the main linked list will behave as a cell of the hash Table.\u003C\u002Fli\u003E\n\u003Cli\u003EDeleting paths in recursion means, just free the root.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes other functions can also be used inside recursion.\u003C\u002Fli\u003E\n\u003Cli\u003EThe nodes of a subtree will always occur together in case of any traversal. The order may be different but there will be no interleaving.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes to compare two subtrees, we can apply inorder and preorder OR inorder or postorder traversal and compare the o\u002Fp strings in the end. As studied earlier, preorder and inorder or postorder and inorder will \nalways generate a unique tree.\u003C\u002Fli\u003E\n\u003Cli\u003EIn case of question involving single array using recursion where tree is made, make sure that proper\nstart and end of array is chosen(specifically where array is split again and again)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion1.c\"\u003EBuild a binary search tree and apply various operations on it\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion2.c\"\u003ECheck whether two trees are identical or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion3.c\"\u003EProgram to make a mirror tree of a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion4.c\"\u003EImplementation of Level order traversal in case of trees\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion5.c\"\u003EFind lowest common ancestor of given two nodes in a binary search tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion6.c\"\u003ESolve the problem above for the binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion7.c\"\u003EConvert a binary tree into a double linked list in such a way that the order of nodes represents the inorder traversal of binary tree. Note this has to be done in place\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion8.c\"\u003EFind the diameter of the given binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion9.c\"\u003EGet the level of a given key in a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion10.c\"\u003EPrint nodes k-distance from the root\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion11.c\"\u003EPrint nodes which are at a k distance from the given key in a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion12.c\"\u003EProgram to implement vertical tree order traversal\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion13.c\"\u003EVertical sum of the given binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion14.c\"\u003ECheck whether the given binary tree is sum tree or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion15.c\"\u003EPrint top view of a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion16.c\"\u003EPrint bottom view of a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion17.c\"\u003EPrint left view of a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion18.c\"\u003ERemove all paths of length k from root in a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion19.c\"\u003ECheck whether a given binary tree if a subtree of another binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion20.c\"\u003ECheck whether given two nodes are cousins in a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion21.c\"\u003EForm a balanced binary search tree from a given sorted array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion22.c\"\u003EConvert a given binary search tree into balanced binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"strings\" href=\"#strings\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Strings\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z3afb3wb--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FdQGKBLy\u002FStrings.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z3afb3wb--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FdQGKBLy\u002FStrings.png\" alt=\"Strings\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EAll concepts of arrays are applicable to strings, since they are characters arrays (the ones that are general and not just applicable to numbers)\u003C\u002Fli\u003E\n\u003Cli\u003EFor searching both BST and hash table can be applied.\u003C\u002Fli\u003E\n\u003Cli\u003EHash table can be made for a character array (string). Length of hashtable should be 256, because ASCII values maximum is upto 255 starting from zero, therefore only that much space will be taken at max.\u003C\u002Fli\u003E\n\u003Cli\u003ETwo pointers in a loop both on same side one tracking duplicates one tracking unique can be used to remove duplicates from a string.\u003C\u002Fli\u003E\n\u003Cli\u003EIn case of string arr size should be measured using strlen and not using sizeof as sizeof also includes \\0\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes a string can be merged with itself or the other to solve some algos. For eg: if one string is rotation of the other, concatenating one with itself can give a string where second string will be a substring in this string.\u003C\u002Fli\u003E\n\u003Cli\u003EStore as many things as required to solve the algo in hash table as it is a structure \u003C\u002Fli\u003E\n\u003Cli\u003EIt is always good to free memory assigned to hashTable after the end of the program\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes hashtable value can be decremented and not incremented to solve an algo for eg. finding anagram\u003C\u002Fli\u003E\n\u003Cli\u003EExcel column number and name relation has to do with the number system. In case of excel the number system\nbase is 26. Therefore numbers are from 1-26. Just that numbers in this case start from 1 and not from zero\nas compared to other bases for eg 2 which has 0 and 1 and so on.\nTherefore given a number we can keep dividing it by 26 until we receive a number which is less than 26 as\nremainder.\nThen we take the remainder and quotient from bottom to top and assign them alphabets corresponding to their\nvalues.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion1.c\"\u003EFind a maximum occuring character in a given string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion2.c\"\u003ERemove duplicates from a given string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion3.c\"\u003ECheck whether given two strings are rotations of each other or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion4.c\"\u003EReverse the words in a given sentence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion5.c\"\u003EReverse a given string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion6.c\"\u003ECheck whether given string is palindrome or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion7.c\"\u003EFind the first non-repeating character in a given string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion8.c\"\u003ERun length encoding\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion9.c\"\u003ECheck whether given two strings are anagrams of each other\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion10.c\"\u003EFind excel column name for given excel column number\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion11.c\"\u003EFind the smallest window in the string containing all characters of another string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion12.c\"\u003EFind first non-repeating characters from a stream of characters\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"greedy\" href=\"#greedy\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Greedy\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cU9LrlYG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPtGP1GV\u002Fwhiteboard.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cU9LrlYG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FPtGP1GV\u002Fwhiteboard.png\" alt=\"Greedy\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUsed in case of optimization problems (maximize of minimize something)\u003C\u002Fli\u003E\n\u003Cli\u003EWhen to use heaps vs when to use sorting: When the problem requires just finding the min or max, we can use sorting, but if after finding something is to be inserted again for which in case of sorting it will take O(n) time as it requires finding the place, heaps are better as they take only O(logn) time to do the same thing.\u003C\u002Fli\u003E\n\u003Cli\u003EIn order to represent nodes using bits etc, (eg: huffman coding), we use trees.\u003C\u002Fli\u003E\n\u003Cli\u003EHuffman codes or optimal merge patterns where something is to be minimized, always choose the maximum\nvalue to be at the top of the tree with min edge length (or path to be traversed) and min at bottom with\nmax edge or path to be traversed to minimize work.\u003C\u002Fli\u003E\n\u003Cli\u003EMin cost spanning tree and shortest path problems are two different things. In shortest path a source will be given and we will have to reach the target in the shortest path possible given weight of each edge. In case of min cost spanning tree we have to construct a graph with min weight possible connecting ALL the nodes. Therefore priority of the algo varies\u003C\u002Fli\u003E\n\u003Cli\u003EIn greedy method, to min or max something (different methods), we can be greedy about something to solve the algo, and bring in cases which can defy out method. One of them will work.\u003C\u002Fli\u003E\n\u003Cli\u003EHash tables and mix and match of data structures like min and max heaps can also be used in solving greedy algos\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion1.c\"\u003EMake a program for greedy knapsack problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion2.c\"\u003EMake a program to implement huffman encoding\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion3.c\"\u003EMake a program to sequence given jobs with deadlines to maximize profits\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion4.c\"\u003EOptimal merge patterns\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion5.c\"\u003EProgram for PRIMS algorithm without min heap\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion6.c\"\u003EProgram for KRUSKALS algorithm\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion7.c\"\u003EProgram for DIJKSTRA algorithm\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion8.c\"\u003EProgram to implement a simple graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion9.c\"\u003EConsider n-ropes with different length. Find algo to tie up all the rope into a single rope with min cost\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion10.c\"\u003EFind max intervals from given intervals such that none of them are overlapping\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion11.c\"\u003ENumber of railway platforms\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion12.c\"\u003ERearrange the string such that same characters are d distance away\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion13.c\"\u003EProgram for PRIMS algorithm using min heap\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"divide-and-conquer\" href=\"#divide-and-conquer\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Divide and conquer\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIn repeating elements with fixed size and ordered array we can use binary search. Also linear search can be\nused where if an element should be repeating a given number of times, you can check its value at i and then\ni+given number of times to see if thats true or not.\u003C\u002Fli\u003E\n\u003Cli\u003EIn divide and conquer even number of multiplications can be reduced from n to logn to get the same result. Example is the pow function where the base value is square everytime and power is halved everytime to get the same answer in logn multiplications. In case the power value is odd, the result is given the base value such that power value is converted to even and then same operations are applied.\u003C\u002Fli\u003E\n\u003Cli\u003EIn binary search whatever the algo be, always start from the middle and compare values to the left or right. You may even compare the extreme left and the right values to see lower and upper bound or some pattern to solve the algo. But in binary search always start from the middle. Also to break the recursion to return result successful condition will be a unique property trait at that index as per algo. Find that trait.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes rather than searching in left array or right array, it is better to divide into two components\u002Fgroups and apply various operations like comparison, merges etc. Note: since its divide and conquer number of division should be done till the end where we will be left with one element in each group.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes, we apply binary search and on finding the middle element we apply the logic that is the crux of the algo to the middle element to find out whether to search in right array or left array. Eg: crux of algo if is swapping we do swapping, if comparing we do comparing, if it is applying some formula, we do that.\u003C\u002Fli\u003E\n\u003Cli\u003ETo write the iterative version of a recursive version follow the steps below\n\n\u003Cul\u003E\n\u003Cli\u003EReplace the recursion break condition with the while loop which will run\u003C\u002Fli\u003E\n\u003Cli\u003EApply the same conditions and update the value of the variables in that condition. These variables will be a part of the while loop also. Rather than calling the function with updated values, just update the values of the variables and while loop will handle the rest\u003C\u002Fli\u003E\n\u003Cli\u003EMake sure to assign both the variable values that are passed into the function in recursion while doing it in while loop as iteration\u003C\u002Fli\u003E\n\u003Cli\u003EThe false condition (if any false value is to be returned for validation) will come after the end of while loop\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003ETo write recursive from iterative, replace while loop condition and its opposite should be break condition of recursion and reverse the sub steps\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion1.c\"\u003EFind a majority element using linear search that occurs more than n\u002F2 times\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion2.c\"\u003ENuts and bolts problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion3.c\"\u003EWrite a custom C function to implement a pow function\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion4.c\"\u003ESelect an element in sorted rotated array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion5.c\"\u003ECount inversions in an array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion6.c\"\u003EFind the missing number in arithmetic progression\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion7.c\"\u003EGiven an array containing 1's and 0's in which all 0's appear before all 1's, count the number of 1's in the array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion8.c\"\u003EGiven an array with 2n integer in the formal a1,a2,a3...b1,b2,b3.. Shuffle the array to a1b1 a2b2 a3b3 ...\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion9.c\"\u003EGiven a sorted array of non repeated integers a[1--n]. Check whether there is an index i for which a[i]=i\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion10.c\"\u003EFind the maximum element index in an array which is first increasing and then decreasing\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion11.c\"\u003ESearch an element in row wise and column wise sorted 2d array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"dynamic-programming\" href=\"#dynamic-programming\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Dynamic Programming\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProgramming in this means to use a table and we dynamically decide whether to call a function to do the computation or use this table\u003C\u002Fli\u003E\n\u003Cli\u003EDynamic programming is just like divide and conquer and can be applied to any problem with optimal substructure (given problems should be breakable into smaller problems and solution to sub problem is a part of the solution to the main problem) and overlapping sub problems and recusive eqns\u003C\u002Fli\u003E\n\u003Cli\u003EIn problems involving dynamic programming, we start from the basic case first (for eg in 0\u002F1 knapsack), we see if the weight of knapsack is 1 and object weight is 1, then if weight is 2 and object weight is 1 and so on, we keep finding solution to every basic problem to derive the solution for the main problem.\u003C\u002Fli\u003E\n\u003Cli\u003EQuestions involving subsequence, kadane's algo can be applied or hash table or pointers can be used\u003C\u002Fli\u003E\n\u003Cli\u003EIn questions involving matrices somehow, to calculate the next number as per the algo it will involve the diagnal, upper or left element as we did in most of the algos.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes we divide bigger problem into smaller problems by approaching it from the other side.\nFor eg: if a number that is needed should satisfy division by 2\u002F3\u002F5, we will rather multiply the base\nnumber with 2\u002F3\u002F5 to generate the next one. Therefore a bigger problem to generate series was broken\ndown to a smaller problem to generate the next number each time. To keep track of multiple generations\nsometimes, multiple variables can be used.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes a given problem can be solved by reducing it to another known problem whose solution\nis known.\u003C\u002Fli\u003E\n\u003Cli\u003EFor problems involving subsequences, we can break them down to smaller problems. Specifically for \nlinear array, array of length 1 less than total can be taken and a pattern can be found for dynamic programming to make recursive equations. \u003C\u002Fli\u003E\n\u003Cli\u003ESometimes results of two DP solutions can be merged using some algo to find the final result.\u003C\u002Fli\u003E\n\u003Cli\u003ETo breakdown any question to DP (recursive equation), follow the crux of the question and break\nit down into a story and later generalize to form recursive equations. For eg: in case of finding the longest palindrome subsequence in a given string, we compare the last two elements to see if they match or not, this is something that we also do in a normal palindrome question. Here on\nbasis of that we are able to derive to equations if they match we move both pointers to next location, if they dont we move one of them (two cases) and find whichever is maximum. Then\nusing these recursive equations we build a tree taking an example in mind. Then we find overlapping problems. To see unique problems we generalize the question for which we made the tree to i and j and rather finding how many values of j can exist for each value of i everytime. By that calculation we find unique solutions and solve the question making a table of that size.\u003C\u002Fli\u003E\n\u003Cli\u003ESee if a DP is becoming a fibonacci series. For eg: in the stairs problem\ntotal ways to reach the nth step  f(n) = f(n-1) + f(n-2)\ni.e from n-1 it can take you 1 step and from n-2 it can take you only 1 step of size 2. Therefore, this is\nnothing but fibonacci series.\u003C\u002Fli\u003E\n\u003Cli\u003EIn some algos involving DP you can start from n and in that case answer to n is dependent on n-1 and so on.\u003C\u002Fli\u003E\n\u003Cli\u003EMost problems involving strings can be taken as S(i,j), either we compare last characters then if equal\nit gets converted to i-1,j-1 or we take min or max of i,j-1 and i-1,j\u003C\u002Fli\u003E\n\u003Cli\u003ESomtimes if the problem is already a table, you need to reverse engineer it to find the min number of ways to do something. Example create a new table and start from the very bottom and construct the solution updwards. Answer in that case will be the cell 0,0\u003C\u002Fli\u003E\n\u003Cli\u003EIf a string and its reversal have a common subsequence, then definately that common subsequence is going to be a palindrome\u003C\u002Fli\u003E\n\u003Cli\u003EWhenever a problem is given involving string, check if LCS can be used\u003C\u002Fli\u003E\n\u003Cli\u003EWhenever a generic problem is given check if it is becoming a fibonacci series or a form of it.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion1.c\"\u003EAlgorithm to find optimized soln for matrix chain multiplication\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion2.c\"\u003ECompute Longest common subsequence between two strings\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion3.c\"\u003EMultistage graph dynamic programming algorithm\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion4.c\"\u003E0\u002F1 Knapsack dynamic programming algorithm\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion5.c\"\u003EFind a subset in an array whose sum is w\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion6.c\"\u003ETravelling salesman problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion7.c\"\u003EAll pair shortest path algorithm\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion8.c\"\u003EFind the maximum sum sub array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion9.c\"\u003EFind the max sum increasing sub sequence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion10.c\"\u003EFind the longest subsequence in an array such that elements are consecutive\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion11.c\"\u003EGiven a binary matrix, find the largest square sub matrix with all 1's\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion12.c\"\u003EFind kth ugly number\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion13.c\"\u003EFind the longest increasing subsequence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion14.c\"\u003EFind the longest decreasing subsequence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion15.c\"\u003EPerfect hill longest subsequence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion16.c\"\u003EGiven two words, word1 and word2, find min operations to convert word1 to word2 with some given set of rules\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion17.c\"\u003ELargest sum independent set in a binary tree\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion18.c\"\u003EFind the number of n-bit integers which do not have any two consequent zeroes\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion19.c\"\u003EGiven a sentence without spaces between words. Break the words in such a way that they are meaningful\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion20.c\"\u003EPartition problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion21.c\"\u003EFind the longest palindromic subsequence\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion22.c\"\u003EGiven n-stairs, how many number of ways a person can climb to top from bottom using 1 step or 2 steps\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion23.c\"\u003ELongest non-overlapping repeating sub string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion24.c\"\u003EGiven two strings X and Y, find the minimum cost to make two strings equal using only delete operations. Cost to delete character in X is S and in Y is P\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion25.c\"\u003ECount the number of times string occured as the subsequence of the other string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion26.c\"\u003EGiven an amount and some coins, find out in how many ways can this amount be formed\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion27.c\"\u003EGiven a 2xn board and tiles of size 2x1, count the number of ways to fill the board using 2x1 tiles\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion28.c\"\u003EGiven a cost matrix mxn having a cost at each cell. Find the min cost that it will take to reach cell (m-1,n-1) from top left corner cell (0,0) if the only allowed directions to move are right, down and diagnal down\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion29.c\"\u003EGiven a string, find out if it becomes a palindrome or not after doing atmost k deletions\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion30.c\"\u003EFind the sum of digits for all numbers from 1 to N for a given N\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion31.c\"\u003EGiven a string of digits, find the length of the longest substring of a string, such that the length of the substring is '2k' digits and sum of left k digits is equal to the sum of right k digits\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion32.c\"\u003EGiven a rod of length 'n' inches and an array of prices that contains prices of all pieces of size smaller than n, find the max value obtainable by cutting the rod and selling the pieces\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion33.c\"\u003EFibonacci series\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion34.c\"\u003EMax product sub array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion35.c\"\u003EFinding the maximum square sub-matrix with all equal elements\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion36.c\"\u003EAll pair shortest path algorithm (Floyd Warshall)\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion37.c\"\u003ECollect max coins from the grid in two traversals\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"graphs\" href=\"#graphs\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Graphs\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vtvz6Whh--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F25YcXw7\u002Fgraphs.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vtvz6Whh--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002F25YcXw7\u002Fgraphs.png\" alt=\"Graphs\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EMost of the graph questions revolves around finding the adjacent nodes and doing operations on it. Finding adjacent nodes is easy as you can get it from the matrix easily by seeing if the value corresponding to that vertex and some i is 1 and that it has to be unvisited. So basically we either do DFS or BFS.\u003C\u002Fli\u003E\n\u003Cli\u003EWhen path between two vertices is to be found, they need not be connected directly. There may be some vertices\u002F nodes in between.\u003C\u002Fli\u003E\n\u003Cli\u003ESometimes a given matrix can be assumed to be a graph with a set of different rules and DFS or BFS can be applied on it.\u003C\u002Fli\u003E\n\u003Cli\u003ECheck question6 grapsh to check trick on how to access all surrounding elements of a cell in matrix using\ntwo arrays\u003C\u002Fli\u003E\n\u003Cli\u003EIn a bipartite graph a cycle will always be of even length\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion1.c\"\u003EImplement a graph using adjacency matrix and list, implement DFS and BFS, BST and DST\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion2.c\"\u003EImplement a graph using adjacency matrix and do BFT in a different way for custom value of nodes\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion3.c\"\u003EWrite a program to do topological sort in a graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion4.c\"\u003EFind if there is a path between two vertices Vi and Vj in a directed graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion5.c\"\u003EGiven an undirected graph, find if it has a cycle or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion6.c\"\u003EGiven a 2D boolean matrix, find the number of islands\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion7.c\"\u003ECheck whether a given graph is biparite or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion8.c\"\u003EDetect a cycle in a directed graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion9.c\"\u003EKosaraju algorithm to find SCCs\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion10.c\"\u003EFind if the given directed graph is eulerian\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion11.c\"\u003EFind if the given undirected graph is eulerian\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion12.c\"\u003EDijkstra algorithm for matrix\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion13.c\"\u003EDijkstra algorithm for adjacency list\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion13.c\"\u003EArticulation points and bridges in a graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion15.c\"\u003EPrint all jumping numbers smaller than or equal to a given value\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion16.c\"\u003EShortest path in directed acyclic graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion17.c\"\u003ELongest path in directed acyclic graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion18.c\"\u003EHamiltonian cycle in a graph\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"pattern-matching\" href=\"#pattern-matching\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Pattern Matching\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFor KMP to find all occurences of a pattern in a string, whenever the match is found, we assign the \npointer of pattern variable value that is there in the prefix suffix array at an index less then the\ncurrent value of the pointer and we start comparing again.\u003C\u002Fli\u003E\n\u003Cli\u003EBoyer-Moore algorithm is much more efficient than KMP at places where pattern to be searched has characters\nas different as possible. If the characters are same, then in worst case it will give a time complexity of\nO(mn) where it will end up comparing most of the characters, therefore, in case characters are mostly same\nuse KMP\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion1.c\"\u003EGiven a text and a pattern, find all occurences of a pattern in a given text.\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion2.c\"\u003EImplement KMP algorithm to find all occurences of a pattern in a given text\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion3.c\"\u003EBoyer-Moore algorithm for string finding patterns\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion4.c\"\u003ERabin-Karp for string finding patterns\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"back-tracking\" href=\"#back-tracking\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Back Tracking\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-that-can-be-applied\" href=\"#methods-that-can-be-applied\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods that can be applied:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EPermutations means ordered combinations. Eg. My juice is made by a combination of 10 fruits (order does not matter), but in case of permutations the order does matter. Basically changing the order can change the outcome means permutations. Changing the order has no effect on outcome is combination\u003C\u002Fli\u003E\n\u003Cli\u003EBacktracking uses recursion where each call in the stack has its stored values and backtracking makes\nuse of those values to do decision making at a particular level in the recursion tree\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion1.c\"\u003EGenerate all permutations of a given string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion2.c\"\u003EProgram to generate all strings of n bits\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion3.c\"\u003EN-queens problem\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"misc\" href=\"#misc\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  MISC\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"general-questions\" href=\"#general-questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  General Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion1.c\"\u003EPrint nth term of an arithmetic series\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion2.c\"\u003EA square is made by bending a single piece of wire. If we make a circle of this wire, \nwhat will be the radius and area of the circle?\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion3.c\"\u003EProgram to swap two variables without using any other variable\n\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion4.c\"\u003ECoordinates of 3 vertices of an equilateral triangle are given on a cartesian plane.\nCalculate the coordinates of the center and the area of the circle inscribed in the triangle.\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion5.c\"\u003EProgram to check if a circle can be drawn through three points in a catesian plane\n\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion6.c\"\u003EUse ternary condition operator to find min and max among three integers\n\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion7.c\"\u003EGenerate random numbers b\u002Fw 5 and 10, using probability given\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion8.c\"\u003EWrite a program to print \"Pascal's Triangle\". \u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion9.c\"\u003EWrite a program to find the sum of digits of a positive integer\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion10.c\"\u003EWrite a program to print the numbers that do not appear in the Fibonacci series\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion11.c\"\u003EWrite a function to find whether a positive integer is a power of two\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion12.c\"\u003EFind GCD of two positive numbers\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion13.c\"\u003EWrite a function to check whether a positive integer is a palindrome or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion14.c\"\u003EBig question\u003C\u002Fa\u003E (still to be done)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion15.c\"\u003EFind the maximum and minimum element in an array with a little tweak\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion16.c\"\u003EGiven an array of integers, reverse the original array\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion17.c\"\u003EImplement the given functions in the matrix\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion18.c\"\u003EWrite a program which will accept two strings and check whether all characters from the first string are present \nin the second string\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion19.c\"\u003EWrite a program to find the average of \"n\" integers entered by user\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion20.c\"\u003EWrite a program with a function\nto remove all characters in a string except alphabetical characters\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion21.c\"\u003EWrite a program to sort five words in \"Lexicographical Order\"\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion22.c\"\u003EBig question\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion23.c\"\u003EAnother big question\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion24.c\"\u003EYet another big question\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion25.c\"\u003EFind GCD and LCM of two numbers\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"advanced-data\" href=\"#advanced-data\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Advanced data\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUse KMP to find if a pattern exists in a text or not\u003C\u002Fli\u003E\n\u003Cli\u003EFor Graphs, Topological sort is possible only on directed acyclic graphs (one with no cycles). Useful when one task is dependent on other.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"advanced-data-structures\" href=\"#advanced-data-structures\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Advanced data structures\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EDisjoint sets: If two nodes are connected or belong to the same category they will be a part of the same set. Disjoint sets can be represented in two ways.\n1) Linked list\n2) Trees\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThere are three kind of operations that can be applied on such sets.\u003Cbr\u003E\n    1) Find\u003Cbr\u003E\n    2) Union\u003Cbr\u003E\n    3) Create\u003C\u002Fp\u003E\n\n\u003Cp\u003EImplementation using trees is better as we can apply union by rank and path compression to make sure find happens in logn or constant time, create anyway happens in constant time only.\u003Cbr\u003E\nIn case of linked list find takes O(n) time and union also takes O(n) time and create takes O(1) time\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"questions\" href=\"#questions\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Questions\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion1.c\"\u003ETest whether given two strings are isomorphic or not\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion2.c\"\u003EFind the length of the longest suffix which is also a prefix\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion66.c\"\u003ESort a stack\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion67.c\"\u003EGiven two strings a and b print whether they contain any common subsequence (non empty) or not.\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"bit-manipulation\" href=\"#bit-manipulation\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Bit Manipulation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zdkEiKRG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FQQFW7MQ\u002Fbit.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zdkEiKRG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FQQFW7MQ\u002Fbit.png\" alt=\"Bit Manipulation\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fbit-manipulation\u002Fquestion1.c\"\u003EFind set bits in an integer\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fbit-manipulation\u002Fquestion2.c\"\u003EFind if a number is a power of 2\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"trie\" href=\"#trie\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Trie\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LcLp_8CP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FChz2FTY\u002Ftries.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LcLp_8CP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fi.ibb.co\u002FChz2FTY\u002Ftries.png\" alt=\"Trie\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"methods-to-solve-algos-better\" href=\"#methods-to-solve-algos-better\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Methods to solve algos better\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFor extreme values refer to limits.h constants given by C\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003EXOR\u003C\u002Fcode\u003E means taking sum of the bits and dividing by two, remainder will be the answer\n= 'XOR' is commutative\u003C\u002Fli\u003E\n\u003Cli\u003E'XOR' of a number with itself is 0\u003C\u002Fli\u003E\n\u003Cli\u003E'XOR' of zero with a number is the number itself\u003C\u002Fli\u003E\n\u003Cli\u003E'1s compliment is number obtained by reversing all the bits in the binary representation of a number. o to 1 and 1 to 0'\u003C\u002Fli\u003E\n\u003Cli\u003ELinear hashing is (h(k) + i)modm (where m is the size of the hash table, h(k) is the hash function that takes the key k and returns a value i is the parameter that is incremented to get different values)\u003C\u002Fli\u003E\n\u003Cli\u003ESubarrays of an array are always contiguous whereas subsequence may not be contiguous but needs to be in the increasing order. Same applies to a string as well.\u003C\u002Fli\u003E\n\u003Cli\u003EThere are only two ways to make any data structure one is to use an array (where size is fixed and memory is contiguous) OR you can use the heap memory (structures and linked list). So Array and linked list or combo of these two are used to implement any data structure. In most cases linked list takes more time to do operations if data structure is implemented using it. But advantage is dynamic memory allocation\u003C\u002Fli\u003E\n\u003Cli\u003EFor INFIX to POSTFIX conversion, data structure used is stack. In stack all the operators are stored. For evaluation of POSTFIX stack is used to store operands\u003C\u002Fli\u003E\n\u003Cli\u003EEvaluating and expression = convert from INFIX to postfix --&gt; Evaluate POSTFIX. Time complexity: O(n)\u003C\u002Fli\u003E\n\u003Cli\u003EHeap can be implemented as a binary tree or ternary tree or n-ary tree. Heap is an almost complete binary tree. Leaves should always be filled from left to right in a heap\u003C\u002Fli\u003E\n\u003Cli\u003EHeap should be used when along with insertion, find min and delete min or max it to be done in less time\u003C\u002Fli\u003E\n\u003Cli\u003EIn a min\u002Fmax heap the root contains the min\u002Fmax element compared to its children. Applicable for all levels.\u003C\u002Fli\u003E\n\u003Cli\u003ETo make a heap rather than making a linked list (as it involves a lot of storage), we make an array.\u003C\u002Fli\u003E\n\u003Cli\u003EEvery tree which is having one node or leaf (node with zero children) is already a min or max heap.\u003C\u002Fli\u003E\n\u003Cli\u003EFrom an array if a heap is to be constructed, follow:\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight c\"\u003E\u003Ccode\u003E    \u003Cspan class=\"n\"\u003ELEFT\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ERIGHT\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003EPARENT\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalid\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Earray\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ewith\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eindex\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002FGo level by level from left to right and write elements from the array or to the array basically.\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002FNote dividing by two means right shift in binary and multiplying means left shift in binary\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002FThere can be more than 1 max or min heap of a given array\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002FIn a complete or almost complete binary tree, leaves start from floor(n\u002F2+1) to n\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EAn array in descending order is MAX HEAP and array in ascending order is MIN HEAP.\u003C\u002Fli\u003E\n\u003Cli\u003EThere is an O(n) time algo to convert an element into a heap. So no need to sort as sorting take O(nlogn)\u003C\u002Fli\u003E\n\u003Cli\u003ERecursion adds to the space complexity as well as time complexity.\u003C\u002Fli\u003E\n\u003Cli\u003EIn a max heap, finding min, deleting random element or searching an element will take O(n) time because here max heap is as good as an array.\u003C\u002Fli\u003E\n\u003Cli\u003EFor Binary Search tree implementation using an array, space complexity is O(2^n), but using linked list, it\nis O(n)\u003C\u002Fli\u003E\n\u003Cli\u003EStream of numbers mean the numbers are coming one after the other and for each input change you have to \nfind what is stated in the question.\u003C\u002Fli\u003E\n\u003Cli\u003EThere are three ways to traverse any binary tree (can be applied to 3-ary or n-ary trees as well with some modifications)\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight c\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002Fall nodes should have children, even leafs\u003C\u002Fspan\u003E\n\u003Cspan class=\"n\"\u003EINORDER\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002Fleft root right - second visit\u003C\u002Fspan\u003E\n\u003Cspan class=\"n\"\u003EPREORDER\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002Froot left right - first visit\u003C\u002Fspan\u003E\n\u003Cspan class=\"n\"\u003EPOSTORDER\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002Fleft right root - third visit\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EBinary tree is a normal thing placing the element in order as given in the array in parent child relationship from left to right BUT Binary search tree follows a particular order.\u003C\u002Fli\u003E\n\u003Cli\u003EBinary search tree is usually used to store keys. Keys generally point to a particular record. Therefore keys have to be unique.\u003C\u002Fli\u003E\n\u003Cli\u003EINORDER traversal of BST gives us all elements in ascending order. (least element left most, max right most)\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003ETo understand recursion better or to do a dry run or make a recursive program follow the method of 123. i.e executing all lines turn by turn at a single place as explained in trees double order traversal or indirect recursion\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003Cli\u003EIndirect recursion is when some function A calls B and B again calls A and so on.\u003C\u002Fli\u003E\n\u003Cli\u003ENumber of structures possible with N non-labelled nodes is 2ncn\u002Fn+1\u003C\u002Fli\u003E\n\u003Cli\u003ENumber of trees possible per structure if labelled n nodes is n! (total trees will be 2ncn\u002Fn+1 * n!)\u003C\u002Fli\u003E\n\u003Cli\u003EGiven PRE ORDER POST AND IN ORDER only 1 tree will satisfy all conditions (number of trees with n nodes given pre post and in only 1 tree is possible. Even combination of any with INRODER will generate a binary tree uniquely)\u003C\u002Fli\u003E\n\u003Cli\u003EExpression tree is a tree in which operator occupied the root along with the nodes on the left or right side. (correct side can be checked by inorder traversal). Also operators have to be arranged on the tree as per their precendence.\u003C\u002Fli\u003E\n\u003Cli\u003Epreorder, postorder and inorder traversal of an expression tree gives the respective forms.\u003C\u002Fli\u003E\n\u003Cli\u003ELCRS (left child right sibling), in this left pointer points to the left child and right pointer points\nto the siblings which are children of the parent node along with this node. Representation is used to present\ntrees having random number of children not necessary equal\u003C\u002Fli\u003E\n\u003Cli\u003EArray representation of trees is used in case of heaps where going up and down is required. The disadvantage of using array is that if a tree is skewed, arrays have to be as large as 2^n for storing n values given indexes of parent and child which is not the case in case of heaps.\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cem\u003ERecursion will keep populating the stack until dealing with statements to be executed, once a definite value truthy or falsy is returned, it will then pop off the execution context that returned that value. It is important to even return a function because then stack will know that this function is going to return something which may be a another function being returned or a value. This is how it keeps going.Note if return statement is not written then if else statement should be used so to avoid control of the program going downwards in the non satisfying condition. So return statement is just a replacement of if else in recursion\u003C\u002Fem\u003E\u003C\u002Fli\u003E\n\u003Cli\u003ELevel order traversal uses a queue in which parent is pushed onto the queue and then its popped (dequeued) and its children are pushed in order from left to right and same process is repeated. Therefore we keep scanning the nodes level by level.\u003C\u002Fli\u003E\n\u003Cli\u003ELevel order traversal is similar to BFS (breadth first search in graphs) and other traversals like inorder, preorder and postorder are similar to DFS (depth first search in graphs)\u003C\u002Fli\u003E\n\u003Cli\u003EVertical tree order traversal: Root is at a distance 0 from itself. When we move to the left child it is at a distance -1 from the root, the right child is at a distance 1 from the root. If we keep doing -1 for every left child and +1 for every right child, we will have multiple nodes at the same distance value. The nodes having same distance value fall on a vertical line. If we traverse that line, it is called vertical tree order traversal\u003C\u002Fli\u003E\n\u003Cli\u003ESum tree is the one where sum of values in the LST and sum of values in the RST is equal to the root. This is valid for all the nodes except the tree\u003C\u002Fli\u003E\n\u003Cli\u003ERecursion execution stack only remembers the next line if there is no return statement, else it will return the execution stack\u003C\u002Fli\u003E\n\u003Cli\u003ETwo nodes in a tree are siblings if they are at the same level and have same parent, are cousins if they\nare at same level but do not have same parent\u003C\u002Fli\u003E\n\u003Cli\u003EO(1) means time complexity or space complexity is not dependent on the input size\u003C\u002Fli\u003E\n\u003Cli\u003EOne string is rotation of the other, if one of the rotations of one string matches the other one.\u003C\u002Fli\u003E\n\u003Cli\u003ERun length encoding means, traversing through the given character array and displaying which character\nis repeating how many times along with the character as output. \nEg: SSMMMAAARRT =&gt; S2M3A3R2T1\u003C\u002Fli\u003E\n\u003Cli\u003ETwo strings are anagrams if they have same no of characters and they are composed of the same letters.\nEven if there are repetitions, they are going to be same. \u003C\u002Fli\u003E\n\u003Cli\u003EIdeal approach of writing a program is return from a functiona and keep strings at a single place and not scattered\u003C\u002Fli\u003E\n\u003Cli\u003EGreedy method and DP are two programing paradigms which can be used to solve optimization problems\u003C\u002Fli\u003E\n\u003Cli\u003EGreedy method fractions are allowed\u003C\u002Fli\u003E\n\u003Cli\u003EFor huffman coding to work letters must not be uniformly distributed\u003C\u002Fli\u003E\n\u003Cli\u003ESpanning tree is min number of edges present in the graph such that all nodes are connected. Span tree is always subgraph of the main graph and cannot contain edges which are not present in the main graph\u003C\u002Fli\u003E\n\u003Cli\u003ENumber of edges incident on the node is degree of node in undirected graphs. In case of directed, there is no degree but in degree and out degree\u003C\u002Fli\u003E\n\u003Cli\u003EKirchoff theorem is used to find spanning tree of non-weighted undirected simple graph\u003C\u002Fli\u003E\n\u003Cli\u003EGiven a weighted graph, finding the minimum cost spanning tree can be done using two algos PRIMS and KRUSKALS. Both are greedy methods\u003C\u002Fli\u003E\n\u003Cli\u003EIn PRIMS, whenever weights of edges are duplicates, there is a chance that we might get more than 1 spanning tree. But final cost will remaing the same for all in that case\u003C\u002Fli\u003E\n\u003Cli\u003EDijsktra algo cannot be applied to graphs having -ve weight edges because the algo does not have capability to find if that edge is -ve or its getting converted to a -ve weight cycle. If there is a -ve weight cycle in the graph shortest path will not exist as with each cycle path will keep on decreasing.\u003C\u002Fli\u003E\n\u003Cli\u003ETree is an acyclic graph\u003C\u002Fli\u003E\n\u003Cli\u003EGreedy method and dynamic programming are the only two methods that can be applied to find the solution to optimization problems. Greedy may not give the right solution everytime for each problem but will work for some of them and it takes less time. Dynamic on the other hand takes a little more time but always gives the correct answer to such problems.\u003C\u002Fli\u003E\n\u003Cli\u003En factorial is nothing but n power n\u003C\u002Fli\u003E\n\u003Cli\u003EIn a graph represented by cost matrix, if two vertices have an edge, weight will be given otherwise\nif they dont have edge it is infinity.\u003C\u002Fli\u003E\n\u003Cli\u003ETravelling salesman problem time complexity O(n^2 ^ 2^n)\u003C\u002Fli\u003E\n\u003Cli\u003EUgly number is a one which can be written as a product of 2,3 or 5 or a combination of these numbers. 1 is also considered as ugly number as it is an exception.\u003C\u002Fli\u003E\n\u003Cli\u003EWhenever highest or lowest power of two is to be found, use log operations\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E--\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion:\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EI hope this guide comes in handy at any of your interviews involving Data Structures &amp; Algorithms.\u003Cbr\u003E\nTo stay updated follow me on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Frahhularora\"\u003ETwitter\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";a.body_markdown="By [Rahul Arora](https:\u002F\u002Ftwitter.com\u002Frahhularora), Founder [Intervue](https:\u002F\u002Fwww.intervue.io)\n\n--\n\n# Why you should read this?\n\nThere are N number of directions to go into when preparing for a technical interview. This guide is a summary of my experience and one single direction that can be taken which will give you results for sure without digressing from your path. \nIt will save you time as you do not have to follow multiple resources online.\n\nI have prepared a checklist of things from my personal experience while preparing for companies like Uber, Google, Flipkart, Amazon, Microsoft & Facebook. \nI gave about 2 hours everyday for a period of 2 months for the preparation and this is the summary.\n\n--\n\n# How to read the guide\n\nEach section has two things:\n - Some **rough notes** about the techniques that can be applied in solving the questions.\n - Questions to solve for each section. The variety of questions are enough to develop a natural instinct to solve most questions that are asked in such companies. \n\nEach question has a Github link with it's solution and explanation with multiple methods with which the question can be solved.\n\n--\n\n## Arrays\n\n![Arrays](https:\u002F\u002Fi.ibb.co\u002FPg9xc2Y\u002Farrays.png)\n\n### Methods that can be applied (rough notes):\n\n- sorting and then doing something, hashtable, two pointers in a loop are some of the operations that are popular to solve algos.\nHash table can also be made for storing sum etc.\n- to find all combinations use nested for loops (worst algos)\n- another way is to stop at an element and traverse all its previous elements\n- fixing one number and having two pointers one at start and one at end to make some operation\n- Consider making new arrays if anything does not work or satisfies requirements. These arrays may contain cumulative sum from left to right or right to left or soul of the algo which can make computation easy.\n- Compare those arrays sometimes to find algos\n- Cumulative sum or prod can work out to solve algos\n- XOR operation can be applied to see the number repeating odd number of times as XOR will return that num\nonly if there is one number that repeats odd number of times\n- If element in an array is to be found, and length is known apply binary search. Will complete the search in O(logn) times. If binary search cant be applied look in sizes of k at a time to limit the search set.\n- We cannot find time complexity of something whose input size is unknown.\n- If some number is repeating like in 0s and 1s example, 0 can be changed to -1 for certain operations.\n- To find duplicates for array containing elements between 1 to n, iterate, lets say value is 3, go to third index and change value to negative. If value is already negative that means 3 has repeated and so on check for all.\n- You can also use an external variable OR divide array elements into relevant groups by some computation to solve the algo\n- For questions with repeating sub problems, try thinking out using recursion\n- returning a function in recursion which is called will ultimately end of returning the base value \nwhich has to be returned\n- Sometimes if the algo seems to be complicated move to a generalized format where the result is assumed to be N and you are solving it for some x by going from solution to problem, and then try to figure out the algo. (refer question 28.c for more clarification)\n- Circular array can be used to implement a queue. Here the increment is not done just by incrementing by 1, but is done by incrementing by 1 and taking mod with array size. Like this you keep rotating the array. Refer question 2 stacks and queue for more info\n- For questions involving subarrays:\n    - Naive approach\n    - Can maintain another data structure (may be a queue) sometimes to solve the algo\n    - Can maintain a hash Table to solve the algo\n    - Can maintain multiple variables to solve the algo\n    - Can maintain two pointers to solve the algo\n    - Kabane's algo\n\n\n### Questions\n\n- [Insertion Sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion1.c)\n- [Merge Procedure](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion2.c)\n- [Merge Sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion3.c)\n- [Partition Procedure](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion4.c)\n- [Quick Sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion5.c)\n- [Bubble Sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion6.c)\n- [Counting Sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion7.c)\n- [find a pair in an array whose sum is X](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion8.c)\n- [Moore Voting algorithm to find majority element in an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion9.c)\n- [Find the max difference between any two elements in the array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion10.c)\n- [Find the number occuring odd number of times in a given array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion11.c)\n- [Separate 0's and 1's from a given array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion12.c)\n- [Seperate even and odd numbers using partition method for separating 0's and 1's](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion13.c)\n- [Given an array A, find two elements whose sum is closest to zero](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion14.c) \n- [Find the triplet in given array that sum to given value 'x'](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion15.c)\n- [Find the equilibrium index of an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion16.c)\n- [In an array of unknown size having all 0s at one side and all 1s at other, find the index where 1st 1 exists.](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion17.c)\n- [Given an array and an integer K, find max element for each and every contiguous subarray of size k](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion18.c)\n- [Count number of smaller elements on the right of each element in an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion19.c)\n- [Find the subarray with the given sum](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion20.c) \n- [Consider and array which contains only 0's and 1's. Find largest sub array which contains only 0's and 1's](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion21.c) \n- [Given an array of n-integers, construct product array such that prod[i] is equal to product of all elements except arr[i] without using division operator](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion22.c)\n- [Find the duplicate in O(n) time and O(1) extra space](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion23.c)\n- [Find the two repeating numbers in an array in which all elements are in range 1 to n occuring atleast once](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion24.c)\n- [Rotate an array of n elements by d elements](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion25.c)\n- [Given n non negative integers representing an elevation map where width of each bar is 1. Find the amt. of water that is trapped in between these bars after raining](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion26.c)\n- [Given an unsorted array of +ve integers, find the number of triangles that can be formed with three different elements as three sides of the triangle](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion27.c)\n- [Given an array, find the smallest number that is not possible with the sum of numbers from the array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion28.c)\n- [Write a program to do binary search in an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Farrays\u002Fquestion29.c)\n\n--\n\n## Linked List\n\n![Linked list](https:\u002F\u002Fi.ibb.co\u002FR6vRwpG\u002FLinkedlist.png)\n\n### Methods that can be applied:\n\n- Use multiple variables to not loose track of the linked list and keep moving them ahead in a manner such that various operations can be done on a linked list\n- If you don't want a function to return a value of something, just send that value to the address of the variable by passing the address of variable as argument and accessing it has **\n- maintain hash table of addresses of the different nodes (first node has this address and so on) to access the value later without traversing\n- maintain multiple pointers. The pointers can be moved at different speeds as per requirements.\n- sometimes linked list while designed can have flags to make an algo possible\n- If linked list has a loop, and two pointers are taken one moving at double the speed of other, they will meet at some point inside the loop. The distance from the start of the list to the first node where the loop starts is equal to the distance from where they meet to the first node.\n- Linked list is generally is used to store large numbers which cannot be stored in an int or is used to store polynomials. If numbers are stored in linked list, you will have to apply your own operations (add, subt and so on for that)\n- Use general Data structures like stacks and queues or arrays to sometimes solve the algo.\n- Try connecting the end of the linked list to the front or make a loop to solve an algo.\n- To make games like snakes & ladders, we can use a linked list with a random pointer, next pointer and data.\nWhenever there is a ladder or snake, the random pointer will point there else it will be NULL.\n- Consider making additional connections (links to the new list or old list) for traversing or reference point of view when there are multiple things involved (random node eg:). New node sometimes can be added in the middle of the two nodes to maintain a connection and so on.\n- In program involving partition or merging always take mid as start+end\u002F2 and not subtraction because this will always give the correct value. Subtraction may not give the correct value as you keep breaking the array into smaller parts\n\n### Questions:\n\n- [Program to create a singly linked list, insert and delete nodes and print all of them](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion1.c)\n- [Move the last node to the begining of a linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion2.c)\n- [Traverse a Single linked list using recursion](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion3.c)\n- [Iterative program to reverse a linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion4.c)\n- [Recursive program to reverse a linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion5.c)\n- [Find the middle node of a linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion6.c)\n- [Find the kth node from the end of the linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion7.c)\n- [Given a single linked list. Check if it has a loop](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion8.c)\n- [Find the starting node of cycle if cycle exists in a given linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion9.c)\n- [Suppose there are two single linked lists both of which merge at the same point and become a single linked list. Find the node at which they merge](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion10.c)\n- [Alternating split of a given linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion11.c)\n- [Clone a linked list with three elements]\n(https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster(\u002Flinked-lists\u002Fquestion12.c)\n- [Check whether a given list is a palindrome or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion13.c)\n- [Merge two sorted linked-lists into one sorted linked-list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion14.c)\n- [Merge K sorted linked lists of size N into one sorted linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion15.c)\n- [Apply merge sort on linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion16.c)\n- [Consider a single linked list with each node having an arbitrary pointer with initial value NULL.Give an algorithm to make the arbitrary pointer point to the greatest value node on its right side.](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion17.c)\n-[Insertion and deletion in memory efficient double linked lists](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Flinked-lists\u002Fquestion18.c)\n\n--\n\n## Hashing\n\n![Hashmaps](https:\u002F\u002Fi.ibb.co\u002F7kPCLCm\u002Fhashmaps.png)\n\n### Methods that can be applied:\n\n-  When solving questions divide value with the size of the hashTable. Keep the size of the hash table one\ngreater than size of elements to be stored.\n- Solve using chaining or linear probing\n- Heap, BBST-AVL are some popular data structures that can be also used for questions involving hash table.\n- Binary search is very widely used. Can only be applied if the length of array is known and if array is sorted.\n- Sometimes, scanning once and searching and keeping additional variables for check can do the job.\n- In hashing the structure can vary as per requirements. It can store anything from sum to frequency to pointers. So decide the structure as per always.\n- For hash table take mod with the number of elements present.\n- In case of question involving single array using recursion where tree is made, make sure that proper\nstart and end of array is chosen(specifically where array is split again and again)\n\n\n### Questions:\n\n- [General question to understand linear probing](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fgeneral-question1.c)\n- [General question to understand chaining](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fgeneral-question2.c)\n- [Check whether given array contains duplicates in k-distance or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion1.c)\n- [Check whether two sets given are disjoint or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion2.c)\n- [Group all the occurences of the elements order by their first occurence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion3.c)\n- [Given an array A, Count the distinct elements in all windows of size K](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion4.c)\n- [Given an array and a range, find the elements that are in the range but not in the array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion5.c)\n- [Given an array, print all subarrays in the array which has sum 0](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion6.c)\n- [Find four elements i,j,k and l in an array such that i+j=k+l](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fhashing\u002Fquestion7.c)\n\n--\n\n## Stacks & Queues\n\n![Stacks](https:\u002F\u002Fi.ibb.co\u002FSNwMqP8\u002FStacks.png)\n![Queues](https:\u002F\u002Fi.ibb.co\u002FPhBnfSn\u002Fqueues.png)\n\n### Methods that can be applied:\n\n- For a stack and queue for each implementation or algo its core functionalities should hold true everytime.\nEg popping and pushing on a stack takes O(1) time.\n- For making a stack using two queues or vice-versa either burden can be on push operation or pop operation. The one having burden will hold the task of enqueuing and dequeuing to move it to the other stack or queue.\nRefer to stacks and queues question4 for more info\n- For questions in stacks and queues use additional stacks\u002Fqueues as datastructures to implement some algorithms\n- You can store the minimum or max in other stack\u002Fqueue or data structure for every push and pop and so on.\nFor eg storing the minimum so far in another stack so that each time when a number if popped off, if we pop off the minimum from the other stack, we will have min from the remaining elements sitting on top of the other stack. Like this many operations can be applied.\n- You can also modify the numbers being pushed onto a stack and maintain an external reference by doing some computations to make an algorithm work. (Eg question5).\n- Stack is useful where something is to be computed for every element but it is going to come late after iterating over various other elements. Since it has to follow a sequence, the no. for which computation cannot be done as of now can be pushed in the stack. The number for which computation is done can be popped off from the stack (eg. question6)\n- Some algos may require implementing a stack using a different data structure. For eg using Double linked list over single linked list or using single linked list over arrays and so on. (question 7)\n\n### Questions:\n\n- [Implement a stack using arrays & linked-list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion1.c)\n- [Implement a queue using circular array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion2.c)\n- [Implement a queue using two stacks](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion3.c)\n- [Implement a stack using queues](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion4.c)\n- [Design a stack such that get Minimum should be O(1)](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion5.c)\n- [Given an array, find the closest greater element which is present on the right side of the element](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion6.c)\n- [Implement stack with push ,pop, find middle element, delete middle element in 0(1)](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion7.c)\n- [Consider a set of intervals, merge all overlapping intervals](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion8.c)\n- [Check whether parenthesis are balanced or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion9.c)\n- [The stock span problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion10.c)\n- [Implement a queue using linked list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstacks-and-queues\u002Fquestion11.c)\n\n--\n\n## Heaps\n\n![Heaps](https:\u002F\u002Fi.ibb.co\u002F98FXS7H\u002FHeaps.png)\n\n### Methods that can be applied:\n- A large heap can be declared and only a small portion of it can always be included in the heap operations.\n- Whenever a heap is built, swapping etc. will be there if elements do not follow the heap property (max or min)\n- Sometimes to find largest element in an array, min heap can be made, for few first elements, and each\ntime comparisons can be done with remaining element to eliminate the minimum elements.\n- Methods where min and max heap can be applied BST can also be used (depends on question) \n- Sometimes a combination of min heap and max heap can be used to solve questions. Min heap can contain\nmaximum elements from array and max heap can contain minimum elements from array (this can be known at runtime without sorting the array). (refer question 7)\n- Since each data structure has its own significance, sometimes it is good to use multiple data structures\nlike min heap + max heap + linked list as BST and so on for some algos to perform series of operations\n- Given max heap to be converted to min heap, if you delete max each time and insert it in min heap it will\ntake logn time for each element therefore, total n elements. It will take nlogn time. Therefore, if you\njust take the array as a random array rather than taking it as a max heap you can build the min heap in O(n)\ntime which is a better method.\n\n### Questions\n\n- [Given an array, create a max heap](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion1.c)\n- [Given a max heap, apply different heap operations (find max, delete max,increase key, insert key, decrease key.)](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion2.c)\n- [Write a program for heap sort](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion3.c)\n- [Find a max element in a min-heap](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion4.c)\n- [Build a min-heap and write algo to delete an arbitrary element](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion5.c)\n- [Find k largest elements from an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion6.c)\n- [Find median in a stream of numbers](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion7.c)\n- [Given k-sorted lists, Find the minimum range to which at last one number belongs from every list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion8.c)\n- [Print out all integers in the form of a^3+b^3 where a and b are integers between 0 and N in sorted order](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion9.c)\n- [Convert BST to max heap](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fheaps\u002Fquestion10.c)\n\n--\n\n## Trees\n\n![Trees](https:\u002F\u002Fi.ibb.co\u002FCmWMVZb\u002Ftrees.png)\n\n### Methods that can be applied:\n\n- Recursion is used more often than not in case of trees to implement anything.\n- Preorder traversal can give the path from top to any node.\n- Sometimes it is good to store the path in an array to solve some algos\n- For level order traversal queue is used. Each time parent is pushed, then when popping the parent its children are pushed on the queue\n- Most questions in trees involve doing the core algo on the LST and then on the RST and in the end using recursion getting the desired result.\n- In  a tree sometimes, if two pointers are to be returned for a DLL, we return only one and make the other point to the one that is also required so that we can get it using the one that is returned. Refer to question7 method2\n- while applying recursion whatever is returned is returned for that particular function stack and will be assigned to the variable or thing that called that execution stack. In case local variables in recursion are to be used pass them as address and argument should be of type pointer while assignment.\n- There are two ways of incrementing levels while traversal, one is to increment once when visiting LST and RST and decrement once when returning from LST or RST OR pass level as argument as level+1, when visiting LST and so on.\n- Preorder traversal is best when you have to print nodes using some logic or visit any node given distance from another node or root. (even true for vertical tree order traversal)\n- Somtimes hashtable can be used to store elements while traversal. Hashing comes in handy while searching for elements using a particular logic. So can be implemented along with trees.\n- Sometimes if there is a problem determining the size of the hash table, linked list can be used instead which will further have linked lists attach to each nodes. So each node of the main linked list will behave as a cell of the hash Table.\n- Deleting paths in recursion means, just free the root.\n- Sometimes other functions can also be used inside recursion.\n- The nodes of a subtree will always occur together in case of any traversal. The order may be different but there will be no interleaving.\n- Sometimes to compare two subtrees, we can apply inorder and preorder OR inorder or postorder traversal and compare the o\u002Fp strings in the end. As studied earlier, preorder and inorder or postorder and inorder will \nalways generate a unique tree.\n- In case of question involving single array using recursion where tree is made, make sure that proper\nstart and end of array is chosen(specifically where array is split again and again)\n\n### Questions:\n\n- [Build a binary search tree and apply various operations on it](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion1.c)\n- [Check whether two trees are identical or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion2.c)\n- [Program to make a mirror tree of a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion3.c)\n- [Implementation of Level order traversal in case of trees](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion4.c)\n- [Find lowest common ancestor of given two nodes in a binary search tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion5.c)\n- [Solve the problem above for the binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion6.c)\n- [Convert a binary tree into a double linked list in such a way that the order of nodes represents the inorder traversal of binary tree. Note this has to be done in place](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion7.c)\n- [Find the diameter of the given binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion8.c)\n- [Get the level of a given key in a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion9.c)\n- [Print nodes k-distance from the root](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion10.c)\n- [Print nodes which are at a k distance from the given key in a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion11.c)\n- [Program to implement vertical tree order traversal](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion12.c)\n- [Vertical sum of the given binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion13.c)\n- [Check whether the given binary tree is sum tree or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion14.c)\n- [Print top view of a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion15.c)\n- [Print bottom view of a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion16.c)\n- [Print left view of a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion17.c)\n- [Remove all paths of length k from root in a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion18.c)\n- [Check whether a given binary tree if a subtree of another binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion19.c)\n- [Check whether given two nodes are cousins in a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion20.c)\n- [Form a balanced binary search tree from a given sorted array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion21.c)\n- [Convert a given binary search tree into balanced binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Ftrees\u002Fquestion22.c)\n\n--\n\n## Strings\n\n![Strings](https:\u002F\u002Fi.ibb.co\u002FdQGKBLy\u002FStrings.png)\n\n### Methods that can be applied\n\n- All concepts of arrays are applicable to strings, since they are characters arrays (the ones that are general and not just applicable to numbers)\n- For searching both BST and hash table can be applied.\n- Hash table can be made for a character array (string). Length of hashtable should be 256, because ASCII values maximum is upto 255 starting from zero, therefore only that much space will be taken at max.\n- Two pointers in a loop both on same side one tracking duplicates one tracking unique can be used to remove duplicates from a string.\n- In case of string arr size should be measured using strlen and not using sizeof as sizeof also includes \\0\n- Sometimes a string can be merged with itself or the other to solve some algos. For eg: if one string is rotation of the other, concatenating one with itself can give a string where second string will be a substring in this string.\n- Store as many things as required to solve the algo in hash table as it is a structure \n- It is always good to free memory assigned to hashTable after the end of the program\n- Sometimes hashtable value can be decremented and not incremented to solve an algo for eg. finding anagram\n- Excel column number and name relation has to do with the number system. In case of excel the number system\nbase is 26. Therefore numbers are from 1-26. Just that numbers in this case start from 1 and not from zero\nas compared to other bases for eg 2 which has 0 and 1 and so on.\nTherefore given a number we can keep dividing it by 26 until we receive a number which is less than 26 as\nremainder.\nThen we take the remainder and quotient from bottom to top and assign them alphabets corresponding to their\nvalues.\n\n\n### Questions\n\n- [Find a maximum occuring character in a given string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion1.c)\n- [Remove duplicates from a given string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion2.c)\n- [Check whether given two strings are rotations of each other or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion3.c)\n- [Reverse the words in a given sentence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion4.c)\n- [Reverse a given string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion5.c)\n- [Check whether given string is palindrome or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion6.c)\n- [Find the first non-repeating character in a given string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion7.c)\n- [Run length encoding](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion8.c)\n- [Check whether given two strings are anagrams of each other](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion9.c)\n- [Find excel column name for given excel column number](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion10.c)\n- [Find the smallest window in the string containing all characters of another string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion11.c)\n- [Find first non-repeating characters from a stream of characters](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fstrings\u002Fquestion12.c)\n\n--\n\n## Greedy\n\n![Greedy](https:\u002F\u002Fi.ibb.co\u002FPtGP1GV\u002Fwhiteboard.png)\n\n### Methods that can be applied:\n\n- Used in case of optimization problems (maximize of minimize something)\n- When to use heaps vs when to use sorting: When the problem requires just finding the min or max, we can use sorting, but if after finding something is to be inserted again for which in case of sorting it will take O(n) time as it requires finding the place, heaps are better as they take only O(logn) time to do the same thing.\n- In order to represent nodes using bits etc, (eg: huffman coding), we use trees.\n- Huffman codes or optimal merge patterns where something is to be minimized, always choose the maximum\nvalue to be at the top of the tree with min edge length (or path to be traversed) and min at bottom with\nmax edge or path to be traversed to minimize work.\n- Min cost spanning tree and shortest path problems are two different things. In shortest path a source will be given and we will have to reach the target in the shortest path possible given weight of each edge. In case of min cost spanning tree we have to construct a graph with min weight possible connecting ALL the nodes. Therefore priority of the algo varies\n- In greedy method, to min or max something (different methods), we can be greedy about something to solve the algo, and bring in cases which can defy out method. One of them will work.\n- Hash tables and mix and match of data structures like min and max heaps can also be used in solving greedy algos\n\n### Questions\n\n- [Make a program for greedy knapsack problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion1.c)\n- [Make a program to implement huffman encoding](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion2.c)\n- [Make a program to sequence given jobs with deadlines to maximize profits](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion3.c)\n- [Optimal merge patterns](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion4.c)\n- [Program for PRIMS algorithm without min heap](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion5.c)\n- [Program for KRUSKALS algorithm](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion6.c)\n- [Program for DIJKSTRA algorithm](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion7.c)\n- [Program to implement a simple graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion8.c)\n- [Consider n-ropes with different length. Find algo to tie up all the rope into a single rope with min cost](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion9.c)\n- [Find max intervals from given intervals such that none of them are overlapping](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion10.c)\n- [Number of railway platforms](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion11.c)\n- [Rearrange the string such that same characters are d distance away](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion12.c)\n- [Program for PRIMS algorithm using min heap](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgreedy\u002Fquestion13.c)\n\n--\n\n## Divide and conquer\n\n### Methods that can be applied:\n\n- In repeating elements with fixed size and ordered array we can use binary search. Also linear search can be\nused where if an element should be repeating a given number of times, you can check its value at i and then\ni+given number of times to see if thats true or not.\n- In divide and conquer even number of multiplications can be reduced from n to logn to get the same result. Example is the pow function where the base value is square everytime and power is halved everytime to get the same answer in logn multiplications. In case the power value is odd, the result is given the base value such that power value is converted to even and then same operations are applied.\n- In binary search whatever the algo be, always start from the middle and compare values to the left or right. You may even compare the extreme left and the right values to see lower and upper bound or some pattern to solve the algo. But in binary search always start from the middle. Also to break the recursion to return result successful condition will be a unique property trait at that index as per algo. Find that trait.\n- Sometimes rather than searching in left array or right array, it is better to divide into two components\u002Fgroups and apply various operations like comparison, merges etc. Note: since its divide and conquer number of division should be done till the end where we will be left with one element in each group.\n- Sometimes, we apply binary search and on finding the middle element we apply the logic that is the crux of the algo to the middle element to find out whether to search in right array or left array. Eg: crux of algo if is swapping we do swapping, if comparing we do comparing, if it is applying some formula, we do that.\n- To write the iterative version of a recursive version follow the steps below\n      - Replace the recursion break condition with the while loop which will run\n      - Apply the same conditions and update the value of the variables in that condition. These variables will be a part of the while loop also. Rather than calling the function with updated values, just update the values of the variables and while loop will handle the rest\n      - Make sure to assign both the variable values that are passed into the function in recursion while doing it in while loop as iteration\n      - The false condition (if any false value is to be returned for validation) will come after the end of while loop\n- To write recursive from iterative, replace while loop condition and its opposite should be break condition of recursion and reverse the sub steps\n\n### Questions:\n\n- [Find a majority element using linear search that occurs more than n\u002F2 times](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion1.c)\n- [Nuts and bolts problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion2.c)\n- [Write a custom C function to implement a pow function](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion3.c)\n- [Select an element in sorted rotated array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion4.c)\n- [Count inversions in an array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion5.c)\n- [Find the missing number in arithmetic progression](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion6.c)\n- [Given an array containing 1's and 0's in which all 0's appear before all 1's, count the number of 1's in the array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion7.c)\n- [Given an array with 2n integer in the formal a1,a2,a3...b1,b2,b3.. Shuffle the array to a1b1 a2b2 a3b3 ...](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion8.c)\n- [Given a sorted array of non repeated integers a[1--n]. Check whether there is an index i for which a[i]=i](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion9.c)\n- [Find the maximum element index in an array which is first increasing and then decreasing](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion10.c)\n- [Search an element in row wise and column wise sorted 2d array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdivide-and-conquer\u002Fquestion11.c)\n\n--\n\n## Dynamic Programming\n\n### Methods that can be applied\n\n- Programming in this means to use a table and we dynamically decide whether to call a function to do the computation or use this table\n- Dynamic programming is just like divide and conquer and can be applied to any problem with optimal substructure (given problems should be breakable into smaller problems and solution to sub problem is a part of the solution to the main problem) and overlapping sub problems and recusive eqns\n- In problems involving dynamic programming, we start from the basic case first (for eg in 0\u002F1 knapsack), we see if the weight of knapsack is 1 and object weight is 1, then if weight is 2 and object weight is 1 and so on, we keep finding solution to every basic problem to derive the solution for the main problem.\n- Questions involving subsequence, kadane's algo can be applied or hash table or pointers can be used\n- In questions involving matrices somehow, to calculate the next number as per the algo it will involve the diagnal, upper or left element as we did in most of the algos.\n- Sometimes we divide bigger problem into smaller problems by approaching it from the other side.\nFor eg: if a number that is needed should satisfy division by 2\u002F3\u002F5, we will rather multiply the base\nnumber with 2\u002F3\u002F5 to generate the next one. Therefore a bigger problem to generate series was broken\ndown to a smaller problem to generate the next number each time. To keep track of multiple generations\nsometimes, multiple variables can be used.\n- Sometimes a given problem can be solved by reducing it to another known problem whose solution\nis known.\n- For problems involving subsequences, we can break them down to smaller problems. Specifically for \nlinear array, array of length 1 less than total can be taken and a pattern can be found for dynamic programming to make recursive equations. \n- Sometimes results of two DP solutions can be merged using some algo to find the final result.\n- To breakdown any question to DP (recursive equation), follow the crux of the question and break\nit down into a story and later generalize to form recursive equations. For eg: in case of finding the longest palindrome subsequence in a given string, we compare the last two elements to see if they match or not, this is something that we also do in a normal palindrome question. Here on\nbasis of that we are able to derive to equations if they match we move both pointers to next location, if they dont we move one of them (two cases) and find whichever is maximum. Then\nusing these recursive equations we build a tree taking an example in mind. Then we find overlapping problems. To see unique problems we generalize the question for which we made the tree to i and j and rather finding how many values of j can exist for each value of i everytime. By that calculation we find unique solutions and solve the question making a table of that size.\n- See if a DP is becoming a fibonacci series. For eg: in the stairs problem\ntotal ways to reach the nth step  f(n) = f(n-1) + f(n-2)\ni.e from n-1 it can take you 1 step and from n-2 it can take you only 1 step of size 2. Therefore, this is\nnothing but fibonacci series.\n- In some algos involving DP you can start from n and in that case answer to n is dependent on n-1 and so on.\n- Most problems involving strings can be taken as S(i,j), either we compare last characters then if equal\nit gets converted to i-1,j-1 or we take min or max of i,j-1 and i-1,j\n- Somtimes if the problem is already a table, you need to reverse engineer it to find the min number of ways to do something. Example create a new table and start from the very bottom and construct the solution updwards. Answer in that case will be the cell 0,0\n- If a string and its reversal have a common subsequence, then definately that common subsequence is going to be a palindrome\n- Whenever a problem is given involving string, check if LCS can be used\n- Whenever a generic problem is given check if it is becoming a fibonacci series or a form of it.\n\n\n### Questions\n\n- [Algorithm to find optimized soln for matrix chain multiplication](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion1.c)\n- [Compute Longest common subsequence between two strings](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion2.c)\n- [Multistage graph dynamic programming algorithm](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion3.c)\n- [0\u002F1 Knapsack dynamic programming algorithm](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion4.c)\n- [Find a subset in an array whose sum is w](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion5.c)\n- [Travelling salesman problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion6.c)\n- [All pair shortest path algorithm](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion7.c)\n- [Find the maximum sum sub array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion8.c)\n- [Find the max sum increasing sub sequence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion9.c)\n- [Find the longest subsequence in an array such that elements are consecutive](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion10.c)\n- [Given a binary matrix, find the largest square sub matrix with all 1's](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion11.c)\n- [Find kth ugly number](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion12.c)\n- [Find the longest increasing subsequence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion13.c)\n- [Find the longest decreasing subsequence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion14.c)\n- [Perfect hill longest subsequence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion15.c)\n- [Given two words, word1 and word2, find min operations to convert word1 to word2 with some given set of rules](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion16.c)\n- [Largest sum independent set in a binary tree](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion17.c)\n- [Find the number of n-bit integers which do not have any two consequent zeroes](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion18.c)\n- [Given a sentence without spaces between words. Break the words in such a way that they are meaningful](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion19.c)\n- [Partition problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion20.c)\n- [Find the longest palindromic subsequence](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion21.c)\n- [Given n-stairs, how many number of ways a person can climb to top from bottom using 1 step or 2 steps](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion22.c)\n- [Longest non-overlapping repeating sub string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion23.c)\n- [Given two strings X and Y, find the minimum cost to make two strings equal using only delete operations. Cost to delete character in X is S and in Y is P](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion24.c)\n- [Count the number of times string occured as the subsequence of the other string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion25.c)\n- [Given an amount and some coins, find out in how many ways can this amount be formed](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion26.c)\n- [Given a 2xn board and tiles of size 2x1, count the number of ways to fill the board using 2x1 tiles](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion27.c)\n- [Given a cost matrix mxn having a cost at each cell. Find the min cost that it will take to reach cell (m-1,n-1) from top left corner cell (0,0) if the only allowed directions to move are right, down and diagnal down](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion28.c)\n- [Given a string, find out if it becomes a palindrome or not after doing atmost k deletions](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion29.c)\n- [Find the sum of digits for all numbers from 1 to N for a given N](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion30.c)\n- [Given a string of digits, find the length of the longest substring of a string, such that the length of the substring is '2k' digits and sum of left k digits is equal to the sum of right k digits](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion31.c)\n- [Given a rod of length 'n' inches and an array of prices that contains prices of all pieces of size smaller than n, find the max value obtainable by cutting the rod and selling the pieces](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion32.c)\n- [Fibonacci series](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion33.c)\n- [Max product sub array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion34.c)\n- [Finding the maximum square sub-matrix with all equal elements](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion35.c)\n- [All pair shortest path algorithm (Floyd Warshall)](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion36.c)\n- [Collect max coins from the grid in two traversals](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fdynamic-programming\u002Fquestion37.c)\n\n--\n\n## Graphs\n\n![Graphs](https:\u002F\u002Fi.ibb.co\u002F25YcXw7\u002Fgraphs.png)\n\n### Methods that can be applied:\n\n- Most of the graph questions revolves around finding the adjacent nodes and doing operations on it. Finding adjacent nodes is easy as you can get it from the matrix easily by seeing if the value corresponding to that vertex and some i is 1 and that it has to be unvisited. So basically we either do DFS or BFS.\n- When path between two vertices is to be found, they need not be connected directly. There may be some vertices\u002F nodes in between.\n- Sometimes a given matrix can be assumed to be a graph with a set of different rules and DFS or BFS can be applied on it.\n- Check question6 grapsh to check trick on how to access all surrounding elements of a cell in matrix using\ntwo arrays\n- In a bipartite graph a cycle will always be of even length\n\n### Questions:\n\n- [Implement a graph using adjacency matrix and list, implement DFS and BFS, BST and DST](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion1.c)\n- [Implement a graph using adjacency matrix and do BFT in a different way for custom value of nodes](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion2.c)\n- [Write a program to do topological sort in a graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion3.c)\n- [Find if there is a path between two vertices Vi and Vj in a directed graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion4.c)\n- [Given an undirected graph, find if it has a cycle or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion5.c)\n- [Given a 2D boolean matrix, find the number of islands](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion6.c)\n- [Check whether a given graph is biparite or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion7.c)\n- [Detect a cycle in a directed graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion8.c)\n- [Kosaraju algorithm to find SCCs](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion9.c)\n- [Find if the given directed graph is eulerian](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion10.c)\n- [Find if the given undirected graph is eulerian](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion11.c)\n- [Dijkstra algorithm for matrix](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion12.c)\n- [Dijkstra algorithm for adjacency list](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion13.c)\n- [Articulation points and bridges in a graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion13.c)\n- [Print all jumping numbers smaller than or equal to a given value](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion15.c)\n- [Shortest path in directed acyclic graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion16.c)\n- [Longest path in directed acyclic graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion17.c)\n- [Hamiltonian cycle in a graph](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgraphs\u002Fquestion18.c)\n\n--\n\n## Pattern Matching\n\n### Methods that can be applied:\n\n- For KMP to find all occurences of a pattern in a string, whenever the match is found, we assign the \npointer of pattern variable value that is there in the prefix suffix array at an index less then the\ncurrent value of the pointer and we start comparing again.\n- Boyer-Moore algorithm is much more efficient than KMP at places where pattern to be searched has characters\nas different as possible. If the characters are same, then in worst case it will give a time complexity of\nO(mn) where it will end up comparing most of the characters, therefore, in case characters are mostly same\nuse KMP\n\n### Questions:\n\n- [Given a text and a pattern, find all occurences of a pattern in a given text.](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion1.c)\n- [Implement KMP algorithm to find all occurences of a pattern in a given text](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion2.c)\n- [Boyer-Moore algorithm for string finding patterns](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion3.c)\n- [Rabin-Karp for string finding patterns](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fpattern-matching\u002Fquestion4.c)\n\n--\n\n## Back Tracking\n\n### Methods that can be applied:\n\n- Permutations means ordered combinations. Eg. My juice is made by a combination of 10 fruits (order does not matter), but in case of permutations the order does matter. Basically changing the order can change the outcome means permutations. Changing the order has no effect on outcome is combination\n- Backtracking uses recursion where each call in the stack has its stored values and backtracking makes\nuse of those values to do decision making at a particular level in the recursion tree\n\n### Questions:\n\n- [Generate all permutations of a given string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion1.c)\n- [Program to generate all strings of n bits](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion2.c)\n- [N-queens problem](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fback-tracking\u002Fquestion3.c)\n\n--\n\n## MISC\n\n### General Questions\n\n- [Print nth term of an arithmetic series](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion1.c)\n- [A square is made by bending a single piece of wire. If we make a circle of this wire, \nwhat will be the radius and area of the circle?](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion2.c)\n- [Program to swap two variables without using any other variable\n](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion3.c)\n- [Coordinates of 3 vertices of an equilateral triangle are given on a cartesian plane.\nCalculate the coordinates of the center and the area of the circle inscribed in the triangle.](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion4.c)\n- [Program to check if a circle can be drawn through three points in a catesian plane\n](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion5.c)\n- [Use ternary condition operator to find min and max among three integers\n](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion6.c)\n- [Generate random numbers b\u002Fw 5 and 10, using probability given](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion7.c)\n- [Write a program to print \"Pascal's Triangle\". ](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion8.c)\n- [Write a program to find the sum of digits of a positive integer](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion9.c)\n- [Write a program to print the numbers that do not appear in the Fibonacci series](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion10.c)\n- [Write a function to find whether a positive integer is a power of two](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion11.c)\n- [Find GCD of two positive numbers](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion12.c)\n- [Write a function to check whether a positive integer is a palindrome or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion13.c)\n- [Big question](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion14.c) (still to be done)\n- [Find the maximum and minimum element in an array with a little tweak](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion15.c)\n- [Given an array of integers, reverse the original array](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion16.c)\n- [Implement the given functions in the matrix](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion17.c)\n- [Write a program which will accept two strings and check whether all characters from the first string are present \n   in the second string](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion18.c)\n- [Write a program to find the average of \"n\" integers entered by user](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion19.c)\n- [Write a program with a function\n   to remove all characters in a string except alphabetical characters](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion20.c)\n- [Write a program to sort five words in \"Lexicographical Order\"](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion21.c)\n- [Big question](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion22.c)\n- [Another big question](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion23.c)\n- [Yet another big question](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion24.c)\n- [Find GCD and LCM of two numbers](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fgeneral\u002Fquestion25.c)\n\n--\n\n## Advanced data\n\n- Use KMP to find if a pattern exists in a text or not\n- For Graphs, Topological sort is possible only on directed acyclic graphs (one with no cycles). Useful when one task is dependent on other.\n\n--\n\n## Advanced data structures\n\n- Disjoint sets: If two nodes are connected or belong to the same category they will be a part of the same set. Disjoint sets can be represented in two ways.\n\t1) Linked list\n\t2) Trees\n\nThere are three kind of operations that can be applied on such sets.\n\t1) Find\n\t2) Union\n\t3) Create\n\nImplementation using trees is better as we can apply union by rank and path compression to make sure find happens in logn or constant time, create anyway happens in constant time only.\nIn case of linked list find takes O(n) time and union also takes O(n) time and create takes O(1) time\n\n\n### Questions\n\n- [Test whether given two strings are isomorphic or not](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion1.c)\n- [Find the length of the longest suffix which is also a prefix](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion2.c)\n- [Sort a stack](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion66.c)\n- [Given two strings a and b print whether they contain any common subsequence (non empty) or not.](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fmisc\u002Fquestion67.c)\n\n--\n\n## Bit Manipulation\n\n![Bit Manipulation](https:\u002F\u002Fi.ibb.co\u002FQQFW7MQ\u002Fbit.png)\n\n- [Find set bits in an integer](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fbit-manipulation\u002Fquestion1.c)\n- [Find if a number is a power of 2](https:\u002F\u002Fgithub.com\u002FIntervue\u002FData-structures-algorithms-for-interviews\u002Fblob\u002Fmaster\u002Fbit-manipulation\u002Fquestion2.c)\n\n--\n\n## Trie\n\n![Trie](https:\u002F\u002Fi.ibb.co\u002FChz2FTY\u002Ftries.png)\n\n### Methods to solve algos better\n\n- For extreme values refer to limits.h constants given by C\n- `XOR` means taking sum of the bits and dividing by two, remainder will be the answer\n= 'XOR' is commutative\n- 'XOR' of a number with itself is 0\n- 'XOR' of zero with a number is the number itself\n- '1s compliment is number obtained by reversing all the bits in the binary representation of a number. o to 1 and 1 to 0'\n- Linear hashing is (h(k) + i)modm (where m is the size of the hash table, h(k) is the hash function that takes the key k and returns a value i is the parameter that is incremented to get different values)\n- Subarrays of an array are always contiguous whereas subsequence may not be contiguous but needs to be in the increasing order. Same applies to a string as well.\n- There are only two ways to make any data structure one is to use an array (where size is fixed and memory is contiguous) OR you can use the heap memory (structures and linked list). So Array and linked list or combo of these two are used to implement any data structure. In most cases linked list takes more time to do operations if data structure is implemented using it. But advantage is dynamic memory allocation\n- For INFIX to POSTFIX conversion, data structure used is stack. In stack all the operators are stored. For evaluation of POSTFIX stack is used to store operands\n- Evaluating and expression = convert from INFIX to postfix --\u003E Evaluate POSTFIX. Time complexity: O(n)\n- Heap can be implemented as a binary tree or ternary tree or n-ary tree. Heap is an almost complete binary tree. Leaves should always be filled from left to right in a heap\n- Heap should be used when along with insertion, find min and delete min or max it to be done in less time\n- In a min\u002Fmax heap the root contains the min\u002Fmax element compared to its children. Applicable for all levels.\n- To make a heap rather than making a linked list (as it involves a lot of storage), we make an array.\n- Every tree which is having one node or leaf (node with zero children) is already a min or max heap.\n- From an array if a heap is to be constructed, follow:\n\n  ```C\n\tLEFT(i) = 2i + 1;\n\tRIGHT(i) = 2i + 2;\n\tPARENT(i) = (i-1) \u002F 2; (valid for array with index 0)\n  \u002F\u002FGo level by level from left to right and write elements from the array or to the array basically.\n  \u002F\u002FNote dividing by two means right shift in binary and multiplying means left shift in binary\n  \u002F\u002FThere can be more than 1 max or min heap of a given array\n  \u002F\u002FIn a complete or almost complete binary tree, leaves start from floor(n\u002F2+1) to n\n  ```\n\n- An array in descending order is MAX HEAP and array in ascending order is MIN HEAP.\n- There is an O(n) time algo to convert an element into a heap. So no need to sort as sorting take O(nlogn)\n- Recursion adds to the space complexity as well as time complexity.\n- In a max heap, finding min, deleting random element or searching an element will take O(n) time because here max heap is as good as an array.\n- For Binary Search tree implementation using an array, space complexity is O(2^n), but using linked list, it\nis O(n)\n- Stream of numbers mean the numbers are coming one after the other and for each input change you have to \nfind what is stated in the question.\n- There are three ways to traverse any binary tree (can be applied to 3-ary or n-ary trees as well with some modifications)\n\n```C\n\u002F\u002Fall nodes should have children, even leafs\nINORDER \u002F\u002Fleft root right - second visit\nPREORDER\u002F\u002Froot left right - first visit\nPOSTORDER \u002F\u002Fleft right root - third visit\n```\n- Binary tree is a normal thing placing the element in order as given in the array in parent child relationship from left to right BUT Binary search tree follows a particular order.\n- Binary search tree is usually used to store keys. Keys generally point to a particular record. Therefore keys have to be unique.\n- INORDER traversal of BST gives us all elements in ascending order. (least element left most, max right most)\n- *To understand recursion better or to do a dry run or make a recursive program follow the method of 123. i.e executing all lines turn by turn at a single place as explained in trees double order traversal or indirect recursion*\n- Indirect recursion is when some function A calls B and B again calls A and so on.\n- Number of structures possible with N non-labelled nodes is 2ncn\u002Fn+1\n- Number of trees possible per structure if labelled n nodes is n! (total trees will be 2ncn\u002Fn+1 * n!)\n- Given PRE ORDER POST AND IN ORDER only 1 tree will satisfy all conditions (number of trees with n nodes given pre post and in only 1 tree is possible. Even combination of any with INRODER will generate a binary tree uniquely)\n- Expression tree is a tree in which operator occupied the root along with the nodes on the left or right side. (correct side can be checked by inorder traversal). Also operators have to be arranged on the tree as per their precendence.\n- preorder, postorder and inorder traversal of an expression tree gives the respective forms.\n- LCRS (left child right sibling), in this left pointer points to the left child and right pointer points\nto the siblings which are children of the parent node along with this node. Representation is used to present\ntrees having random number of children not necessary equal\n- Array representation of trees is used in case of heaps where going up and down is required. The disadvantage of using array is that if a tree is skewed, arrays have to be as large as 2^n for storing n values given indexes of parent and child which is not the case in case of heaps.\n- *Recursion will keep populating the stack until dealing with statements to be executed, once a definite value truthy or falsy is returned, it will then pop off the execution context that returned that value. It is important to even return a function because then stack will know that this function is going to return something which may be a another function being returned or a value. This is how it keeps going.Note if return statement is not written then if else statement should be used so to avoid control of the program going downwards in the non satisfying condition. So return statement is just a replacement of if else in recursion*\n- Level order traversal uses a queue in which parent is pushed onto the queue and then its popped (dequeued) and its children are pushed in order from left to right and same process is repeated. Therefore we keep scanning the nodes level by level.\n- Level order traversal is similar to BFS (breadth first search in graphs) and other traversals like inorder, preorder and postorder are similar to DFS (depth first search in graphs)\n- Vertical tree order traversal: Root is at a distance 0 from itself. When we move to the left child it is at a distance -1 from the root, the right child is at a distance 1 from the root. If we keep doing -1 for every left child and +1 for every right child, we will have multiple nodes at the same distance value. The nodes having same distance value fall on a vertical line. If we traverse that line, it is called vertical tree order traversal\n- Sum tree is the one where sum of values in the LST and sum of values in the RST is equal to the root. This is valid for all the nodes except the tree\n- Recursion execution stack only remembers the next line if there is no return statement, else it will return the execution stack\n- Two nodes in a tree are siblings if they are at the same level and have same parent, are cousins if they\nare at same level but do not have same parent\n- O(1) means time complexity or space complexity is not dependent on the input size\n- One string is rotation of the other, if one of the rotations of one string matches the other one.\n- Run length encoding means, traversing through the given character array and displaying which character\nis repeating how many times along with the character as output. \nEg: SSMMMAAARRT =\u003E S2M3A3R2T1\n- Two strings are anagrams if they have same no of characters and they are composed of the same letters.\nEven if there are repetitions, they are going to be same. \n- Ideal approach of writing a program is return from a functiona and keep strings at a single place and not scattered\n- Greedy method and DP are two programing paradigms which can be used to solve optimization problems\n- Greedy method fractions are allowed\n- For huffman coding to work letters must not be uniformly distributed\n- Spanning tree is min number of edges present in the graph such that all nodes are connected. Span tree is always subgraph of the main graph and cannot contain edges which are not present in the main graph\n- Number of edges incident on the node is degree of node in undirected graphs. In case of directed, there is no degree but in degree and out degree\n- Kirchoff theorem is used to find spanning tree of non-weighted undirected simple graph\n- Given a weighted graph, finding the minimum cost spanning tree can be done using two algos PRIMS and KRUSKALS. Both are greedy methods\n- In PRIMS, whenever weights of edges are duplicates, there is a chance that we might get more than 1 spanning tree. But final cost will remaing the same for all in that case\n- Dijsktra algo cannot be applied to graphs having -ve weight edges because the algo does not have capability to find if that edge is -ve or its getting converted to a -ve weight cycle. If there is a -ve weight cycle in the graph shortest path will not exist as with each cycle path will keep on decreasing.\n- Tree is an acyclic graph\n- Greedy method and dynamic programming are the only two methods that can be applied to find the solution to optimization problems. Greedy may not give the right solution everytime for each problem but will work for some of them and it takes less time. Dynamic on the other hand takes a little more time but always gives the correct answer to such problems.\n- n factorial is nothing but n power n\n- In a graph represented by cost matrix, if two vertices have an edge, weight will be given otherwise\nif they dont have edge it is infinity.\n- Travelling salesman problem time complexity O(n^2 ^ 2^n)\n- Ugly number is a one which can be written as a product of 2,3 or 5 or a combination of these numbers. 1 is also considered as ugly number as it is an exception.\n- Whenever highest or lowest power of two is to be found, use log operations\n\n--\n\n# Conclusion:\n\nI hope this guide comes in handy at any of your interviews involving Data Structures & Algorithms.\nTo stay updated follow me on [Twitter](https:\u002F\u002Ftwitter.com\u002Frahhularora)\n";a.user={name:"Rahul Arora",username:f,twitter_username:f,github_username:"arorarahul",website_url:"https:\u002F\u002Fwww.intervue.io",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--YwAhFwI3--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F319693\u002F6109e3b1-1bf4-4e5a-9b4a-ad307d679005.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--C5EwShQ5--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F319693\u002F6109e3b1-1bf4-4e5a-9b4a-ad307d679005.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:a}},mutations:[["SET_CURRENT_ARTICLE",a]]}}({},"https:\u002F\u002Fdev.to\u002Frahhularora\u002Fthe-ultimate-guide-for-data-structures-algorithm-interviews-npo",1467,null,"2021-03-06T16:07:52Z","rahhularora")));
__NUXT_JSONP__("/articles/rasoolk16/862420", (function(a,b,c,d,e){d.type_of="article";d.id=862420;d.title="Building CRUD API with NestJs - Swagger API Documentation.";d.description="Introduction   In this part, we will integrate Swagger UI which helps us to visualize our...";d.readable_publish_date="Oct 13";d.slug="building-crud-api-with-nestjs-swagger-api-documentation-n6p";d.path="\u002Frasoolk16\u002Fbuilding-crud-api-with-nestjs-swagger-api-documentation-n6p";d.url=e;d.comments_count=a;d.public_reactions_count=a;d.collection_id=13936;d.published_timestamp=b;d.positive_reactions_count=a;d.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--nnymJYFl--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvuzhxegyssnonjh2tcio.png";d.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RwOz7GVd--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fvuzhxegyssnonjh2tcio.png";d.canonical_url=e;d.created_at="2021-10-13T14:45:39Z";d.edited_at="2021-10-14T05:47:35Z";d.crossposted_at=c;d.published_at=b;d.last_comment_at=b;d.reading_time_minutes=3;d.tag_list="tutorial, nestjs, node, swagger";d.tags=["tutorial","nestjs","node","swagger"];d.body_html="\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn this part, we will integrate Swagger UI which helps us to visualize our API resources and with visual documentation, it is easier for consuming and implementing APIs.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWhy Swagger?\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe swagger UI does the hard work of generating and maintaining our API docs, making sure our documentation stays up-to-date as our application evolves.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore integrating Swagger UI, let's create some more APIs. In the last part we created a POST API to create new user. Let's create GET APIs to get all users and to get a single user.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002FAdd these APIs in user.controller.ts\n@Get('all')\n  async getAll(): Promise&lt;User[]&gt; {\n    return this.userService.getAll();\n  }\n\n  @Get(':userId')\n  async getUser(@Param('userId') userId: number): Promise&lt;User&gt; {\n    return await this.userService.getUser(userId);\n  }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002Fuser.service.ts\nasync getAll(): Promise&lt;User[]&gt; {\n    return await this.userRepository.findAll();\n  }\n\n  async getUser(userId: number): Promise&lt;User&gt; {\n    return await this.userRepository.findOne({ id: userId });\n  }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003ENote:\u003C\u002Fem\u003E Here, we are just returning the data from database directly. But, this is not secure at all we shouldn't be exposing the data directly, we have to create response objects and return them to the client. Also, we have not added any validation what happens if the user we are requesting does not exist we are still returning 200 response which is not ideal. Please explore how to handle validation in APIs and how to use response objects to return data to client. Don't worry if you can't understand these, we will look into these in next part.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"installation\" href=\"#installation\"\u003E\n  \u003C\u002Fa\u003E\n  Installation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe can install the swagger dependencies using npm\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install --save @nestjs\u002Fswagger swagger-ui-express\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EOnce the installation is complete we need to initialize Swagger in 'main.ts' file\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Frskhan167\u002F2ed73493e641e52b3085217e0fa7f6a8.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, in our browser if we go to: \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:3000\u002Fapi\u002F\u003C\u002Fcode\u003E. We can see the list of APIs we have created and we can see all the details of the APIs what parameters it requires and what responses it returns.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kTKoBXBp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdsx88uqgs1tbmfj60a0b.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kTKoBXBp--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdsx88uqgs1tbmfj60a0b.png\" alt=\"Swagger Page\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"swagger-schema\" href=\"#swagger-schema\"\u003E\n  \u003C\u002Fa\u003E\n  Swagger Schema\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBut if we see in schema below it contains 'CreateUserDto' object which we created but it's empty as Swagger is not able to recognize it.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--o0BIe4Mq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjw2mpp7yx01ffxuuff2z.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--o0BIe4Mq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjw2mpp7yx01ffxuuff2z.png\" alt=\"Swagger Schema\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe are using Nest CLI, so we need to add the following plugin configuration in 'nest-cli.json' file.\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Frskhan167\u002Ff86d438be4379f4d4727793abaf77e51.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EAlso, in all the APIs the response objects are empty, as we need to mention them explicitly in controllers. So, let's do it now.\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Frskhan167\u002F475888e3f060d053cca512d28771d8bf.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003ENote:\u003C\u002Fem\u003E We have added only response objects for status 200. Please explore what other return statuses are possible and add respective Api Response decorators for them.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BE7JDafx--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fagnybjrpz75poy9l6r8z.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BE7JDafx--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fagnybjrpz75poy9l6r8z.png\" alt=\"Swagger Response object\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow we can see the response objects and the schema objects.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--d1LpWOwa--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frav1ajdebml09dgxkx9b.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--d1LpWOwa--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frav1ajdebml09dgxkx9b.png\" alt=\"Swagger Schema objects\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cstrong\u003ENote:\u003C\u002Fstrong\u003E If schema objects are still empty, please \u003Cem\u003Edelete\u003C\u002Fem\u003E 'dist' directory and run the server again. This folder contains the file conversions of TypeScript to JavaScript. NestJs is entirely written in TypeScript but it has to be converted to JavaScript which is run by the server. Since we have updated the 'nest-cli.json' file we may have to generate the dist folder again.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"summary\" href=\"#summary\"\u003E\n  \u003C\u002Fa\u003E\n  Summary\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn this tutorial, we explored how we can integrate Swagger UI in our Nest application to document our APIs. We also saw how to add response objects and schema objects in swagger UI.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EGitHub Repository - \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Frskhan167\u002Fmovie-review\"\u003Ehttps:\u002F\u002Fgithub.com\u002Frskhan167\u002Fmovie-review\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThat's it for this part. Please like and share if you found it useful.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThanks for reading.\u003C\u002Fp\u003E\n\n";d.body_markdown="## Introduction\nIn this part, we will integrate Swagger UI which helps us to visualize our API resources and with visual documentation, it is easier for consuming and implementing APIs.\n\n**Why Swagger?**\nThe swagger UI does the hard work of generating and maintaining our API docs, making sure our documentation stays up-to-date as our application evolves.\n\nBefore integrating Swagger UI, let's create some more APIs. In the last part we created a POST API to create new user. Let's create GET APIs to get all users and to get a single user. \n\n```\n\u002F\u002FAdd these APIs in user.controller.ts\n@Get('all')\n  async getAll(): Promise\u003CUser[]\u003E {\n    return this.userService.getAll();\n  }\n\n  @Get(':userId')\n  async getUser(@Param('userId') userId: number): Promise\u003CUser\u003E {\n    return await this.userService.getUser(userId);\n  }\n```\n\n```\n\u002F\u002Fuser.service.ts\nasync getAll(): Promise\u003CUser[]\u003E {\n    return await this.userRepository.findAll();\n  }\n\n  async getUser(userId: number): Promise\u003CUser\u003E {\n    return await this.userRepository.findOne({ id: userId });\n  }\n```\n\n\u003E\n*Note:* Here, we are just returning the data from database directly. But, this is not secure at all we shouldn't be exposing the data directly, we have to create response objects and return them to the client. Also, we have not added any validation what happens if the user we are requesting does not exist we are still returning 200 response which is not ideal. Please explore how to handle validation in APIs and how to use response objects to return data to client. Don't worry if you can't understand these, we will look into these in next part.\n\n## Installation\n\nWe can install the swagger dependencies using npm\n```\nnpm install --save @nestjs\u002Fswagger swagger-ui-express\n```\n\nOnce the installation is complete we need to initialize Swagger in 'main.ts' file\n\n{% gist https:\u002F\u002Fgist.github.com\u002Frskhan167\u002F2ed73493e641e52b3085217e0fa7f6a8 %}\n\nNow, in our browser if we go to: `http:\u002F\u002Flocalhost:3000\u002Fapi\u002F`. We can see the list of APIs we have created and we can see all the details of the APIs what parameters it requires and what responses it returns.\n\n![Swagger Page](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fdsx88uqgs1tbmfj60a0b.png)\n\n## Swagger Schema\nBut if we see in schema below it contains 'CreateUserDto' object which we created but it's empty as Swagger is not able to recognize it.\n\n![Swagger Schema](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjw2mpp7yx01ffxuuff2z.png)\n\nWe are using Nest CLI, so we need to add the following plugin configuration in 'nest-cli.json' file.\n\n{% gist https:\u002F\u002Fgist.github.com\u002Frskhan167\u002Ff86d438be4379f4d4727793abaf77e51 %}\n\nAlso, in all the APIs the response objects are empty, as we need to mention them explicitly in controllers. So, let's do it now.\n\n{% gist https:\u002F\u002Fgist.github.com\u002Frskhan167\u002F475888e3f060d053cca512d28771d8bf %}\n\n\u003E\n*Note:* We have added only response objects for status 200. Please explore what other return statuses are possible and add respective Api Response decorators for them.\n\n![Swagger Response object](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fagnybjrpz75poy9l6r8z.png)\n\nNow we can see the response objects and the schema objects.\n\n![Swagger Schema objects](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frav1ajdebml09dgxkx9b.png)\n\n\u003E\n**Note:** If schema objects are still empty, please *delete* 'dist' directory and run the server again. This folder contains the file conversions of TypeScript to JavaScript. NestJs is entirely written in TypeScript but it has to be converted to JavaScript which is run by the server. Since we have updated the 'nest-cli.json' file we may have to generate the dist folder again.\n\n## Summary\n\nIn this tutorial, we explored how we can integrate Swagger UI in our Nest application to document our APIs. We also saw how to add response objects and schema objects in swagger UI.\n\n---\n\nGitHub Repository - https:\u002F\u002Fgithub.com\u002Frskhan167\u002Fmovie-review\n\nThat's it for this part. Please like and share if you found it useful.\n\nThanks for reading.\n";d.user={name:"Rasool Khan",username:"rasoolk16",twitter_username:"Dotnetdotnet",github_username:c,website_url:c,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OXWZSgLj--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F400576\u002Feb9ef69f-9af1-4ed9-8674-66ab65f66f3b.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CPwHuaDu--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F400576\u002Feb9ef69f-9af1-4ed9-8674-66ab65f66f3b.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:d}},mutations:[["SET_CURRENT_ARTICLE",d]]}}(0,"2021-10-13T15:53:49Z",null,{},"https:\u002F\u002Fdev.to\u002Frasoolk16\u002Fbuilding-crud-api-with-nestjs-swagger-api-documentation-n6p")));
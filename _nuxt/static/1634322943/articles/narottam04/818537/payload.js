__NUXT_JSONP__("/articles/narottam04/818537", (function(a,b,c,d,e,f){a.type_of="article";a.id=818537;a.title="How JavaScript Works🔥 🤖 [Visually Explained]";a.description="JavaScript is one of the most loved and hated languages in the world. It is loved because it is...";a.readable_publish_date="Sep 9";a.slug="how-javascript-works-visually-explained-269j";a.path="\u002Fnarottam04\u002Fhow-javascript-works-visually-explained-269j";a.url=b;a.comments_count=88;a.public_reactions_count=c;a.collection_id=d;a.published_timestamp=e;a.positive_reactions_count=c;a.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AC5E-9bo--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_66,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Feiz3o1fe8lx4okxtmi27.gif";a.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PcgHhV8d--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_66,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Feiz3o1fe8lx4okxtmi27.gif";a.canonical_url=b;a.created_at="2021-09-09T12:29:29Z";a.edited_at="2021-09-12T11:37:22Z";a.crossposted_at=d;a.published_at=e;a.last_comment_at="2021-10-05T09:00:55Z";a.reading_time_minutes=5;a.tag_list="javascript, webdev, programming";a.tags=["javascript","webdev","programming"];a.body_html="\u003Cp\u003EJavaScript is one of the most loved and hated languages in the world. It is loved because it is potent. You can make a full-stack application by just learning JavaScript and nothing else. It is also hated because it behaves in unexpected and upsetting ways, which, if you're not invested in understanding the language, might make you hate it 💔.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis blog will explain how JavaScript executes code in the browser, and we will learn it through animated gifs 😆. After reading this blog, you will be one step closer to become a Rockstar Developer 🎸😎\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fi.giphy.com\u002Fmedia\u002FEA4ZexjGOnfP2\u002Fgiphy.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fi.giphy.com\u002Fmedia\u002FEA4ZexjGOnfP2\u002Fgiphy.gif\" alt=\"https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002FEA4ZexjGOnfP2\u002Fgiphy.gif\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"execution-context\" href=\"#execution-context\"\u003E\n  \u003C\u002Fa\u003E\n  Execution Context\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\"\u003Cstrong\u003EEverything in JavaScript happens inside an Execution Context.\"\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EI want everyone to remember this statement as it is essential. You can assume this Execution context to be a big container, invoked when the browser wants to run some JavaScript code.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn this container, there are two components 1. Memory component  2. Code component\u003C\u002Fp\u003E\n\n\u003Cp\u003EMemory component is also known as variable environment. In this memory component, variables and functions are stored as key-value pairs.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECode component is a place in the container where code is executed one line at a time. This code component also has a fancy name, namely 'Thread of Execution'. I think it sounds cool!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--thFap99C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5sitpkprw51dgdjg7um5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--thFap99C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5sitpkprw51dgdjg7um5.png\" alt=\"Execution context\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EJavaScript is a synchronous, single-threaded language.\u003C\u002Fstrong\u003E It is because it can only execute one command at a time and in a specific order.  \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"execution-of-the-code\" href=\"#execution-of-the-code\"\u003E\n  \u003C\u002Fa\u003E\n  Execution of the code\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's take a simple example,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eb\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eb\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Esum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this simple example, we initialize two variables, a and b and store 2 and 4, respectively.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThen we add the value of \u003Cstrong\u003Ea\u003C\u002Fstrong\u003E and \u003Cstrong\u003Eb\u003C\u002Fstrong\u003E and store it in the \u003Cstrong\u003Esum\u003C\u002Fstrong\u003E variable.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's see how JavaScript will execute the code in the browser 🤖\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fPjnibrZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjq3ufd0eru2ceax067m9.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fPjnibrZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjq3ufd0eru2ceax067m9.gif\" alt=\"Execution context 1.1\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe browser creates a global execution context with two components, namely memory and code components.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe Browser will execute the JavaScript code in two-phase\u003C\u002Fp\u003E\n\n\u003Cp\u003E1&gt; Memory Creation Phase\u003C\u002Fp\u003E\n\n\u003Cp\u003E2&gt; Code Execution Phase\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the memory creation phase, JavaScript will scan through all the code and allocate memory to all the variables and functions in the code. For variables, JavaScript will store undefined in the memory creation phase, and for functions, it will keep the entire function code, which we will be looking at the following example.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WmYga0PP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4ty49vslo873hpehxdrw.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WmYga0PP--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4ty49vslo873hpehxdrw.gif\" alt=\"Execution context 1.2\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, in the 2nd phase, i.e. code execution, it starts going through the whole code line by line.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs it encounters \u003Cstrong\u003Evar a = 2,\u003C\u002Fstrong\u003E it assigns 2 to 'a' in memory. Until now, the value of 'a' was undefined.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESimilarly, it does the same thing for the b variable. It assigns 4 to 'b'. Then it calculates and stores the value of the sum in memory which is 6. Now, in the last step, it prints the sum value in the console and then destroys the global execution context as our code is finished.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"how-functions-are-called-in-execution-context\" href=\"#how-functions-are-called-in-execution-context\"\u003E\n  \u003C\u002Fa\u003E\n  How Functions Are Called In Execution Context?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFunctions in JavaScript, when you compare with other programming languages, work differently.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's take an simple example,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquare\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n \u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eans\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enum\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eans\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquare2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquare\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquare4\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Esquare\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe above example has an function which takes an argument of type number and returns the square of the number.\u003C\u002Fp\u003E\n\n\u003Cp\u003EJavaScript will create a global execution context and allocate memory to all the variables and functions in the first phase when we run the code, as shown below.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor functions, It will store the entire function in the memory.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GKNbYzk4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F68nk5l6806bax94k0tky.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GKNbYzk4--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F68nk5l6806bax94k0tky.gif\" alt=\"Execution context 1.3\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere comes the exciting part, When JavaScript runs functions, it will create an execution context inside the global execution context.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs it encounters var a = 2, it assigns 2 to 'n' in memory. Line number 2 is a function, and as the function has been allocated memory in the memory execution phase, it will directly jump to line number 6.\u003C\u002Fp\u003E\n\n\u003Cp\u003Esquare2 variable will invoke the square function, and javascript will create a new execution context.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z5ZMX2Nr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzvfyis150o3i7bn1x6hy.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z5ZMX2Nr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzvfyis150o3i7bn1x6hy.gif\" alt=\"Execution context 1.4\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis new execution context for the square function will assign memory to all the variables present in the function in the memory creation phase.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BrZHpOr9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe67rsojvcqmowwj3w75b.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BrZHpOr9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe67rsojvcqmowwj3w75b.gif\" alt=\"Execution context 1.5\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter assigning memory to all the variables inside the function, it will execute the code line by line. It will get the value of num, which is equal to 2 for the first variable and then it will calculate ans. After ans has been calculated, it will return the value which will be assigned to square2.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce the function returns the value, it will destroy its execution context as it has completed the work.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NfH3YlZ7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb2zu35q2as6uy57qve9q.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NfH3YlZ7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb2zu35q2as6uy57qve9q.gif\" alt=\"Execution context 1.6\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow it will follow a similar procedure for line number 7 or square4 variable, as shown below.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NnMsUB9l--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fq7wlgf8uj91cpglpvh0z.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NnMsUB9l--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fq7wlgf8uj91cpglpvh0z.gif\" alt=\"Execution context 1.7\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce all the code is executed, the global execution context will also be destroyed, and this is how JavaScript will execute the code behind the scene.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"call-stack\" href=\"#call-stack\"\u003E\n  \u003C\u002Fa\u003E\n  Call Stack\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWhen a function is invoked in JavaScript, JavaScript creates an execution context. Execution context will get complicated as we nest functions inside a function.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LjUZjJan--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fidywyfc19t2vsf1nyww1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LjUZjJan--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fidywyfc19t2vsf1nyww1.png\" alt=\"Call Stack\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EJavaScript manages code execution context creation and deletion with the the help of Call Stack.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA stack (sometimes called a “push-down stack”) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end eg. stack of books.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECall Stack is a mechanism to keep track of its place in a script that calls multiple functions.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's take an example\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight jsx\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EinsideA\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003EinsideA\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Ea\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe are creating a function 'a', which calls another function 'insideA' that returns true. I know the code is dumb and doesn't do anything, but it will help us understand how JavaScript handles callback functions.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hLhHObuJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F03bry7soja8z3ad143ry.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hLhHObuJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F03bry7soja8z3ad143ry.gif\" alt=\"Call Stack\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EJavaScript will create a global execution context. Global execution context will assign memory to function 'a' and invoke' function a' in the code execution phase.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAn execution context is created for function a, which is placed above the global execution context in the call stack.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EFunction a\u003C\u002Fstrong\u003E will assign memory and invoke function \u003Cstrong\u003EinsideA.\u003C\u002Fstrong\u003E An execution context is created for \u003Cstrong\u003Efunction insideA\u003C\u002Fstrong\u003E and placed above the call stack of 'function a'.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, this insideA function will return true and will be removed from the call stack.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs there is no code inside 'function a' execution context will be removed from the call stack.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFinally, the global execution context is also removed from the call stack.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"reference\" href=\"#reference\"\u003E\n  \u003C\u002Fa\u003E\n  Reference\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=pN6jk0uUrD8&amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&amp;ab_channel=AkshaySaini\"\u003ENamaste JavaScript Playlist on YouTube\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AJLnVv0U--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002Fl4pTjOu0NsrLApt0Q\u002Fgiphy.gif%3Fcid%3Decf05e47dtlkk3fe19ovkz96zbsihgjhtu6injewu9oy5v8e%26rid%3Dgiphy.gif%26ct%3Dg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AJLnVv0U--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002Fl4pTjOu0NsrLApt0Q\u002Fgiphy.gif%3Fcid%3Decf05e47dtlkk3fe19ovkz96zbsihgjhtu6injewu9oy5v8e%26rid%3Dgiphy.gif%26ct%3Dg\" alt=\"https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002Fl4pTjOu0NsrLApt0Q\u002Fgiphy.gif?cid=ecf05e47dtlkk3fe19ovkz96zbsihgjhtu6injewu9oy5v8e&amp;rid=giphy.gif&amp;ct=g\" loading=\"lazy\" data-animated=\"true\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EI hope this post was informative. 💪🏾 Feel free to reach out to me if you have any questions. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.buymeacoffee.com\u002Fnarottam\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--B27TArar--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fimg.buymeacoffee.com\u002Fbutton-api\u002F%3Ftext%3DBuy%2520me%2520a%2520coffee%26emoji%3D%26slug%3Dnarottam%26button_colour%3DFFDD00%26font_colour%3D000000%26font_family%3DPoppins%26outline_colour%3D000000%26coffee_colour%3Dffffff\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor more such insights, checkout my blog website \u003Ca href=\"http:\u002F\u002Fblog.webdrip.in\u002F\"\u003Eblog.webdrip.in\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";a.body_markdown="JavaScript is one of the most loved and hated languages in the world. It is loved because it is potent. You can make a full-stack application by just learning JavaScript and nothing else. It is also hated because it behaves in unexpected and upsetting ways, which, if you're not invested in understanding the language, might make you hate it 💔.\n\nThis blog will explain how JavaScript executes code in the browser, and we will learn it through animated gifs 😆. After reading this blog, you will be one step closer to become a Rockstar Developer 🎸😎\n\n![https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002FEA4ZexjGOnfP2\u002Fgiphy.gif](https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002FEA4ZexjGOnfP2\u002Fgiphy.gif)\n\n## Execution Context\n\n\"**Everything in JavaScript happens inside an Execution Context.\"** \n\nI want everyone to remember this statement as it is essential. You can assume this Execution context to be a big container, invoked when the browser wants to run some JavaScript code.\n\nIn this container, there are two components 1. Memory component  2. Code component\n\nMemory component is also known as variable environment. In this memory component, variables and functions are stored as key-value pairs.\n\nCode component is a place in the container where code is executed one line at a time. This code component also has a fancy name, namely 'Thread of Execution'. I think it sounds cool!\n\n![Execution context](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5sitpkprw51dgdjg7um5.png\n)\n\n**JavaScript is a synchronous, single-threaded language.** It is because it can only execute one command at a time and in a specific order.  \n\n## Execution of the code\n\nLet's take a simple example,\n\n```jsx\nvar a = 2;\nvar b = 4;\n\nvar sum = a + b;\n\nconsole.log(sum);\n```\n\nIn this simple example, we initialize two variables, a and b and store 2 and 4, respectively.\n\nThen we add the value of **a** and **b** and store it in the **sum** variable.\n\nLet's see how JavaScript will execute the code in the browser 🤖\n\n![Execution context 1.1](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fjq3ufd0eru2ceax067m9.gif)\n\nThe browser creates a global execution context with two components, namely memory and code components.\n\nThe Browser will execute the JavaScript code in two-phase\n\n1\u003E Memory Creation Phase\n\n2\u003E Code Execution Phase\n\nIn the memory creation phase, JavaScript will scan through all the code and allocate memory to all the variables and functions in the code. For variables, JavaScript will store undefined in the memory creation phase, and for functions, it will keep the entire function code, which we will be looking at the following example.\n\n\n![Execution context 1.2](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4ty49vslo873hpehxdrw.gif)\n\nNow, in the 2nd phase, i.e. code execution, it starts going through the whole code line by line.\n\nAs it encounters **var a = 2,** it assigns 2 to 'a' in memory. Until now, the value of 'a' was undefined.\n\nSimilarly, it does the same thing for the b variable. It assigns 4 to 'b'. Then it calculates and stores the value of the sum in memory which is 6. Now, in the last step, it prints the sum value in the console and then destroys the global execution context as our code is finished.\n\n  \n\n## How Functions Are Called In Execution Context?\n\nFunctions in JavaScript, when you compare with other programming languages, work differently.\n\nLet's take an simple example,\n\n```jsx\nvar n = 2;\n\nfunction square(num) {\n var ans = num * num;\n return ans;\n}\n\nvar square2 = square(n);\nvar square4 = square(4);\n```\n\nThe above example has an function which takes an argument of type number and returns the square of the number.\n\nJavaScript will create a global execution context and allocate memory to all the variables and functions in the first phase when we run the code, as shown below.\n\nFor functions, It will store the entire function in the memory.\n\n![Execution context 1.3](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F68nk5l6806bax94k0tky.gif)\n\nHere comes the exciting part, When JavaScript runs functions, it will create an execution context inside the global execution context.\n\nAs it encounters var a = 2, it assigns 2 to 'n' in memory. Line number 2 is a function, and as the function has been allocated memory in the memory execution phase, it will directly jump to line number 6.\n\nsquare2 variable will invoke the square function, and javascript will create a new execution context.\n\n\n![Execution context 1.4](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzvfyis150o3i7bn1x6hy.gif)\n\nThis new execution context for the square function will assign memory to all the variables present in the function in the memory creation phase.\n\n\n![Execution context 1.5](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe67rsojvcqmowwj3w75b.gif)\n\nAfter assigning memory to all the variables inside the function, it will execute the code line by line. It will get the value of num, which is equal to 2 for the first variable and then it will calculate ans. After ans has been calculated, it will return the value which will be assigned to square2.\n\nOnce the function returns the value, it will destroy its execution context as it has completed the work.\n\n![Execution context 1.6](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fb2zu35q2as6uy57qve9q.gif)\n\nNow it will follow a similar procedure for line number 7 or square4 variable, as shown below.\n\n![Execution context 1.7](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fq7wlgf8uj91cpglpvh0z.gif)\n\nOnce all the code is executed, the global execution context will also be destroyed, and this is how JavaScript will execute the code behind the scene.\n\n## Call Stack\n\nWhen a function is invoked in JavaScript, JavaScript creates an execution context. Execution context will get complicated as we nest functions inside a function.\n\n![Call Stack](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fidywyfc19t2vsf1nyww1.png)\n\nJavaScript manages code execution context creation and deletion with the the help of Call Stack.\n\nA stack (sometimes called a “push-down stack”) is an ordered collection of items where the addition of new items and the removal of existing items always takes place at the same end eg. stack of books.\n\nCall Stack is a mechanism to keep track of its place in a script that calls multiple functions.\n\nLet's take an example\n\n```jsx\nfunction a() {\n    function insideA() {\n        return true;\n    }\n    insideA();\n}\na();\n```\n\nWe are creating a function 'a', which calls another function 'insideA' that returns true. I know the code is dumb and doesn't do anything, but it will help us understand how JavaScript handles callback functions.\n\n![Call Stack](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F03bry7soja8z3ad143ry.gif)\n\nJavaScript will create a global execution context. Global execution context will assign memory to function 'a' and invoke' function a' in the code execution phase.\n\nAn execution context is created for function a, which is placed above the global execution context in the call stack.\n\n**Function a** will assign memory and invoke function **insideA.** An execution context is created for **function insideA** and placed above the call stack of 'function a'.\n\nNow, this insideA function will return true and will be removed from the call stack.\n\nAs there is no code inside 'function a' execution context will be removed from the call stack.\n\nFinally, the global execution context is also removed from the call stack.\n\n## Reference\n\n- [Namaste JavaScript Playlist on YouTube](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=pN6jk0uUrD8&list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&ab_channel=AkshaySaini)\n\n![https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002Fl4pTjOu0NsrLApt0Q\u002Fgiphy.gif?cid=ecf05e47dtlkk3fe19ovkz96zbsihgjhtu6injewu9oy5v8e&rid=giphy.gif&ct=g](https:\u002F\u002Fmedia.giphy.com\u002Fmedia\u002Fl4pTjOu0NsrLApt0Q\u002Fgiphy.gif?cid=ecf05e47dtlkk3fe19ovkz96zbsihgjhtu6injewu9oy5v8e&rid=giphy.gif&ct=g)\n\nI hope this post was informative. 💪🏾 Feel free to reach out to me if you have any questions. \n\n\u003Ca href=\"https:\u002F\u002Fwww.buymeacoffee.com\u002Fnarottam\"\u003E\u003Cimg src=\"https:\u002F\u002Fimg.buymeacoffee.com\u002Fbutton-api\u002F?text=Buy me a coffee&emoji=&slug=narottam&button_colour=FFDD00&font_colour=000000&font_family=Poppins&outline_colour=000000&coffee_colour=ffffff\"\u003E\u003C\u002Fa\u003E\n\nFor more such insights, checkout my blog website [blog.webdrip.in](http:\u002F\u002Fblog.webdrip.in\u002F)\n";a.user={name:f,username:"narottam04",twitter_username:"NarottamCodez",github_username:f,website_url:"https:\u002F\u002Fwebdrip.in\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GzHg8AMJ--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F540306\u002F66eb9b93-6622-4307-b6c2-864e9635d8ff.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vV40_EOq--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F540306\u002F66eb9b93-6622-4307-b6c2-864e9635d8ff.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:a}},mutations:[["SET_CURRENT_ARTICLE",a]]}}({},"https:\u002F\u002Fdev.to\u002Fnarottam04\u002Fhow-javascript-works-visually-explained-269j",1802,null,"2021-09-09T12:39:39Z","Narottam04")));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:768363,title:"OAuth calls for PHP",description:"Explains OAuth authentication and provides PHP examples",readable_publish_date:"Jul 22",slug:"oauth-calls-for-php-2kkf",path:"\u002Fmuncey\u002Foauth-calls-for-php-2kkf",url:e,comments_count:c,public_reactions_count:c,collection_id:13755,published_timestamp:b,positive_reactions_count:c,cover_image:a,social_image:"https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F768363.png",canonical_url:e,created_at:b,edited_at:"2021-07-22T09:17:38Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:3,tag_list:"php, googlesheets, oauth",tags:["php","googlesheets","oauth"],body_html:"\u003Cp\u003EIf you are in a situation where you need to set up OAuth authentication on a website that you manage you might be wondering where to start and what exactly are the steps you need to follow in order to allow users to authenticate using the authentication scheme of their choice.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you are wondering what to do then worry no more, this quick article will give you the basic knowledge that you will need to set up your web site to support OAuth. I will also provide a small bit of code to get you started.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow what is OAuth? OAuth is a way for a 3rd Party web site (commonly called a provider) to tell you that a user is valid and can be allowed to access your web site. If you have ever logged on to a website using your Google or Facebook account then you have used OAuth. You can also use OAuth to request an access token to make future requests for resources from the provider server. The rest of this article will tell you the basics for enabling OAuth on a web site.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo be able to support OAuth on a web site that you manage requires that you create the following four functions:\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EA page to redirect the home page to the OAuth provider.\u003C\u002Fli\u003E\n\u003Cli\u003EA page to accept redirects from the OAuth provider with an access code.\u003C\u002Fli\u003E\n\u003Cli\u003EA function to swap the access code for an access token and hold it in memory\u003C\u002Fli\u003E\n\u003Cli\u003EA page to log the user out by clearing out the access token from memory\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ESo the easiest way to understand OAuth is that you are building a function that will swap an access code that the OAuth provider gives you in exchange for an access token to be used for future calls. That is basically it and you can apply this pattern to any application or OAuth provider that you work on in the future.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnyway I promised some code so I will provide two quick snippets.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe first is the code used to set up a redirect to the Google OAuth 2 servers. This code will require that you have set up an OAuth client id in the Google API Console and also that you have enabled the APIs that you would like to call. The code checks for the existence of a session variable called oauth which if set means that the web site has already obtained an access token for this user and can proceed as if they were signed in to the server.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eif (!isset($_SESSION['oauth']))\n {\n\n$url = 'https:\u002F\u002Faccounts.google.com\u002Fo\u002Foauth2\u002Fv2\u002Fauth?' .\n 'scope=https%3A\u002F\u002Fwww.googleapis.com\u002Fauth\u002Fdrive.file&amp;' .\n 'access_type=offline&amp;' .\n 'include_granted_scopes=true&amp;' .\n 'response_type=code&amp;' .\n 'state=state_parameter_passthrough_value&amp;' .\n 'redirect_uri=https%3A\u002F\u002Flocalhost:3000\u002Fredirect-login.php&amp;' .\n 'client_id=' . $client_id;\n  header('Location: ' . $url);\n  exit;\n }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe next block of code will show how to swap the code (read from the query string using $code = $_GET[‘code’]) for an access token. You will need to have a $client_id and a $client_secret and also make sure the redirect_uri matches the uri of the page containing this code.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E$url = 'https:\u002F\u002Foauth2.googleapis.com\u002Ftoken';\n\n$postdata = http_build_query(\n  array(\n    'code' =&gt; $code,\n    'client_id' =&gt; $client_id,\n    'client_secret' =&gt; $client_secret,\n    'redirect_uri' =&gt; 'https:\u002F\u002Flocalhost:3000\u002Fredirect-login.php',\n    'grant_type' =&gt; 'authorization_code'\n  )\n);\n\n$opts = array('http' =&gt; \n  array(\n    'method' =&gt; 'POST',\n    'header' =&gt; 'Content-Type: application\u002Fx-www-form-urlencoded',\n    'content' =&gt; $postdata\n  )\n);\n\n$context = stream_context_create($opts);\n$result = file_get_contents($url, false, $context);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhen google is called as a post provided the $code, $client_id, $client_secret, redirect_uri are correct google will return an access token that will then be able to be passed in the authentication header of future requests to retrieve data from google.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESorry one more bit of code. This code which can run on any page on your site will get the access_token value from the oauth session variable and then pass it with files request in the Authorization header. Provided the access token remains valid google will respond by returning resources related to files.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E$oauth = json_decode($_SESSION['oauth']);\n$token = $oauth-&gt;access_token;\n\n$url = 'https:\u002F\u002Fwww.googleapis.com\u002Fdrive\u002Fv3\u002Ffiles';\n$options = array('http' =&gt; array(\n    'method'  =&gt; 'GET',\n    'header' =&gt; 'Authorization: Bearer '.$token\n));\n$context  = stream_context_create($options);\n$response = file_get_contents($url, false, $context);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESo what do you think? Did this help you understand OAuth better? If you liked this article please comment, like or share.\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: OAuth calls for PHP\npublished: true\ndescription: Explains OAuth authentication and provides PHP examples\ntags: php,googlesheets,oauth\nseries: Google sheets from PHP\n\u002F\u002Fcover_image: https:\u002F\u002Fdirect_url_to_image.jpg\n---\nIf you are in a situation where you need to set up OAuth authentication on a website that you manage you might be wondering where to start and what exactly are the steps you need to follow in order to allow users to authenticate using the authentication scheme of their choice.\n\nIf you are wondering what to do then worry no more, this quick article will give you the basic knowledge that you will need to set up your web site to support OAuth. I will also provide a small bit of code to get you started.\n\nNow what is OAuth? OAuth is a way for a 3rd Party web site (commonly called a provider) to tell you that a user is valid and can be allowed to access your web site. If you have ever logged on to a website using your Google or Facebook account then you have used OAuth. You can also use OAuth to request an access token to make future requests for resources from the provider server. The rest of this article will tell you the basics for enabling OAuth on a web site.\n\nTo be able to support OAuth on a web site that you manage requires that you create the following four functions:\n\n1. A page to redirect the home page to the OAuth provider.\n1. A page to accept redirects from the OAuth provider with an access code.\n1. A function to swap the access code for an access token and hold it in memory\n1. A page to log the user out by clearing out the access token from memory\n\nSo the easiest way to understand OAuth is that you are building a function that will swap an access code that the OAuth provider gives you in exchange for an access token to be used for future calls. That is basically it and you can apply this pattern to any application or OAuth provider that you work on in the future.\n\nAnyway I promised some code so I will provide two quick snippets.\n\nThe first is the code used to set up a redirect to the Google OAuth 2 servers. This code will require that you have set up an OAuth client id in the Google API Console and also that you have enabled the APIs that you would like to call. The code checks for the existence of a session variable called oauth which if set means that the web site has already obtained an access token for this user and can proceed as if they were signed in to the server.\n\n```\nif (!isset($_SESSION['oauth']))\n {\n\n$url = 'https:\u002F\u002Faccounts.google.com\u002Fo\u002Foauth2\u002Fv2\u002Fauth?' .\n 'scope=https%3A\u002F\u002Fwww.googleapis.com\u002Fauth\u002Fdrive.file&' .\n 'access_type=offline&' .\n 'include_granted_scopes=true&' .\n 'response_type=code&' .\n 'state=state_parameter_passthrough_value&' .\n 'redirect_uri=https%3A\u002F\u002Flocalhost:3000\u002Fredirect-login.php&' .\n 'client_id=' . $client_id;\n  header('Location: ' . $url);\n  exit;\n }\n```\nThe next block of code will show how to swap the code (read from the query string using $code = $_GET[‘code’]) for an access token. You will need to have a $client_id and a $client_secret and also make sure the redirect_uri matches the uri of the page containing this code.\n```\n$url = 'https:\u002F\u002Foauth2.googleapis.com\u002Ftoken';\n\n$postdata = http_build_query(\n  array(\n    'code' =\u003E $code,\n    'client_id' =\u003E $client_id,\n    'client_secret' =\u003E $client_secret,\n    'redirect_uri' =\u003E 'https:\u002F\u002Flocalhost:3000\u002Fredirect-login.php',\n    'grant_type' =\u003E 'authorization_code'\n  )\n);\n\n$opts = array('http' =\u003E \n  array(\n    'method' =\u003E 'POST',\n    'header' =\u003E 'Content-Type: application\u002Fx-www-form-urlencoded',\n    'content' =\u003E $postdata\n  )\n);\n\n$context = stream_context_create($opts);\n$result = file_get_contents($url, false, $context);\n```\nWhen google is called as a post provided the $code, $client_id, $client_secret, redirect_uri are correct google will return an access token that will then be able to be passed in the authentication header of future requests to retrieve data from google.\n\nSorry one more bit of code. This code which can run on any page on your site will get the access_token value from the oauth session variable and then pass it with files request in the Authorization header. Provided the access token remains valid google will respond by returning resources related to files.\n```\n$oauth = json_decode($_SESSION['oauth']);\n$token = $oauth-\u003Eaccess_token;\n\n$url = 'https:\u002F\u002Fwww.googleapis.com\u002Fdrive\u002Fv3\u002Ffiles';\n$options = array('http' =\u003E array(\n    'method'  =\u003E 'GET',\n    'header' =\u003E 'Authorization: Bearer '.$token\n));\n$context  = stream_context_create($options);\n$response = file_get_contents($url, false, $context);\n```\nSo what do you think? Did this help you understand OAuth better? If you liked this article please comment, like or share.\n\n",user:{name:d,username:d,twitter_username:a,github_username:d,website_url:"https:\u002F\u002Fmunceyweb.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--WSgJNnpt--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F134950\u002Fd1e9dd8c-8e2c-4148-a548-670fe132ed0f.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UiaEsh5x--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F134950\u002Fd1e9dd8c-8e2c-4148-a548-670fe132ed0f.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmuncey\u002F768363",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-07-22T09:17:00Z",0,"muncey","https:\u002F\u002Fdev.to\u002Fmuncey\u002Foauth-calls-for-php-2kkf"));
window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:563683,title:"0 - Introduction",description:"Hi, I am Mangirdas, a software engineer and Flutter enthusiast from Lithuania. I have been following...",readable_publish_date:"Jan 11",slug:"0-introduction-59a3",path:"\u002Fmkobuolys\u002F0-introduction-59a3",url:"https:\u002F\u002Fdev.to\u002Fmkobuolys\u002F0-introduction-59a3",comments_count:0,public_reactions_count:d,collection_id:10602,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--uHTVzJrK--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9nk9j394g4xhtomeg3gx.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--yniaZips--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9nk9j394g4xhtomeg3gx.png",canonical_url:"https:\u002F\u002Fwww.medium.com\u002Fmkobuolys\u002Fflutter-design-patterns-0-introduction-5e88cfff6792",created_at:"2021-01-06T19:49:11Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:5,tag_list:"flutter, dart, oop, programming",tags:["flutter","dart","oop","programming"],body_html:"\u003Cp\u003EHi, I am Mangirdas, a software engineer and Flutter enthusiast from Lithuania. I have been following the Flutter journey since its version of 0.10.2 but realized that I have not contributed to the Flutter community, yet. So I am more than intrigued to introduce a new article series — Flutter Design Patterns. In the series, I will do my best to describe OOP design patterns, their implementation in Dart programming language and appliance when developing applications using Flutter.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"table-of-contents\" href=\"#table-of-contents\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Contents\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EAbout the series\u003C\u002Fli\u003E\n\u003Cli\u003EOOP, Design Patterns…???\u003C\u002Fli\u003E\n\u003Cli\u003EApplication overview\u003C\u002Fli\u003E\n\u003Cli\u003ESummary\u003C\u002Fli\u003E\n\u003Cli\u003EYour contribution\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"about-the-series\" href=\"#about-the-series\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  About the series\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn each article of the series, I will overview a design pattern, implement it using Dart programming language, prepare a practical (if possible) example in Flutter and add it to the \u003Cstrong\u003EFlutter Design Patterns\u003C\u002Fstrong\u003E mobile application. The theoretical part about design patterns would be heavily based on the “Gang of Four” (GoF) book \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FDesign_Patterns\"\u003E“Design Patterns: Elements of Reusable Object-Oriented Software”\u003C\u002Fa\u003E, which, in my opinion, is one of the most iconic software engineering books about software design patterns. This book contains more than 20 different OOP design patterns, so you can expect more than 20 articles in the series! I will do my best to be consistent and publish a new article to the series weekly.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"oop-design-patterns\" href=\"#oop-design-patterns\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  OOP, Design Patterns…???\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fsHXlrm8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk2yqdt89msf5j4448nh8.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--fsHXlrm8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk2yqdt89msf5j4448nh8.gif\" alt=\"What Does That Mean?!\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHmm, ok, maybe I have jumped straight to the point but did not explain what is this series about…\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"what-is-oop\" href=\"#what-is-oop\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  What is OOP?\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOOP stands for “Object-Oriented Programming”. In simple words, it is a programming paradigm which uses the idea of \u003Cstrong\u003Eobjects\u003C\u002Fstrong\u003E to represent \u003Cstrong\u003Edata\u003C\u002Fstrong\u003E and \u003Cstrong\u003Emethods\u003C\u002Fstrong\u003E to manipulate that data. This idea lets software engineers write code which represents the real-world objects, the data they contain and their relations with other objects via corresponding code structures. If you have already written some code using Dart or any other OOP programming language (C#, C++, Java just to name a few), probably you saw and used classes, defined properties and\u002For methods inside of those classes, created class instances and operated with them, specified relations between different objects\u002Fclasses — that’s nothing less than Object-Oriented programming!\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"what-is-oop-design-pattern\" href=\"#what-is-oop-design-pattern\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  What is OOP Design Pattern?\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOOP design pattern is a typical solution to a common problem in software design. In the GoF book, the purpose of a design pattern is described like this:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EA design pattern names, abstracts, and identifies the key aspects of a common design structure that make it useful for creating a reusable object-oriented design.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EA software design pattern is not about solving specific UI\u002FUX problems (as it could look from the first sight by noticing the word design), it is more about the code structure which is like a blueprint to solve a particular object-oriented design problem, issue in your code. By applying these patterns, you can speed up the development process, write code which is more flexible, reusable. However, the most difficult part of these patterns is to understand the main idea behind them, to identify places in your code where these patterns could be applied and which problems could be resolved. But that’s what this series is all about — to introduce and provide the basics of several design patterns to help you choose the right one for your specific problem.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"application-overview\" href=\"#application-overview\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Application overview\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAs I have already mentioned, by introducing a new design pattern per article, I will also build a \u003Cstrong\u003EFlutter Design Patterns\u003C\u002Fstrong\u003E mobile application and expand its design patterns library step-by-step. Of course, this application is open-source and its code is already available on \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\"\u003EGithub\u003C\u002Fa\u003E for all of you! The application consists only of three different screens — the main menu, design patterns’ category screen and design pattern’s screen.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NijZpAUD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ftewljk91mdyf2u9o86ee.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NijZpAUD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ftewljk91mdyf2u9o86ee.gif\" alt=\"App Main Menu\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EI hope you have noticed a little heartbeat animation in the main menu, as well as page transitions and content animations, which provide some dynamic to the application (I have spent a few hours to implement them, so, \u003Cem\u003Eplease, notice me senpai\u003C\u002Fem\u003E).\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9wHGSJ3---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8ccsz0m9d8252yst8v3a.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9wHGSJ3---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8ccsz0m9d8252yst8v3a.gif\" alt=\"App Page Transitions\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo demonstrate how the application displays design patterns, I have created a new branch in the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\u002Ftree\u002F0-introduction\"\u003Erepository\u003C\u002Fa\u003E. I will not merge it to the master branch later (it is only for demonstration purposes), but by using these \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\u002Fcommit\u002F3320e126d1e78730267a1f7709c3cb50e8c8e8ab\"\u003Echanges\u003C\u002Fa\u003E I will explain how a new design pattern could be (and will be!) added to the application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst of all, a new data object should be added to the assets\u002Fdata\u002Fdesign_patterns.json containing information about the design pattern (id, title, description and route):\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E...\n{\n  \"id\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"description\": \"Laborum qui ea velit sint officia culpa aute ad sint fugiat excepteur ex pariatur consectetur.\",\n  \"route\": \"\u002Fintroduction\"\n}\n...\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen a markdown file must be added to the assets\u002Fmarkdown folder with the same name as the previously set id in design pattern’s JSON. This markdown would contain information about the design pattern — usually, code snippets with some explanation on how the pattern is implemented. After providing a markdown file, the design pattern should be implemented and its example widget for the design pattern’s screen should be prepared. For this example, I have created a simple \u003Cem\u003EHello World\u003C\u002Fem\u003E widget (introduction.dart):\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--b7sBYrys--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fu553mi8egvcoxpcpbdlh.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--b7sBYrys--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fu553mi8egvcoxpcpbdlh.png\" alt=\"introduction.dart\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFinally, a new route should be added to \u003Cem\u003Erouter.dart\u003C\u002Fem\u003E file by adding the route name to the \u003Ccode\u003EDesignPatternRoutes\u003C\u002Fcode\u003E class (it should match with the route value in design pattern’s JSON file) and adding a new \u003Ccode\u003EDesignPatternDetails\u003C\u002Fcode\u003E widget with a previously created example (lines 25–32):\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oUuKoRTW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F75tpkdklqcyjn7valo4e.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oUuKoRTW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F75tpkdklqcyjn7valo4e.png\" alt=\"router.dart\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThat’s all! After these steps, a new design pattern is available in the \u003Cstrong\u003EFlutter Design Patterns\u003C\u002Fstrong\u003E library:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Ebk3D_7C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd7fneujjdsvgao55kel0.gif\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Ebk3D_7C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd7fneujjdsvgao55kel0.gif\" alt=\"App Demonstration\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf I have missed something, do not hesitate to ask or just check the code by yourself, it is open and free for use!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"summary\" href=\"#summary\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Summary\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI hope this article encouraged you to learn more about OOP, design patterns or programming in general. New articles are on their way so stay tuned and happy coding!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"your-contribution\" href=\"#your-contribution\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Your contribution\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E💖 or 🦄 this article to show your support and motivate me to write better!\u003Cbr\u003E\n💬 Leave a response to this article by providing your insights, comments or wishes for the next topic.\u003Cbr\u003E\n📢 Share this article with your friends, colleagues in social media.\u003Cbr\u003E\n➕ Follow me on dev.to or any other social media platform.\u003Cbr\u003E\n⭐ Star the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\"\u003EGithub\u003C\u002Fa\u003E repository.\u003C\u002Fp\u003E\n\n",body_markdown:"Hi, I am Mangirdas, a software engineer and Flutter enthusiast from Lithuania. I have been following the Flutter journey since its version of 0.10.2 but realized that I have not contributed to the Flutter community, yet. So I am more than intrigued to introduce a new article series — Flutter Design Patterns. In the series, I will do my best to describe OOP design patterns, their implementation in Dart programming language and appliance when developing applications using Flutter.\n\n## Table of Contents\n\n* About the series\n* OOP, Design Patterns…???\n* Application overview\n* Summary\n* Your contribution\n\n## About the series\n\nIn each article of the series, I will overview a design pattern, implement it using Dart programming language, prepare a practical (if possible) example in Flutter and add it to the **Flutter Design Patterns** mobile application. The theoretical part about design patterns would be heavily based on the “Gang of Four” (GoF) book [“Design Patterns: Elements of Reusable Object-Oriented Software”](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FDesign_Patterns), which, in my opinion, is one of the most iconic software engineering books about software design patterns. This book contains more than 20 different OOP design patterns, so you can expect more than 20 articles in the series! I will do my best to be consistent and publish a new article to the series weekly.\n\n## OOP, Design Patterns…???\n\n![What Does That Mean?!](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fk2yqdt89msf5j4448nh8.gif)\n\nHmm, ok, maybe I have jumped straight to the point but did not explain what is this series about…\n\n### What is OOP?\n\nOOP stands for “Object-Oriented Programming”. In simple words, it is a programming paradigm which uses the idea of **objects** to represent **data** and **methods** to manipulate that data. This idea lets software engineers write code which represents the real-world objects, the data they contain and their relations with other objects via corresponding code structures. If you have already written some code using Dart or any other OOP programming language (C#, C++, Java just to name a few), probably you saw and used classes, defined properties and\u002For methods inside of those classes, created class instances and operated with them, specified relations between different objects\u002Fclasses — that’s nothing less than Object-Oriented programming!\n\n### What is OOP Design Pattern?\n\nOOP design pattern is a typical solution to a common problem in software design. In the GoF book, the purpose of a design pattern is described like this:\n\n\u003E A design pattern names, abstracts, and identifies the key aspects of a common design structure that make it useful for creating a reusable object-oriented design.\n\nA software design pattern is not about solving specific UI\u002FUX problems (as it could look from the first sight by noticing the word design), it is more about the code structure which is like a blueprint to solve a particular object-oriented design problem, issue in your code. By applying these patterns, you can speed up the development process, write code which is more flexible, reusable. However, the most difficult part of these patterns is to understand the main idea behind them, to identify places in your code where these patterns could be applied and which problems could be resolved. But that’s what this series is all about — to introduce and provide the basics of several design patterns to help you choose the right one for your specific problem.\n\n## Application overview\n\nAs I have already mentioned, by introducing a new design pattern per article, I will also build a **Flutter Design Patterns** mobile application and expand its design patterns library step-by-step. Of course, this application is open-source and its code is already available on [Github](https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns) for all of you! The application consists only of three different screens — the main menu, design patterns’ category screen and design pattern’s screen.\n\n![App Main Menu](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ftewljk91mdyf2u9o86ee.gif)\n\nI hope you have noticed a little heartbeat animation in the main menu, as well as page transitions and content animations, which provide some dynamic to the application (I have spent a few hours to implement them, so, *please, notice me senpai*).\n\n![App Page Transitions](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F8ccsz0m9d8252yst8v3a.gif)\n\nTo demonstrate how the application displays design patterns, I have created a new branch in the [repository](https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\u002Ftree\u002F0-introduction). I will not merge it to the master branch later (it is only for demonstration purposes), but by using these [changes](https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns\u002Fcommit\u002F3320e126d1e78730267a1f7709c3cb50e8c8e8ab) I will explain how a new design pattern could be (and will be!) added to the application.\n\nFirst of all, a new data object should be added to the assets\u002Fdata\u002Fdesign_patterns.json containing information about the design pattern (id, title, description and route):\n\n```\n...\n{\n  \"id\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"description\": \"Laborum qui ea velit sint officia culpa aute ad sint fugiat excepteur ex pariatur consectetur.\",\n  \"route\": \"\u002Fintroduction\"\n}\n...\n```\n\nThen a markdown file must be added to the assets\u002Fmarkdown folder with the same name as the previously set id in design pattern’s JSON. This markdown would contain information about the design pattern — usually, code snippets with some explanation on how the pattern is implemented. After providing a markdown file, the design pattern should be implemented and its example widget for the design pattern’s screen should be prepared. For this example, I have created a simple *Hello World* widget (introduction.dart):\n\n![introduction.dart](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fu553mi8egvcoxpcpbdlh.png)\n\nFinally, a new route should be added to *router.dart* file by adding the route name to the `DesignPatternRoutes` class (it should match with the route value in design pattern’s JSON file) and adding a new `DesignPatternDetails` widget with a previously created example (lines 25–32):\n\n![router.dart](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F75tpkdklqcyjn7valo4e.png)\n\nThat’s all! After these steps, a new design pattern is available in the **Flutter Design Patterns** library:\n\n![App Demonstration](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd7fneujjdsvgao55kel0.gif)\n\nIf I have missed something, do not hesitate to ask or just check the code by yourself, it is open and free for use!\n\n## Summary\n\nI hope this article encouraged you to learn more about OOP, design patterns or programming in general. New articles are on their way so stay tuned and happy coding!\n\n## Your contribution\n\n💖 or 🦄 this article to show your support and motivate me to write better!\n💬 Leave a response to this article by providing your insights, comments or wishes for the next topic.\n📢 Share this article with your friends, colleagues in social media.\n➕ Follow me on dev.to or any other social media platform.\n⭐ Star the [Github](https:\u002F\u002Fgithub.com\u002Fmkobuolys\u002Fflutter-design-patterns) repository.",user:{name:"Mangirdas Kazlauskas 🚀",username:c,twitter_username:c,github_username:c,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ouj5tStj--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F553563\u002Ffb317a5b-86ae-4f13-8319-a7c55cbeba97.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--I4upMBAP--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F553563\u002Ffb317a5b-86ae-4f13-8319-a7c55cbeba97.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmkobuolys\u002F563683",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-01-11T08:55:30Z","mkobuolys",24));
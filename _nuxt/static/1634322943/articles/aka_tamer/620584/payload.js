__NUXT_JSONP__("/articles/aka_tamer/620584", (function(a,b,c,d,e){c.type_of="article";c.id=620584;c.title="From standard framework to ITCSS & BEM";c.description="Cyclically I usually make a point on my level, on what I am doing in my profession as a front-end dev...";c.readable_publish_date="Mar 1";c.slug="from-standard-framework-to-itcss-bem-4i9m";c.path="\u002Faka_tamer\u002Ffrom-standard-framework-to-itcss-bem-4i9m";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--E0EpFotP--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fimages.unsplash.com\u002Fphoto-1499244571948-7ccddb3583f1%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1489%26q%3D80";c.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wIDkAZQB--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fimages.unsplash.com\u002Fphoto-1499244571948-7ccddb3583f1%3Fixid%3DMXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%253D%26ixlib%3Drb-1.2.1%26auto%3Dformat%26fit%3Dcrop%26w%3D1489%26q%3D80";c.canonical_url=d;c.created_at="2021-02-28T10:01:18Z";c.edited_at="2021-03-02T22:11:01Z";c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=3;c.tag_list="itcss, scss, bem, atomiccss";c.tags=["itcss","scss","bem","atomiccss"];c.body_html="\u003Cp\u003ECyclically I usually make a point on my level, on what I am doing in my profession as a front-end developer and today I realize that the biggest revolution has been to abandon the standard frameworks.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor several years I have worked in many companies and web agencies, usually with the technologies in vogue and the solutions required by the market. Working specifically on the interfaces, I used a lot of \u003Cstrong\u003EBootstrap\u003C\u002Fstrong\u003E and \u003Cstrong\u003EjQuery\u003C\u002Fstrong\u003E.\u003Cbr\u003E\nWhile it was quick and easy to build functional layouts, on the other it was frustrating to customize structures and be \u003Cem\u003Epixel perfect\u003C\u002Fem\u003E with designer mockups.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFollowing the flow of modern technologies such as \u003Cstrong\u003ESCSS\u003C\u002Fstrong\u003E and \u003Cstrong\u003EGulp\u003C\u002Fstrong\u003E easily predisposed me to the pleasant discovery of atomic css.\u003Cbr\u003E\nThe revolutionary aspect was to not have to look for the most similar boostrap construction to the one required, but rather to build it faithfully, with the design system specifications!\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ECoding with the simple concept of atomic CSS was not enough, it was necessary to know how to organize, structure and recall it. \u003Cbr\u003E\nITCSS and BEM were the solutions to this block!\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EStructuring of the framework requires a design system as a reference: \u003Ccode\u003Epadding\u003C\u002Fcode\u003E, \u003Ccode\u003Emargin\u003C\u002Fcode\u003E, \u003Ccode\u003Ecolors\u003C\u002Fcode\u003E, \u003Ccode\u003Efonts\u003C\u002Fcode\u003E are among the most important definitions that guarantee harmony and consistency.\u003Cbr\u003E\nTo organize the classes such as \u003Ccode\u003Eutilities\u003C\u002Fcode\u003E, \u003Ccode\u003Ecomponents\u003C\u002Fcode\u003E, \u003Ccode\u003Eobjects\u003C\u002Fcode\u003E, \u003Ccode\u003Eelements\u003C\u002Fcode\u003E, \u003Ccode\u003Etools\u003C\u002Fcode\u003E and \u003Ccode\u003Esettings\u003C\u002Fcode\u003E allows you to mentally organize the specificity of the classes and not least their single functionality.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe construction of components, for example a \u003Cem\u003Edropdow\u003C\u002Fem\u003E, becomes simple and quick: by calling only the utility classes, the development of the component is generally 80% complete, however, sometimes it is necessary to be more “declarative” and then write additional \u003Ccode\u003Eproperties\u003C\u002Fcode\u003E. In this case it is useful to exploit the \u003Cstrong\u003EBEM\u003C\u002Fstrong\u003E convection and consider the component as the \u003Cstrong\u003Eblock\u003C\u002Fstrong\u003E with its \u003Cstrong\u003Eelements\u003C\u002Fstrong\u003E and variations as \u003Cstrong\u003Emodifiers\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the project I'm still developing on, using these approaches and tools made me see natural consequences:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ea much shorter compiled css, with a very low number of declarations\u003C\u002Fli\u003E\n\u003Cli\u003Ea lighter css in loading and reading for the browser\u003C\u002Fli\u003E\n\u003Cli\u003Ea more full-bodied DOM, but with easier css properties to load\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThe  framework developed with my colleagues, although it has been thought for an editorial project, I believe it is easily scalable and transferable for another kind of project - obviously excluding the components.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere a piece of code, from my last project, about the button component, to show you how much longer could be the HTML:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E&lt;button class=\"c-btn c-btn--{{modifier}} {% if rounded %}c-btn--rounded{% endif %} {% if link %} c-btn--link {% endif %}{% if size=='large' %}c-btn--large u-label-04{% elif size=='small' %} c-btn--small u-label-05{% else %}u-label-04{% endif %} {% if iconleft %}u-row-reverse{% endif %} u-cursor-pointer u-flex u-items-center u-label-04\" {% if disabled %}disabled{% endif %}&gt;\n  {{ label }} \n  {% if icon %}\n    &lt;svg class=\"o-icon {% if label %}{% if iconleft %}u-mr-xxsmall {% else %} u-ml-xxsmall{% endif %}{% endif %} \n    {% if size=='large' %}o-icon--md{% elif size=='small' %}o-icon--sm{% else %}o-icon--md{% endif %} \"&gt;\n      &lt;use xmlns:xlink=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxlink\" xlink:href=\"#icon-{{ icon }}\"&gt;&lt;\u002Fuse&gt;\n    &lt;\u002Fsvg&gt;\n  {% endif %}\n&lt;\u002Fbutton&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHowever, by recommending this approach, there are several valid frameworks such as:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003Ehttps:\u002F\u002Ftailwindcss.com\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Ftachyons.io\u002F\"\u003Ehttps:\u002F\u002Ftachyons.io\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fbulma.io\u002F\"\u003Ehttps:\u002F\u002Fbulma.io\u002F\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIMHO Definitely a good time investment!\u003C\u002Fp\u003E\n\n";c.body_markdown="---\ntitle: From standard framework to ITCSS & BEM\npublished: true\ndescription: \ntags: ITCSS, scss, BEM, atomiccss\ncover_image: https:\u002F\u002Fimages.unsplash.com\u002Fphoto-1499244571948-7ccddb3583f1?ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&ixlib=rb-1.2.1&auto=format&fit=crop&w=1489&q=80\n---\nCyclically I usually make a point on my level, on what I am doing in my profession as a front-end developer and today I realize that the biggest revolution has been to abandon the standard frameworks.\n\nFor several years I have worked in many companies and web agencies, usually with the technologies in vogue and the solutions required by the market. Working specifically on the interfaces, I used a lot of **Bootstrap** and **jQuery**.\nWhile it was quick and easy to build functional layouts, on the other it was frustrating to customize structures and be _pixel perfect_ with designer mockups.\n\nFollowing the flow of modern technologies such as **SCSS** and **Gulp** easily predisposed me to the pleasant discovery of atomic css.\nThe revolutionary aspect was to not have to look for the most similar boostrap construction to the one required, but rather to build it faithfully, with the design system specifications!\n\n\u003E  Coding with the simple concept of atomic CSS was not enough, it was necessary to know how to organize, structure and recall it. \nITCSS and BEM were the solutions to this block!\n\nStructuring of the framework requires a design system as a reference: `padding`, `margin`, `colors`, `fonts` are among the most important definitions that guarantee harmony and consistency.\nTo organize the classes such as `utilities`, `components`, `objects`, `elements`, `tools` and `settings` allows you to mentally organize the specificity of the classes and not least their single functionality.\n\nThe construction of components, for example a *dropdow*, becomes simple and quick: by calling only the utility classes, the development of the component is generally 80% complete, however, sometimes it is necessary to be more “declarative” and then write additional `properties`. In this case it is useful to exploit the **BEM** convection and consider the component as the **block** with its **elements** and variations as **modifiers**.\n\nIn the project I'm still developing on, using these approaches and tools made me see natural consequences:\n\n* a much shorter compiled css, with a very low number of declarations\n* a lighter css in loading and reading for the browser\n* a more full-bodied DOM, but with easier css properties to load\n\nThe  framework developed with my colleagues, although it has been thought for an editorial project, I believe it is easily scalable and transferable for another kind of project - obviously excluding the components.\n\nHere a piece of code, from my last project, about the button component, to show you how much longer could be the HTML:\n\n```\n\u003Cbutton class=\"c-btn c-btn--{{modifier}} {% if rounded %}c-btn--rounded{% endif %} {% if link %} c-btn--link {% endif %}{% if size=='large' %}c-btn--large u-label-04{% elif size=='small' %} c-btn--small u-label-05{% else %}u-label-04{% endif %} {% if iconleft %}u-row-reverse{% endif %} u-cursor-pointer u-flex u-items-center u-label-04\" {% if disabled %}disabled{% endif %}\u003E\n  {{ label }} \n  {% if icon %}\n    \u003Csvg class=\"o-icon {% if label %}{% if iconleft %}u-mr-xxsmall {% else %} u-ml-xxsmall{% endif %}{% endif %} \n    {% if size=='large' %}o-icon--md{% elif size=='small' %}o-icon--sm{% else %}o-icon--md{% endif %} \"\u003E\n      \u003Cuse xmlns:xlink=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxlink\" xlink:href=\"#icon-{{ icon }}\"\u003E\u003C\u002Fuse\u003E\n    \u003C\u002Fsvg\u003E\n  {% endif %}\n\u003C\u002Fbutton\u003E\n```\n\nHowever, by recommending this approach, there are several valid frameworks such as:\n\n* https:\u002F\u002Ftailwindcss.com\u002F\n* https:\u002F\u002Ftachyons.io\u002F\n* https:\u002F\u002Fbulma.io\u002F\n \nIMHO Definitely a good time investment!\n\n";c.user={name:"Tamer",username:"aka_tamer",twitter_username:"tamer_aka_remat",github_username:a,website_url:"https:\u002F\u002Faka-tamer.netlify.app\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--A7i__Qn2--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F112178\u002Fe0186a0b-76d9-4439-8c15-8e8e948dfcdd.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--M6i091en--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F112178\u002Fe0186a0b-76d9-4439-8c15-8e8e948dfcdd.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-03-01T14:07:27Z",{},"https:\u002F\u002Fdev.to\u002Faka_tamer\u002Ffrom-standard-framework-to-itcss-bem-4i9m",7)));
window.__NUXT__=(function(a,b,c){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:788662,title:"Big O, code efficiency analysis",description:"In this article I would do my best to introduce you to algorithmic complexity and a way to roughly...",readable_publish_date:"Aug 13",slug:"big-o-code-efficiency-analysis-phk",path:"\u002Fkerosz\u002Fbig-o-code-efficiency-analysis-phk",url:"https:\u002F\u002Fdev.to\u002Fkerosz\u002Fbig-o-code-efficiency-analysis-phk",comments_count:8,public_reactions_count:b,collection_id:a,published_timestamp:c,positive_reactions_count:b,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zsZdol3b--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F2ez4oruk4cn2qyjjurjq.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Hh_zaqyk--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F2ez4oruk4cn2qyjjurjq.png",canonical_url:"https:\u002F\u002Fwww.chirila.dev\u002Fwriting\u002Fcode-efficiency-analysis",created_at:"2021-08-11T17:00:54Z",edited_at:a,crossposted_at:a,published_at:c,last_comment_at:"2021-08-17T13:06:19Z",reading_time_minutes:12,tag_list:"javascript, algorithms, computerscience, webdev",tags:["javascript","algorithms","computerscience","webdev"],body_html:"\u003Cp\u003EIn this article I would do my best to introduce you to algorithmic complexity and a way to roughly measure it by using the Big O notation. You can also check the \u003Cstrong\u003Eoriginal\u003C\u002Fstrong\u003E  article at \u003Ca href=\"https:\u002F\u002Fwww.chirila.dev\u002Fwriting\"\u003Echirila.dev\u002Fwriting\u002Fcfa\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"why-measuring-code-efficiency-is-important\" href=\"#why-measuring-code-efficiency-is-important\"\u003E\n  \u003C\u002Fa\u003E\n  Why measuring code efficiency is important\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EFirst of, probably the most significant fact to \u003Cstrong\u003Ewhy it is important\u003C\u002Fstrong\u003E, is because we want to reason about how the code we currently have affects our programs. We can test our code on a smaller scale, but \u003Cem\u003Ehow are we going to predict the way our code is going to run on a bigger scale\u003C\u002Fem\u003E and how the code we write is able to solve a problem of a particular size.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESecond reason, would be to understand \u003Cstrong\u003Ehow the code we write, when we design or implement an algorithm would affect the problem at hand\u003C\u002Fstrong\u003E. You can start taking decisions based on how certain data structures, or implementation details can impact the final time complexity of our program.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"why-should-we-care\" href=\"#why-should-we-care\"\u003E\n  \u003C\u002Fa\u003E\n  Why should we care\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EOne argument that is usually given, on why you shouldn't care about it, is that computers are getting progressively faster, thus making the computations faster. But on the other hand, the data volume that is being computed gets bigger and bigger, to the point that in 2016 google announced that they are serving \u003Cstrong\u003E130.000.000.000.000\u003C\u002Fstrong\u003E \u003Cem\u003E(130 trillion)\u003C\u002Fem\u003E pages, compared to their report from 2013 when they only served around 30.000.000.000.000 (30 trillion). While computers getting faster is undoubtedly true, we can see how the data volume we are working with gets massive, so writing just a simple algorithm that goes over the whole data set isn't enough, even today.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"pre-requirements\" href=\"#pre-requirements\"\u003E\n  \u003C\u002Fa\u003E\n  Pre requirements\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo follow along with this article it would be advised to have some previews knowledge on the following:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ebasic understanding of algorithms\u003C\u002Fli\u003E\n\u003Cli\u003Ebasic understanding of computer science fundamentals\u003C\u002Fli\u003E\n\u003Cli\u003Ebasic understanding of data structures\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"code-analysis\" href=\"#code-analysis\"\u003E\n  \u003C\u002Fa\u003E\n  Code analysis\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow that we understand why writing efficient code matters, let's talk about what makes our code efficient and how do we measure the complexity of an algorithm.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe can measure an algorithm complexity by:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Etime \u003Cem\u003E(duration)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Espace \u003Cem\u003E(memory)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWith this in mind, there comes a big problem, how do we \u003Cstrong\u003Egeneralize and abstract\u003C\u002Fstrong\u003E these measurements. If we are talking about time complexity, how do we measure the time our program takes to execute a piece of code. We can definitely use timers to find out, which would be the intuitive way of doing it, in \u003Cstrong\u003Enode\u003C\u002Fstrong\u003E we can simply record the time before and after the execution and subtract those values:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eaverage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EDate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Eaverage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E23\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E51\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E88\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E49\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E90\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E64\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E77\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E12\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E96\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EDate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003E`Execution time: \u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E${\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"s2\"\u003Ems`\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EDoing it this particular way, exposes our measurements to inconsistency:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eexecution time, \u003Cstrong\u003Evaries between algorithms\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eexecution time, \u003Cstrong\u003Evaries between implementations\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eexecution time, \u003Cstrong\u003Evaries between systems\u002Fcomputers\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eexecution time, \u003Cstrong\u003Eis not predictable on lager scale\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EIn order to \u003Cem\u003Econsistently\u003C\u002Fem\u003E measure an algorithm we need a better alternative, that can:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ecount the amount of operations we perform without worrying of implementation details\u003C\u002Fli\u003E\n\u003Cli\u003Efocus on how the time and space complexities scale\u003C\u002Fli\u003E\n\u003Cli\u003Emeasure the algorithm based on the \u003Cstrong\u003Esize of the input\u003C\u002Fstrong\u003E and the number of steps taken\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"growth-of-operations\" href=\"#growth-of-operations\"\u003E\n  \u003C\u002Fa\u003E\n  Growth of operations\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELet's look at a code example, that will iterate over a list of elements and return whether or not an element exists within the list:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efind\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eelement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eelement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn this scenario, what is the time complexity of our code ? Well, \u003Cstrong\u003Eit depends\u003C\u002Fstrong\u003E on how lucky you are. It could be that the first element in the list is our element, in that case it only goes over the loop once, and it's done, this is known as \u003Cstrong\u003Ebest case scenario\u003C\u002Fstrong\u003E. But it can as well be that our element isn't within the list, in that case we have to go through the entire list and return \u003Cem\u003Efalse\u003C\u002Fem\u003E, which is the \u003Cstrong\u003Eworst case scenario\u003C\u002Fstrong\u003E. We can also run multiple examples on this code and see how many iterations it goes through, and that will give us the \u003Cstrong\u003Eaverage case\u003C\u002Fstrong\u003E, on average we are likely to look at half of the list to find our element.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"asymptotic-notations\" href=\"#asymptotic-notations\"\u003E\n  \u003C\u002Fa\u003E\n  Asymptotic Notations\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAsymptotic notations are mathematical tools used to represent the complexities of algorithms. There are three notations that are commonly used:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003EBig Omega (Ω) Notation\u003C\u002Fcode\u003E, gives a lower bound of an algorithm \u003Cem\u003E(best case)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003EBig Theta (Θ) Notation\u003C\u002Fcode\u003E, gives an exact bound of an algorithm \u003Cem\u003E(average case)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003EBig Oh (O) Notation\u003C\u002Fcode\u003E, gives an upper bound of an algorithm \u003Cem\u003E(worst case)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ESometimes is useful to look at the average case to give you a rough sense of how the algorithm will perform in the long run, but when we talk about code analysis we usually talk about \u003Cstrong\u003Eworst case\u003C\u002Fstrong\u003E, because it usually defines the bottleneck we are after.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"big-o-notation\" href=\"#big-o-notation\"\u003E\n  \u003C\u002Fa\u003E\n  Big O Notation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's look at the example from before, that computes the average of a given list of numbers, and specifically at line \u003Cem\u003E3\u003C\u002Fem\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eaverage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Enums\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"nx\"\u003Eaverage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E23\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E51\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E88\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]);\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe right away notice a loop which goes from a starting point of \u003Ccode\u003Ei = 0\u003C\u002Fcode\u003E to the \u003Ccode\u003Ei &lt; nums.length\u003C\u002Fcode\u003E, meaning that the time complexity of this code would be the size of the given input \u003Ccode\u003Enums\u003C\u002Fcode\u003E, in this case having a length of \u003Cstrong\u003E3\u003C\u002Fstrong\u003E \u003Cem\u003E(elements in the list of nums)\u003C\u002Fem\u003E. We can generalize the input name as \u003Ccode\u003En\u003C\u002Fcode\u003E. Therefor we can say the complexity of our average function is \u003Cstrong\u003EO(3n)\u003C\u002Fstrong\u003E, furthermore we can drop any coefficients and constants and we are left with a complexity of \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt this point you might wonder how are we able to drop that 3; that's just a simplification we make which is possible because Big O is only interested in how the performance of our algorithm changes in relation with the size of the input.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"simplifications\" href=\"#simplifications\"\u003E\n  \u003C\u002Fa\u003E\n  Simplifications\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ELet's look at some example simplifications to better understand how we can simplify our notation.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EO(6 * n) = \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(14n) = O(14 * n) = \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(3891n) = O(3891 * n) = \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(n \u002F 4) = O(¼ * n) = \u003Cstrong\u003EO(n)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(3n * n * 322) = O(n * n) = \u003Cstrong\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E + 2n + 9) = \u003Cstrong\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(800 + n + n\u003Csup\u003E3\u003C\u002Fsup\u003E + n\u003Csup\u003E2\u003C\u002Fsup\u003E) = \u003Cstrong\u003EO(n\u003Csup\u003E3\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(4n\u003Csup\u003E12\u003C\u002Fsup\u003E + 2\u003Csup\u003En\u003C\u002Fsup\u003E) = \u003Cstrong\u003EO(2\u003Csup\u003En\u003C\u002Fsup\u003E)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EO(441) = \u003Cstrong\u003EO(1)\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENow that we have seen some examples we can go ahead and \u003Cem\u003Edefine\u003C\u002Fem\u003E some rules:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ELaw of Multiplication\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eused with \u003Ccode\u003Enested\u003C\u002Fcode\u003E statements\n&gt; \u003Cem\u003EWhen Big O is the product of multiple terms, we can drop any coefficients and constants\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ELaw of Addition\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eused with \u003Ccode\u003Esequential\u003C\u002Fcode\u003E statements\n&gt; \u003Cem\u003EWhen Big O is the sum of multiple terms, we can keep the largest term, and drop the rest\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"time-complexity-analysis-examples\" href=\"#time-complexity-analysis-examples\"\u003E\n  \u003C\u002Fa\u003E\n  Time complexity analysis examples\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ETo better understand how we can analyze the time complexity of our code and simplify our notation let's look at some trivial examples.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F We have 2 separate loops\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F O(3n + 3n) = O(n) -&gt; addition, we keep the largest term\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EexampleOne\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E--\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F calling the function with [1, 2, 3] -&gt; list of length 3\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003EexampleOne\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E3\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F We have 2 separate loops, one of them being a nested loop\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F O(5n * 5n + n \u002F 2) = O(n² + n) = O(n²) -&gt; addition, we keep the largest term\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EexampleTwo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E--\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F calling the function with [5, 6, 7, 8, 9] -&gt; list of length 5\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003EexampleTwo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E6\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E7\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E9\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F First outer loop, iterates a constant number of times (100), and has a nested loop\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Second loop, iterates a constant number of times (4350)\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F O(100 * 4n + 4350) = O(n) -&gt; addition, we keep the largest term\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EexampleThree\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E100\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E4350\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ek\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F calling the function with [2, 4, 6, 8] -&gt; list of length 4\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003EexampleThree\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E4\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E6\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E8\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"space-complexity-analysis-examples\" href=\"#space-complexity-analysis-examples\"\u003E\n  \u003C\u002Fa\u003E\n  Space complexity analysis examples\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EUntil now we only talked about time but space is equally important depending on the specifications of our system. It might be the case that we have a limited memory and thus we would have to make some time complexity tradeoffs in order to gain some better space complexity.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F 3 variables created that are not dependent of the input size\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F O(3) = O(1) -&gt; simplification of a constant term\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eaverage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F declaring a variable 'total'\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F declaring a variable 'i' once\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"cm\"\u003E\u002F**\n    Even though we create this variable every loop\n    at the end of each iteration it will be disposed\n    so we only ever have one variable\n    *\u002F\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etotal\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F 3 variables created, one grows with the input size\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F O(2 + n) = O(n) -&gt; addition, we keep the largest term\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ereverse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F variable grows with the input size\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EreversedList\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[];\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E--\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F pushing each element in the list in the 'reversedList' thus growing it's size\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003EreversedList\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epush\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecurrent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"complexity-classes\" href=\"#complexity-classes\"\u003E\n  \u003C\u002Fa\u003E\n  Complexity classes\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThere are a set of complexity classes that we will go over in an ascending order from most performant to least performant ones.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--10cZaF79--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttp:\u002F\u002Fi.stack.imgur.com\u002FWcBRI.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--10cZaF79--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttp:\u002F\u002Fi.stack.imgur.com\u002FWcBRI.png\" alt=\"Big O Complexity\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's have a look on how these classes would scale with the input size;\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"table-wrapper-paragraph\"\u003E\u003Ctable\u003E\n\u003Cthead\u003E\n\u003Ctr\u003E\n\u003Cth\u003EClass\u003C\u002Fth\u003E\n\u003Cth\u003En=10\u003C\u002Fth\u003E\n\u003Cth\u003En=100\u003C\u002Fth\u003E\n\u003Cth\u003En=1000\u003C\u002Fth\u003E\n\u003Cth\u003En=1000000\u003C\u002Fth\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Fthead\u003E\n\u003Ctbody\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(1)\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(log n)\u003C\u002Ftd\u003E\n\u003Ctd\u003E1\u003C\u002Ftd\u003E\n\u003Ctd\u003E2\u003C\u002Ftd\u003E\n\u003Ctd\u003E3\u003C\u002Ftd\u003E\n\u003Ctd\u003E6\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(n)\u003C\u002Ftd\u003E\n\u003Ctd\u003E10\u003C\u002Ftd\u003E\n\u003Ctd\u003E100\u003C\u002Ftd\u003E\n\u003Ctd\u003E1000\u003C\u002Ftd\u003E\n\u003Ctd\u003E1000000\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(n log(n))\u003C\u002Ftd\u003E\n\u003Ctd\u003E10\u003C\u002Ftd\u003E\n\u003Ctd\u003E200\u003C\u002Ftd\u003E\n\u003Ctd\u003E3000\u003C\u002Ftd\u003E\n\u003Ctd\u003E6000000\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(n²)\u003C\u002Ftd\u003E\n\u003Ctd\u003E100\u003C\u002Ftd\u003E\n\u003Ctd\u003E10000\u003C\u002Ftd\u003E\n\u003Ctd\u003E1000000\u003C\u002Ftd\u003E\n\u003Ctd\u003E1000000000000\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003Ctr\u003E\n\u003Ctd\u003EO(2ⁿ)\u003C\u002Ftd\u003E\n\u003Ctd\u003E1024\u003C\u002Ftd\u003E\n\u003Ctd\u003E1267650600228229401496703205376\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cstrong\u003EHave fun!\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003Ctd\u003E\u003Cstrong\u003EHave fun!\u003C\u002Fstrong\u003E\u003C\u002Ftd\u003E\n\u003C\u002Ftr\u003E\n\u003C\u002Ftbody\u003E\n\u003C\u002Ftable\u003E\u003C\u002Fdiv\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"constant-o1\" href=\"#constant-o1\"\u003E\n  \u003C\u002Fa\u003E\n  Constant – O(1)\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eamount of time or steps it takes does not depend on the input size\u003C\u002Fli\u003E\n\u003Cli\u003Ecan have loops or recursive functions as long as the number of iteration or calls are independent of the input size\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhen we want to identify constant time we usually look for operations that aren't growing\u002Fscaling with the input size, typically code that doesn't iterate over the size of the input. Some operations that we consider to run in constant time are: \u003Cstrong\u003Earithmetic operations\u003C\u002Fstrong\u003E, \u003Cstrong\u003Eaccessing an array index\u003C\u002Fstrong\u003E, \u003Cstrong\u003Ehashmap lookups\u003C\u002Fstrong\u003E, \u003Cstrong\u003Einserting a node into a linked list\u003C\u002Fstrong\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(1) -&gt; does not depend on the input size\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1) -&gt; does not grow with the input\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EisEven\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E%\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Efalse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EsumFirstAndLast\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F accessing array index and getting it's length is a constant operation\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"logarithmic-ologn\" href=\"#logarithmic-ologn\"\u003E\n  \u003C\u002Fa\u003E\n  Logarithmic – O(log(n))\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eamount of time or steps it takes grows as a logarithm of the input size\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ETo better understand what this means, we need to understand what a \u003Cem\u003Elogarithm\u003C\u002Fem\u003E is, in short a \u003Ccode\u003Elogarithm\u003C\u002Fcode\u003E is the opposite of an \u003Ccode\u003Eexponent\u003C\u002Fcode\u003E. If in the case of an exponent we multiply, in the case of a logarithm we \u003Cstrong\u003Edivide\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EExponent\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003E2\u003Csup\u003E4\u003C\u002Fsup\u003E = 16\u003C\u002Fstrong\u003E – 2 * 2 * 2 * 2\u003C\u002Fli\u003E\n\u003Cli\u003Ewe say 2 to the power of 4 is 16\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cem\u003ELogarithm\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003Elog\u003Csub\u003E2\u003C\u002Fsub\u003E16 = 4\u003C\u002Fstrong\u003E – 16 \u002F 2 = 8 \u002F 2 = 4 \u002F 2 = 2 \u002F 2 = 1\u003C\u002Fli\u003E\n\u003Cli\u003Ewe count how many times \u003Cem\u003E(4 times)\u003C\u002Fem\u003E we divided by \u003Cem\u003E2\u003C\u002Fem\u003E which is our \u003Cstrong\u003Ebase\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Ewe say log in base 2 of 16 is 4\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ESome algorithms that have log complexity are \u003Cstrong\u003Ebinary search\u003C\u002Fstrong\u003E and \u003Cstrong\u003Ebisection search\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(log(n)) -&gt; each iteration we divide by 2\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EcountDownStep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estep\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Binary search of a list\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(log(n)) -&gt; each iteration we divide our list by 2\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EindexOf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eelement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EMath\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Efloor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E((\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F if element is at the middle we return it's index\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eelement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F going either right or left of the list\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eelement\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Estart\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"nx\"\u003Eend\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E       \n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"linear-on\" href=\"#linear-on\"\u003E\n  \u003C\u002Fa\u003E\n  Linear – O(n)\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eamount of time or steps it takes depends on the size of the input\u003C\u002Fli\u003E\n\u003Cli\u003Eiterative loops and recursive functions\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWe have seen a lot of linear iterative complexity at this point, so let's jump into some examples where I would include an iterative and recursive linear complexity example \u003Cem\u003E(if you are not familiar with recursion I would advice to research it, will write an article about it at some point and link it here)\u003C\u002Fem\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Iterative factorial\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n) -&gt; iterating n times\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1) \u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EiterFactorial\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eproduct\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Eproduct\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eproduct\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Recursive factorial\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n) -&gt; number of function calls is dependent of n\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(n) -&gt; there are always n function calls in our call stack\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecurFactorial\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F base case\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecurFactorial\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you were to time these 2 functions, you may notice that the recursive one runs slower then the iterative version, due to the function calls. You can optimize it using a \u003Ccode\u003Ememoization\u003C\u002Fcode\u003E strategy, but I would talk about this in another article.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"linearithmic-on-logn\" href=\"#linearithmic-on-logn\"\u003E\n  \u003C\u002Fa\u003E\n  Linearithmic – O(n log(n))\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eamount of time or steps it takes depends on the size of the input that grows logarithmic\u003C\u002Fli\u003E\n\u003Cli\u003Esequential loops nested in log complexity loops\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ELinearithmic complexity is also known as \u003Cstrong\u003Eloglinear\u003C\u002Fstrong\u003E or \u003Cstrong\u003En log n\u003C\u002Fstrong\u003E, this particular complexity class is bigger than \u003Cem\u003EO(n)\u003C\u002Fem\u003E but smaller than \u003Cem\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fem\u003E. Many practical algorithms are linearithmic, most commonly used being \u003Cstrong\u003Emerge sort\u003C\u002Fstrong\u003E and \u003Cstrong\u003Equick sort\u003C\u002Fstrong\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n log(n)) -&gt; sequential loop (slice method), nested into log loop\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EiterPrintHalf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eslice\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n log(n)) -&gt; sequential loop (slice method), into log recursive call\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(n) -&gt; there are always n size function calls in our call stack\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecurPrintHalf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EMath\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Efloor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E\u002F\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estr\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eslice\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Emid\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003ErecurPrintHalf\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"polynominal-onc\" href=\"#polynominal-onc\"\u003E\n  \u003C\u002Fa\u003E\n  Polynominal – O(n\u003Csup\u003Ec\u003C\u002Fsup\u003E)\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cem\u003En\u003C\u002Fem\u003E being the size of input and \u003Cem\u003Ec\u003C\u002Fem\u003E being a constant, where \u003Ccode\u003Ec &gt; 1\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Etypically multiple nested loops or recursive calls\u003C\u002Fli\u003E\n\u003Cli\u003Eincludes quadratic \u003Cem\u003EO(n\u003Csup\u003E2\u003C\u002Fsup\u003E)\u003C\u002Fem\u003E, cubic \u003Cem\u003EO(n\u003Csup\u003E3\u003C\u002Fsup\u003E)\u003C\u002Fem\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EMost of the polynominal algorithms are quadratic and include \u003Cstrong\u003Ebubble sort\u003C\u002Fstrong\u003E, \u003Cstrong\u003Einsertion sort\u003C\u002Fstrong\u003E, \u003Cstrong\u003Eselection sort\u003C\u002Fstrong\u003E, \u003Cstrong\u003Etraversing 2D arrays\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n²) -&gt; 2 nested loops\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(1)\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EbubbleSort\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etemp1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etemp2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Etemp1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etemp2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"c1\"\u003E\u002F\u002F swap\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etemp1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Etemp2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"c1\"\u003E\u002F\u002F update\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Etemp1\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n        \u003Cspan class=\"nx\"\u003Etemp2\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ej\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n      \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"exponential-ocn\" href=\"#exponential-ocn\"\u003E\n  \u003C\u002Fa\u003E\n  Exponential – O(c\u003Csup\u003En\u003C\u002Fsup\u003E)\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cem\u003En\u003C\u002Fem\u003E being the size of input and \u003Cem\u003Ec\u003C\u002Fem\u003E being a constant, where \u003Ccode\u003Ec &gt; 1\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Erecursive functions, where more than one call is made for each size of the input\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EMany important problems are exponential by nature but as cost can be high it leads us to consider more approximate solutions as they provide better time complexities. Some exponential algorithms include \u003Cstrong\u003Etowers of hanoi\u003C\u002Fstrong\u003E, \u003Cstrong\u003Erecursive fibonacci\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(2ⁿ) -&gt; two recursive calls are made for each input\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(n) -&gt; we only have n calls on the call stack\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efibonacci\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efibonacci\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Efibonacci\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E2\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis recursive function can be optimized by using a \u003Ccode\u003Ememoization\u003C\u002Fcode\u003E strategy.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"factorial-on\" href=\"#factorial-on\"\u003E\n  \u003C\u002Fa\u003E\n  Factorial – O(n!)\n\u003C\u002Fh4\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Erecursive functions, where each call is dependent on the input size\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThe main difference between exponential and factorial is that in exponential we make a \u003Cem\u003Econstant\u003C\u002Fem\u003E number of recursive calls, where in factorial we are making \u003Cem\u003En\u003C\u002Fem\u003E number calls. Popular algorithms that are factorial include \u003Cstrong\u003Etraveling salesman\u003C\u002Fstrong\u003E, \u003Cstrong\u003Epermutations\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n!) -&gt; n recursive calls are made based on the size of the input\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(n) -&gt; we only have n calls on the call stack\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EtrivialExample\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E===\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F code\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kd\"\u003Elet\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E++\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003EtrivialExample\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Time: O(n!) -&gt; n recursive calls are made based on the size of the input\u003C\u002Fspan\u003E\n\u003Cspan class=\"c1\"\u003E\u002F\u002F Space: O(n) -&gt; we only have n calls on the call stack\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Epermutations\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Echar\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"dl\"\u003E\"\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elength\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Echar\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003EArray\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Efrom\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E).\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ereduce\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E((\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Echar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eidx\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ereminder\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eslice\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eidx\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Estring\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eslice\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eidx\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Econcat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Epermutations\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ereminder\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Echar\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E));\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eresult\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"p\"\u003E},\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[]);\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe talked about why writing efficient code is important and what are some strategies we can take to measure our code efficiency. We introduced Big O Notation as a solution to generally analyze the complexities of our algorithms, and briefly mentioned the other 2 asymptotic notations. We then analyzed some code using Big O notation, and talked about the most used complexity classes and how are they scaling with the input size, giving examples to better visualize and understand the way we typically analyze our code.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"resources\" href=\"#resources\"\u003E\n  \u003C\u002Fa\u003E\n  Resources\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.chirila.dev\u002Fwriting\"\u003EOriginal Post\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FBig_O_notation\"\u003EBig O Notation Wikipedia\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FTime_complexity\"\u003ETime complexity Wikipedia\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fwww.bigocheatsheet.com\u002F\"\u003EBig O Cheatsheet\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"http:\u002F\u002Fwww.stat.rice.edu\u002F~dobelman\u002Fnotes_papers\u002Fmath\u002Fbig_O.little_o.pdf\"\u003EAsymptotic Notations RICE University\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n",body_markdown:"In this article I would do my best to introduce you to algorithmic complexity and a way to roughly measure it by using the Big O notation. You can also check the **original**  article at [chirila.dev\u002Fwriting\u002Fcfa](https:\u002F\u002Fwww.chirila.dev\u002Fwriting)\n\n## Why measuring code efficiency is important\n\nFirst of, probably the most significant fact to **why it is important**, is because we want to reason about how the code we currently have affects our programs. We can test our code on a smaller scale, but *how are we going to predict the way our code is going to run on a bigger scale* and how the code we write is able to solve a problem of a particular size.\n\nSecond reason, would be to understand **how the code we write, when we design or implement an algorithm would affect the problem at hand**. You can start taking decisions based on how certain data structures, or implementation details can impact the final time complexity of our program.\n\n## Why should we care\n\nOne argument that is usually given, on why you shouldn't care about it, is that computers are getting progressively faster, thus making the computations faster. But on the other hand, the data volume that is being computed gets bigger and bigger, to the point that in 2016 google announced that they are serving **130.000.000.000.000** *(130 trillion)* pages, compared to their report from 2013 when they only served around 30.000.000.000.000 (30 trillion). While computers getting faster is undoubtedly true, we can see how the data volume we are working with gets massive, so writing just a simple algorithm that goes over the whole data set isn't enough, even today.\n\n## Pre requirements\n\nTo follow along with this article it would be advised to have some previews knowledge on the following:\n\n- basic understanding of algorithms\n- basic understanding of computer science fundamentals\n- basic understanding of data structures\n\n## Code analysis\n\nNow that we understand why writing efficient code matters, let's talk about what makes our code efficient and how do we measure the complexity of an algorithm.\n\nWe can measure an algorithm complexity by:\n- time *(duration)*\n- space *(memory)*\n\nWith this in mind, there comes a big problem, how do we **generalize and abstract** these measurements. If we are talking about time complexity, how do we measure the time our program takes to execute a piece of code. We can definitely use timers to find out, which would be the intuitive way of doing it, in **node** we can simply record the time before and after the execution and subtract those values:\n\n```js\nfunction average(nums) {\n  let total = 0;\n  for(let i = 0; i \u003C nums.length; i++) {\n    total += nums[i];\n  }\n  return total \u002F nums.length;\n};\n\nconst start = new Date();\naverage([23, 51, 88, 49, 90, 7, 64, 77, 12, 8, 96]);\nconst end = new Date();\n\nconsole.log(`Execution time: ${end - start}ms`);\n```\n\nDoing it this particular way, exposes our measurements to inconsistency:\n- execution time, **varies between algorithms**\n- execution time, **varies between implementations**\n- execution time, **varies between systems\u002Fcomputers**\n- execution time, **is not predictable on lager scale**\n\nIn order to *consistently* measure an algorithm we need a better alternative, that can:\n- count the amount of operations we perform without worrying of implementation details\n- focus on how the time and space complexities scale\n- measure the algorithm based on the **size of the input** and the number of steps taken\n\n### Growth of operations\n\nLet's look at a code example, that will iterate over a list of elements and return whether or not an element exists within the list:\n\n```js\nfunction find(list, element) {\n  for(let i = 0; i \u003C list.length; i++) {\n    if(list[i] === element) return true;\n  }\n  return false\n};\n```\n\nIn this scenario, what is the time complexity of our code ? Well, **it depends** on how lucky you are. It could be that the first element in the list is our element, in that case it only goes over the loop once, and it's done, this is known as **best case scenario**. But it can as well be that our element isn't within the list, in that case we have to go through the entire list and return *false*, which is the **worst case scenario**. We can also run multiple examples on this code and see how many iterations it goes through, and that will give us the **average case**, on average we are likely to look at half of the list to find our element.\n\n#### Asymptotic Notations\n\nAsymptotic notations are mathematical tools used to represent the complexities of algorithms. There are three notations that are commonly used:\n\n- `Big Omega (Ω) Notation`, gives a lower bound of an algorithm *(best case)*\n- `Big Theta (Θ) Notation`, gives an exact bound of an algorithm *(average case)*\n- `Big Oh (O) Notation`, gives an upper bound of an algorithm *(worst case)*\n\nSometimes is useful to look at the average case to give you a rough sense of how the algorithm will perform in the long run, but when we talk about code analysis we usually talk about **worst case**, because it usually defines the bottleneck we are after.\n\n## Big O Notation\n\nLet's look at the example from before, that computes the average of a given list of numbers, and specifically at line *3*:\n\n```js\nfunction average(nums) {\n  let total = 0;\n  for(let i = 0; i \u003C nums.length; i++) {\n    total += nums[i];\n  }\n  return total \u002F nums.length;\n};\n\naverage([23, 51, 88]);\n```\n\nWe right away notice a loop which goes from a starting point of `i = 0` to the `i \u003C nums.length`, meaning that the time complexity of this code would be the size of the given input `nums`, in this case having a length of **3** *(elements in the list of nums)*. We can generalize the input name as `n`. Therefor we can say the complexity of our average function is **O(3n)**, furthermore we can drop any coefficients and constants and we are left with a complexity of **O(n)**.\n\nAt this point you might wonder how are we able to drop that 3; that's just a simplification we make which is possible because Big O is only interested in how the performance of our algorithm changes in relation with the size of the input.\n\n### Simplifications\n\nLet's look at some example simplifications to better understand how we can simplify our notation.\n\n- O(6 * n) = **O(n)**\n- O(14n) = O(14 * n) = **O(n)**\n- O(3891n) = O(3891 * n) = **O(n)**\n- O(n \u002F 4) = O(¼ * n) = **O(n)**\n- O(3n \\* n * 322) = O(n \\* n) = **O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)**\n- O(n\u003Csup\u003E2\u003C\u002Fsup\u003E + 2n + 9) = **O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)**\n- O(800 + n + n\u003Csup\u003E3\u003C\u002Fsup\u003E + n\u003Csup\u003E2\u003C\u002Fsup\u003E) = **O(n\u003Csup\u003E3\u003C\u002Fsup\u003E)**\n- O(4n\u003Csup\u003E12\u003C\u002Fsup\u003E + 2\u003Csup\u003En\u003C\u002Fsup\u003E) = **O(2\u003Csup\u003En\u003C\u002Fsup\u003E)**\n- O(441) = **O(1)**\n\nNow that we have seen some examples we can go ahead and *define* some rules:\n\n**Law of Multiplication**\n- used with `nested` statements\n\u003E *When Big O is the product of multiple terms, we can drop any coefficients and constants*\n\n**Law of Addition**\n- used with `sequential` statements\n\u003E *When Big O is the sum of multiple terms, we can keep the largest term, and drop the rest*\n\n\n#### Time complexity analysis examples\n\nTo better understand how we can analyze the time complexity of our code and simplify our notation let's look at some trivial examples.\n\n```js\n\u002F\u002F We have 2 separate loops\n\u002F\u002F O(3n + 3n) = O(n) -\u003E addition, we keep the largest term\nfunction exampleOne(n) {\n  for(let i = 0; i \u003C n.length; i++) {\n    \u002F\u002F code\n  }\n  for(let j = n.length - 1; j \u003E 0; i--) {\n    \u002F\u002F code\n  }\n};\n\u002F\u002F calling the function with [1, 2, 3] -\u003E list of length 3\nexampleOne([1, 2, 3])\n\n\u002F\u002F We have 2 separate loops, one of them being a nested loop\n\u002F\u002F O(5n * 5n + n \u002F 2) = O(n² + n) = O(n²) -\u003E addition, we keep the largest term\nfunction exampleTwo(n) {\n  for(let i = 0; i \u003C n.length; i++) {\n    for(let j = 0; j \u003C n.length; j++) {\n      \u002F\u002F code\n    }\n  }\n  for(let k = n.length \u002F 2; k \u003E 0; k--) {\n    \u002F\u002F code\n  }\n};\n\u002F\u002F calling the function with [5, 6, 7, 8, 9] -\u003E list of length 5\nexampleTwo([5, 6, 7, 8, 9])\n\n\u002F\u002F First outer loop, iterates a constant number of times (100), and has a nested loop\n\u002F\u002F Second loop, iterates a constant number of times (4350)\n\u002F\u002F O(100 * 4n + 4350) = O(n) -\u003E addition, we keep the largest term\nfunction exampleThree(n) {\n  for(let i = 0; i \u003C 100; i++) {\n    for(let j = 0; j \u003C n.length; j++) {\n      \u002F\u002F code\n    }\n  }\n  for(let k = 0; k \u003C 4350; k++) {\n    \u002F\u002F code\n  }\n};\n\u002F\u002F calling the function with [2, 4, 6, 8] -\u003E list of length 4\nexampleThree([2, 4, 6, 8])\n```\n\n#### Space complexity analysis examples\n\nUntil now we only talked about time but space is equally important depending on the specifications of our system. It might be the case that we have a limited memory and thus we would have to make some time complexity tradeoffs in order to gain some better space complexity.\n\n```js\n\u002F\u002F 3 variables created that are not dependent of the input size\n\u002F\u002F O(3) = O(1) -\u003E simplification of a constant term\nfunction average(list) {\n  \u002F\u002F declaring a variable 'total'\n  let total = 0;\n  \u002F\u002F declaring a variable 'i' once\n  for(let i = 0; i \u003C list.length; i++) {\n    \u002F**\n    Even though we create this variable every loop\n    at the end of each iteration it will be disposed\n    so we only ever have one variable\n    *\u002F\n    const current = list[i]\n    total += current;\n  }\n  return total \u002F list.length;\n};\n\n\u002F\u002F 3 variables created, one grows with the input size\n\u002F\u002F O(2 + n) = O(n) -\u003E addition, we keep the largest term\nfunction reverse(list) {\n  \u002F\u002F variable grows with the input size\n  const reversedList = [];\n\n  for(let i = list.length - 1; i \u003E= 0; i--) {\n    const current = list[i];\n    \u002F\u002F pushing each element in the list in the 'reversedList' thus growing it's size\n    reversedList.push(current);\n  }\n}\n```\n\n\n### Complexity classes\n\nThere are a set of complexity classes that we will go over in an ascending order from most performant to least performant ones.\n\n![Big O Complexity](http:\u002F\u002Fi.stack.imgur.com\u002FWcBRI.png)\n\nLet's have a look on how these classes would scale with the input size;\n\n|Class |n=10 |n=100 |n=1000 |n=1000000 |\n--- | --- | --- | --- | ---\n|O(1)|1 |1 |1 |1 |\n|O(log n)|1 |2 |3 |6 |\n|O(n)|10 |100 |1000 |1000000 |\n|O(n log(n))|10 |200 |3000 |6000000 |\n|O(n²)|100 |10000 |1000000 |1000000000000 |\n|O(2ⁿ)|1024 |1267650600228229401496703205376 |**Have fun!** |**Have fun!** |\n\n#### Constant – O(1)\n\n- amount of time or steps it takes does not depend on the input size\n- can have loops or recursive functions as long as the number of iteration or calls are independent of the input size\n\nWhen we want to identify constant time we usually look for operations that aren't growing\u002Fscaling with the input size, typically code that doesn't iterate over the size of the input. Some operations that we consider to run in constant time are: **arithmetic operations**, **accessing an array index**, **hashmap lookups**, **inserting a node into a linked list**.\n\n```js\n\u002F\u002F Time: O(1) -\u003E does not depend on the input size\n\u002F\u002F Space: O(1) -\u003E does not grow with the input\nfunction isEven(n) {\n  let result;\n  if(n % 2) {\n    result = false;\n  } else {\n    result = true;\n  }\n  return result;\n}\n\n\u002F\u002F Time: O(1)\n\u002F\u002F Space: O(1)\nfunction sumFirstAndLast(list) {\n  \u002F\u002F accessing array index and getting it's length is a constant operation\n  const result = list[0] + list[list.length - 1];\n  return result;\n}\n```\n\n#### Logarithmic – O(log(n))\n\n- amount of time or steps it takes grows as a logarithm of the input size\n\nTo better understand what this means, we need to understand what a *logarithm* is, in short a `logarithm` is the opposite of an `exponent`. If in the case of an exponent we multiply, in the case of a logarithm we **divide**\n\n*Exponent*\n- **2\u003Csup\u003E4\u003C\u002Fsup\u003E = 16** – 2 \\* 2 \\* 2 \\* 2\n- we say 2 to the power of 4 is 16\n\n*Logarithm*\n- **log\u003Csub\u003E2\u003C\u002Fsub\u003E16 = 4** – 16 \u002F 2 = 8 \u002F 2 = 4 \u002F 2 = 2 \u002F 2 = 1\n- we count how many times *(4 times)* we divided by *2* which is our **base**\n- we say log in base 2 of 16 is 4\n\nSome algorithms that have log complexity are **binary search** and **bisection search**\n\n```js\n\u002F\u002F Time: O(log(n)) -\u003E each iteration we divide by 2\n\u002F\u002F Space: O(1)\nfunction countDownStep(n, step = 2) {\n  for(let i = n; i \u003E 0; i \u002F= step) {\n    console.log(i);\n  }\n}\n\n\u002F\u002F Binary search of a list\n\u002F\u002F Time: O(log(n)) -\u003E each iteration we divide our list by 2\n\u002F\u002F Space: O(1)\nfunction indexOf(list, element) {\n  let start = 0;\n  let end = list.length - 1;\n\n  while(start \u003C= end) {\n    let mid = Math.floor((start + end) \u002F 2);\n    \u002F\u002F if element is at the middle we return it's index\n    if(list[mid] === element) return mid;\n    \u002F\u002F going either right or left of the list\n    if(list[mid] \u003C element) {\n      start = mid + 1;\n    } else {\n      end = mid - 1;\n    }       \n  }\n  return -1;\n}\n```\n\n#### Linear – O(n)\n\n- amount of time or steps it takes depends on the size of the input\n- iterative loops and recursive functions\n\nWe have seen a lot of linear iterative complexity at this point, so let's jump into some examples where I would include an iterative and recursive linear complexity example *(if you are not familiar with recursion I would advice to research it, will write an article about it at some point and link it here)*.\n\n```js\n\u002F\u002F Iterative factorial\n\u002F\u002F Time: O(n) -\u003E iterating n times\n\u002F\u002F Space: O(1) \nfunction iterFactorial(n) {\n  let product = 1;\n  for(let i = 1; i \u003C= n; i++) {\n    product *= i;\n  }\n  return product;\n}\n\n\u002F\u002F Recursive factorial\n\u002F\u002F Time: O(n) -\u003E number of function calls is dependent of n\n\u002F\u002F Space: O(n) -\u003E there are always n function calls in our call stack\nfunction recurFactorial(n) {\n  \u002F\u002F base case\n  if(n \u003C= 1) return 1;\n\n  return n * recurFactorial(n - 1);\n}\n```\n\nIf you were to time these 2 functions, you may notice that the recursive one runs slower then the iterative version, due to the function calls. You can optimize it using a `memoization` strategy, but I would talk about this in another article.\n\n#### Linearithmic – O(n log(n))\n\n- amount of time or steps it takes depends on the size of the input that grows logarithmic\n- sequential loops nested in log complexity loops\n\nLinearithmic complexity is also known as **loglinear** or **n log n**, this particular complexity class is bigger than *O(n)* but smaller than *O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)*. Many practical algorithms are linearithmic, most commonly used being **merge sort** and **quick sort**.\n\n```js\n\u002F\u002F Time: O(n log(n)) -\u003E sequential loop (slice method), nested into log loop\n\u002F\u002F Space: O(1)\nfunction iterPrintHalf(str) {\n  for(let i = str.length; i \u003E= 1; i \u002F= 2) {\n    const result = str.slice(0, i);\n    console.log(result);\n  }\n}\n\n\u002F\u002F Time: O(n log(n)) -\u003E sequential loop (slice method), into log recursive call\n\u002F\u002F Space: O(n) -\u003E there are always n size function calls in our call stack\nfunction recurPrintHalf(str) {\n  console.log(str);\n  if(str.length \u003C= 1) return;\n\n  const mid = Math.floor(str.length \u002F 2);\n  const result = str.slice(0, mid);\n\n  return recurPrintHalf(result);\n}\n```\n\n#### Polynominal – O(n\u003Csup\u003Ec\u003C\u002Fsup\u003E)\n\n- *n* being the size of input and *c* being a constant, where `c \u003E 1`\n- typically multiple nested loops or recursive calls\n- includes quadratic *O(n\u003Csup\u003E2\u003C\u002Fsup\u003E)*, cubic *O(n\u003Csup\u003E3\u003C\u002Fsup\u003E)*\n\nMost of the polynominal algorithms are quadratic and include **bubble sort**, **insertion sort**, **selection sort**, **traversing 2D arrays**\n\n```js\n\u002F\u002F Time: O(n²) -\u003E 2 nested loops\n\u002F\u002F Space: O(1)\nfunction bubbleSort(list) {\n  for (let i = 0; i \u003C list.length; i++) {\n    let temp1 = list[i];\n\n    for (let j = i + 1; j \u003C list.length; j++) {\n      let temp2 = list[j];\n\n      if(temp1 \u003E temp2) {\n        \u002F\u002F swap\n        list[i] = temp1;\n        list[j] = temp2;\n        \u002F\u002F update\n        temp1 = list[i];\n        temp2 = list[j];\n      }\n    }\n  }\n  return list;\n}\n```\n\n#### Exponential – O(c\u003Csup\u003En\u003C\u002Fsup\u003E)\n\n- *n* being the size of input and *c* being a constant, where `c \u003E 1`\n- recursive functions, where more than one call is made for each size of the input\n\nMany important problems are exponential by nature but as cost can be high it leads us to consider more approximate solutions as they provide better time complexities. Some exponential algorithms include **towers of hanoi**, **recursive fibonacci**\n\n```js\n\u002F\u002F Time: O(2ⁿ) -\u003E two recursive calls are made for each input\n\u002F\u002F Space: O(n) -\u003E we only have n calls on the call stack\nfunction fibonacci(n) {\n  if(n === 0) return 0;\n  if(n === 1) return 1;\n\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n```\n\nThis recursive function can be optimized by using a `memoization` strategy.\n\n#### Factorial – O(n!)\n\n- recursive functions, where each call is dependent on the input size\n\nThe main difference between exponential and factorial is that in exponential we make a *constant* number of recursive calls, where in factorial we are making *n* number calls. Popular algorithms that are factorial include **traveling salesman**, **permutations**\n\n```js\n\u002F\u002F Time: O(n!) -\u003E n recursive calls are made based on the size of the input\n\u002F\u002F Space: O(n) -\u003E we only have n calls on the call stack\nfunction trivialExample(n) {\n  if(n === 1) return 1;\n  \u002F\u002F code\n\n  for(let i = 0; i \u003C n; i++) {\n    trivialExample(n);\n  }\n}\n\n\u002F\u002F Time: O(n!) -\u003E n recursive calls are made based on the size of the input\n\u002F\u002F Space: O(n) -\u003E we only have n calls on the call stack\nfunction permutations(string, char = \"\") {\n  if(string.length \u003C= 1) return [char + string];\n\n  return Array.from(string).reduce((result, char, idx) =\u003E {\n    const reminder = string.slice(0, idx) + string.slice(idx + 1);\n    result = result.concat(permutations(reminder, char));\n    return result;\n  }, []);\n}\n```\n\n## Conclusion\n\nWe talked about why writing efficient code is important and what are some strategies we can take to measure our code efficiency. We introduced Big O Notation as a solution to generally analyze the complexities of our algorithms, and briefly mentioned the other 2 asymptotic notations. We then analyzed some code using Big O notation, and talked about the most used complexity classes and how are they scaling with the input size, giving examples to better visualize and understand the way we typically analyze our code.\n\n### Resources\n\n- [Original Post](https:\u002F\u002Fwww.chirila.dev\u002Fwriting)\n- [Big O Notation Wikipedia](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FBig_O_notation)\n- [Time complexity Wikipedia](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FTime_complexity)\n- [Big O Cheatsheet](https:\u002F\u002Fwww.bigocheatsheet.com\u002F)\n- [Asymptotic Notations RICE University](http:\u002F\u002Fwww.stat.rice.edu\u002F~dobelman\u002Fnotes_papers\u002Fmath\u002Fbig_O.little_o.pdf)",user:{name:"Andrei Chirila",username:"kerosz",twitter_username:"chirila_",github_username:"Kerosz",website_url:"https:\u002F\u002Fwww.chirila.dev",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Hi8QYtTb--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F421020\u002Fefaa557f-2158-4621-a5cd-3e15fcc1b04d.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CDQXvc9K--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F421020\u002Fefaa557f-2158-4621-a5cd-3e15fcc1b04d.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkerosz\u002F788662",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,160,"2021-08-13T11:44:27Z"));
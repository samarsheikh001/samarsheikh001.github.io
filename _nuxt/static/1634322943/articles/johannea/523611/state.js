window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:523611,title:"Practical Advice to Good API Design",description:"During a rare productive youtube session, I came across a talk on How to build good APIs and why it m...",readable_publish_date:"Nov 24 '20",slug:"practical-advice-to-good-api-design-2hac",path:"\u002Fjohannea\u002Fpractical-advice-to-good-api-design-2hac",url:c,comments_count:18,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tvkOE_am--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffhq78jy04paxddcaxwzb.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9L5oRPzz--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Ffhq78jy04paxddcaxwzb.jpg",canonical_url:c,created_at:b,edited_at:"2020-12-08T14:08:57Z",crossposted_at:a,published_at:b,last_comment_at:"2020-12-11T15:18:17Z",reading_time_minutes:6,tag_list:"architecture, design, api, oop",tags:["architecture","design","api","oop"],body_html:"\u003Cp\u003EDuring a rare productive youtube session, I came across a talk on How to build good APIs and why it matters by Joshua Bloch (author of Effective Java). After watching it, I knew I had to take notes because the talk was too good to forget. So good in fact, that I wanted to share them with you.\u003C\u002Fp\u003E\n\n\u003Cp\u003EJoshua managed to squeeze many topics into an hour, hitting both higher-level characteristics of a good API, the process of building one and some practical tips to building an API. So let’s jump right in.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirstly, let’s go over real quick what an API is. This is not covered in the video, so if you already know, feel free to skip this part.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAn API (Application Programming Interface) can be considered as a contract of how to communicate with the software behind the API. It defines what data you can fetch, what format it is in and what operations you can do on that data. Which means an API can be anything from a fully-fledged REST API or a set of methods you can call to operate on a list.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAccording to Bloch, there are certain characteristics you can aim for to design a good API.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"characteristics-of-a-good-api\" href=\"#characteristics-of-a-good-api\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Characteristics of a good API\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EEasy to learn\u003C\u002Fli\u003E\n\u003Cli\u003EEasy to use, even without documentation\u003C\u002Fli\u003E\n\u003Cli\u003EHard to misuse\u003C\u002Fli\u003E\n\u003Cli\u003EEasy to read and maintain code that uses it\u003C\u002Fli\u003E\n\u003Cli\u003ESufficiently powerful to satisfy requirements\u003C\u002Fli\u003E\n\u003Cli\u003EEasy to evolve\u003C\u002Fli\u003E\n\u003Cli\u003EAppropriate to the audience\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EWhile these characteristics are quite abstract and hard to implement, they can be used as a guideline. How to achieve these characteristics is what the rest of the post is about.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"process-of-building-an-api\" href=\"#process-of-building-an-api\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Process of building an API\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe first step of building an API is to start with the requirements. However, beware of proposed solutions by stakeholders and try to extract use cases instead. Figure out the exact problem you are trying to solve instead of how the user wants it solved.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOnce you have the requirements in place, start small. Write up a maximum one-page specification.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnything larger than that and your ego becomes invested. Sunk cost fallacy kicks in and you won’t feel comfortable scrapping it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt is low effort to make changes and it’s easy to rewrite it once you start getting feedback. Only when you start to better understand the problem you are trying to solve, should you flesh out the specification more.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs counter-intuitive as it sounds, you should start coding against your API immediately. Create interfaces and don’t bother with the implementation until you have everything specced out. Even then, keep coding against your API to make sure it behaves as you would expect. This allows you to clarify and prevent surprises.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThese code snippets could some of the most important code you will write for your API. They can live on as examples and you should spend a lot of time on those. Once your API is in use, it’s the example code that gets copied. Having good examples means good use of your API, so they should be exemplary.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHowever, the most important thing when building an API is\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EWhen in doubt, leave it out.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EEspecially if you are building a public API, it becomes near impossible to remove functionality once users started using it.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"practical-tips\" href=\"#practical-tips\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Practical tips\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ESmall heads up, many of these examples are based on Java and OOP (Object Oriented Programming). Most of it is still applicable outside of Java and OOP though.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAn API should do one thing and do it well\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe functionality should be easy to explain. If it’s hard to name, it’s generally a bad sign. A good API should read like prose.\u003Cbr\u003E\nBe open to splitting things up when you’re trying to do too many things in one place or putting them together when you’re doing similar things.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAn API should be as small as possible but no smaller\u003C\u002Fstrong\u003E\u003Cbr\u003E\nSatisfy the requirements, leave everything else out. You can always add but never remove.\u003Cbr\u003E\nConsider the number of concepts to learn to understand the API. You should think about the conceptual weight of having to learn the API and try to keep it as low as possible.\u003Cbr\u003E\nOne way to do that is to reuse interfaces where possible. By reusing interfaces, the user only has the learn that interface once.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EDon’t put implementation details in the API\u003C\u002Fstrong\u003E\u003Cbr\u003E\nYou should not expose implementation details to the client. It makes the API harder to change if you want to change the implementation.\u003Cbr\u003E\nAn example is throwing exceptions. You might be throwing a SQL exception, but in a later version also want to implement another form of data storage. Now you have to throw an SQL exception even if you’re trying to write to a file because the users are expecting and handling the SQL exception.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EMinimize accessibility of everything\u003C\u002Fstrong\u003E\u003Cbr\u003E\nMake as much private as possible. It gives you the flexibility to change names and implementations without impacting your client's implementation.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENames matter a lot\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe names should be largely self-explanatory, you should consider an API like a small language. This means it should be consistent in it’s naming. The same words should mean the same thing and the same meaning should be used to describe the same thing.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F Does the same thing, but different names are used\nfun remove()\nfun delete()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Cstrong\u003EDocumentation matters\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe components of the API that are documented well are more likely to be reused. Document religiously, especially when dealing with state or side effects. The better the documentation, the fewer errors your users will experience.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENever warp an API for performance\u003C\u002Fstrong\u003E\u003Cbr\u003E\nGood API design coincides with good performance usually. Things like making types mutable or using implementation types instead of an interface can limit performance.\u003Cbr\u003E\nBy bending your API to achieve better performance, you run the risk of breaking the API. For example, by making an immutable class, mutable to use less memory. While the underlying performance issue will be fixed, the headaches are forever.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EMinimize mutability\u003C\u002Fstrong\u003E\u003Cbr\u003E\nClasses should be immutable unless there is a very good reason to do so otherwise. If mutability is necessary, keep the state space as small as possible.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ESubclass only where it makes sense\u003C\u002Fstrong\u003E\u003Cbr\u003E\nSubclass only if you can say with a straight face that every instance of the subclass is an instance of the superclass. If the answer isn’t a resounding yes, use composition instead. Exposed classes should never subclass just to reuse implementation code.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EDesign and document for inheritance or else prohibit it\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThis applies to OOP. \u003Ca href=\"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FFragile_base_class\"\u003EAvoid the fragile base class problem\u003C\u002Fa\u003E, which occurs when changes to a base class could break the implementation of a subclass.\u003Cbr\u003E\nIf it cannot be avoided, document thoroughly how methods use each other. Although as much as possible, try to restrict access to instance variables and use getters and setters to control the implementation of the base class.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EDon’t make the client do anything the module could do\u003C\u002Fstrong\u003E\u003Cbr\u003E\nLet the API do the things that always needs to be done. Avoid boilerplate for clients.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F DON'T\nval circle = CircleFactory.newInstance().newCircle()\ncircle.radius(1)\ncircle.draw()\n\u002F\u002F DO\nval circle = CircleFactory.newCircle(radius = 0.5)\ncircle.draw()\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Cstrong\u003EApply principle of least astonishment\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThe API user should not be surprised by behavior. Either you avoid side effects or use descriptive names to describe what the side effects are.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EFail fast\u003C\u002Fstrong\u003E\u003Cbr\u003E\nErrors should be reported as soon as possible after they occur. Compile-time is best, so take advantage of generics\u002Fstatic typings.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EProvide programmatic access to all data available in string form\u003C\u002Fstrong\u003E\u003Cbr\u003E\nIf you only use strings, the format and content become part of the API so you can never change it. So provide access to the content of the string via an object. This way you don’t have to make any promises about the format and content of strings.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EOverload with care\u003C\u002Fstrong\u003E\u003Cbr\u003E\nOnly overload methods if their behavior is the same. Taking the Java TreeSet constructor as an example, TreeSet(Collection) ignores order, while TreeSet(SortedSet) respects the order.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EUse appropriate parameter and return types\u003C\u002Fstrong\u003E\u003Cbr\u003E\nFavor interfaces over classes for input, but use the most specific input parameter type. Don’t use string if a better type exists. You should also not use doubles or floats for monetary values, for example.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EUse consistent parameter ordering across methods\u003C\u002Fstrong\u003E\u003Cbr\u003E\nEspecially when parameter types are identical because you can accidentally swap the parameters around.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efun copy(source: String, destination: String)\nfun partialCopy(destination: String, source: String, numberToCopy: Int)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Cstrong\u003EAvoid long parameter lists\u003C\u002Fstrong\u003E\u003Cbr\u003E\nThree or fewer parameters is ideal. Long lists of identically typed parameters can be harmful and very error-prone. If necessary, break up the function or use a helper class to hold the parameters.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAvoid return types that demand exceptional processing\u003C\u002Fstrong\u003E\u003Cbr\u003E\nUsers will forget to write the special-case code, which can lead to bugs. This should be avoided in cases where the non-exceptional flow is also sufficient. For example, return zero-length arrays or collections rather than nulls.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003ELastly, you should expect to make mistakes, which is why so many of these points are about being able to change things easily and less about building the perfect API from the get-go.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPlease check out the talk as well, he goes into much more detail than I do here.\u003Cbr\u003E\nI hope you found these useful and feel free to share your thoughts or experiences in the comments!\u003Cbr\u003E\nThank you for reading ❤️\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EResources:\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=heh4OeB9A-c\"\u003EHow to design a good API and why it matters\u003C\u002Fa\u003E - Joshua Bloch (\u003Ca href=\"http:\u002F\u002Ffwdinnovations.net\u002Fwhitepaper\u002FAPIDesign.pdf\"\u003ESlides\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\n",body_markdown:"During a rare productive youtube session, I came across a talk on How to build good APIs and why it matters by Joshua Bloch (author of Effective Java). After watching it, I knew I had to take notes because the talk was too good to forget. So good in fact, that I wanted to share them with you.\n\nJoshua managed to squeeze many topics into an hour, hitting both higher-level characteristics of a good API, the process of building one and some practical tips to building an API. So let’s jump right in.\n\nFirstly, let’s go over real quick what an API is. This is not covered in the video, so if you already know, feel free to skip this part.\n\nAn API (Application Programming Interface) can be considered as a contract of how to communicate with the software behind the API. It defines what data you can fetch, what format it is in and what operations you can do on that data. Which means an API can be anything from a fully-fledged REST API or a set of methods you can call to operate on a list.\n\nAccording to Bloch, there are certain characteristics you can aim for to design a good API.\n\n## Characteristics of a good API\n* Easy to learn\n* Easy to use, even without documentation\n* Hard to misuse\n* Easy to read and maintain code that uses it\n* Sufficiently powerful to satisfy requirements\n* Easy to evolve\n* Appropriate to the audience\n\nWhile these characteristics are quite abstract and hard to implement, they can be used as a guideline. How to achieve these characteristics is what the rest of the post is about.\n\n\n## Process of building an API\n\nThe first step of building an API is to start with the requirements. However, beware of proposed solutions by stakeholders and try to extract use cases instead. Figure out the exact problem you are trying to solve instead of how the user wants it solved.\n\nOnce you have the requirements in place, start small. Write up a maximum one-page specification.\n\nAnything larger than that and your ego becomes invested. Sunk cost fallacy kicks in and you won’t feel comfortable scrapping it.\n\nIt is low effort to make changes and it’s easy to rewrite it once you start getting feedback. Only when you start to better understand the problem you are trying to solve, should you flesh out the specification more.\n\nAs counter-intuitive as it sounds, you should start coding against your API immediately. Create interfaces and don’t bother with the implementation until you have everything specced out. Even then, keep coding against your API to make sure it behaves as you would expect. This allows you to clarify and prevent surprises.\n\nThese code snippets could some of the most important code you will write for your API. They can live on as examples and you should spend a lot of time on those. Once your API is in use, it’s the example code that gets copied. Having good examples means good use of your API, so they should be exemplary.\n\nHowever, the most important thing when building an API is\n\u003E When in doubt, leave it out.\n\nEspecially if you are building a public API, it becomes near impossible to remove functionality once users started using it.\n\n### Practical tips\nSmall heads up, many of these examples are based on Java and OOP (Object Oriented Programming). Most of it is still applicable outside of Java and OOP though.\n\n**An API should do one thing and do it well**\nThe functionality should be easy to explain. If it’s hard to name, it’s generally a bad sign. A good API should read like prose.\nBe open to splitting things up when you’re trying to do too many things in one place or putting them together when you’re doing similar things.\n\n**An API should be as small as possible but no smaller**\nSatisfy the requirements, leave everything else out. You can always add but never remove.\nConsider the number of concepts to learn to understand the API. You should think about the conceptual weight of having to learn the API and try to keep it as low as possible.\nOne way to do that is to reuse interfaces where possible. By reusing interfaces, the user only has the learn that interface once.\n\n**Don’t put implementation details in the API**\nYou should not expose implementation details to the client. It makes the API harder to change if you want to change the implementation.\nAn example is throwing exceptions. You might be throwing a SQL exception, but in a later version also want to implement another form of data storage. Now you have to throw an SQL exception even if you’re trying to write to a file because the users are expecting and handling the SQL exception.\n\n**Minimize accessibility of everything**\nMake as much private as possible. It gives you the flexibility to change names and implementations without impacting your client's implementation.\n\n**Names matter a lot**\nThe names should be largely self-explanatory, you should consider an API like a small language. This means it should be consistent in it’s naming. The same words should mean the same thing and the same meaning should be used to describe the same thing.\n```\n\u002F\u002F Does the same thing, but different names are used\nfun remove()\nfun delete()\n```\n\n**Documentation matters**\nThe components of the API that are documented well are more likely to be reused. Document religiously, especially when dealing with state or side effects. The better the documentation, the fewer errors your users will experience.\n\n**Never warp an API for performance**\nGood API design coincides with good performance usually. Things like making types mutable or using implementation types instead of an interface can limit performance.\nBy bending your API to achieve better performance, you run the risk of breaking the API. For example, by making an immutable class, mutable to use less memory. While the underlying performance issue will be fixed, the headaches are forever.\n\n**Minimize mutability**\nClasses should be immutable unless there is a very good reason to do so otherwise. If mutability is necessary, keep the state space as small as possible.\n\n**Subclass only where it makes sense**\nSubclass only if you can say with a straight face that every instance of the subclass is an instance of the superclass. If the answer isn’t a resounding yes, use composition instead. Exposed classes should never subclass just to reuse implementation code.\n\n**Design and document for inheritance or else prohibit it**\nThis applies to OOP. [Avoid the fragile base class problem](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FFragile_base_class), which occurs when changes to a base class could break the implementation of a subclass.\nIf it cannot be avoided, document thoroughly how methods use each other. Although as much as possible, try to restrict access to instance variables and use getters and setters to control the implementation of the base class.\n\n**Don’t make the client do anything the module could do**\nLet the API do the things that always needs to be done. Avoid boilerplate for clients.\n```\n\u002F\u002F DON'T\nval circle = CircleFactory.newInstance().newCircle()\ncircle.radius(1)\ncircle.draw()\n\u002F\u002F DO\nval circle = CircleFactory.newCircle(radius = 0.5)\ncircle.draw()\n```\n**Apply principle of least astonishment**\nThe API user should not be surprised by behavior. Either you avoid side effects or use descriptive names to describe what the side effects are.\n\n**Fail fast**\nErrors should be reported as soon as possible after they occur. Compile-time is best, so take advantage of generics\u002Fstatic typings.\n\n**Provide programmatic access to all data available in string form**\nIf you only use strings, the format and content become part of the API so you can never change it. So provide access to the content of the string via an object. This way you don’t have to make any promises about the format and content of strings.\n\n**Overload with care**\nOnly overload methods if their behavior is the same. Taking the Java TreeSet constructor as an example, TreeSet(Collection) ignores order, while TreeSet(SortedSet) respects the order.\n\n**Use appropriate parameter and return types**\nFavor interfaces over classes for input, but use the most specific input parameter type. Don’t use string if a better type exists. You should also not use doubles or floats for monetary values, for example.\n\n**Use consistent parameter ordering across methods**\nEspecially when parameter types are identical because you can accidentally swap the parameters around.\n```\nfun copy(source: String, destination: String)\nfun partialCopy(destination: String, source: String, numberToCopy: Int)\n```\n\n**Avoid long parameter lists**\nThree or fewer parameters is ideal. Long lists of identically typed parameters can be harmful and very error-prone. If necessary, break up the function or use a helper class to hold the parameters.\n\n**Avoid return types that demand exceptional processing**\nUsers will forget to write the special-case code, which can lead to bugs. This should be avoided in cases where the non-exceptional flow is also sufficient. For example, return zero-length arrays or collections rather than nulls.\n\n---\nLastly, you should expect to make mistakes, which is why so many of these points are about being able to change things easily and less about building the perfect API from the get-go.\n\nPlease check out the talk as well, he goes into much more detail than I do here.\nI hope you found these useful and feel free to share your thoughts or experiences in the comments!\nThank you for reading :heart:\n\n**Resources:** \n\n[How to design a good API and why it matters](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=heh4OeB9A-c) - Joshua Bloch ([Slides](http:\u002F\u002Ffwdinnovations.net\u002Fwhitepaper\u002FAPIDesign.pdf))",user:{name:"Johanne Andersen",username:"johannea",twitter_username:"Johanne_01",github_username:"JohanneA",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--jJWcmqwV--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F502261\u002F92382828-c92c-44b7-b727-7cab022e362d.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LVmS0JC---\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F502261\u002F92382828-c92c-44b7-b727-7cab022e362d.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fjohannea\u002F523611",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2020-11-24T06:47:06Z","https:\u002F\u002Fdev.to\u002Fjohannea\u002Fpractical-advice-to-good-api-design-2hac",507));
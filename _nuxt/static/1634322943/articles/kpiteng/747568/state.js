window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:747568,title:"Top 10 React Tricks Every Developer Should Use",description:"Discover a set of React best coding practices, tips and tricks that should be known by all...",readable_publish_date:"Jul 4",slug:"top-10-react-tricks-every-developer-should-use-8nj",path:"\u002Fkpiteng\u002Ftop-10-react-tricks-every-developer-should-use-8nj",url:b,comments_count:1,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Nsqhat0P--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fttqxgn6rzodx3s9f31te.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KpKPImu1--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fttqxgn6rzodx3s9f31te.png",canonical_url:b,created_at:"2021-07-04T07:56:00Z",edited_at:"2021-07-04T08:27:48Z",crossposted_at:a,published_at:d,last_comment_at:"2021-07-05T17:19:20Z",reading_time_minutes:5,tag_list:"react, reactnative, security, javascript",tags:["react","reactnative","security","javascript"],body_html:"\u003Cp\u003EDiscover a set of React best coding practices, tips and tricks that should be known by all \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fservices\u002Fmobile-app-development\u002Freact-native-app-development\"\u003Edevelopers\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EKey Points -\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUse State Management Library (Redux, MobX, Apollo)\u003C\u002Fli\u003E\n\u003Cli\u003EUse Event Listener instead of Static Method\u003C\u002Fli\u003E\n\u003Cli\u003ERemove All Listener In UnMount\u003C\u002Fli\u003E\n\u003Cli\u003EConfig for Environment Setup || Test || Live || Staging\u003C\u002Fli\u003E\n\u003Cli\u003EUse Context for Themes management Dark || Live Theme\u003C\u002Fli\u003E\n\u003Cli\u003EUse Storybook - Isolated | | Reusable Component Development\u003C\u002Fli\u003E\n\u003Cli\u003EMinimize use of third-party library || Instead create own Code Logic\u003C\u002Fli\u003E\n\u003Cli\u003EScale and Resize Images || Cache Images\u003C\u002Fli\u003E\n\u003Cli\u003EFirebase Performance Monitoring\u003C\u002Fli\u003E\n\u003Cli\u003EAvoid re-rendering using useMemo, useCallBack\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"1-use-state-management-library-redux-mobx-apollo\" href=\"#1-use-state-management-library-redux-mobx-apollo\"\u003E\n  \u003C\u002Fa\u003E\n  1. Use State Management Library (Redux, MobX, Apollo)\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EMany times we are using local variables, array, objects declarations that are specific to components but what happens the same would be used in other components then, Use State Management Library so you can access your variables, array, objects though the app, you can update and listen for change in any component.\u003C\u002Fp\u003E\n\n\u003Cp\u003ERedux, Redux Saga, Redux Rematch, \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fmobx-state-tree\"\u003EMobX State Tree\u003C\u002Fa\u003E, \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-native-apollo-graphql\"\u003EApollo\u003C\u002Fa\u003E are popular state management libraries which allow developers to access State Variables through the app and it will persist your data so next time the user comes back to application data fetched from storage and assigned to state variables.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"2-use-event-listener-instead-of-static-method\" href=\"#2-use-event-listener-instead-of-static-method\"\u003E\n  \u003C\u002Fa\u003E\n  2. Use Event Listener instead of Static Method\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWe are on one component and we want to call one function of the previous component or any other component at that time we are using static methods in the class component. Instead of using Static Method I approach using React Native Event Listeners. You can add a listener in a component where you want to listen and emit an event from where you want to call a function. It’s very simple to integrate.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECheck out \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-event-listeners\"\u003Ereact-native-event-listeners\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install --save react-native-event-listeners\nor\nyarn add react-native-event-listeners\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport { EventRegister } from 'react-native-event-listeners'\n\n\u002F*\n * RECEIVER COMPONENT\n *\u002F\nclass Receiver extends PureComponent {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            data: '',\n        }\n    }\n\n    componentWillMount() {\n        this.listener = EventRegister.addEventListener('yourEventName', (data) =&gt; {\n            this.setState({\n                data,\n            })\n        })\n    }\n\n    componentWillUnmount() {\n        EventRegister.removeEventListener(this.listener)\n    }\n\n    render() {\n        return &lt;Text&gt;{this.state.data}&lt;\u002FText&gt;\n    }\n}\n\n\u002F*\n * SENDER COMPONENT\n *\u002F\nconst Sender = (props) =&gt; (\n    &lt;TouchableHighlight\n        onPress={() =&gt; {\n            EventRegister.emit(‘yourEventName’, ‘Task Completed!’)\n        })\n    &gt;&lt;Text&gt;Send Event&lt;\u002FText&gt;&lt;\u002FTouchableHighlight&gt;\n)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch4\u003E\n  \u003Ca name=\"3-remove-all-listener-in-unmount\" href=\"#3-remove-all-listener-in-unmount\"\u003E\n  \u003C\u002Fa\u003E\n  3. Remove All Listener In UnMount\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWe are adding listeners to listen events like KeyboardListeners, EventListeners, NavigationEventListeners, TabEventListeners etc. When you add listeners on componentWillMount it will create listeners for you, but if you forget to remove it on componentWillUnMount then next-time when you back to component again it will create another listener object which conflicts with memory leaks and unexpected listeners behaviour. So best is to remove listeners in componentWillUnMount to it will free out memory and provide you un-interrupted behaviour.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERelated Article - See how \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-clean-architecture\"\u003EReact Clean Architecture\u003C\u002Fa\u003E helps to write Clean, Structured, Modularized and Best Coding Practices for Rect Developers.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"4-config-for-environment-setup-test-live-staging\" href=\"#4-config-for-environment-setup-test-live-staging\"\u003E\n  \u003C\u002Fa\u003E\n  4. Config for Environment Setup || Test || Live || Staging\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWe are all using different environments like Test, Staging, Production\u002FLive environment. There are different API URLs, Constant Variables, Keys, etc depending on Environment. So It’s recommended to use react-native-config to setup your configuration for Test, Stage and Live environment. Please follow steps provided in \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-config\"\u003Ereact-native-config\u003C\u002Fa\u003E and manage your environment.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"5-use-context-for-themes-management-dark-live-theme\" href=\"#5-use-context-for-themes-management-dark-live-theme\"\u003E\n  \u003C\u002Fa\u003E\n  5. Use Context for Themes management Dark || Live Theme\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ENowadays we are used to Light &amp; Dark themes, developers also developing applications that support both Light &amp; Dark Themes. But being developers how we manage Styles, how to add\u002Fmanage listeners. It’s recommended to manage themes using React Context API, you can set up Context in App.js and add Themes Listener in App.js so whenever a user changes theme App.js get notified and themes will be changed and all the components will be notified. So you can provide instant themes that change the effect to your users.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"6-use-storybook-isolated-reusable-component-development\" href=\"#6-use-storybook-isolated-reusable-component-development\"\u003E\n  \u003C\u002Fa\u003E\n  6. Use Storybook - Isolated || Reusable Component Development\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAlmost every application has components like TextInput, Button, etc that are used at various components. Instead of doing separate code for each component it’s recommended to create a common component and use it in Components, advantage of doing this you can manage it from one place and it will reflect your changes in the whole application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat happens if I say show me the component you developed and change it’s property dynamically like color, etc, you need to import\u002Fimplement it in one component and run the application, correct? Is there any way I can see all Reusable Components in one place, I can play with it, change various props and validate it.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fstorybook-design-share-component\"\u003EStorybook\u003C\u002Fa\u003E will provide an interface where you see all your developed ReUsable components at one place. For that you simply create Story and improve your component into your Story. So the Storybook will render all the stories. It’s very simple to integrate. Please check out the Storybook article for more detail.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"7-minimize-use-of-thirdparty-library-instead-create-own-code-logic\" href=\"#7-minimize-use-of-thirdparty-library-instead-create-own-code-logic\"\u003E\n  \u003C\u002Fa\u003E\n  7. Minimize use of third-party library || Instead create own Code Logic\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWe are using too many third-party library, NPMs in our application for Small - Small tasks. Problem is whenever iOS, Android, React Native version upgrade we forget to upgrade our library, NPMs which break our application, Even we are not sure, Creator of Library, NPMs have updated with latest standard &amp; security which cause break in our application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EInstead of using Third-Party Library, NPMs for Small-Small cases, it’s recommended to create your own code solution and so you can manage it, update it easily.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"8-scale-and-resize-images-cache-images\" href=\"#8-scale-and-resize-images-cache-images\"\u003E\n  \u003C\u002Fa\u003E\n  8. Scale and Resize Images || Cache Images\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EImage optimization is very important in React Native App Performance. If you have an E-Commerce kind application or Application where there is maximum Image Rendering and images are not optimized then it will consume more user’s memory which causes application crashes.\u003Cbr\u003E\nIt’s recommend to do following -\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EUse PNG image instead of JPG\u003C\u002Fli\u003E\n\u003Cli\u003EUse small resolution images\u003C\u002Fli\u003E\n\u003Cli\u003EUse the latest WEBP format for Image - which helps to reduce binary size of iOS and Android.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ECache Images - \u003Cbr\u003E\nWhile having an ECommerce Or Heavy Image Showcase kind application it’s recommended to use Image Caching to show images faster without flickering. Prefer to use \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FDylanVann\u002Freact-native-fast-image\"\u003EReact Native Fast Image\u003C\u002Fa\u003E which works perfectly for both iOS &amp; Android.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"9-firebase-performance-monitoring\" href=\"#9-firebase-performance-monitoring\"\u003E\n  \u003C\u002Fa\u003E\n  9. Firebase Performance Monitoring\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Frnfirebase.io\u002Fperf\u002Fusage\"\u003EFirebase Performance Monitoring\u003C\u002Fa\u003E helps developers to identify where and when performance can be improved, so that you can fix those performance issues and give consistent experience to users. It allows you to track HTTP Request Performance Traces, also you can do custom tracing according to your business needs.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt’s simple in integration and you will get a dashboard with reports. That's simple.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERelated Article - \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fimprove-react-native-app-performance\"\u003EHow to improve the performance of a React Native App?\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"10-avoid-rerendering-using-usememo-usecallback\" href=\"#10-avoid-rerendering-using-usememo-usecallback\"\u003E\n  \u003C\u002Fa\u003E\n  10. Avoid re-rendering using useMemo, useCallBack\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAlmost all applications have FlatList along with other components like Button, TextInput. FlatList reload FlatListItem on first time render, also whenever any of the state variables changes FlatList will reload again with It’s FlatListItem. These are unwanted re-rendering, actually nothing changed on FlatList Item. To avoid these re-rendering use useMemo hooks that will first check any of the props changed then only it will reload FlatListItem.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERelated Article - Step By Step Integration Of \u003Ca href=\"https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-hooks\"\u003EReact Hooks\u003C\u002Fa\u003E  - useState, useEffect, useRef, useMemo, useCallback.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EThanks for reading Blog!\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EKPITENG | DIGITAL TRANSFORMATION\u003Cbr\u003E\n\u003Ca href=\"http:\u002F\u002Fwww.kpiteng.com\u002Fblogs\"\u003Ewww.kpiteng.com\u002Fblogs\u003C\u002Fa\u003E | \u003Ca href=\"mailto:hello@kpiteng.com\"\u003Ehello@kpiteng.com\u003C\u002Fa\u003E\u003Cbr\u003E\nConnect | Follow Us On - \u003Ca href=\"https:\u002F\u002Fwww.linkedin.com\u002Fcompany\u002Fkpiteng\u002F\"\u003ELinkedin\u003C\u002Fa\u003E | \u003Ca href=\"https:\u002F\u002Fwww.facebook.com\u002Fkpiteng\"\u003EFacebook\u003C\u002Fa\u003E | \u003Ca href=\"https:\u002F\u002Fwww.instagram.com\u002Fkpiteng\"\u003EInstagram\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"Discover a set of React best coding practices, tips and tricks that should be known by all [developers](https:\u002F\u002Fwww.kpiteng.com\u002Fservices\u002Fmobile-app-development\u002Freact-native-app-development).\n\n**Key Points -**\n* Use State Management Library (Redux, MobX, Apollo)\n* Use Event Listener instead of Static Method\n* Remove All Listener In UnMount\n* Config for Environment Setup || Test || Live || Staging\n* Use Context for Themes management Dark || Live Theme\n* Use Storybook - Isolated | | Reusable Component Development\n* Minimize use of third-party library || Instead create own Code Logic\n* Scale and Resize Images || Cache Images\n* Firebase Performance Monitoring\n* Avoid re-rendering using useMemo, useCallBack\n\n####1. Use State Management Library (Redux, MobX, Apollo)\nMany times we are using local variables, array, objects declarations that are specific to components but what happens the same would be used in other components then, Use State Management Library so you can access your variables, array, objects though the app, you can update and listen for change in any component.\n\nRedux, Redux Saga, Redux Rematch, [MobX State Tree](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fmobx-state-tree), [Apollo](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-native-apollo-graphql) are popular state management libraries which allow developers to access State Variables through the app and it will persist your data so next time the user comes back to application data fetched from storage and assigned to state variables.\n\n####2. Use Event Listener instead of Static Method\nWe are on one component and we want to call one function of the previous component or any other component at that time we are using static methods in the class component. Instead of using Static Method I approach using React Native Event Listeners. You can add a listener in a component where you want to listen and emit an event from where you want to call a function. It’s very simple to integrate.\n\nCheck out [react-native-event-listeners](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-event-listeners)\n\n```\nnpm install --save react-native-event-listeners\nor\nyarn add react-native-event-listeners\n```\n\n```\nimport { EventRegister } from 'react-native-event-listeners'\n \n\u002F*\n * RECEIVER COMPONENT\n *\u002F\nclass Receiver extends PureComponent {\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            data: '',\n        }\n    }\n    \n    componentWillMount() {\n        this.listener = EventRegister.addEventListener('yourEventName', (data) =\u003E {\n            this.setState({\n                data,\n            })\n        })\n    }\n    \n    componentWillUnmount() {\n        EventRegister.removeEventListener(this.listener)\n    }\n    \n    render() {\n        return \u003CText\u003E{this.state.data}\u003C\u002FText\u003E\n    }\n}\n \n\u002F*\n * SENDER COMPONENT\n *\u002F\nconst Sender = (props) =\u003E (\n    \u003CTouchableHighlight\n        onPress={() =\u003E {\n            EventRegister.emit(‘yourEventName’, ‘Task Completed!’)\n        })\n    \u003E\u003CText\u003ESend Event\u003C\u002FText\u003E\u003C\u002FTouchableHighlight\u003E\n)\n```\n\n####3. Remove All Listener In UnMount\nWe are adding listeners to listen events like KeyboardListeners, EventListeners, NavigationEventListeners, TabEventListeners etc. When you add listeners on componentWillMount it will create listeners for you, but if you forget to remove it on componentWillUnMount then next-time when you back to component again it will create another listener object which conflicts with memory leaks and unexpected listeners behaviour. So best is to remove listeners in componentWillUnMount to it will free out memory and provide you un-interrupted behaviour.\n\n\u003E Related Article - See how [React Clean Architecture](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-clean-architecture) helps to write Clean, Structured, Modularized and Best Coding Practices for Rect Developers.\n\n####4. Config for Environment Setup || Test || Live || Staging\nWe are all using different environments like Test, Staging, Production\u002FLive environment. There are different API URLs, Constant Variables, Keys, etc depending on Environment. So It’s recommended to use react-native-config to setup your configuration for Test, Stage and Live environment. Please follow steps provided in [react-native-config](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-config) and manage your environment.\n\n####5. Use Context for Themes management Dark || Live Theme\nNowadays we are used to Light & Dark themes, developers also developing applications that support both Light & Dark Themes. But being developers how we manage Styles, how to add\u002Fmanage listeners. It’s recommended to manage themes using React Context API, you can set up Context in App.js and add Themes Listener in App.js so whenever a user changes theme App.js get notified and themes will be changed and all the components will be notified. So you can provide instant themes that change the effect to your users.\n\n####6. Use Storybook - Isolated || Reusable Component Development\nAlmost every application has components like TextInput, Button, etc that are used at various components. Instead of doing separate code for each component it’s recommended to create a common component and use it in Components, advantage of doing this you can manage it from one place and it will reflect your changes in the whole application.\n\nWhat happens if I say show me the component you developed and change it’s property dynamically like color, etc, you need to import\u002Fimplement it in one component and run the application, correct? Is there any way I can see all Reusable Components in one place, I can play with it, change various props and validate it.\n\n[Storybook](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fstorybook-design-share-component) will provide an interface where you see all your developed ReUsable components at one place. For that you simply create Story and improve your component into your Story. So the Storybook will render all the stories. It’s very simple to integrate. Please check out the Storybook article for more detail.\n\n####7. Minimize use of third-party library || Instead create own Code Logic\nWe are using too many third-party library, NPMs in our application for Small - Small tasks. Problem is whenever iOS, Android, React Native version upgrade we forget to upgrade our library, NPMs which break our application, Even we are not sure, Creator of Library, NPMs have updated with latest standard & security which cause break in our application.\n\nInstead of using Third-Party Library, NPMs for Small-Small cases, it’s recommended to create your own code solution and so you can manage it, update it easily.\n\n\n####8. Scale and Resize Images || Cache Images\nImage optimization is very important in React Native App Performance. If you have an E-Commerce kind application or Application where there is maximum Image Rendering and images are not optimized then it will consume more user’s memory which causes application crashes.\nIt’s recommend to do following -\n* Use PNG image instead of JPG\n* Use small resolution images\n* Use the latest WEBP format for Image - which helps to reduce binary size of iOS and Android.\n\nCache Images - \nWhile having an ECommerce Or Heavy Image Showcase kind application it’s recommended to use Image Caching to show images faster without flickering. Prefer to use [React Native Fast Image](https:\u002F\u002Fgithub.com\u002FDylanVann\u002Freact-native-fast-image) which works perfectly for both iOS & Android.\n\n####9. Firebase Performance Monitoring\n[Firebase Performance Monitoring](https:\u002F\u002Frnfirebase.io\u002Fperf\u002Fusage) helps developers to identify where and when performance can be improved, so that you can fix those performance issues and give consistent experience to users. It allows you to track HTTP Request Performance Traces, also you can do custom tracing according to your business needs.\n\nIt’s simple in integration and you will get a dashboard with reports. That's simple.\n\u003E Related Article - [How to improve the performance of a React Native App?](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Fimprove-react-native-app-performance)\n\n####10. Avoid re-rendering using useMemo, useCallBack\nAlmost all applications have FlatList along with other components like Button, TextInput. FlatList reload FlatListItem on first time render, also whenever any of the state variables changes FlatList will reload again with It’s FlatListItem. These are unwanted re-rendering, actually nothing changed on FlatList Item. To avoid these re-rendering use useMemo hooks that will first check any of the props changed then only it will reload FlatListItem.\n\u003E Related Article - Step By Step Integration Of [React Hooks](https:\u002F\u002Fwww.kpiteng.com\u002Fblogs\u002Freact-hooks)  - useState, useEffect, useRef, useMemo, useCallback.\n\n**Thanks for reading Blog!**\n\nKPITENG | DIGITAL TRANSFORMATION\nwww.kpiteng.com\u002Fblogs | hello@kpiteng.com\nConnect | Follow Us On - [Linkedin](https:\u002F\u002Fwww.linkedin.com\u002Fcompany\u002Fkpiteng\u002F) | [Facebook](https:\u002F\u002Fwww.facebook.com\u002Fkpiteng) | [Instagram] (https:\u002F\u002Fwww.instagram.com\u002Fkpiteng)\n\n\n",user:{name:e,username:e,twitter_username:"kpitengineer",github_username:a,website_url:"https:\u002F\u002Fkpiteng.com",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kO068XOh--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F626376\u002Fe53cf965-83b1-4503-9b80-e95e5f7f770b.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XYbeeuKv--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F626376\u002Fe53cf965-83b1-4503-9b80-e95e5f7f770b.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fkpiteng\u002F747568",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fkpiteng\u002Ftop-10-react-tricks-every-developer-should-use-8nj",217,"2021-07-04T08:04:29Z","kpiteng"));
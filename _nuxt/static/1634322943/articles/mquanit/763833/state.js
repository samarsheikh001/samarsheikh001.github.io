window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:763833,title:"Software Engineering Principle — Coupling & Cohesion",description:"Hi engineers and peers, In this article, I’ll be discussing one of the core software engineering...",readable_publish_date:"Jul 19",slug:"software-engineering-principle-coupling-cohesion-1mma",path:"\u002Fmquanit\u002Fsoftware-engineering-principle-coupling-cohesion-1mma",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--T2RFL5kl--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe82tbuvycd1x4ovgbki9.jpeg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hx45EnDK--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fe82tbuvycd1x4ovgbki9.jpeg",canonical_url:c,created_at:b,edited_at:"2021-07-19T16:50:50Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:3,tag_list:"codequality, architecture, design, softwareengineering",tags:["codequality","architecture","design","softwareengineering"],body_html:"\u003Cp\u003EHi engineers and peers, In this article, I’ll be discussing one of the core software engineering principles, that every software engineer should know or at least be aware of it. As we engineers are supposed to grow in our careers, we have to upgrade our skills whether it’s practical or theoretical.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo from this article, I am starting to share some software engineering principles &amp; design patterns for writing better and clean code with best practices. This is the first one of this series, in which I’ll be discussing the importance of coupling &amp; cohesion in software. But before moving into the main topic, we should know what is \u003Cstrong\u003Emodularization\u003C\u002Fstrong\u003E so we can grasp the concept of coupling easily.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EModularization:\u003C\u002Fstrong\u003E is a process of breaking software into multiple small modules, where each module works independently. The main advantage of modularization is that it is easy to understand the software, it becomes reusable, and can be tested easily.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003E\u003Cb\u003EWhat is Coupling in Software engineering?\u003C\u002Fb\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ECoupling:\u003C\u002Fstrong\u003E in software engineering is the inter-dependency or degree of relationship between multiple modules\u002Fpackages\u002Fcomponents. Coupling is also called Inter-Module Binding.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMultiple modules\u002Fpackages\u002Fcomponents that are \u003Cstrong\u003Ehighly coupled\u003C\u002Fstrong\u003E are strongly dependent on each other.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMultiple modules\u002Fpackages\u002Fcomponents that are \u003Cstrong\u003Eloosely coupled\u003C\u002Fstrong\u003E are not or somehow dependent on each other.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGood software is always loosely coupled so it is considered as best practice to make your modules\u002Fpackages\u002Fcomponents loosely coupled or interdependent so that they can be tested and managed to maintain easily. The more number of calls between the modules increases the more it’ll prone to errors. For low coupled classes, changing something major in one class should not affect the other. High coupling would make it difficult to change and maintain your code\u003C\u002Fp\u003E\n\n\u003Cp\u003EBelow is the image for visualization of coupling\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FK14BvAQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F93r5hudaf5cbs9szffue.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FK14BvAQ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F93r5hudaf5cbs9szffue.png\" alt=\"Coupling cohesion visuals\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch5\u003E\n  \u003Ca name=\"types-of-coupling\" href=\"#types-of-coupling\"\u003E\n  \u003C\u002Fa\u003E\n  Types of Coupling\n\u003C\u002Fh5\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EData Coupling:\u003C\u002Fstrong\u003E When modules shared primitive data between them.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EStamp Coupling:\u003C\u002Fstrong\u003E When modules shared composite or structural data between them and It must be a non-global data structure. for example, Passing object or structure variable in react components.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EControl Coupling:\u003C\u002Fstrong\u003E When data from one module is used to direct the structure of instruction execution in another.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EExternal Coupling:\u003C\u002Fstrong\u003E When two modules shared externally imposed data type that is external to the software like communication protocols, device interfaces.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ECommon Coupling:\u003C\u002Fstrong\u003E When two modules shared the same global data &amp; dependent on them, like state management in JavaScript frameworks.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EContent Coupling:\u003C\u002Fstrong\u003E When two modules shared code and can modify the data of another module, which is the worst coupling and should be avoided.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003ESo now you get the idea of Coupling in software engineering, there is another concept that is used with coupling known as cohesion.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003E\u003Cb\u003EWhat is Cohesion in Software engineering?\u003C\u002Fb\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ECohesion refers to what module can do, internally. It is also called \u003Cstrong\u003EIntra-Module\u003C\u002Fstrong\u003E binding as it measures the strength of relationship of functionalities inside a module\u002Fpackage\u002Fcomponent. Cohesion should always be high means that a module\u002Fpackage\u002Fcomponent is focused on what it should be doing, i.e. only methods relating to the intention of the class.\u003C\u002Fp\u003E\n\n\u003Cp\u003EExample of low cohesion:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E-------------------\n|Add To Cart module|\n-------------------\n| login()              |\n| selectProduct()      |\n| getShippingDetails() |\n| PrintReceipt()       |\n------------------------\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EExample of high cohesion\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E---------------------------------\n| Add To Cart module      |\n---------------------------------\n| selectProduct()         |\n| getShippingDetails()    |\n| calculatePrice()  |     |\n---------------------------------\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the above example, you see that login function is not relatable to add to cart module, that is low cohesion which is considered as bad in software engineering.\u003C\u002Fp\u003E\n\n\u003Ch5\u003E\n  \u003Ca name=\"types-of-coupling\" href=\"#types-of-coupling\"\u003E\n  \u003C\u002Fa\u003E\n  Types of Coupling\n\u003C\u002Fh5\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EFunctional Cohesion:\u003C\u002Fstrong\u003E The execution of the task related to the problem is the only concern from all the elements inside the module.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ESequential Cohesion:\u003C\u002Fstrong\u003E The output of an element is the input of other element in a module i.e., data flow between the parts.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ECommunicational Cohesion:\u003C\u002Fstrong\u003E Multiple elements in a module operate on same input data and produce same output data.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EProcedural Cohesion:\u003C\u002Fstrong\u003E The activities in module are related by sequence, otherwise they are not related.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ECoincidental Cohesion:\u003C\u002Fstrong\u003E The activities with meaningless relationship with one another are contributed by the elements in the module.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003E\u003Cem\u003ESo always keep that in mind that :\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EGood Software has always low coupling with high cohesion\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n",body_markdown:"Hi engineers and peers, In this article, I’ll be discussing one of the core software engineering principles, that every software engineer should know or at least be aware of it. As we engineers are supposed to grow in our careers, we have to upgrade our skills whether it’s practical or theoretical.\n\nSo from this article, I am starting to share some software engineering principles & design patterns for writing better and clean code with best practices. This is the first one of this series, in which I’ll be discussing the importance of coupling & cohesion in software. But before moving into the main topic, we should know what is **modularization** so we can grasp the concept of coupling easily.\n\n**Modularization:** is a process of breaking software into multiple small modules, where each module works independently. The main advantage of modularization is that it is easy to understand the software, it becomes reusable, and can be tested easily.\n\n*\u003Cb\u003EWhat is Coupling in Software engineering?\u003C\u002Fb\u003E*\n\n**Coupling:** in software engineering is the inter-dependency or degree of relationship between multiple modules\u002Fpackages\u002Fcomponents. Coupling is also called Inter-Module Binding.\n\nMultiple modules\u002Fpackages\u002Fcomponents that are **highly coupled** are strongly dependent on each other.\n\nMultiple modules\u002Fpackages\u002Fcomponents that are **loosely coupled** are not or somehow dependent on each other.\n\nGood software is always loosely coupled so it is considered as best practice to make your modules\u002Fpackages\u002Fcomponents loosely coupled or interdependent so that they can be tested and managed to maintain easily. The more number of calls between the modules increases the more it’ll prone to errors. For low coupled classes, changing something major in one class should not affect the other. High coupling would make it difficult to change and maintain your code\n\nBelow is the image for visualization of coupling\n\n![Coupling cohesion visuals](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F93r5hudaf5cbs9szffue.png)\n\n##### Types of Coupling\n\n1. **Data Coupling:** When modules shared primitive data between them.\n\n2. **Stamp Coupling:** When modules shared composite or structural data between them and It must be a non-global data structure. for example, Passing object or structure variable in react components.\n\n3. **Control Coupling:** When data from one module is used to direct the structure of instruction execution in another.\n\n4. **External Coupling:** When two modules shared externally imposed data type that is external to the software like communication protocols, device interfaces.\n\n5. **Common Coupling:** When two modules shared the same global data & dependent on them, like state management in JavaScript frameworks.\n\n6. **Content Coupling:** When two modules shared code and can modify the data of another module, which is the worst coupling and should be avoided.\n\nSo now you get the idea of Coupling in software engineering, there is another concept that is used with coupling known as cohesion.\n\n*\u003Cb\u003EWhat is Cohesion in Software engineering?\u003C\u002Fb\u003E*\n\nCohesion refers to what module can do, internally. It is also called **Intra-Module** binding as it measures the strength of relationship of functionalities inside a module\u002Fpackage\u002Fcomponent. Cohesion should always be high means that a module\u002Fpackage\u002Fcomponent is focused on what it should be doing, i.e. only methods relating to the intention of the class.\n\nExample of low cohesion:\n\n```\n-------------------\n|Add To Cart module|\n-------------------\n| login()              |\n| selectProduct()      |\n| getShippingDetails() |\n| PrintReceipt()       |\n-------------------\n```\n\nExample of high cohesion\n\n```\n----------------------------\n| Add To Cart module      |\n----------------------------\n| selectProduct()         |\n| getShippingDetails()    |\n| calculatePrice()  |     |\n----------------------------\n```\n\nIn the above example, you see that login function is not relatable to add to cart module, that is low cohesion which is considered as bad in software engineering.\n\n##### Types of Coupling\n\n1. **Functional Cohesion:** The execution of the task related to the problem is the only concern from all the elements inside the module.\n\n2. **Sequential Cohesion:** The output of an element is the input of other element in a module i.e., data flow between the parts.\n    \n3. **Communicational Cohesion:** Multiple elements in a module operate on same input data and produce same output data.\n    \n4. **Procedural Cohesion:** The activities in module are related by sequence, otherwise they are not related.\n    \n5. **Coincidental Cohesion:** The activities with meaningless relationship with one another are contributed by the elements in the module.\n\n\n*So always keep that in mind that :*\n\n\u003E Good Software has always low coupling with high cohesion",user:{name:"Mohammad Quanit",username:"mquanit",twitter_username:"Muhd_Quanit",github_username:"Mohammad-Quanit",website_url:"https:\u002F\u002Fmohammad-quanit.github.io\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dClbns5F--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F198325\u002Ff98e2589-a1d0-4539-bb6b-55ae944aea52.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--YUM9XRSQ--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F198325\u002Ff98e2589-a1d0-4539-bb6b-55ae944aea52.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fmquanit\u002F763833",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-07-19T16:44:32Z","https:\u002F\u002Fdev.to\u002Fmquanit\u002Fsoftware-engineering-principle-coupling-cohesion-1mma",9));
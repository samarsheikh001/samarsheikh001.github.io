__NUXT_JSONP__("/articles/udaykiran137/526347", (function(a,b,c,d,e,f){c.type_of="article";c.id=526347;c.title="Stack";c.description="The stack may be a linear arrangement that follows a specific order during which the operations are p...";c.readable_publish_date="Dec 1 '20";c.slug="stack-g6k";c.path="\u002Fudaykiran137\u002Fstack-g6k";c.url=d;c.comments_count=0;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image=a;c.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F526347.png";c.canonical_url=d;c.created_at="2020-11-27T06:40:01Z";c.edited_at="2020-12-01T10:12:52Z";c.crossposted_at=a;c.published_at=b;c.last_comment_at=b;c.reading_time_minutes=4;c.tag_list="python, datastructure, stacks, queues";c.tags=["python","datastructure","stacks","queues"];c.body_html="\u003Cp\u003EThe \u003Cstrong\u003Estack\u003C\u002Fstrong\u003E may be a linear arrangement that follows a specific order during which the operations are performed. The order of stack could also be LIFO (Last in First Out) or FILO (First In Last Out).\u003Cbr\u003E\nA stack is generally an \u003Cstrong\u003EAbstract Data Type (ADT)\u003C\u002Fstrong\u003E. This ADT is generally used in most programming languages it's an easy arrangement that permits adding and removing elements during a particular order. whenever a component is added, it goes on the highest of the stack, and therefore the only element which will be removed is that the element that's at the highest of the stack, a bit like a pile of objects.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is named the stack because this behaves like a real-world stack application the stack ADT will allow all the data operations at one end only at any time, we can use the top element of a stack\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--qtGFjh1H--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fj1bcjg4ij4j81w6yt5hk.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--qtGFjh1H--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fj1bcjg4ij4j81w6yt5hk.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EGenerally, a stack is an abstract data type that is a set of elements, with two main principal operations:\u003Cbr\u003E\n1)  Push (a)\u003Cbr\u003E\n2)  Pop ()\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EPush\u003C\u002Fstrong\u003E: which adds a component to the gathering, and\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EPop\u003C\u002Fstrong\u003E: which removes the foremost recently added element that wasn't yet removed.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENot only push and pop but there are also other operations in a stack. They are :\u003Cbr\u003E\n1)  IsEmpty ()\u003Cbr\u003E\n2)  is full ()\u003Cbr\u003E\n3)  Peek ()\u003Cbr\u003E\n4)  Top ()\u003Cbr\u003E\n5)  Search ()\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--re3F04SE--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F1vwzbwoz20ayklqd7dwy.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--re3F04SE--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F1vwzbwoz20ayklqd7dwy.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow let us see the time complexity of all the operations in the stack:\u003Cbr\u003E\n1) push (a) – 0(1)\u003Cbr\u003E\n2) pop () – 0()1\u003Cbr\u003E\n3) IsEmpty () – 0(1)\u003Cbr\u003E\n4) ISFull () – 0(1)\u003Cbr\u003E\n5) peek () – 0(1)\u003Cbr\u003E\n6) top () – 0(1)\u003Cbr\u003E\n7) search () – 0(n)\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe can generally write stacks in any of the major programming languages but I'm now writing stacks in ”python”\u003Cbr\u003E\nOk, let's see how we can implement stacks in python. Generally in Python stack can be implemented in 3 ways. they're implementation method using List \u003Cbr\u003E\nPython’s built-in arrangement list is often used as a stack. Instead of push(), append() is employed to feature elements to the highest of the stack while pop() removes the element in LIFO order.\u003Cbr\u003E\nUnfortunately, the list has a few shortcomings. The biggest issue is that it can run into speed issues because it grows. The items in the list are stored next to every other in memory, if the stack grows bigger than the block of memory that currently hold it, then Python needs to do some memory allocations. This can cause some append() calls taking for much longer than other ones.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EFeatures of stacks\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\n\n\u003Cp\u003E•They are Dynamic data structures\u003Cbr\u003E\n•They Do not have a fixed size and also \u003Cbr\u003E\n•They Do not consume a fixed amount of memory\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BJcsK8mJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fdb72caupua77i5igg8gv.jpeg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--BJcsK8mJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fdb72caupua77i5igg8gv.jpeg\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EUses of Stacks\u003C\u002Fstrong\u003E:\u003C\u002Fp\u003E\n\n\u003Cp\u003EBasically, there are some particular uses of stacks in data structures. They are \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E1)Expression Handling\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E1.Infix to suffix or Infix to Prefix Conversion −\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe stack is accustomed convert some infix expression into its suffix equivalent, or prefix equivalent. These suffixes or prefix notations are employed in computers to specific some expressions. These expressions aren't most acquainted with the infix expression, however, they need some nice blessings additionally. we tend to don't got to maintain operator ordering and parenthesis.\u003C\u002Fp\u003E\n\n\u003Cp\u003E2.Postfix or Prefix analysis analysis\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter changing into a prefix or ending notations, we've got to gauge the expression to urge the result. For that purpose, conjointly we want the assistance of stack organization.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E2) Backtracking Procedure\u003C\u002Fstrong\u003E −\u003C\u002Fp\u003E\n\n\u003Cp\u003EBacktracking is one in every of the formula coming up with technique. For that purpose, we tend to dive away, if that method isn't economical, we tend to return to the previous state and go in another way. to induce back from the current state, we'd like to store the previous state. For that purpose, we'd like a stack. Some samples of backtracking are finding the answer for Knight Tour downside or N-Queen downside etc.\u003C\u002Fp\u003E\n\n\u003Cp\u003E3) Another nice use of stack is throughout the call and come back method. after we decided a operate from one alternative operate, that call statement might not be the primary statement. when career the operate, we tend to even have to come back from the operating space to the place, wherever we've left our management. thus we would like to resume our task, not restart. For that reason, we have a tendency to store the address of the program counter into the stack, then head to the operating body to execute it. when completion of the execution, it pops out the address from the stack and assign it to the program counter to resume the task once more.\u003C\u002Fp\u003E\n\n\u003Cp\u003E4) \u003Cstrong\u003ESyntax Parsing\u003C\u002Fstrong\u003E-\u003Cbr\u003E\n           Many compilers use a stack for parsing the syntax of expressions, program blocks, etc. before translating into low-level code.\u003C\u002Fp\u003E\n\n\u003Cp\u003E5) \u003Cstrong\u003EParenthesis Checking\u003C\u002Fstrong\u003E -\u003Cbr\u003E\n            The stack is used to check the proper opening and closing of the parenthesis.\u003C\u002Fp\u003E\n\n\u003Cp\u003E6) \u003Cstrong\u003EString Reversal\u003C\u002Fstrong\u003E\u003Cbr\u003E\n            The stack is used to reverse a string. We push the characters of the string one by one into the stack and then pop character from the stack.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENot only these but there are many uses of stacks like Function call, Memory Management, etc, etc \u003C\u002Fp\u003E\n\n\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\n\n# initial empty stack  \nmy_stack = []  \n# append() function to push   \n# element in the my_stack   \nmy_stack.append('k')  \nmy_stack.append('p')  \nmy_stack.append('s')  \nprint(my_stack)  \n#pop() function to pop   \n# element from my_stack in    \n# LIFO order   \nprint('\\nElements poped from my_stack:')  \nprint(my_stack.pop())  \nprint(my_stack.pop())  \nprint(my_stack.pop())     \nprint('\\nmy_stack after elements are poped:')  \nprint(my_stack)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M0 180V56c0-13.3 10.7-24 24-24h124c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12H64v84c0 6.6-5.4 12-12 12H12c-6.6 0-12-5.4-12-12zM288 44v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12V56c0-13.3-10.7-24-24-24H300c-6.6 0-12 5.4-12 12zm148 276h-40c-6.6 0-12 5.4-12 12v84h-84c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24V332c0-6.6-5.4-12-12-12zM160 468v-40c0-6.6-5.4-12-12-12H64v-84c0-6.6-5.4-12-12-12H12c-6.6 0-12 5.4-12 12v124c0 13.3 10.7 24 24 24h124c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" viewbox=\"0 0 448 512\" class=\"highlight-action highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath fill=\"#fff\" d=\"M436 192H312c-13.3 0-24-10.7-24-24V44c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v84h84c6.6 0 12 5.4 12 12v40c0 6.6-5.4 12-12 12zm-276-24V44c0-6.6-5.4-12-12-12h-40c-6.6 0-12 5.4-12 12v84H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h124c13.3 0 24-10.7 24-24zm0 300V344c0-13.3-10.7-24-24-24H12c-6.6 0-12 5.4-12 12v40c0 6.6 5.4 12 12 12h84v84c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12zm192 0v-84h84c6.6 0 12-5.4 12-12v-40c0-6.6-5.4-12-12-12H312c-13.3 0-24 10.7-24 24v124c0 6.6 5.4 12 12 12h40c6.6 0 12-5.4 12-12z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n";c.body_markdown="  The **stack** may be a linear arrangement that follows a specific order during which the operations are performed. The order of stack could also be LIFO (Last in First Out) or FILO (First In Last Out).\nA stack is generally an **Abstract Data Type (ADT)**. This ADT is generally used in most programming languages it's an easy arrangement that permits adding and removing elements during a particular order. whenever a component is added, it goes on the highest of the stack, and therefore the only element which will be removed is that the element that's at the highest of the stack, a bit like a pile of objects.\n\nThis is named the stack because this behaves like a real-world stack application the stack ADT will allow all the data operations at one end only at any time, we can use the top element of a stack\n\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fj1bcjg4ij4j81w6yt5hk.png)\n\nGenerally, a stack is an abstract data type that is a set of elements, with two main principal operations:\n1)\tPush (a)\n2)\tPop ()\n\n**Push**: which adds a component to the gathering, and\n\n**Pop**: which removes the foremost recently added element that wasn't yet removed.\n\nNot only push and pop but there are also other operations in a stack. They are :\n1)\tIsEmpty ()\n2)\tis full ()\n3)\tPeek ()\n4)\tTop ()\n5)\tSearch ()\n\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F1vwzbwoz20ayklqd7dwy.png)\n\n\n\nNow let us see the time complexity of all the operations in the stack:\n1) push (a) – 0(1)\n2) pop () – 0()1\n3) IsEmpty () – 0(1)\n4) ISFull () – 0(1)\n5) peek () – 0(1)\n6) top () – 0(1)\n7) search () – 0(n)\n\nWe can generally write stacks in any of the major programming languages but I'm now writing stacks in ”python”\nOk, let's see how we can implement stacks in python. Generally in Python stack can be implemented in 3 ways. they're implementation method using List \nPython’s built-in arrangement list is often used as a stack. Instead of push(), append() is employed to feature elements to the highest of the stack while pop() removes the element in LIFO order.\nUnfortunately, the list has a few shortcomings. The biggest issue is that it can run into speed issues because it grows. The items in the list are stored next to every other in memory, if the stack grows bigger than the block of memory that currently hold it, then Python needs to do some memory allocations. This can cause some append() calls taking for much longer than other ones.\n\n**Features of stacks**:\n\n•They are Dynamic data structures\n•They Do not have a fixed size and also \n•They Do not consume a fixed amount of memory\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fdb72caupua77i5igg8gv.jpeg)\n\n\n**Uses of Stacks**:\n\nBasically, there are some particular uses of stacks in data structures. They are \n\n**1)Expression Handling**\n    \n1.Infix to suffix or Infix to Prefix Conversion −\n\nThe stack is accustomed convert some infix expression into its suffix equivalent, or prefix equivalent. These suffixes or prefix notations are employed in computers to specific some expressions. These expressions aren't most acquainted with the infix expression, however, they need some nice blessings additionally. we tend to don't got to maintain operator ordering and parenthesis.\n     \n2.Postfix or Prefix analysis analysis\n\nAfter changing into a prefix or ending notations, we've got to gauge the expression to urge the result. For that purpose, conjointly we want the assistance of stack organization.\n\n**2) Backtracking Procedure** −\n\nBacktracking is one in every of the formula coming up with technique. For that purpose, we tend to dive away, if that method isn't economical, we tend to return to the previous state and go in another way. to induce back from the current state, we'd like to store the previous state. For that purpose, we'd like a stack. Some samples of backtracking are finding the answer for Knight Tour downside or N-Queen downside etc.\n\n\n3) Another nice use of stack is throughout the call and come back method. after we decided a operate from one alternative operate, that call statement might not be the primary statement. when career the operate, we tend to even have to come back from the operating space to the place, wherever we've left our management. thus we would like to resume our task, not restart. For that reason, we have a tendency to store the address of the program counter into the stack, then head to the operating body to execute it. when completion of the execution, it pops out the address from the stack and assign it to the program counter to resume the task once more.\n\n4) **Syntax Parsing**-\n           Many compilers use a stack for parsing the syntax of expressions, program blocks, etc. before translating into low-level code.\n\n5) **Parenthesis Checking** -\n            The stack is used to check the proper opening and closing of the parenthesis.\n\n6) **String Reversal**\n            The stack is used to reverse a string. We push the characters of the string one by one into the stack and then pop character from the stack.\n\nNot only these but there are many uses of stacks like Function call, Memory Management, etc, etc \n\n```\n# initial empty stack  \nmy_stack = []  \n# append() function to push   \n# element in the my_stack   \nmy_stack.append('k')  \nmy_stack.append('p')  \nmy_stack.append('s')  \nprint(my_stack)  \n#pop() function to pop   \n# element from my_stack in    \n# LIFO order   \nprint('\\nElements poped from my_stack:')  \nprint(my_stack.pop())  \nprint(my_stack.pop())  \nprint(my_stack.pop())\t  \nprint('\\nmy_stack after elements are poped:')  \nprint(my_stack)";c.user={name:f,username:"udaykiran137",twitter_username:a,github_username:f,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8k3uASgb--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F521657\u002F1329b3a7-fbc3-4e9d-939b-4e73c4ea1b4e.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--O_4qFvU8--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F521657\u002F1329b3a7-fbc3-4e9d-939b-4e73c4ea1b4e.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2020-12-01T10:12:26Z",{},"https:\u002F\u002Fdev.to\u002Fudaykiran137\u002Fstack-g6k",6,"UdayKiran137")));
__NUXT_JSONP__("/articles/jorgmassih/630329", (function(a,b,c,d,e,f){b.type_of="article";b.id=630329;b.title="Estructuras de Datos para Network Engineers 101: Las Linked Lists";b.description="Es recomendable tener manejo del lenguaje de programaci√≥n Python 3, tambi√©n conocimientos en Program...";b.readable_publish_date="Apr 19";b.slug="estructuras-de-datos-para-network-engineers-101-las-linked-list-50n9";b.path="\u002Fjorgmassih\u002Festructuras-de-datos-para-network-engineers-101-las-linked-list-50n9";b.url=c;b.comments_count=0;b.public_reactions_count=d;b.collection_id=11627;b.published_timestamp=a;b.positive_reactions_count=d;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NBIXoBU3--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Faaot2vtsxr6je6rvvxfc.jpg";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rpleF-lX--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Faaot2vtsxr6je6rvvxfc.jpg";b.canonical_url=c;b.created_at="2021-03-09T21:35:11Z";b.edited_at="2021-05-21T02:36:18Z";b.crossposted_at=e;b.published_at=a;b.last_comment_at=a;b.reading_time_minutes=9;b.tag_list="networking, linkedlist, datastructure, python";b.tags=["networking","linkedlist","datastructure","python"];b.body_html="\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003EEs recomendable tener manejo del lenguaje de programaci√≥n \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FPython\"\u003EPython 3\u003C\u002Fa\u003E, tambi√©n conocimientos en \u003Ca href=\"https:\u002F\u002Fj2logo.com\u002Fpython\u002Ftutorial\u002Fprogramacion-orientada-a-objetos\u002F\"\u003EProgramaci√≥n Orientada a Objetos (POO)\u003C\u002Fa\u003E. No es estrictamente necesario, pero si importante, tener por lo menos nociones del concepto \u003Ca href=\"https:\u002F\u002Frecursospython.com\u002Fguias-y-manuales\u002Fclases-metodos-magicos-y-propiedades\u002F\"\u003EMagic Methods (√≥ Dundder Methods)\u003C\u002Fa\u003E de Python.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"introducci%C3%B3n\" href=\"#introducci%C3%B3n\"\u003E\n  \u003C\u002Fa\u003E\n  Introducci√≥n\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EEs muy probable que cundo se hable de organizar datos de manera secuencial tu primera opci√≥n sea intentar utilizar un Array (conocido por algunos como Arreglo) o Lista, y bueno, no te culpo, tambi√©n era el m√≠o antes de conocer por completo el maravilloso mundo de las Estructuras de Datos. No est√° mal usar dichas estructuras, pero existen otras alternativas para situaciones espec√≠ficas que har√°n que tus implementaciones sean m√°s f√°ciles, seguras y eficientes.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"qu%C3%A9-es-una-linked-list\" href=\"#qu%C3%A9-es-una-linked-list\"\u003E\n  \u003C\u002Fa\u003E\n  ¬øQu√© es una Linked List?\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELinked List o Lista Enlazada (\u003Cem\u003Eaqu√≠ utilizaremos anglicismos\u003C\u002Fem\u003E üòú) es una estructura de datos lineal, compuesta por objetos llamados \u003Cstrong\u003ENodos\u003C\u002Fstrong\u003E, los cuales est√°n referenciados unos con otros y no necesariamente porque est√©n ubicados continuamente en bloques de memoria, como pasa tradicionalmente con los \u003Ca href=\"https:\u002F\u002Fwww.ecured.cu\u002FArreglos_(Inform%C3%A1tica)\"\u003EArrays\u003C\u002Fa\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAhora con cucharita üòÖ: toda la informaci√≥n vol√°til (\u003Cem\u003Eque no est√° almacenada para siempre, s√≥lo mientras corra nuestro c√≥digo\u003C\u002Fem\u003E) de nuestra aplicaci√≥n, as√≠ como las variables y objetos, se colocan en un espacio de nuestra \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FMemoria_vol%C3%A1til\"\u003Ememoria vol√°til\u003C\u002Fa\u003E (\u003Cem\u003Ecomo la RAM\u003C\u002Fem\u003E), en el caso de los arreglos, se colocan todos los integrantes uno al lado del otro en \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FAsignaci%C3%B3n_de_memoria\"\u003Ebloques de memoria\u003C\u002Fa\u003E continuos. Por ejemplo, supongamos que se tiene lo siguiente:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Efrutas = ['pizza', 'banana', 'naranja', 'pera', 'pi√±a', 'mel√≥n']\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003ELa üçï no es una fruta pero a veces le echan tanta pi√±a que parece una\u003C\u002Fem\u003E üò™.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ELa manera como se aloja en bloques de memoria continuos es la siguiente:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TSoJgJwU--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5xnz3j0q3p46o5bmmj1e.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TSoJgJwU--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5xnz3j0q3p46o5bmmj1e.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003E\u003Cstrong\u003ENota\u003C\u002Fstrong\u003E: en la imagen se asume que los caracteres est√°n codificados en \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FISO\u002FIEC_10646#Formas_de_codificar_el_Conjunto_Universal_de_Caracteres\"\u003EUCS-4\u003C\u002Fa\u003E, lo que implica que se ocupan 4 bytes por caracter.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EEn el caso de las Linked List, no es necesario, sino, que los integrantes (o Nodos) de dicha lista pueden estar en bloques de memoria bastante alejados o bastante cerca:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wv1iJBKN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0alfypwk1cpk4j4phko.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wv1iJBKN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0alfypwk1cpk4j4phko.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESi, ya s√©... Te est√°s preguntando que quiere decir eso, d√©jame ilustrarte:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_rBTXL4Z--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmstjz6nu4itwzctsf6nt.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_rBTXL4Z--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmstjz6nu4itwzctsf6nt.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHasta este punto tenemos una explicaci√≥n m√°s clara que concluye en que las Linked List son un grupo de Nodos que se referencian entre s√≠. Sin embargo, falta un detalle importante, bueno, dos detalles importantes üòÖ. Lo primero es que nuestro objeto de Linked List no almacena por si solo los Nodos, sino que esta guarda una referencia s√≥lo al primer Nodo, el cual se llama \u003Cem\u003EHead\u003C\u002Fem\u003E (o cabeza). El \u003Cem\u003EHead\u003C\u002Fem\u003E, a su vez guarda referencia al Nodo siguiente, y as√≠ mismo el Nodo siguiente al que le sigue, hasta llegar al √∫ltimo, el cual tiene que apuntar a una direcci√≥n de \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FNull\"\u003Ememoria vac√≠a o de valor nulo\u003C\u002Fa\u003E, esto es porque en una Linked List todos los Nodos deben de estar apuntando a \"algo\".\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CTc-WSh1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7cbz5izfm18sj5o8krtz.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--CTc-WSh1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7cbz5izfm18sj5o8krtz.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYa que sabemos m√°s o menos los fundamentos, te estar√°s preguntando sobre las ventajas de sobre las Listas o Arrays, bueno, realmente existen ciertas ventajas que murieron con la utilizaci√≥n de los \u003Ca href=\"https:\u002F\u002Fmoonantonio.github.io\u002Fpost\u002F2018\u002Fdev\u002F004\u002F\"\u003Elenguajes de alto nivel\u003C\u002Fa\u003E, ya que estos en su mayor√≠a son capaces de ajustar din√°micamente los tama√±os de los bloques de memoria, ya que tradicionalmente eran fijos, tambi√©n permiten tener objetos de diferentes tipos en una misma estructura. No obstante, la verdadera ventaja de esta estructura es el acceso secuencial de la data, lo cual facilita la implementaci√≥n de otras estructuras muy importantes que veremos m√°s adelante. Ya ver√°s :twink:.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPodemos hacer muchas operaciones como las Linked List, as√≠ como insertar elementos, buscar elementos, entre otras m√°s. Sin embargo, la m√°s importante es la de recorrer la Linked List, ya que todas las dem√°s se apoyan en esta, es decir, siempre hay que recorrer la Linked List. Si quieres saber sobre m√°s operaciones que se pueden hacer con las Linked List, te invito a \u003Ca href=\"https:\u002F\u002Fwww.tutorialspoint.com\u002Fdata_structures_algorithms\u002Flinked_list_algorithms.htm\"\u003Ever esto\u003C\u002Fa\u003E. Tambi√©n existen otras \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FLista_enlazada#Tipos_de_listas_enlazadas\"\u003Evariantes de Linked List\u003C\u002Fa\u003E, son f√°ciles de entender si se aplican los conceptos explicados anteriormente, sin embargo, no las estaremos utilizando a lo largo de esta serie y por eso no me detendr√© a explicarlas. Si tu aplicaci√≥n demanda dichas implantaciones, entonces adelante.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"haciendo-nuestra-propia-linkedlist\" href=\"#haciendo-nuestra-propia-linkedlist\"\u003E\n  \u003C\u002Fa\u003E\n  Haciendo nuestra propia LinkedList\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ECabe destacar que la Estructura de Datos \u003Ca href=\"https:\u002F\u002Fdevcode.la\u002Ftutoriales\u002Flistas-python\u002F\"\u003EList\u003C\u002Fa\u003E de Python, puede utilizarse como una Linked List, de hecho tiene m√©todos para tales fines, tambi√©n tenemos un m√≥dulo llamado \u003Ca href=\"https:\u002F\u002Fwww.digitalocean.com\u002Fcommunity\u002Ftutorials\u002Fhow-to-use-the-collections-module-in-python-3-es#usar-deque-para-a%C3%B1adir-elementos-de-forma-eficiente-a-cada-lado-de-una-colecci%C3%B3n\"\u003ECollections\u003C\u002Fa\u003E que contiene una Estructura llamada \u003Cem\u003EDeque\u003C\u002Fem\u003E, la cual funciona parecido. En nuestro caso, haremos la nuestra para fines de explicaci√≥n de la implementaci√≥n. En la vida real, estas estructuras ya construidas por el lenguaje que utilicemos nos ahorran tiempo y son m√°s eficientes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPrimero, empezamos creando los Nodos, estos ser√°n los objetos que almacenaremos en nuestra Linked List, \u003Cem\u003Eej.: Pizza, banana, pera, etc.\u003C\u002Fem\u003E. La estrategia es que el Nodo pueda hacer referencia al objeto que tendr√° como valor y al Nodo siguiente.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight python\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E__init__\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n    \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\n    \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EHasta aqui no creo que la cosa se complique üò¨. Tenemos un objeto Nodo que posee un valor y una referencia de quien le sigue. Por lo tanto, si yo creo un Nodo, le doy su valor y el del Nodo que le sigue, si no tienen ning√∫n otro, entonces apunta a \u003Ccode\u003ENone\u003C\u002Fcode\u003E, as√≠ voy creando mi Linked List.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOk, obvio que no es todo... ¬øC√≥mo puedo saber cual es el \u003Cem\u003EHead\u003C\u002Fem\u003E de mi lista?... No puedo poner dicho objeto Hardcoded en mi c√≥digo porque si cambia en alguna parte de este, tendr√© un tremendo l√≠o con la referencia. Por lo tanto, tenemos que crear un objeto Linked List que siempre guarde una referencia en el atributo Head (\u003Cem\u003Etal como lo hab√≠amos dicho antes\u003C\u002Fem\u003E) y tambi√©n efectu√© todas las operaciones necesarias sobre la lista, tales como recorrerla, voltearla, a√±adir otros Nodos, extraerlos, etc.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight python\"\u003E\u003Ccode\u003E\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003ELinkedList\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E__init__\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Referencia al nodo head\n\u003C\u002Fspan\u003E    \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Si se pas√≥ una lista como argumento, se crea una Linked List\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Enot\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E# Selecciona el primer elemento de la lista como la cabeza\n\u003C\u002Fspan\u003E      \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Ecurrent_node\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"n\"\u003Elist_len\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E# Itera sobre la lista, si el elemento en curso es el ultimo\n\u003C\u002Fspan\u003E      \u003Cspan class=\"c1\"\u003E# apunta su siguiente nodo a None\n\u003C\u002Fspan\u003E      \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Elist_len\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ecurrent_node\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ei\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Elist_len\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n          \u003Cspan class=\"n\"\u003Ecurrent_node\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\n\n        \u003Cspan class=\"k\"\u003Eelse\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n          \u003Cspan class=\"n\"\u003Ecurrent_node\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_node\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Magic method para recorrer la Linked List\n\u003C\u002Fspan\u003E  \u003Cspan class=\"c1\"\u003E# Este metodo se llama cuando se est√° recorriendo la Linked List\n\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E__iter__\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E# Retorna cada nodo en la iteraci√≥n correspondiente\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Enot\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Eyield\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Magic method que retorna la longitud de la lista\n\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E__len__\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Itera la Linked List mientras cuenta cada elemento\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Magic method que retorna el nodo, dado un indice a la entrada \n\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E__getitem__\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Retorna el valor del nodo si el item es un entero\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eidx\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Ecurrent\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E+=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Inserta un nodo al final de la Linked List\n\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E):\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E#Si no hay nodo, entonces lo inserta como Head\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eitem\u003C\u002Fspan\u003E\n      \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Busca el √∫ltimo nodo y lo apunta al nodo a insertar\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003Eself\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Eis\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Enode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eitem\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Eitem\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ENone\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EPodemos a√±adir m√°s m√©todos para hacer m√°s operaciones con nuestra Linked List, pero lo vamos a dejar hasta ah√≠ por el momento para no crearte un Stackoverflow üò´ üòµ en el üß†. La idea es que entiendas el concepto de esta estructura, las dem√°s operaciones las estaremos viendo conforme salgan los otros posts.\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"aplicando-lo-aprendido\" href=\"#aplicando-lo-aprendido\"\u003E\n  \u003C\u002Fa\u003E\n  Aplicando lo aprendido\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EPara poner en pr√°ctica lo explicado anteriormente, vamos a utilizar nuestro c√≥digo y haremos un reproductor de tracklists como el de Spotify (\u003Cem\u003Em√°s sencillo\u003C\u002Fem\u003E). En dado caso que no quieras utilizar lo que se cre√≥ m√°s arriba, puedes utilizar las estructuras nativas de Python que te mencion√© y tomarlo como ejercicio, esto si no sabes sobre POO, m√°s adelante har√© una serie al respecto.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPara esto, consumiremos un \u003Ca href=\"https:\u002F\u002Fwww.redhat.com\u002Fes\u002Ftopics\u002Fapi\u002Fwhat-are-application-programming-interfaces\"\u003EAPI\u003C\u002Fa\u003E de \u003Ca href=\"https:\u002F\u002Fwww.discogs.com\u002Fdevelopers\"\u003EDiscogs\u003C\u002Fa\u003E que nos proporcione los tracklist de acuerdo a releases de los artistas, elegiremos cual queremos reproducir y podremos cambiar de canci√≥n o \u003Cem\u003Etrack\u003C\u002Fem\u003E (\u003Cem\u003Eavanzar a la siguiente y\u002Fo volver a la anterior\u003C\u002Fem\u003E).\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Cem\u003E\u003Cstrong\u003ENota\u003C\u002Fstrong\u003E: esto no es un tutorial para consumir APIs, esta parte la puedes obviar, te puedes hacer de cuenta que es una funci√≥n que llamas y te da una lista de tracks. De todos modos, pondr√© el c√≥digo por si alguien se anima a querer entenderlo, no tiene mucha complejidad\u003C\u002Fem\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight python\"\u003E\u003Ccode\u003E\u003Cspan class=\"kn\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Etime\u003C\u002Fspan\u003E\n\u003Cspan class=\"kn\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Erequests\u003C\u002Fspan\u003E\n\u003Cspan class=\"kn\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Erandom\u003C\u002Fspan\u003E \u003Cspan class=\"kn\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Esample\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eget_tracklists\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eartist_id\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E57620\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ereleases_n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"mi\"\u003E5\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E# Url para obtener los releases \n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Eurl\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"https:\u002F\u002Fapi.discogs.com\u002Fartists\u002F{}\u002Freleases\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eartist_id\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003Eresponse\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erequests\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"GET\"\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,).\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ejson\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'releases'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003Ereleases\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erelease\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'id'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E],\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erelease\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'title'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erelease\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eresponse\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erelease\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'type'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'master'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Filtrando la data y obteniendo el campo de releases\n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Erandom_rels\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Esample\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ereleases\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ek\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ereleases_n\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \n\n  \u003Cspan class=\"c1\"\u003E# Url para obtener informaci√≥n acerca de los releases\n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Eurl\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"https:\u002F\u002Fapi.discogs.com\u002Fmasters\u002F{}\"\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003Etracklists_names\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[]\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# Separando los tracklist de cada reseale\n\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erel\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erandom_rels\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Etracklists\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erequests\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erequest\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'GET'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])).\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ejson\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'tracklist'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E# Tiempo de delay para que api.discogs.com no niegue los responses\n\u003C\u002Fspan\u003E    \u003Cspan class=\"c1\"\u003E# debido a la velocidad en un corto lapso de tiempo\n\u003C\u002Fspan\u003E    \u003Cspan class=\"n\"\u003Etime\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esleep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mf\"\u003E0.5\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"n\"\u003Etracklists_names\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eappend\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E({\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]:\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'title'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etracklists\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'type_'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'track'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]})\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etracklists_names\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EEn resumen, la funcion retorna una lista con varios diccionarios, en los cuales cada \u003Cem\u003Ekey\u003C\u002Fem\u003E es el nombre de un \u003Cem\u003Erelease\u003C\u002Fem\u003E en espec√≠fico de un artista en espec√≠fico (\u003Cem\u003Epara el ejemplo he cogido a \u003Ca href=\"https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FBuddy_Rich\"\u003EBuddy Rich\u003C\u002Fa\u003E\u003C\u002Fem\u003E), el value de cada uno ser√≠a una lista de las canciones o \u003Cem\u003Etracks\u003C\u002Fem\u003E pertenecientes a dicho \u003Cem\u003Erelease\u003C\u002Fem\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EPara crear nuestra app de nuestro reproductor, tendr√≠amos lo siguiente:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight python\"\u003E\u003Ccode\u003E\u003Cspan class=\"kn\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Eapis\u003C\u002Fspan\u003E \u003Cspan class=\"kn\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eget_tracklists\u003C\u002Fspan\u003E\n\u003Cspan class=\"kn\"\u003Efrom\u003C\u002Fspan\u003E \u003Cspan class=\"nn\"\u003Elinked_list\u003C\u002Fspan\u003E \u003Cspan class=\"kn\"\u003Eimport\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ELinkedList\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"k\"\u003Edef\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eapp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E():\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E# Obtiene la lista de los releases con sus repectivos tracklists\n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Ereleases\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eget_tracklists\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003Ecurrent_rel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'No release selected'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'No track selected'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E#Linked List para manejar los tracks\n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Etracklist\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ELinkedList\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"c1\"\u003E# String de las opciones del menu\n\u003C\u002Fspan\u003E  \u003Cspan class=\"n\"\u003Emain_menu\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"\"\"\n\nMain menu \n===================\n\n1. Select Release\n2. Next track\n3. Previous track\n4. Exit\nCurrent Release: {}\nCurrent Track: {}\n\nSelect an option: \"\"\"\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"bp\"\u003ETrue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E# Guarda la opcion seleccionada en el menu\n\u003C\u002Fspan\u003E    \u003Cspan class=\"n\"\u003Eselection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Emain_menu\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecurrent_rel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eselection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'1'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E# Construye el menu de releases\n\u003C\u002Fspan\u003E      \u003Cspan class=\"c1\"\u003E# Para fines de este tutorial, no se abundar√° esta parte\n\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Erel_menu\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Elambda\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erel_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E''\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ejoin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E([\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'{}- {} \u003C\u002Fspan\u003E\u003Cspan class=\"se\"\u003E\\n\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eindex\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E())[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E])\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eindex\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erel\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Ezip\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Erange\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elen\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E+\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erel_list\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)])\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Ereleases_menu\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E\"\"\"\n\nReleases Menu\n=====================\n\n{}\n\nSelect an option: \"\"\"\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"c1\"\u003E# Captura la selecci√≥n del release\n\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Erelease_selection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Einput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ereleases_menu\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eformat\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel_menu\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ereleases\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)))\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"c1\"\u003E# Guarda el release seleccionado en el menu\n\u003C\u002Fspan\u003E      \u003Cspan class=\"c1\"\u003E# El release contiene una lista con los tracklist\n\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Erel_dic\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ereleases\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erelease_selection\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Erel_name\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel_dic\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekeys\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E())[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Erel_tracks\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"nb\"\u003Elist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel_dic\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalues\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E())[\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E0\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E\n\n      \u003Cspan class=\"c1\"\u003E# Actualiza la Linked List a una con el tracklist seleccionado \n\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Etracklist\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ELinkedList\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003El\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Erel_tracks\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E# Asigna los valores para el release seleccionado,\n\u003C\u002Fspan\u003E      \u003Cspan class=\"c1\"\u003E# y el track en reproduccion como el head de la Linked List\n\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Ecurrent_rel\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Erel_name\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etracklist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehead\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Para cambiar al siguiente solo se asigna el nodo siguiente al track actual\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Eelif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eselection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'2'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Para volver atr√°s se recorre la lista hasta que el nodo siguiente\n\u003C\u002Fspan\u003E    \u003Cspan class=\"c1\"\u003E# del iterado sea el del track actual \n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Eelif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eselection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'3'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Efor\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E \u003Cspan class=\"ow\"\u003Ein\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etracklist\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003Enext\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n          \u003Cspan class=\"n\"\u003Ecurrent_track\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etrack\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"c1\"\u003E# Sale de la aplicaci√≥n\n\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Eelif\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eselection\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"s\"\u003E'4'\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\n      \u003Cspan class=\"k\"\u003Ebreak\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusi%C3%B3n\" href=\"#conclusi%C3%B3n\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusi√≥n\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELa Linked List es una estructura muy poderosa y una alternativa a otras que ya conocemos, sobre todo son √∫tiles en aplicaciones que utilizamos en el d√≠a a d√≠a, incluyendo los protocolos que se utilizan en nuestros equipos de redes, pero eso no es tema de este post, iremos adentr√°ndonos m√°s adelante.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETe dejo el c√≥digo en Repl.it del resultado final para que puedas correrlo tu mismo.\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag__replit\"\u003E\n  \u003Ciframe frameborder=\"0\" height=\"550px\" src=\"https:\u002F\u002Frepl.it\u002F@Jorgmassih\u002FLinked-List-tutorial?lite=true\" loading=\"lazy\"\u003E\u003C\u002Fiframe\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.buymeacoffee.com\u002Fjorgmassih\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HVoYlwzO--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fimg.buymeacoffee.com\u002Fbutton-api\u002F%3Ftext%3DBuy%2520me%2520a%2520coffee%2520here%26emoji%3D%25E2%258C%25A8%25EF%25B8%258F%26slug%3Djorgmassih%26button_colour%3D5F7FFF%26font_colour%3Dffffff%26font_family%3DLato%26outline_colour%3D000000%26coffee_colour%3DFFDD00\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n";b.body_markdown="\u003E _Es recomendable tener manejo del lenguaje de programaci√≥n [Python 3](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FPython), tambi√©n conocimientos en [Programaci√≥n Orientada a Objetos (POO)](https:\u002F\u002Fj2logo.com\u002Fpython\u002Ftutorial\u002Fprogramacion-orientada-a-objetos\u002F). No es estrictamente necesario, pero si importante, tener por lo menos nociones del concepto [Magic Methods (√≥ Dundder Methods)](https:\u002F\u002Frecursospython.com\u002Fguias-y-manuales\u002Fclases-metodos-magicos-y-propiedades\u002F) de Python._\n\n# Introducci√≥n\nEs muy probable que cundo se hable de organizar datos de manera secuencial tu primera opci√≥n sea intentar utilizar un Array (conocido por algunos como Arreglo) o Lista, y bueno, no te culpo, tambi√©n era el m√≠o antes de conocer por completo el maravilloso mundo de las Estructuras de Datos. No est√° mal usar dichas estructuras, pero existen otras alternativas para situaciones espec√≠ficas que har√°n que tus implementaciones sean m√°s f√°ciles, seguras y eficientes.\n\n## ¬øQu√© es una Linked List?\nLinked List o Lista Enlazada (_aqu√≠ utilizaremos anglicismos_ :stuck_out_tongue_winking_eye:) es una estructura de datos lineal, compuesta por objetos llamados **Nodos**, los cuales est√°n referenciados unos con otros y no necesariamente porque est√©n ubicados continuamente en bloques de memoria, como pasa tradicionalmente con los [Arrays](https:\u002F\u002Fwww.ecured.cu\u002FArreglos_(Inform%C3%A1tica)). \n\nAhora con cucharita :sweat_smile:: toda la informaci√≥n vol√°til (_que no est√° almacenada para siempre, s√≥lo mientras corra nuestro c√≥digo_) de nuestra aplicaci√≥n, as√≠ como las variables y objetos, se colocan en un espacio de nuestra [memoria vol√°til](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FMemoria_vol%C3%A1til) (_como la RAM_), en el caso de los arreglos, se colocan todos los integrantes uno al lado del otro en [bloques de memoria](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FAsignaci%C3%B3n_de_memoria) continuos. Por ejemplo, supongamos que se tiene lo siguiente:\n\n```\nfrutas = ['pizza', 'banana', 'naranja', 'pera', 'pi√±a', 'mel√≥n']\n``` \n\u003E _La :pizza: no es una fruta pero a veces le echan tanta pi√±a que parece una_ :sleepy:.\n\nLa manera como se aloja en bloques de memoria continuos es la siguiente:\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F5xnz3j0q3p46o5bmmj1e.png)\n\n\u003E _**Nota**: en la imagen se asume que los caracteres est√°n codificados en [UCS-4](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FISO\u002FIEC_10646#Formas_de_codificar_el_Conjunto_Universal_de_Caracteres), lo que implica que se ocupan 4 bytes por caracter._\n\nEn el caso de las Linked List, no es necesario, sino, que los integrantes (o Nodos) de dicha lista pueden estar en bloques de memoria bastante alejados o bastante cerca:\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fg0alfypwk1cpk4j4phko.png)\n\nSi, ya s√©... Te est√°s preguntando que quiere decir eso, d√©jame ilustrarte:\n\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fmstjz6nu4itwzctsf6nt.png)\n\nHasta este punto tenemos una explicaci√≥n m√°s clara que concluye en que las Linked List son un grupo de Nodos que se referencian entre s√≠. Sin embargo, falta un detalle importante, bueno, dos detalles importantes :sweat_smile:. Lo primero es que nuestro objeto de Linked List no almacena por si solo los Nodos, sino que esta guarda una referencia s√≥lo al primer Nodo, el cual se llama _Head_ (o cabeza). El _Head_, a su vez guarda referencia al Nodo siguiente, y as√≠ mismo el Nodo siguiente al que le sigue, hasta llegar al √∫ltimo, el cual tiene que apuntar a una direcci√≥n de [memoria vac√≠a o de valor nulo](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FNull), esto es porque en una Linked List todos los Nodos deben de estar apuntando a \"algo\".\n![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7cbz5izfm18sj5o8krtz.png)\n\nYa que sabemos m√°s o menos los fundamentos, te estar√°s preguntando sobre las ventajas de sobre las Listas o Arrays, bueno, realmente existen ciertas ventajas que murieron con la utilizaci√≥n de los [lenguajes de alto nivel](https:\u002F\u002Fmoonantonio.github.io\u002Fpost\u002F2018\u002Fdev\u002F004\u002F), ya que estos en su mayor√≠a son capaces de ajustar din√°micamente los tama√±os de los bloques de memoria, ya que tradicionalmente eran fijos, tambi√©n permiten tener objetos de diferentes tipos en una misma estructura. No obstante, la verdadera ventaja de esta estructura es el acceso secuencial de la data, lo cual facilita la implementaci√≥n de otras estructuras muy importantes que veremos m√°s adelante. Ya ver√°s :twink:.\n\nPodemos hacer muchas operaciones como las Linked List, as√≠ como insertar elementos, buscar elementos, entre otras m√°s. Sin embargo, la m√°s importante es la de recorrer la Linked List, ya que todas las dem√°s se apoyan en esta, es decir, siempre hay que recorrer la Linked List. Si quieres saber sobre m√°s operaciones que se pueden hacer con las Linked List, te invito a [ver esto](https:\u002F\u002Fwww.tutorialspoint.com\u002Fdata_structures_algorithms\u002Flinked_list_algorithms.htm). Tambi√©n existen otras [variantes de Linked List](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FLista_enlazada#Tipos_de_listas_enlazadas), son f√°ciles de entender si se aplican los conceptos explicados anteriormente, sin embargo, no las estaremos utilizando a lo largo de esta serie y por eso no me detendr√© a explicarlas. Si tu aplicaci√≥n demanda dichas implantaciones, entonces adelante.\n\n## Haciendo nuestra propia LinkedList\nCabe destacar que la Estructura de Datos [List](https:\u002F\u002Fdevcode.la\u002Ftutoriales\u002Flistas-python\u002F) de Python, puede utilizarse como una Linked List, de hecho tiene m√©todos para tales fines, tambi√©n tenemos un m√≥dulo llamado [Collections](https:\u002F\u002Fwww.digitalocean.com\u002Fcommunity\u002Ftutorials\u002Fhow-to-use-the-collections-module-in-python-3-es#usar-deque-para-a%C3%B1adir-elementos-de-forma-eficiente-a-cada-lado-de-una-colecci%C3%B3n) que contiene una Estructura llamada _Deque_, la cual funciona parecido. En nuestro caso, haremos la nuestra para fines de explicaci√≥n de la implementaci√≥n. En la vida real, estas estructuras ya construidas por el lenguaje que utilicemos nos ahorran tiempo y son m√°s eficientes.\n\nPrimero, empezamos creando los Nodos, estos ser√°n los objetos que almacenaremos en nuestra Linked List, _ej.: Pizza, banana, pera, etc._. La estrategia es que el Nodo pueda hacer referencia al objeto que tendr√° como valor y al Nodo siguiente.\n\n```python\nclass Node:\n \n  def __init__(self, value=None, next=None):\n    self.value = value\n    self.next = next\n```\n\nHasta aqui no creo que la cosa se complique :grimacing:. Tenemos un objeto Nodo que posee un valor y una referencia de quien le sigue. Por lo tanto, si yo creo un Nodo, le doy su valor y el del Nodo que le sigue, si no tienen ning√∫n otro, entonces apunta a `None`, as√≠ voy creando mi Linked List.\n\nOk, obvio que no es todo... ¬øC√≥mo puedo saber cual es el _Head_ de mi lista?... No puedo poner dicho objeto Hardcoded en mi c√≥digo porque si cambia en alguna parte de este, tendr√© un tremendo l√≠o con la referencia. Por lo tanto, tenemos que crear un objeto Linked List que siempre guarde una referencia en el atributo Head (_tal como lo hab√≠amos dicho antes_) y tambi√©n efectu√© todas las operaciones necesarias sobre la lista, tales como recorrerla, voltearla, a√±adir otros Nodos, extraerlos, etc.\n\n```python\nclass LinkedList:\n  def __init__(self, head=None, l=None):\n\n    # Referencia al nodo head\n    self.head = head\n\n    # Si se pas√≥ una lista como argumento, se crea una Linked List\n    if l is not None:\n      # Selecciona el primer elemento de la lista como la cabeza\n      self.head = Node(l[0])\n      current_node = self.head\n\n      list_len = len(l)\n      # Itera sobre la lista, si el elemento en curso es el ultimo\n      # apunta su siguiente nodo a None\n      for i in range(1, list_len):\n        current_node.next = Node(l[i])\n\n        if i == list_len:\n          current_node.next = None\n\n        else:\n          current_node = current_node.next\n\n  # Magic method para recorrer la Linked List\n  # Este metodo se llama cuando se est√° recorriendo la Linked List\n  def __iter__(self):\n    node = self.head\n    # Retorna cada nodo en la iteraci√≥n correspondiente\n    while node is not None:\n      yield node\n      node = node.next\n\n  # Magic method que retorna la longitud de la lista\n  def __len__(self):\n    count = 0\n\n    # Itera la Linked List mientras cuenta cada elemento\n    for node in self:\n      count += 1\n\n    return count\n\n  # Magic method que retorna el nodo, dado un indice a la entrada \n  def __getitem__(self, item):\n    current = self.head\n    count = 0\n\n    # Retorna el valor del nodo si el item es un entero\n    while count != idx:\n      current = current.next\n      count += 1\n    return current\n\n  # Inserta un nodo al final de la Linked List\n  def append(self, item: Node):\n    #Si no hay nodo, entonces lo inserta como Head\n    if self.head is None:\n      self.head = item\n      self.head.next = None\n      return None\n\n    # Busca el √∫ltimo nodo y lo apunta al nodo a insertar\n    for node in self:\n      if node.next is None:\n        node.next = item\n        item.next = None\n```\n\nPodemos a√±adir m√°s m√©todos para hacer m√°s operaciones con nuestra Linked List, pero lo vamos a dejar hasta ah√≠ por el momento para no crearte un Stackoverflow :tired_face: :dizzy_face: en el :brain:. La idea es que entiendas el concepto de esta estructura, las dem√°s operaciones las estaremos viendo conforme salgan los otros posts.\n\n## Aplicando lo aprendido\nPara poner en pr√°ctica lo explicado anteriormente, vamos a utilizar nuestro c√≥digo y haremos un reproductor de tracklists como el de Spotify (_m√°s sencillo_). En dado caso que no quieras utilizar lo que se cre√≥ m√°s arriba, puedes utilizar las estructuras nativas de Python que te mencion√© y tomarlo como ejercicio, esto si no sabes sobre POO, m√°s adelante har√© una serie al respecto.\n\nPara esto, consumiremos un [API](https:\u002F\u002Fwww.redhat.com\u002Fes\u002Ftopics\u002Fapi\u002Fwhat-are-application-programming-interfaces) de [Discogs](https:\u002F\u002Fwww.discogs.com\u002Fdevelopers) que nos proporcione los tracklist de acuerdo a releases de los artistas, elegiremos cual queremos reproducir y podremos cambiar de canci√≥n o _track_ (_avanzar a la siguiente y\u002Fo volver a la anterior_).\n\n\u003E _**Nota**: esto no es un tutorial para consumir APIs, esta parte la puedes obviar, te puedes hacer de cuenta que es una funci√≥n que llamas y te da una lista de tracks. De todos modos, pondr√© el c√≥digo por si alguien se anima a querer entenderlo, no tiene mucha complejidad_.\n\n```python\nimport time\nimport requests\nfrom random import sample\n\ndef get_tracklists(artist_id:int=57620, releases_n:int = 5) -\u003E list:\n  # Url para obtener los releases \n  url = \"https:\u002F\u002Fapi.discogs.com\u002Fartists\u002F{}\u002Freleases\".format(artist_id)\n  response = requests.request(\"GET\", url,).json()['releases']\n  releases = [(release['id'], release['title']) for release in response if release['type'] == 'master']\n\n  # Filtrando la data y obteniendo el campo de releases\n  random_rels = sample(releases, k=releases_n) \n  \n  # Url para obtener informaci√≥n acerca de los releases\n  url = \"https:\u002F\u002Fapi.discogs.com\u002Fmasters\u002F{}\"\n  tracklists_names = []\n\n  # Separando los tracklist de cada reseale\n  for rel in random_rels:\n    tracklists = requests.request('GET', url.format(rel[0])).json()['tracklist']\n    # Tiempo de delay para que api.discogs.com no niegue los responses\n    # debido a la velocidad en un corto lapso de tiempo\n    time.sleep(0.5)\n    \n    tracklists_names.append({rel[1]: [track['title'] for track in tracklists if track['type_'] == 'track']})\n    \n  return tracklists_names\n```\nEn resumen, la funcion retorna una lista con varios diccionarios, en los cuales cada _key_ es el nombre de un _release_ en espec√≠fico de un artista en espec√≠fico (_para el ejemplo he cogido a [Buddy Rich](https:\u002F\u002Fes.wikipedia.org\u002Fwiki\u002FBuddy_Rich)_), el value de cada uno ser√≠a una lista de las canciones o _tracks_ pertenecientes a dicho _release_.\n\nPara crear nuestra app de nuestro reproductor, tendr√≠amos lo siguiente:\n```python\nfrom apis import get_tracklists\nfrom linked_list import LinkedList, Node\n\ndef app():\n  # Obtiene la lista de los releases con sus repectivos tracklists\n  releases = get_tracklists()\n  current_rel, current_track = 'No release selected', Node('No track selected')\n\n  #Linked List para manejar los tracks\n  tracklist = LinkedList()\n  \n  # String de las opciones del menu\n  main_menu = \"\"\"\n\nMain menu \n===================\n\n1. Select Release\n2. Next track\n3. Previous track\n4. Exit\nCurrent Release: {}\nCurrent Track: {}\n\nSelect an option: \"\"\"\n\n  while True:\n    # Guarda la opcion seleccionada en el menu\n    selection = input(main_menu.format(current_rel, current_track.value))\n\n    if selection == '1':\n      # Construye el menu de releases\n      # Para fines de este tutorial, no se abundar√° esta parte\n      rel_menu = lambda rel_list: ''.join(['{}- {} \\n'.format(index, list(rel.keys())[0]) for index, rel in zip(range(1, len(rel_list)+1), rel_list)])\n      releases_menu = \"\"\"\n\nReleases Menu\n=====================\n\n{}\n\nSelect an option: \"\"\"\n\n      # Captura la selecci√≥n del release\n      release_selection = input(releases_menu.format(rel_menu(releases)))\n\n      # Guarda el release seleccionado en el menu\n      # El release contiene una lista con los tracklist\n      rel_dic = releases[int(release_selection)-1]\n      rel_name = list(rel_dic.keys())[0]\n      rel_tracks = list(rel_dic.values())[0]\n\n      # Actualiza la Linked List a una con el tracklist seleccionado \n      tracklist = LinkedList(l=rel_tracks)\n      # Asigna los valores para el release seleccionado,\n      # y el track en reproduccion como el head de la Linked List\n      current_rel, current_track = rel_name, tracklist.head\n\n    # Para cambiar al siguiente solo se asigna el nodo siguiente al track actual\n    elif selection == '2':\n      if current_track.next:\n        current_track = current_track.next\n\n    # Para volver atr√°s se recorre la lista hasta que el nodo siguiente\n    # del iterado sea el del track actual \n    elif selection == '3':\n      for track in tracklist:\n        if track.next == current_track:\n          current_track = track\n\n    # Sale de la aplicaci√≥n\n    elif selection == '4':\n      break\n```\n\n## Conclusi√≥n\nLa Linked List es una estructura muy poderosa y una alternativa a otras que ya conocemos, sobre todo son √∫tiles en aplicaciones que utilizamos en el d√≠a a d√≠a, incluyendo los protocolos que se utilizan en nuestros equipos de redes, pero eso no es tema de este post, iremos adentr√°ndonos m√°s adelante.\n\nTe dejo el c√≥digo en Repl.it del resultado final para que puedas correrlo tu mismo.\n\n{% replit @Jorgmassih\u002FLinked-List-tutorial %}\n\n\u003Ca href=\"https:\u002F\u002Fwww.buymeacoffee.com\u002Fjorgmassih\"\u003E\u003Cimg src=\"https:\u002F\u002Fimg.buymeacoffee.com\u002Fbutton-api\u002F?text=Buy me a coffee here&emoji=‚å®Ô∏è&slug=jorgmassih&button_colour=5F7FFF&font_colour=ffffff&font_family=Lato&outline_colour=000000&coffee_colour=FFDD00\"\u003E\u003C\u002Fa\u003E";b.user={name:"Jorge Abraham Massih Vargas",username:"jorgmassih",twitter_username:f,github_username:f,website_url:e,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--j4kMFxQT--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F592592\u002Fbc57d3a8-be34-4668-829b-90ac3ad1db76.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--nDXsJXau--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F592592\u002Fbc57d3a8-be34-4668-829b-90ac3ad1db76.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}("2021-04-19T13:20:19Z",{},"https:\u002F\u002Fdev.to\u002Fjorgmassih\u002Festructuras-de-datos-para-network-engineers-101-las-linked-list-50n9",7,null,"Jorgmassih")));
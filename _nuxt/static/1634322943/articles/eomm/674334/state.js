window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:674334,title:"Why should I prefer Fastify to Expressjs?",description:"\"Why should I prefer Fastify to Expressjs?\"   A lot of people ask me this question over and...",readable_publish_date:"Apr 21",slug:"why-should-i-prefer-fastify-to-expressjs-44c4",path:"\u002Feomm\u002Fwhy-should-i-prefer-fastify-to-expressjs-44c4",url:c,comments_count:5,public_reactions_count:d,collection_id:9867,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4luGD-ZD--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7qgsu6q04xj39jz7hrr1.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--3naiYsJ7--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7qgsu6q04xj39jz7hrr1.jpg",canonical_url:c,created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:"2021-10-11T14:48:02Z",reading_time_minutes:3,tag_list:"nodejs, fastify, express, backend",tags:["nodejs","fastify","express","backend"],body_html:"\u003Ch1\u003E\n  \u003Ca name=\"why-should-i-prefer-fastify-to-expressjs\" href=\"#why-should-i-prefer-fastify-to-expressjs\"\u003E\n  \u003C\u002Fa\u003E\n  \"Why should I prefer Fastify to Expressjs?\"\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EA lot of people ask me this question over and over again, so I would like to share why \u003Cstrong\u003EI\u003C\u002Fstrong\u003E prefer\u003Cbr\u003E\nFastify to Expressjs because the correct answer to this question is just one:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EYou should prefer the framework that fit best your needs\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EDisclaimers:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EI'm a happy Fastify maintainer, so that I could be a bit biased\u003C\u002Fli\u003E\n\u003Cli\u003EI think expressjs is a great project and a pillar for the Node.js community, and the core team is doing a great job to push forward this framework\u003C\u002Fli\u003E\n\u003Cli\u003EOpinions expressed are solely my own and do not express the views or opinions of the Fastify community\u003C\u002Fli\u003E\n\u003Cli\u003EMy knowledge is about \u003Ccode\u003Eexpressjs@4.x\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ESo...\u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"why-i-prefer-fastify-to-express\" href=\"#why-i-prefer-fastify-to-express\"\u003E\n  \u003C\u002Fa\u003E\n  Why I prefer Fastify to Express\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EI prefer Fastify to Express for the \u003Cstrong\u003Eproductivity\u003C\u002Fstrong\u003E.\u003Cbr\u003E\nThat's all ðŸ˜€\u003C\u002Fp\u003E\n\n\u003Cp\u003EIt seems simple, but this word means that Fastify ships with some key features necessary for me to be productive.\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"async\" href=\"#async\"\u003E\n  \u003C\u002Fa\u003E\n  Async\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFastify supports \u003Ccode\u003Easync\u002Fawait\u003C\u002Fcode\u003E out of the box for all the components that must be awaited like:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eroute handlers\u003C\u002Fli\u003E\n\u003Cli\u003Eapplication hooks\u003C\u002Fli\u003E\n\u003Cli\u003Eserver methods like \u003Ccode\u003E.listen()\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003Eawait plugins loading (like a mongo connection) before start listening\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F#asyncawait\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"json-input\" href=\"#json-input\"\u003E\n  \u003C\u002Fa\u003E\n  JSON Input\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EBy default, Fastify has a secure JSON body-parser to read the request body. You don't need anything else to accept \u003Ccode\u003Eapplication\u002Fjson\u003C\u002Fcode\u003E inputs.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FServer\u002F#getdefaultjsonparser\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"tests\" href=\"#tests\"\u003E\n  \u003C\u002Fa\u003E\n  Tests\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFastify explains in its \u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FTesting\u002F\"\u003Eofficial documentation\u003C\u002Fa\u003E how to write the test for it!\u003Cbr\u003E\nMoreover, it is designed to run fast on test too, this is possible starting the server without listening to the host's PORT, so you may run in parallel tests to speed up the execution (again: using \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ftap\"\u003E\u003Ccode\u003Etap\u003C\u002Fcode\u003E\u003C\u002Fa\u003E the parallel execution is the default behaviour!)\u003C\u002Fp\u003E\n\n\u003Cp\u003EActual use case: during my job, I migrated a codebase from \u003Ccode\u003Eexpressjs@3\u003C\u002Fcode\u003E to \u003Ccode\u003Efastify@2\u003C\u002Fcode\u003E, and the test execution time has more than halved!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FTesting\u002F\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"logging\" href=\"#logging\"\u003E\n  \u003C\u002Fa\u003E\n  Logging\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFastify has a logger included, so I don't have to think about how to log or store the logger instance and boring stuff like this.\u003Cbr\u003E\nMoreover, the default logger (aka \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fpino\"\u003E\u003Ccode\u003Epino\u003C\u002Fcode\u003E\u003C\u002Fa\u003E) has so many plugins, so push the logs everywhere that it is impossible to lose them!\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FLogging\u002F\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"configuration\" href=\"#configuration\"\u003E\n  \u003C\u002Fa\u003E\n  Configuration\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe application configuration is always a pain (usually), but with Fastify decorators or using its plugin system, getting the options is so simple:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002F index.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"kd\"\u003Econst\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmyAppConfig\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eawesome\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Efastify\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eregister\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EmyAppPlugin\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmyAppConfig\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"c1\"\u003E\u002F\u002F my-plugin.js\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003Emodule\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eexports\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EmyAppPlugin\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Einstance\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Eopts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Econsole\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eopts\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F print: { awesome: true }\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"json-schema\" href=\"#json-schema\"\u003E\n  \u003C\u002Fa\u003E\n  JSON Schema\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EJSON Schema is another tool included in Fastify, so you don't need to struggle to configure it. You can use it.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FValidation-and-Serialization\u002F\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"plugin-system\" href=\"#plugin-system\"\u003E\n  \u003C\u002Fa\u003E\n  Plugin system\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ETLDR:\u003C\u002Fstrong\u003E Fastify runs the minimal amount of functions to process a request.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI need to make a comparison of the framework architecture here.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Eexpressjs\u003C\u002Fcode\u003E implements the middleware pattern: so the request is processed sequentially by a list of functions that are executed one by one.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003Efastify\u003C\u002Fcode\u003E implements a tree data structure + the middleware pattern: the request is routed to the right branch to execute, and then it is processed sequentially by only the functions needed.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, adding a middleware in expressjs will affect all the requests, even if not necessary.\u003Cbr\u003E\nIn Fastify, instead, you can add a hook only to a limited set of routes or even on one route.\u003Cbr\u003E\nThis kind of architecture will avoid introducing bugs on routes that should not be affected by new middlewares.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F\"\u003EDoc Reference\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"others\" href=\"#others\"\u003E\n  \u003C\u002Fa\u003E\n  Others\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThere are a lot more for me to prefer Fastify:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EFastify awesome community\u003C\u002Fli\u003E\n\u003Cli\u003Ethe focus on performance\u003C\u002Fli\u003E\n\u003Cli\u003Ethe release scheduling\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"end\" href=\"#end\"\u003E\n  \u003C\u002Fa\u003E\n  End\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThese are the main reasons why I prefer Fastify.\u003Cbr\u003E\nYou should try it by yourself now and find your reasons! (if any, of course!)\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor more Fastify content, follow me on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002FManuEomm\"\u003ETwitter\u003C\u002Fa\u003E!\u003C\u002Fp\u003E\n\n\u003Cp\u003EWrite comments here below or open an issue on GitHub for any questions or feedback!\u003Cbr\u003E\nThank you for reading!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"acknowledgements\" href=\"#acknowledgements\"\u003E\n  \u003C\u002Fa\u003E\n  Acknowledgements\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EImage post credits to \u003Ca href=\"https:\u002F\u002Fpxhere.com\u002Fen\u002Fphoto\u002F1640023?utm_content=shareClip&amp;utm_medium=referral&amp;utm_source=pxhere\"\u003Emohamed hassan\u003C\u002Fa\u003E (Creative Commons CC0)\u003C\u002Fp\u003E\n\n",body_markdown:"---\ntitle: Why should I prefer Fastify to Expressjs?\nseries: Fastify Bonus\n---\n\n# \"Why should I prefer Fastify to Expressjs?\"\n\nA lot of people ask me this question over and over again, so I would like to share why **I** prefer\nFastify to Expressjs because the correct answer to this question is just one:\n\n__You should prefer the framework that fit best your needs__\n\nDisclaimers:\n\n- I'm a happy Fastify maintainer, so that I could be a bit biased\n- I think expressjs is a great project and a pillar for the Node.js community, and the core team is doing a great job to push forward this framework\n- Opinions expressed are solely my own and do not express the views or opinions of the Fastify community\n- My knowledge is about `expressjs@4.x`\n\nSo...\n\n## Why I prefer Fastify to Express\n\nI prefer Fastify to Express for the **productivity**.\nThat's all ðŸ˜€\n\nIt seems simple, but this word means that Fastify ships with some key features necessary for me to be productive.\n\n### Async\n\nFastify supports `async\u002Fawait` out of the box for all the components that must be awaited like:\n\n- route handlers\n- application hooks\n- server methods like `.listen()`\n- await plugins loading (like a mongo connection) before start listening\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F#asyncawait)\n\n### JSON Input\n\nBy default, Fastify has a secure JSON body-parser to read the request body. You don't need anything else to accept `application\u002Fjson` inputs.\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FServer\u002F#getdefaultjsonparser)\n\n### Tests\n\nFastify explains in its [official documentation](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FTesting\u002F) how to write the test for it!\nMoreover, it is designed to run fast on test too, this is possible starting the server without listening to the host's PORT, so you may run in parallel tests to speed up the execution (again: using [`tap`](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ftap) the parallel execution is the default behaviour!)\n\nActual use case: during my job, I migrated a codebase from `expressjs@3` to `fastify@2`, and the test execution time has more than halved!\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FTesting\u002F)\n\n### Logging\n\nFastify has a logger included, so I don't have to think about how to log or store the logger instance and boring stuff like this.\nMoreover, the default logger (aka [`pino`](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Fpino)) has so many plugins, so push the logs everywhere that it is impossible to lose them!\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FLogging\u002F)\n\n### Configuration\n\nThe application configuration is always a pain (usually), but with Fastify decorators or using its plugin system, getting the options is so simple:\n\n```js\n\u002F\u002F index.js\nconst myAppConfig = { awesome: true }\nfastify.register(myAppPlugin, myAppConfig)\n\n\u002F\u002F my-plugin.js\nmodule.exports = async function myAppPlugin (instance, opts) {\n  console.log(opts) \u002F\u002F print: { awesome: true }\n}\n```\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F)\n\n### JSON Schema\n\nJSON Schema is another tool included in Fastify, so you don't need to struggle to configure it. You can use it.\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FValidation-and-Serialization\u002F)\n\n### Plugin system\n\n**TLDR:** Fastify runs the minimal amount of functions to process a request.\n\n\nI need to make a comparison of the framework architecture here.\n\n`expressjs` implements the middleware pattern: so the request is processed sequentially by a list of functions that are executed one by one.\n\n`fastify` implements a tree data structure + the middleware pattern: the request is routed to the right branch to execute, and then it is processed sequentially by only the functions needed.\n\nSo, adding a middleware in expressjs will affect all the requests, even if not necessary.\nIn Fastify, instead, you can add a hook only to a limited set of routes or even on one route.\nThis kind of architecture will avoid introducing bugs on routes that should not be affected by new middlewares.\n\n[Doc Reference](https:\u002F\u002Fwww.fastify.io\u002Fdocs\u002Flatest\u002FPlugins\u002F)\n\n### Others\n\nThere are a lot more for me to prefer Fastify:\n\n- Fastify awesome community\n- the focus on performance\n- the release scheduling\n\n## End\n\nThese are the main reasons why I prefer Fastify.\nYou should try it by yourself now and find your reasons! (if any, of course!)\n\nFor more Fastify content, follow me on [Twitter](https:\u002F\u002Ftwitter.com\u002FManuEomm)!\n\nWrite comments here below or open an issue on GitHub for any questions or feedback!\nThank you for reading!\n\n## Acknowledgements\n\nImage post credits to [mohamed hassan](https:\u002F\u002Fpxhere.com\u002Fen\u002Fphoto\u002F1640023?utm_content=shareClip&utm_medium=referral&utm_source=pxhere) (Creative Commons CC0)\n",user:{name:"Manuel Spigolon",username:"eomm",twitter_username:"ManuEomm",github_username:"Eomm",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--EOgW2C73--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F367881\u002Fcb0705e8-b3aa-495b-bab9-86756ac478f0.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6Bv-ryp---\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F367881\u002Fcb0705e8-b3aa-495b-bab9-86756ac478f0.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Feomm\u002F674334",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-04-21T20:51:04Z","https:\u002F\u002Fdev.to\u002Feomm\u002Fwhy-should-i-prefer-fastify-to-expressjs-44c4",15));
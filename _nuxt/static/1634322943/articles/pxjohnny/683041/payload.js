__NUXT_JSONP__("/articles/pxjohnny/683041", (function(a,b,c,d,e){a.type_of="article";a.id=683041;a.title="Late Night Confessions‚Ää‚Äî‚ÄäBuilding a Website Using Rust, Rocket, Diesel, and Askama‚Ää‚Äî‚ÄäPart 3";a.description="Cover Photo by Agnis Leznins on Unsplash   With a working API layer under our belt, it's...";a.readable_publish_date="Apr 30";a.slug="late-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-3-46i9";a.path="\u002Fpxjohnny\u002Flate-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-3-46i9";a.url="https:\u002F\u002Fdev.to\u002Fpxjohnny\u002Flate-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-3-46i9";a.comments_count=1;a.public_reactions_count=b;a.collection_id=12275;a.published_timestamp=c;a.positive_reactions_count=b;a.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--9NzxIfu0--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1%2AyQfRUKZpkaDbefbhcFthiA.jpeg";a.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--aWNPP3Lq--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1%2AyQfRUKZpkaDbefbhcFthiA.jpeg";a.canonical_url="https:\u002F\u002Fmedium.com\u002Fperimeterx\u002Flate-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-3-3f9b7d511bde";a.created_at="2021-04-29T23:22:50Z";a.edited_at=d;a.crossposted_at=c;a.published_at="2021-04-29T18:52:30Z";a.last_comment_at="2021-07-06T06:40:45Z";a.reading_time_minutes=5;a.tag_list="softwareengineering, tutorial, rust";a.tags=["softwareengineering","tutorial","rust"];a.body_html="\u003Ch4\u003E\n  \u003Ca name=\"cover-photo-by-agnis-leznins-on-unsplash\" href=\"#cover-photo-by-agnis-leznins-on-unsplash\"\u003E\n  \u003C\u002Fa\u003E\n  Cover Photo by \u003Ca href=\"https:\u002F\u002Funsplash.com\u002F@agnis_leznins?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\"\u003EAgnis Leznins\u003C\u002Fa\u003E on \u003Ca href=\"https:\u002F\u002Funsplash.com\u002Fs\u002Fphotos\u002Fnight-city-streets-rain?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\"\u003EUnsplash\u003C\u002Fa\u003E\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EWith a working API layer under our belt, it's time to put in the final piece of the puzzle: the presentation layer. This layer consists of static resources (HTML, CSS, JavaScript) and API calls to display and add confessions.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E‚úèÔ∏è As this tutorial is not frontend focused, I wanted to keep things simple and use vanilla JavaScript, HTML and CSS. I will also not go into too much detail with why or how these are implemented, as we are not really here for frontend stuff, are we? üòé\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWorking With Templates\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen we serve \u003Cstrong\u003Eindex.html\u003C\u002Fstrong\u003E back to the user, we want it to have a confession already so the user won‚Äôt load the page and then wait for the first API call to return the confession. That basically means that our application needs to parse the \u003Cstrong\u003Eindex.html\u003C\u002Fstrong\u003E static file, find the right place to inject a confession, and then inject the content in the correct place after fetching a random confession from the database. Now that might work if you have one item to inject, but what if you have two or ten?\u003C\u002Fp\u003E\n\n\u003Cp\u003EThat's where templates come into play. Templates allow us to have a static HTML that contains placeholders (aka variables) that the templating engine will replace with the content of our choice. In addition, templates allow us to use tags to control the template logic (if statements, for example). However, we will not be dealing with those in this tutorial.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor Late Night Confessions, I chose Askama as the templating engine because of its easy integration and simple syntax. Let‚Äôs create a template for our \u003Cstrong\u003Eindex.html\u003C\u002Fstrong\u003E file (trust me, it's easier than you think):\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EIn the project root folder, create a new folder called \u003Cstrong\u003Etemplates\u003C\u002Fstrong\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003EInside the templates folder, create a new file called \u003Cstrong\u003Eindex.html\u003C\u002Fstrong\u003E with the following content:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F9606ae62889856d39cea1c4c28626852.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EThe vast majority of this file is plain old HTML syntax, take a glance at lines 32 and 47‚Äî These are Askama variables:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Econfession (line 32)‚Ää‚Äî‚ÄäThis variable will be replaced by an actual confession from the database.\u003C\u002Fli\u003E\n\u003Cli\u003Etotal_confessions (line 47)‚Ää‚Äî‚ÄäThis variable will be replaced by the total number of confessions in our database.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAnd that's basically that for making our HTML an Askama template. Let‚Äôs quickly add the \u003Cstrong\u003Estyles.css\u003C\u002Fstrong\u003E and \u003Cstrong\u003Econfessions.js\u003C\u002Fstrong\u003E files to the \u003Cstrong\u003Esite\u002Fstatic\u003C\u002Fstrong\u003E folder and get back to Rust to integrate Askama:\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fce6e28ff6f917be709b8105869b2fb7c.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F5c316a6fbc21e1f35b1e3cfcdbe9adaa.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EA few points of interest in our JavaScript:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EThe refreshCard function makes a call to our GET API to get a new random confession and update the UI.\u003C\u002Fli\u003E\n\u003Cli\u003EThe event listener for click validates the text area (so it is not empty, somewhat naive, I know, but ü§∑‚Äç‚ôÇÔ∏è), and then if all is well, makes a call to our POST API with the new confession. If everything checks out (line 43), we alert the user everything is fine and update the footer note with the updated saved confessions number.\u003C\u002Fli\u003E\n\u003Cli\u003EWe listen to the animationend event to update the displayed confession once the timer runs off (lines 53‚Äì55).\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EWorking With Askama\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EBack in our Rust project, let‚Äôs add Askama to the \u003Cstrong\u003ECargo.toml\u003C\u002Fstrong\u003E file:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F7f39ec59bcbc7973d4a91c4ce11928a2.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Col\u003E\n\u003Cli\u003EAs mentioned earlier, Askama works with templates, so the first thing we need to do is tell Askama where our template is and which variables it's going to have:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F715261e890ea1ce13da6f02a211920a2.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003Eüî¨ So what do we have here?\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELine 3\u003C\u002Fstrong\u003E : We derive the Template trait, which is the main trait Askama uses. It includes template related methods such as render.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELine 4\u003C\u002Fstrong\u003E : We use the template attribute to specify the path to our template. The path is relative to the templates folder in the project root folder. Other than path you can also specify a source (directly set the template, without a template file) or enable debug using the print sub-attribute. Read more about the different uses of the template attribute on the \u003Ca href=\"https:\u002F\u002Fdocs.rs\u002Faskama\u002F0.10.5\u002Faskama\u002F#the-template-attribute\"\u003Eofficial docs\u003C\u002Fa\u003E.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELines 5‚Äì8\u003C\u002Fstrong\u003E : We define the fields the struct will hold, which are identical to the variables we defined in the template itself.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Col\u003E\n\u003Cli\u003EWe now have two functions that need to get a random confession from the database: get_confession (the handler for the GET API) and root (the handler that renders \u003Cstrong\u003Eindex.html\u003C\u002Fstrong\u003E ). To avoid code duplication, let‚Äôs extract get_confession‚Äôs confession fetching logic to a new function, get_random_confession:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F62aa564f28191c7649abca4343a1cdc1.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003ENotice that our new function takes a conn variable of type &amp;PgConnection as argument and return a Result of either a Confession (if successful) or diesel‚Äôs error type (if there was a database-related error).\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EWith the get_random_confession function in place, let‚Äôs update the get_confession handler to use the new function as its closure:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fa96461f6002b8849ae0037c7247968cc.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Col\u003E\n\u003Cli\u003ELastly, let‚Äôs update the root handler to render the template using Askama and set it as the response:\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\n\u003Cdiv class=\"ltag_gist-liquid-tag\"\u003E\n  \u003Cscript id=\"gist-ltag\" src=\"https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fcffd297327e9cbfe9d5f47e2140bcc61.js\"\u003E\u003C\u002Fscript\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003Eüî¨ So what do we have here?\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELine 2\u003C\u002Fstrong\u003E : We changed the return type to Html for success and our CustomError in case of an error.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELine 3\u003C\u002Fstrong\u003E : We get a random confession from the database using the new get_random_confession function, just like we are doing for the API call to \u003Cstrong\u003E\u002Fapi\u002Fconfession.\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELines 4‚Äì6\u003C\u002Fstrong\u003E : We query Postgres for the number of confessions we have saved on it.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELines 8‚Äì11\u003C\u002Fstrong\u003E : We initiate the HomepageTemplate struct (a.k.a our template definition) with the data from Postgres.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELines 13‚Äì14\u003C\u002Fstrong\u003E : This is where the magic happens. Askama turns our template into an HTML string (line 13), which we return as the handler response (line 14).\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAnd that's basically it! Go ahead and run cargo run and browse to localhost:8000. You should get something similar to the following:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cfigure\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kbnOV6nL--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1%2AqXZnbKZ9Q4V3XFD7lcmShA.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kbnOV6nL--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1%2AqXZnbKZ9Q4V3XFD7lcmShA.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigcaption\u003EA deep and heartwarming confession indeed‚Ä¶\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"summary\" href=\"#summary\"\u003E\n  \u003C\u002Fa\u003E\n  Summary\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOur site creation journey has come to its end, but take a look back at everything you achieved! You now have a web app that is able to handle static files and API requests, uses a Postgres instance for persisting data and takes advantage of templates for quicker and easier HTML manipulation.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI would love to read your comments on this mini-post series over on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002FFullStackJ\"\u003ETwitter\u003C\u002Fa\u003E, and please join me on my next Rust post series: ‚ÄúLet‚Äôs Build a Fitness Tracking Webapp With Rust and Yew‚Äù.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"credit-where-credits-due\" href=\"#credit-where-credits-due\"\u003E\n  \u003C\u002Fa\u003E\n  Credit Where Credit‚Äôs Due\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EThank you, \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUCnyWSONkScKMxut5g8iGi0A\"\u003ECarla Notarobot\u003C\u002Fa\u003E, for the \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=0t6Dmp70kTw\"\u003Estarry night CSS animation background\u003C\u002Fa\u003E!\u003C\u002Fli\u003E\n\u003Cli\u003EThank you, \u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Ftraf\"\u003ETraf\u003C\u002Fa\u003E, for the \u003Ca href=\"https:\u002F\u002Fcodepen.io\u002Ftraf\u002Fpen\u002FoKbaqQ\"\u003Eprogress bar CSS animation\u003C\u002Fa\u003E!\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003Chr\u003E\n\n";a.body_markdown="---\ntitle: Late Night Confessions‚Ää‚Äî‚ÄäBuilding a Website Using Rust, Rocket, Diesel, and Askama‚Ää‚Äî‚ÄäPart 3\npublished: true\ndate: 2021-04-29 18:52:30 UTC\ntags: softwareengineering,tutorial,rust,rustlang\ncanonical_url: https:\u002F\u002Fmedium.com\u002Fperimeterx\u002Flate-night-confessions-building-a-website-using-rust-rocket-diesel-and-askama-part-3-3f9b7d511bde\ncover_image: https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1*yQfRUKZpkaDbefbhcFthiA.jpeg\nseries: Late Night Confessions‚Ää‚Äî‚ÄäBuilding a Website Using Rust, Rocket, Diesel, and Askama\n---\n\n#### Cover Photo by [Agnis Leznins](https:\u002F\u002Funsplash.com\u002F@agnis_leznins?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText) on [Unsplash](https:\u002F\u002Funsplash.com\u002Fs\u002Fphotos\u002Fnight-city-streets-rain?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText)\n\nWith a working API layer under our belt, it's time to put in the final piece of the puzzle: the presentation layer. This layer consists of static resources (HTML, CSS, JavaScript) and API calls to display and add confessions.\n\n\u003E ‚úèÔ∏è As this tutorial is not frontend focused, I wanted to keep things simple and use vanilla JavaScript, HTML and CSS. I will also not go into too much detail with why or how these are implemented, as we are not really here for frontend stuff, are we? üòé\n\n**Working With Templates**\n\nWhen we serve **index.html** back to the user, we want it to have a confession already so the user won‚Äôt load the page and then wait for the first API call to return the confession. That basically means that our application needs to parse the **index.html** static file, find the right place to inject a confession, and then inject the content in the correct place after fetching a random confession from the database. Now that might work if you have one item to inject, but what if you have two or ten?\n\nThat's where templates come into play. Templates allow us to have a static HTML that contains placeholders (aka variables) that the templating engine will replace with the content of our choice. In addition, templates allow us to use tags to control the template logic (if statements, for example). However, we will not be dealing with those in this tutorial.\n\nFor Late Night Confessions, I chose Askama as the templating engine because of its easy integration and simple syntax. Let‚Äôs create a template for our **index.html** file (trust me, it's easier than you think):\n\n1. In the project root folder, create a new folder called **templates**.\n2. Inside the templates folder, create a new file called **index.html** with the following content:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F9606ae62889856d39cea1c4c28626852 %}\n\nThe vast majority of this file is plain old HTML syntax, take a glance at lines 32 and 47‚Äî These are Askama variables:\n\n- confession (line 32)‚Ää‚Äî‚ÄäThis variable will be replaced by an actual confession from the database.\n- total\\_confessions (line 47)‚Ää‚Äî‚ÄäThis variable will be replaced by the total number of confessions in our database.\n\nAnd that's basically that for making our HTML an Askama template. Let‚Äôs quickly add the **styles.css** and **confessions.js** files to the **site\u002Fstatic** folder and get back to Rust to integrate Askama:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fce6e28ff6f917be709b8105869b2fb7c %}\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F5c316a6fbc21e1f35b1e3cfcdbe9adaa %}\n\nA few points of interest in our JavaScript:\n\n- The refreshCard function makes a call to our GET API to get a new random confession and update the UI.\n- The event listener for click validates the text area (so it is not empty, somewhat naive, I know, but ü§∑‚Äç‚ôÇÔ∏è), and then if all is well, makes a call to our POST API with the new confession. If everything checks out (line 43), we alert the user everything is fine and update the footer note with the updated saved confessions number.\n- We listen to the animationend event to update the displayed confession once the timer runs off (lines 53‚Äì55).\n\n**Working With Askama**\n\n1. Back in our Rust project, let‚Äôs add Askama to the **Cargo.toml** file:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F7f39ec59bcbc7973d4a91c4ce11928a2 %}\n\n2. As mentioned earlier, Askama works with templates, so the first thing we need to do is tell Askama where our template is and which variables it's going to have:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F715261e890ea1ce13da6f02a211920a2 %}\n\nüî¨ So what do we have here?\n\n- **Line 3** : We derive the Template trait, which is the main trait Askama uses. It includes template related methods such as render.\n- **Line 4** : We use the template attribute to specify the path to our template. The path is relative to the templates folder in the project root folder. Other than path you can also specify a source (directly set the template, without a template file) or enable debug using the print sub-attribute. Read more about the different uses of the template attribute on the [official docs](https:\u002F\u002Fdocs.rs\u002Faskama\u002F0.10.5\u002Faskama\u002F#the-template-attribute).\n- **Lines 5‚Äì8** : We define the fields the struct will hold, which are identical to the variables we defined in the template itself.\n\n3. We now have two functions that need to get a random confession from the database: get\\_confession (the handler for the GET API) and root (the handler that renders **index.html** ). To avoid code duplication, let‚Äôs extract get\\_confession‚Äôs confession fetching logic to a new function, get\\_random\\_confession:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002F62aa564f28191c7649abca4343a1cdc1 %}\n\nNotice that our new function takes a conn variable of type &PgConnection as argument and return a Result of either a Confession (if successful) or diesel‚Äôs error type (if there was a database-related error).\n\n4. With the get\\_random\\_confession function in place, let‚Äôs update the get\\_confession handler to use the new function as its closure:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fa96461f6002b8849ae0037c7247968cc %}\n\n5. Lastly, let‚Äôs update the root handler to render the template using Askama and set it as the response:\n\n{% gist https:\u002F\u002Fgist.github.com\u002Fpxjohnny\u002Fcffd297327e9cbfe9d5f47e2140bcc61 %}\n\nüî¨ So what do we have here?\n\n- **Line 2** : We changed the return type to Html\u003CString\u003E for success and our CustomError in case of an error.\n- **Line 3** : We get a random confession from the database using the new get\\_random\\_confession function, just like we are doing for the API call to **\u002Fapi\u002Fconfession.**\n- **Lines 4‚Äì6** : We query Postgres for the number of confessions we have saved on it.\n- **Lines 8‚Äì11** : We initiate the HomepageTemplate struct (a.k.a our template definition) with the data from Postgres.\n- **Lines 13‚Äì14** : This is where the magic happens. Askama turns our template into an HTML string (line 13), which we return as the handler response (line 14).\n\nAnd that's basically it! Go ahead and run cargo run and browse to localhost:8000. You should get something similar to the following:\n\n![](https:\u002F\u002Fcdn-images-1.medium.com\u002Fmax\u002F1024\u002F1*qXZnbKZ9Q4V3XFD7lcmShA.png)\u003Cfigcaption\u003EA deep and heartwarming confession indeed‚Ä¶\u003C\u002Ffigcaption\u003E\n\n### Summary\n\nOur site creation journey has come to its end, but take a look back at everything you achieved! You now have a web app that is able to handle static files and API requests, uses a Postgres instance for persisting data and takes advantage of templates for quicker and easier HTML manipulation.\n\nI would love to read your comments on this mini-post series over on [Twitter](https:\u002F\u002Ftwitter.com\u002FFullStackJ), and please join me on my next Rust post series: ‚ÄúLet‚Äôs Build a Fitness Tracking Webapp With Rust and Yew‚Äù.\n\n### Credit Where Credit‚Äôs Due\n\n- Thank you, [Carla Notarobot](https:\u002F\u002Fwww.youtube.com\u002Fchannel\u002FUCnyWSONkScKMxut5g8iGi0A), for the [starry night CSS animation background](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=0t6Dmp70kTw)!\n- Thank you, [Traf](https:\u002F\u002Fcodepen.io\u002Ftraf), for the [progress bar CSS animation](https:\u002F\u002Fcodepen.io\u002Ftraf\u002Fpen\u002FoKbaqQ)!\n\n* * *";a.user={name:"Johnny Tordgeman",username:e,twitter_username:"FullStackJ",github_username:e,website_url:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RBMUJv3i--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F224740\u002Feb309b79-356e-4c57-95e6-b9481926d586.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZB7M7xDH--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F224740\u002Feb309b79-356e-4c57-95e6-b9481926d586.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:a}},mutations:[["SET_CURRENT_ARTICLE",a]]}}({},8,"2021-04-30T11:56:21Z",null,"pxjohnny")));
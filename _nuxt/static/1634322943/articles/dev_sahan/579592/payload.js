__NUXT_JSONP__("/articles/dev_sahan/579592", (function(a,b,c,d,e,f){b.type_of="article";b.id=579592;b.title="Complete Guide to AWS Amplify and React Native";b.description="Let‚Äôs Build an E-commerce App with ReactNative and Amplify    Click here to see the video wa...";b.readable_publish_date="Jan 22";b.slug="complete-guide-to-aws-amplify-and-react-native-4on5";b.path="\u002Fdev_sahan\u002Fcomplete-guide-to-aws-amplify-and-react-native-4on5";b.url=c;b.comments_count=1;b.public_reactions_count=d;b.collection_id=a;b.published_timestamp=e;b.positive_reactions_count=d;b.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VSH-Ek0n--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fzqsr6i3jqxcz1pro396w.png";b.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--no19GvXE--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fzqsr6i3jqxcz1pro396w.png";b.canonical_url=c;b.created_at="2021-01-22T17:08:01Z";b.edited_at=a;b.crossposted_at=a;b.published_at=e;b.last_comment_at="2021-10-09T09:23:24Z";b.reading_time_minutes=15;b.tag_list="amplify, reactnative, aws, javascript";b.tags=["amplify","reactnative","aws","javascript"];b.body_html="\u003Ch4\u003E\n  \u003Ca name=\"lets-build-an-ecommerce-app-with-reactnative-and-amplify\" href=\"#lets-build-an-ecommerce-app-with-reactnative-and-amplify\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Let‚Äôs Build an E-commerce App with ReactNative and Amplify\n\u003C\u002Fh4\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EClick \u003Ca href=\"https:\u002F\u002Fyoutu.be\u002FNqYQ0Muwf3c\"\u003Ehere\u003C\u002Fa\u003E to see the video walkthrough.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"table-of-content\" href=\"#table-of-content\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Table of Content\n\u003C\u002Fh1\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003EIntroduction\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003ESetting Up the Project\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAdding Cognito Authentication\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAdding AppSync API\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAdding S3 Storage\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003ERetrieving AppSync Data\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EConclusion\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"01-introduction\" href=\"#01-introduction\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  01. Introduction\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EHello! &amp; Welcome to this complete guide on AWS Amplify and React Native. In this tutorial, we will build a simple e-commerce app. Users can log in\u002Fsignup to this app. Users can add their own products, and all the users can view those products added by different users. \u003C\u002Fp\u003E\n\n\u003Cp\u003EHere is a quick demo,\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KQ_s98x5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fw7qjm1ix8bqr6rp863pb.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KQ_s98x5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fw7qjm1ix8bqr6rp863pb.jpg\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EDifferent Screens in Mobile App\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EEven though this is not a very complex application, this will be a perfect starter project for you. We will use different AWS Services like S3 Storage, AWS AppSync API, and Amazon Cognito Authentication. Don‚Äôt worry I will explain these in detail, later.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"architecture-diagram\" href=\"#architecture-diagram\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Architecture Diagram\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe following diagram demonstrates our AWS Architecture Diagram.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ACT7nOMI--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyz3l2dv9wki6uahjakv2.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ACT7nOMI--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyz3l2dv9wki6uahjakv2.jpg\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EAWS Architecture Diagram for Mobile App\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EAWS Amplify makes it much easier to work with these different services. As always, our backend resources will be created and managed by Amplify. Let me explain what these services will do.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, Amplify is the heart of our backend environment. Those arrows pointing from Amplify means that we will use Amplify to connect those different resources. Every product will have an image. We will store that image in an \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fs3\u002F\"\u003ES3\u003C\u002Fa\u003E Bucket. Product details will be saved in Amazon \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fdynamodb\u002F\"\u003EDynamoDB\u003C\u002Fa\u003E, a NoSQL database provided by AWS. To talk with that Database, we will use a GraphQL API provided by AWS \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fappsync\u002F\"\u003EAppSync\u003C\u002Fa\u003E. Amazon Cognito will handle authentication.\u003C\u002Fp\u003E\n\n\u003Cp\u003EReady to build the app? Let‚Äôs get started. üë∑üèΩ‚Äç‚ôÇÔ∏èüß∞\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"prerequisites\" href=\"#prerequisites\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Prerequisites\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo avoid any disturbances in the future, make sure you have the following prerequisites installed.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload\u002F\"\u003ENode.js\u003C\u002Fa\u003E v10.x or later\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv6\u002Fcommands\u002Fnpm-install\"\u003Enpm\u003C\u002Fa\u003E v5.x or later\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall\"\u003EAmplify CLI\u003C\u002Fa\u003E (version @4.40.1, what I‚Äôm using in the tutorial)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdeveloper.android.com\u002Fstudio\"\u003EAndroid Studio\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EReactNatice CLI (version 2.0.1)\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"02-setting-up-the-project\" href=\"#02-setting-up-the-project\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  02. Setting Up the Project\n\u003C\u002Fh1\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"installing-and-configuring-amplify-cli\" href=\"#installing-and-configuring-amplify-cli\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Installing and Configuring Amplify CLI\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThrough this tutorial, we will work with AWS Amplify CLI. You can install it by running,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install -g @aws-amplify\u002Fcli@4.39.0\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen you need to run \u003Ccode\u003Eamplify configure\u003C\u002Fcode\u003E. This will set up your Amplify CLI. There you will set up a new IAM User. You will finish setting up your IAM User, by providing the \u003Ccode\u003EaccessKeyId\u003C\u002Fcode\u003E and \u003Ccode\u003EsecretAccessKey\u003C\u002Fcode\u003E for your IAM user.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you are stuck at some point, you can refer to this original guideline on installing Amplify CLI, \u003Ca href=\"https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall\"\u003Ehttps:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"creating-a-new-reactnative-application\" href=\"#creating-a-new-reactnative-application\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Creating a New ReactNative Application\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EHope you have installed and configured Amplify CLI.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo work with ReactNative, you will have to set up the Android development environment. You can refer to this original guide, \u003Ca href=\"https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fenvironment-setup\"\u003Ehttps:\u002F\u002Freactnative.dev\u002Fdocs\u002Fenvironment-setup\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet‚Äôs create a new React Native app called AmplifyShop.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpx react-native init amplify_shop\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf you have already installed \u003Ccode\u003Ereact-native-cli\u003C\u002Fcode\u003E, you can use that instead of \u003Ccode\u003Enpx\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOpen the newly created React Native Project using Android Studio. Open the Android Emulator using Android Studio‚Äôs AVD Manager. In the project directory, run these two commands.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpx react-native start \nnpx react-native run-android\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, the React Native project should run on your Android Emulator. If you are stuck at some point, please refer to the guide that I have suggested earlier.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"initializing-amplify-backend\" href=\"#initializing-amplify-backend\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Initializing Amplify Backend\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet‚Äôs initialize Amplify for our project. Then we can add services one by one.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the project directory, run\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eamplify init\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen you will be prompted for the following information regarding the project you initialize.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NW_1n4bW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fkzlkqwvh0kz8qehnkjwg.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NW_1n4bW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fkzlkqwvh0kz8qehnkjwg.jpg\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ERunning 'amplify init'\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen you initialize your Amplify Project,\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003EIt creates a file called \u003Ccode\u003Eaws-exports.js\u003C\u002Fcode\u003E in the src directory. This file will store all the relevant information to identify the AWS resources\u002Fservices that will allocate in the future.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EIt creates a directory called \u003Ccode\u003Eamplify\u003C\u002Fcode\u003E. We will use this directory to store the templates and configuration details of the services that we will use in the future. In this directory, Amplify will hold our backend schema as well.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EIt creates a Cloud Project. That project can be viewed using the \u003Ccode\u003Eamplify console\u003C\u002Fcode\u003E command.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENext, we need to install all the necessary dependencies by running the following command.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install aws-amplify aws-amplify-react-native amazon-cognito-identity-js @react-native-community\u002Fnetinfo\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYou will also need to install the pod dependencies for iOS.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpx pod-install\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"configuring-amplify-backend\" href=\"#configuring-amplify-backend\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Configuring Amplify Backend\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo complete setting up our Amplify project, we need to configure amplify in a higher-order component. Adding the following lines of code in your \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E or \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E file will do the job.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport Amplify from 'aws-amplify';\nimport awsconfig from '.\u002Faws-exports';\n\nAmplify.configure({\n  ...awsconfig,\n  Analytics: {\n    disabled: true,\n  },\n});\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThat completes setting up the project. Now let‚Äôs add those services one by one.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"03-adding-cognito-authentication\" href=\"#03-adding-cognito-authentication\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  03. Adding Cognito Authentication\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ENow, adding Authentication to your React Native App never gets easier than Amplify.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"adding-signup-and-login\" href=\"#adding-signup-and-login\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Adding Sign-up and Log-in\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERun \u003Ccode\u003Eamplify add auth\u003C\u002Fcode\u003E in your project directory. Submit the following information when configuring Authentication.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2m8CrivO--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fksng76rmodeldkklvk5i.jpg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2m8CrivO--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fksng76rmodeldkklvk5i.jpg\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ERunning 'amplify add auth'\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EThen, run \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E, to deploy your backend changes. Amplify will take care of the rest by creating your \u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fcognito\u002Flatest\u002Fdeveloperguide\u002Fcognito-user-identity-pools.html\"\u003ECognito Userpool\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe authentication UI component, provided by Amplify Framework, will provide the entire authentication flow. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file,\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EImport \u003Ccode\u003EwithAuthenticator\u003C\u002Fcode\u003E component\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport { withAuthenticator } from 'aws-amplify-react-native'\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EWrap the main component with \u003Ccode\u003EwithAuthenticator\u003C\u002Fcode\u003E component.\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eexport default withAuthenticator(App)\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhen you run your app. This login screen will show up. Try logging in as a new user. This will lead you to the home page. The newly created user will be saved in our Cognito User Pool.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QnFd6MdS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frj4sw9suaap24rimbdxf.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--QnFd6MdS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frj4sw9suaap24rimbdxf.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ESign-in Screen by Amplify\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore Adding AppSync API, let‚Äôs add navigation to our App. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"adding-reactnative-navigation\" href=\"#adding-reactnative-navigation\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Adding ReactNative Navigation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EOur App will contain two screens. One Screen to display the list of products and the other to add new products. Let‚Äôs create these two screens. \u003C\u002Fp\u003E\n\n\u003Cp\u003ECreate a new directory called \u003Ccode\u003Esrc\u003C\u002Fcode\u003E. In that directory, create a folder called \u003Ccode\u003Escreens\u003C\u002Fcode\u003E. In that folder \u003Ccode\u003Esrc\u002Fscreens\u003C\u002Fcode\u003E, create two new javascript files named \u003Ccode\u003Eadd-product-screen.js\u003C\u002Fcode\u003E and \u003Ccode\u003Ehome-screen.js\u003C\u002Fcode\u003E I just prefer this naming convention. You can use any convention.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECopy and paste the following sample code. Do change the function name (‚ÄòHomeScreen‚Äô and ‚ÄòAddProductScreen‚Äô) and the title according to the page.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fscreens\u002F home.js, add-product-screen.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React from 'react';\nimport {SafeAreaView, StatusBar, Text} from 'react-native';\n\nconst HomeScreen = (props) =&gt; {\n  return (\n    &lt;&gt;\n      &lt;StatusBar barStyle=\"dark-content\" \u002F&gt;\n      &lt;SafeAreaView&gt;\n        &lt;Text&gt;Home&lt;\u002FText&gt;\n      &lt;\u002FSafeAreaView&gt;\n    &lt;\u002F&gt;\n  );\n};\n\nexport default HomeScreen;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThere are multiple ways to add navigation into ReactNative Apps. In this tutorial, we will use ‚ÄòStack Navigator Library‚Äô from React Navigation. First, we should install it using npm.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install @react-navigation\u002Fnative\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EInstall all the additional third-party dependencies as well.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community\u002Fmasked-view @react-navigation\u002Fstack\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFrom React Native 0.60 and higher, \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Freact-native-community\u002Fcli\u002Fblob\u002Fmaster\u002Fdocs\u002Fautolinking.md\"\u003Elinking is automatic\u003C\u002Fa\u003E. So you don‚Äôt need to run \u003Ccode\u003Ereact-native link\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you‚Äôre on a Mac and developing for iOS, you need to install the pods (via \u003Ca href=\"https:\u002F\u002Fcocoapods.org\u002F\"\u003ECocoapods\u003C\u002Fa\u003E) to complete the linking.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpx pod-install ios\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ETo finish installing React Native Navigation, add the following import in your \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E or \u003Ccode\u003Eindex.js\u003C\u002Fcode\u003E file.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport 'react-native-gesture-handler';\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFor the sake of this tutorial, I will use two additional styling libraries. I will use \u003Ccode\u003Ereact-native-elements\u003C\u002Fcode\u003E and \u003Ccode\u003Ereact-native-vector-icons\u003C\u002Fcode\u003E. Let‚Äôs install those using npm.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install react-native-elements\nnpm install react-native-vector-icons\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn order to view \u003Ccode\u003Efontawesome icons\u003C\u002Fcode\u003E, we need to add the following line into android\u002Fapp\u002F\u003Cstrong\u003Ebuild.gradle\u003C\u002Fstrong\u003E file.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eapply from: \"..\u002F..\u002Fnode_modules\u002Freact-native-vector-icons\u002Ffonts.gradle\"\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWith that out of the way, move into \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file. We will use the \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file to set up navigation in our App. Replace the current code with the following.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: App.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React from 'react';\nimport {StyleSheet, View, TouchableOpacity} from 'react-native';\nimport {createStackNavigator} from '@react-navigation\u002Fstack';\nimport {NavigationContainer} from '@react-navigation\u002Fnative';\nimport AddProductScreen from '.\u002Fsrc\u002Fscreens\u002Fadd-product-screen';\nimport HomeScreen from '.\u002Fsrc\u002Fscreens\u002Fhome-screen';\nimport {Button} from 'react-native-elements';\nimport Icon from 'react-native-vector-icons\u002FFontAwesome';\nimport {withAuthenticator} from 'aws-amplify-react-native';\n\nconst App: () =&gt; React$Node = () =&gt; {\n  const Stack = createStackNavigator();\n  return (\n    &lt;&gt;\n      &lt;NavigationContainer&gt;\n        &lt;Stack.Navigator initialRouteName=\"Home\"&gt;\n          &lt;Stack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            options={({navigation}) =&gt; ({\n              title: 'Home',\n              headerStyle: {\n                backgroundColor: '#ff9300',\n              },\n              headerRight: () =&gt; (\n                &lt;TouchableOpacity\n                  style={styles.addButton}\n                  onPress={() =&gt; navigation.navigate('AddProduct')}&gt;\n                  &lt;Icon name={'plus'} size={20} color=\"#000000\" \u002F&gt;\n                &lt;\u002FTouchableOpacity&gt;\n              ),\n            })}\n          \u002F&gt;\n          &lt;Stack.Screen\n            name=\"AddProduct\"\n            buttonStyle={styles.addButton}\n            component={AddProductScreen}\n            options={{\n              title: 'Add Product',\n              headerStyle: {\n                backgroundColor: '#ff9300',\n              },\n            }}\n          \u002F&gt;\n        &lt;\u002FStack.Navigator&gt;\n      &lt;\u002FNavigationContainer&gt;\n    &lt;\u002F&gt;\n  );\n};\nconst styles = StyleSheet.create({\n  addButton: {\n    marginRight: 20,\n  },\n  logOutBtn: {\n    marginLeft: 10,\n  },\n});\n\nexport default withAuthenticator(App);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis is the simplest and easiest way to add navigation. We got \u003Ccode\u003EStack.Navigator\u003C\u002Fcode\u003E Component, which we can provide an initial route. Inside that wrapper component, we can define each screen using the \u003Ccode\u003EStack.Screen\u003C\u002Fcode\u003E component.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe can use that \u003Ccode\u003Eoptions\u003C\u002Fcode\u003E prop to define the header for each screen. I just added a navigation button on the right side of our header. It should navigate to our AddProduct Screen.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESince we are using Stack Navigation, the new screen gets loaded on top of the previous screen. Therefore, the back button will be added automatically.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"adding-signout-option\" href=\"#adding-signout-option\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Adding Sign-Out Option\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EHow about adding a sign-out option to our Home Screen. We are already passing \u003Ccode\u003EheaderRight\u003C\u002Fcode\u003E to our home screen. We can pass another prop called \u003Ccode\u003EheaderLeft\u003C\u002Fcode\u003E. This will create a new button on the left side of our header.\u003C\u002Fp\u003E\n\n\u003Cp\u003EDo paste in the following code along with the import.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E\u002F\u002F importing Auth Class from Amplify Library\nimport {Auth} from 'aws-amplify';\nheaderLeft: () =&gt; (\n  &lt;View style={styles.logOutBtn}&gt;\n    &lt;Button\n      icon={&lt;Icon name=\"sign-out\" size={25} color=\"#000000\" \u002F&gt;}\n      onPress={}\n      type=\"clear\"\n    \u002F&gt;\n  &lt;\u002FView&gt;\n),\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESign-out button will trigger, \u003Ccode\u003EAuth.signOut()\u003C\u002Fcode\u003E method. This method will end the user‚Äôs login session. When the session is over, the login-screen gets loaded automatically.  We don‚Äôt need to manage any state variable. Amplify will do the authentication session handling.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESo, that‚Äôs it for Navigation. Learn more about React Native Navigation \u003Ca href=\"https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fgetting-started\"\u003Ehere\u003C\u002Fa\u003E. In the end, the result should be something like this.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--muUwYmWD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcd9axmc2073qvab48tb8.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--muUwYmWD--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcd9axmc2073qvab48tb8.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EAfter Adding Navigation\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"04-adding-appsync-api\" href=\"#04-adding-appsync-api\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  04. Adding AppSync API\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ELet‚Äôs store details about products by adding an AppSync API. We will save details about products such as name, price, and description. We will also add an image to every product. Let‚Äôs keep that image option for later.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"executing-amplify-add-api\" href=\"#executing-amplify-add-api\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Executing ‚Äòamplify add api‚Äô\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAs I‚Äôve said earlier, through AppSync, we can build a \u003Ca href=\"https:\u002F\u002Fgraphql.org\u002F\"\u003EGraphQL API\u003C\u002Fa\u003E. All the heavy lifting, such as connecting and creating DynamoDB tables, generation queries, and mutations, will be done by \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fappsync\u002F\"\u003EAppSync\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet‚Äôs started by provisioning an AppSync API for our Amplify Backend. Execute,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eamplify add api\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eand you will be prompted for the following information. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mTR6__ig--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fmzh5a7xmrec0lbaswapm.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mTR6__ig--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fmzh5a7xmrec0lbaswapm.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ERunning 'amplify add api'\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EJust accept the defaults. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"editing-graphql-schema\" href=\"#editing-graphql-schema\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Editing GraphQL Schema\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet‚Äôs edit our schema. You will find our \u003Ccode\u003Eschema.graphql\u003C\u002Fcode\u003E file in \u003Ccode\u003Eamplify\u002Fbackend\u002Fapi\u002Fschema.graphql\u003C\u002Fcode\u003E directory. Copy and paste the following schema.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Etype Product\n@model(subscriptions: null)\n@auth(\n  rules: [\n    { allow: owner },\n    { allow: private, operations: [read] }\n  ]) {\n  id: ID!\n  name: String!\n  description: String\n  price: Float\n  userId: String\n  userName: String\n  image: String\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ESave the file. Follow with an \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E to deploy your changes into AWS Cloud.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--McLxWMqK--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcxij1fciolzb2pl48gxg.JPG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--McLxWMqK--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcxij1fciolzb2pl48gxg.JPG\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ERunning 'amplify push' after adding AppSync API\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, our AppSync API has been created. Also, the AppSync Library automatically created queries, mutations for our GraphQL Schema. Run \u003Ccode\u003Eamplify api console\u003C\u002Fcode\u003E to view your AppSync API in AWS.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou could play around with some GraphQL operations in this AWS AppSync Console.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZYA7VTVo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd35btwxr1lox5nrb32xc.JPG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ZYA7VTVo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd35btwxr1lox5nrb32xc.JPG\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EAWS AppSync Console\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"adding-addproduct-screen\" href=\"#adding-addproduct-screen\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Adding AddProduct Screen\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet‚Äôs start interacting with our AppSync API.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore that, I want to add an extra package that will help in creating a React Native Form. With the \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ftcomb-form-native\"\u003Etcomb-form-native\u003C\u002Fa\u003E package, you can quickly create a form on the fly. So, let‚Äôs install it using npm.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install tcomb-form-native\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ECopy and paste the following code into our add-product-screen.js file.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fscreens\u002Fadd-product-screen.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React, {useState} from 'react';\nimport {StyleSheet, SafeAreaView, ScrollView} from 'react-native';\nimport {Button} from 'react-native-elements';\nimport t from 'tcomb-form-native';\nconst Form = t.form.Form;\nconst User = t.struct({\n  name: t.String,\n  price: t.Number,\n  description: t.String,\n});\nconst AddProductScreen = ({navigation}) =&gt; {\n  const [form, setForm] = useState(null); \n  const [initialValues, setInitialValues] = useState({});\n\n  const options = {\n    auto: 'placeholders',\n    fields: {\n      description: {\n        multiLine: true,\n        stylesheet: {\n          ...Form.stylesheet,\n          textbox: {\n            ...Form.stylesheet.textbox,\n            normal: {\n              ...Form.stylesheet.textbox.normal,\n              height: 100,\n              textAlignVertical: 'top',\n            },\n          },\n        },\n      },\n    },\n  };\nconst handleSubmit = async () =&gt; {\n    \u002F\u002F Saving product details\n  };\nreturn (\n    &lt;&gt;\n      &lt;SafeAreaView style={styles.addProductView}&gt;\n        &lt;ScrollView&gt;\n          &lt;Form\n            ref={(c) =&gt; setForm(c)}\n            value={initialValues}\n            type={User}\n            options={options}\n          \u002F&gt;\n          &lt;Button title=\"Save\" onPress={handleSubmit} \u002F&gt;\n        &lt;\u002FScrollView&gt;\n      &lt;\u002FSafeAreaView&gt;\n    &lt;\u002F&gt;\n  );\n};\nconst styles = StyleSheet.create({\n  addProductView: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    paddingTop: 15,\n    height: 'auto',\n  },\n});\nexport default AddProductScreen;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ETry running your app, you should see a form just like this.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet‚Äôs inspect our code.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can see that, I didn't use any \u003Ccode\u003EtextInputs\u003C\u002Fcode\u003E. I just defined our fields using \u003Ccode\u003Et.struct\u003C\u002Fcode\u003E and only since the description is a multiple \u003Ccode\u003EtextInput\u003C\u002Fcode\u003E, we need to pass in extra options.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn our \u003Ccode\u003EhandleSubmit\u003C\u002Fcode\u003E function, we are saving entered details in the database. Paste in the following code inside our \u003Ccode\u003EhandleSubmit\u003C\u002Fcode\u003E function. Don‚Äôt forget the imports.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport { Auth, API, graphqlOperation} from 'aws-amplify';\nimport {createProduct} from '..\u002F..\u002Fgraphql\u002Fmutations';\n\ntry {\n      const value = await form.getValue();\n      const user = await Auth.currentAuthenticatedUser();\nconst response = await API.graphql(\n        graphqlOperation(createProduct, {\n          input: {\n            name: value.name,\n            price: value.price.toFixed(2),\n            description: value.description,\n            userId: user.attributes.sub,\n            userName: user.username,\n          },\n        }),\n      );\n      console.log('Response :\\n');\n      console.log(response);\n    } catch (e) {\n      console.log(e.message);\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003EAuth.currentAuthenticatedUser()\u003C\u002Fcode\u003E will do exactly what the name suggests. It will return details about the logged-in user. Cognito gives every user an attribute called \u003Ccode\u003Esub\u003C\u002Fcode\u003E, a unique string value. We will save that as the userId assigned to a product. Username will showcase the product owner.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ccode\u003EcreateProduct\u003C\u002Fcode\u003E mutation was generated automatically. Here we are referring to that mutation, which was defined in \u003Ccode\u003Egraphql\u002Fmutations.js\u003C\u002Fcode\u003E file.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, after running the app and saving a product, you should see a console.log of the response. You could also query in the AWS AppSync Console.\u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"05-adding-s3-storage\" href=\"#05-adding-s3-storage\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  05. Adding S3 Storage\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ENow by far, users can save product details. We should also add an extra option to upload a product image. We will need an S3 Bucket to store product images. Working with S3 really gets easier with Amplify. Let me show you.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore that, install the \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-image-picker\"\u003EReact Native image picker library\u003C\u002Fa\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Enpm install react-native-image-picker\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003ERN &gt;= 0.60\u003Cbr\u003E\n    cd ios &amp;&amp; pod install\u003C\u002Fp\u003E\n\n\u003Cp\u003ERN &lt; 0.60\u003Cbr\u003E\n    react-native link react-native-image-picker\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EFor now, this image picker library will support only 21 or newer SDK Versions. So edit \u003Cstrong\u003EminSDK version\u003C\u002Fstrong\u003E in \u003Cstrong\u003E\u003Cem\u003Eandroid\u002Fbuild.gradle\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E file.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003EbuildToolsVersion = \"29.0.2\"\u003Cbr\u003E\n    \u003Cstrong\u003EminSdkVersion = 21\u003C\u002Fstrong\u003E\u003Cbr\u003E\n    compileSdkVersion = 29\u003Cbr\u003E\n    targetSdkVersion = 29\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"executing-amplify-add-storage\" href=\"#executing-amplify-add-storage\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Executing ‚Äòamplify add storage‚Äô\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERun,\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eamplify add storage\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eto create a new S3 Bucket. Accept the defaults in the prompt.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oe4fFsgA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9lqgpqe3nrltgwyy7oo7.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oe4fFsgA--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9lqgpqe3nrltgwyy7oo7.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003ERunning 'amplify add storage'\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003ERun \u003Ccode\u003Eamplify push\u003C\u002Fcode\u003E, to deploy your changes.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"updating-the-form\" href=\"#updating-the-form\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Updating the Form\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet‚Äôs add image uploading and previewing options into our form. I build a fancy ImageUploader Component with an image preview. Make sure to add that by making a new \u003Ccode\u003Ecomponents\u003C\u002Fcode\u003E directory in the \u003Ccode\u003Esrc\u003C\u002Fcode\u003E folder.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fcomponents\u002FImageUploader.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React from 'react';\nimport {View, Image, Button, StyleSheet} from 'react-native';\n\nconst ImageUploader = ({handleChoosePhoto, photo}) =&gt; {\n  return (\n    &lt;View style={styles.imageView}&gt;\n      {photo &amp;&amp; &lt;Image source={{uri: photo.uri}} style={styles.photo} \u002F&gt;}\n      &lt;Button\n        style={styles.photoBtn}\n        title=\"Choose Photo\"\n        onPress={handleChoosePhoto}\n      \u002F&gt;\n    &lt;\u002FView&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageView: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingBottom: 15,\n  },\n  photo: {\n    width: 200,\n    height: 200,\n  },\n});\n\nexport default ImageUploader;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn order to use this image uploading option, we will make the following changes in our \u003Ccode\u003Eadd-product-screen.js\u003C\u002Fcode\u003E file.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe will add the extra ImageUploader Component inside our ScrollView Component.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Ereturn (\n  &lt;&gt;\n    &lt;SafeAreaView style={styles.addProductView}&gt;\n      &lt;ScrollView&gt;\n        &lt;Form\n          ref={(c) =&gt; setForm(c)}\n          value={initialValues}\n          type={User}\n          options={options}\n        \u002F&gt;\n        &lt;ImageUploader photo={photo} handleChoosePhoto={handleChoosePhoto} \u002F&gt;\n        &lt;Button title=\"Save\" onPress={handleSubmit} \u002F&gt;\n      &lt;\u002FScrollView&gt;\n    &lt;\u002FSafeAreaView&gt;\n  &lt;\u002F&gt;\n);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EDeclare this state variable along with the new handleChoosePhoto function.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst [photo, setPhoto] = useState(null);\nconst handleChoosePhoto = async () =&gt; {\n  const product = await form.getValue();\n\n  setInitialValues({\n    name: product.name,\n    price: product.price,\n    description: product.description,\n  });\n  await launchImageLibrary({}, (response) =&gt; {\n    \u002F\u002F console.log(response.data);\n    if (response.uri) {\n      console.log('Photo Extension: \\n');\n      \u002F\u002F console.log(response);\n      setPhoto(response);\n    }\n  });\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIf we don‚Äôt set initial values, launching the image library will reset the form.\u003C\u002Fp\u003E\n\n\u003Cp\u003EDon‚Äôt forget to add these imports as well.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport {launchImageLibrary} from 'react-native-image-picker'; \nimport {Storage} from 'aws-amplify';\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EYou can do a test run of the form. You should see something like this.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LaT6q6pq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F3g2gwrtxc0hrlkzzjpef.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LaT6q6pq--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F3g2gwrtxc0hrlkzzjpef.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EAddProduct Screen\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Cp\u003EAlso, we should update our \u003Ccode\u003EhandleSubmit\u003C\u002Fcode\u003E function.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Econst handleSubmit = async () =&gt; {\n  try {\n    const value = await form.getValue();\n    console.log('value: ', value);\n    const user = await Auth.currentAuthenticatedUser();\n    if (photo) {\n      const response = await fetch(photo.uri);\n\n      const blob = await response.blob();\n      console.log('FileName: \\n');\n      await Storage.put(photo.fileName, blob, {\n        contentType: 'image\u002Fjpeg',\n      });\n    }\n    const response = await API.graphql(\n      graphqlOperation(createProduct, {\n        input: {\n          name: value.name,\n          price: value.price.toFixed(2),\n          description: value.description,\n          userId: user.attributes.sub,\n          userName: user.username,\n          image: photo.fileName,\n        },\n      }),\n    );\n    console.log('Response :\\n');\n    console.log(response);\n    navigation.navigate('Home');\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe can upload an S3 Image into our bucket using \u003Ccode\u003EStorage.put\u003C\u002Fcode\u003E method, provided by AWS Amplify Library. We need our file name (image key in S3 ) to access our file again. So we will store that in our database.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETry uploading a new image. Submit the form. Wait until the image uploads. You should see a console.log like this.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    [Sat Jan 02 2021 01:58:21.981]  LOG      Response :\n\n    [Sat Jan 02 2021 01:58:21.982]  LOG      {\"data\": {\"createProduct\": {\"createdAt\": \"2021-01-01T20:28:22.382Z\", \"description\": \"About Sahan New Product\", \"id\": \"f3188508-5ee7-4af4-acf3-3c948f61d868\", \"image\": \"6ca2947e-766b-445e-b260-0041502e652a\", \"name\": \"Sahan New Product\", \"price\": 200, \"updatedAt\": \"2021-01-01T20:28:22.382Z\", \"userId\": \"7d5fa0a3-4d26-4354-8028-7cc597a69447\", \"userName\": \"sahan\"}}}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch1\u003E\n  \u003Ca name=\"06-retrieving-appsync-data\" href=\"#06-retrieving-appsync-data\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  06. Retrieving AppSync Data\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003ENow, let‚Äôs show a Product List View on our home screen. For that, I have created two new components,\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProductCard Component\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fcomponents\u002FProductCard.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React, {useEffect, useState} from 'react';\nimport {Text, StyleSheet, View} from 'react-native';\nimport {Card, Icon, Image} from 'react-native-elements';\nimport {Storage} from 'aws-amplify';\n\nconst ProductCard = ({\n  productName,\n  productOwner,\n  productPrice,\n  productImage,\n}) =&gt; {\n  const [imageSource, setImageSource] = useState(null);\n  const getImage = async () =&gt; {\n    try {\n      const imageURL = await Storage.get(productImage);\n      setImageSource({\n        uri: imageURL,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() =&gt; {\n    getImage();\n  }, []);\n  return (\n    &lt;Card containerStyle={styles.cardContainer}&gt;\n      &lt;Card.Title style={styles.cardTitle}&gt;{productName}&lt;\u002FCard.Title&gt;\n      &lt;Card.Divider \u002F&gt;\n      {imageSource &amp;&amp; (\n        &lt;Image source={imageSource} style={styles.productImage} \u002F&gt;\n      )}\n      {!imageSource &amp;&amp; (\n        &lt;View style={styles.altView}&gt;\n          &lt;Text&gt;Product Image&lt;\u002FText&gt;\n        &lt;\u002FView&gt;\n      )}\n      &lt;Text style={styles.productPrice}&gt;{productPrice}$&lt;\u002FText&gt;\n      &lt;View style={styles.ownerTitle}&gt;\n        &lt;Icon name=\"person-pin\" \u002F&gt;\n        &lt;Text style={styles.productOwner}&gt;{productOwner}&lt;\u002FText&gt;\n      &lt;\u002FView&gt;\n    &lt;\u002FCard&gt;\n  );\n};\nconst styles = StyleSheet.create({\n  cardContainer: {\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n  productImage: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n  },\n  productPrice: {\n    marginTop: 10,\n    marginBottom: 10,\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  altView: {\n    width: 200,\n    height: 200,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  cardTitle: {\n    fontSize: 20,\n  },\n  productOwner: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    alignSelf: 'center',\n  },\n  ownerTitle: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n  },\n});\nexport default ProductCard;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cul\u003E\n\u003Cli\u003EProductList Component\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fcomponents\u002FProductList.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React from 'react';\nimport {View, Text, FlatList, StyleSheet, RefreshControl} from 'react-native';\n\nimport ProductCard from '.\u002FProductCard';\n\nconst ProductList = ({productList, refreshing, onRefresh}) =&gt; {\n  return (\n    &lt;View style={styles.productsView}&gt;\n      {productList &amp;&amp; (\n        &lt;FlatList\n          style={styles.productList}\n          refreshControl={\n            &lt;RefreshControl refreshing={refreshing} onRefresh={onRefresh} \u002F&gt;\n          }\n          keyExtractor={(item) =&gt; item.id}\n          data={productList}\n          renderItem={({item}) =&gt; {\n            return (\n              &lt;ProductCard\n                productName={item.name}\n                productImage={item.image}\n                productOwner={item.userName}\n                productPrice={item.price}\n              \u002F&gt;\n            );\n          }}\n        \u002F&gt;\n      )}\n    &lt;\u002FView&gt;\n  );\n};\n\nconst styles = StyleSheet.create({\n  itemText: {\n    fontSize: 15,\n  },\n  productText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    alignSelf: 'center',\n  },\n  productsView: {\n    padding: 0,\n    margin: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  productList: {\n    padding: 5,\n    marginBottom: 20,\n  },\n});\nexport default ProductList;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow, let‚Äôs use this ProductList Component in the Home Screen. Replace the current sample code with the following code.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003Edirectory: src\u002Fscreens\u002Fhome-screen.js\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003Eimport React, {useEffect, useState} from 'react';\nimport {API} from 'aws-amplify';\nimport {SafeAreaView, StatusBar, TouchableOpacity} from 'react-native';\n\nimport {listProducts} from '..\u002F..\u002Fgraphql\u002Fqueries';\nimport ProductList from '..\u002Fcomponents\u002FProductList';\nconst HomeScreen = (props) =&gt; {\n  const [productsList, setProducts] = useState([]);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchProducts = async () =&gt; {\n    try {\n      const products = await API.graphql({query: listProducts});\n      if (products.data.listProducts) {\n        console.log('Products: \\n');\n        console.log(products);\n        setProducts(products.data.listProducts.items);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n  useEffect(() =&gt; {\n    fetchProducts();\n  }, []);\n\n  const onRefresh = async () =&gt; {\n    setRefreshing(true);\n    await fetchProducts();\n    setRefreshing(false);\n  };\n  return (\n    &lt;&gt;\n      &lt;StatusBar barStyle=\"dark-content\" \u002F&gt;\n      &lt;SafeAreaView&gt;\n        {productsList &amp;&amp; (\n          &lt;ProductList\n            productList={productsList}\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n          \u002F&gt;\n        )}\n      &lt;\u002FSafeAreaView&gt;\n    &lt;\u002F&gt;\n  );\n};\n\nexport default HomeScreen;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the useEffect hook of our Home Screen, we are fetching all products. This time, we are running a GraphQL query \u003Ccode\u003ElistProducts\u003C\u002Fcode\u003E, which will be defined automatically in the \u003Ccode\u003Egraphql\u002Fqueries.js\u003C\u002Fcode\u003E file.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe are passing those fetched products, into our ProductList Component. ProductList Component will render a ProductCard for each product.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn PtoductCard Component, when we pass in the image filename to \u003Ccode\u003EStorage.get\u003C\u002Fcode\u003E function, we will get the full image URL. \u003C\u002Fp\u003E\n\n\u003Cp\u003ETry running your app, you should now see your product list.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--EAb6c_Z1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwtxi2skgh2z54dy63mxz.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--EAb6c_Z1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwtxi2skgh2z54dy63mxz.png\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003Cfigure\u003E\u003Cbr\u003E\u003Cfigcaption\u003EHome Screen\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\n  \u003C\u002Fp\u003E\n\n\u003Ch1\u003E\n  \u003Ca name=\"07-conclusion\" href=\"#07-conclusion\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  07. Conclusion\n\u003C\u002Fh1\u003E\n\n\u003Cp\u003EWith that, we were able to complete all our functionalities successfully. How about letting users order products? I will save that for you to try on üòÉ.\u003C\u002Fp\u003E\n\n\u003Cp\u003ECongratulations on Completing the Tutorial! üéâ\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf we recap on what we have done,\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003EWe added Cognito Authentication to let users log-in or sign-up to our app.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAdditionally, we included Navigation and Sign-out options.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EWe created the AppSync GraphQL API, and we saved some product details in our Database.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EWe created S3 Bucket to let users upload an image to each product.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAt the Home Screen, we were able to show a product ListView to the user.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EI think now you have a good understanding of working with these different AWS resources in your ReactNative Apps.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI hope you have completed all the steps without running into any issues. However, if you do, you can ask anything in the comments section below.\u003C\u002Fp\u003E\n\n\u003Cp\u003EVideo Walkthrough related to this BlogPost:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003E\u003Cem\u003EAws Amplify and React Native Crash Course\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ciframe width=\"710\" height=\"399\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FNqYQ0Muwf3c\" allowfullscreen loading=\"lazy\"\u003E\n\u003C\u002Fiframe\u003E\n\u003C\u002Fp\u003E\n\n";b.body_markdown="#### Let‚Äôs Build an E-commerce App with ReactNative and Amplify\n\n\u003E Click [here](https:\u002F\u002Fyoutu.be\u002FNqYQ0Muwf3c) to see the video walkthrough.\n\n# Table of Content\n\n1. Introduction\n\n2. Setting Up the Project\n\n3. Adding Cognito Authentication\n\n4. Adding AppSync API\n\n5. Adding S3 Storage\n\n6. Retrieving AppSync Data\n\n7. Conclusion\n\n# 01. Introduction\n\nHello! & Welcome to this complete guide on AWS Amplify and React Native. In this tutorial, we will build a simple e-commerce app. Users can log in\u002Fsignup to this app. Users can add their own products, and all the users can view those products added by different users. \n\nHere is a quick demo,\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fw7qjm1ix8bqr6rp863pb.jpg\"\u003E\n  \u003Cfigcaption\u003EDifferent Screens in Mobile App\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nEven though this is not a very complex application, this will be a perfect starter project for you. We will use different AWS Services like S3 Storage, AWS AppSync API, and Amazon Cognito Authentication. Don‚Äôt worry I will explain these in detail, later.\n\n## Architecture Diagram\n\nThe following diagram demonstrates our AWS Architecture Diagram.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fyz3l2dv9wki6uahjakv2.jpg\"\u003E\n  \u003Cfigcaption\u003EAWS Architecture Diagram for Mobile App\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nAWS Amplify makes it much easier to work with these different services. As always, our backend resources will be created and managed by Amplify. Let me explain what these services will do.\n\nSo, Amplify is the heart of our backend environment. Those arrows pointing from Amplify means that we will use Amplify to connect those different resources. Every product will have an image. We will store that image in an [S3](https:\u002F\u002Faws.amazon.com\u002Fs3\u002F) Bucket. Product details will be saved in Amazon [DynamoDB](https:\u002F\u002Faws.amazon.com\u002Fdynamodb\u002F), a NoSQL database provided by AWS. To talk with that Database, we will use a GraphQL API provided by AWS [AppSync](https:\u002F\u002Faws.amazon.com\u002Fappsync\u002F). Amazon Cognito will handle authentication.\n\nReady to build the app? Let‚Äôs get started. üë∑üèΩ‚Äç‚ôÇÔ∏èüß∞\n\n## Prerequisites\n\nTo avoid any disturbances in the future, make sure you have the following prerequisites installed.\n\n* [Node.js](https:\u002F\u002Fnodejs.org\u002Fen\u002Fdownload\u002F) v10.x or later\n\n* [npm](https:\u002F\u002Fdocs.npmjs.com\u002Fcli\u002Fv6\u002Fcommands\u002Fnpm-install) v5.x or later\n\n* [Amplify CLI](https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall) (version @4.40.1, what I‚Äôm using in the tutorial)\n\n* [Android Studio](https:\u002F\u002Fdeveloper.android.com\u002Fstudio)\n\n* ReactNatice CLI (version 2.0.1)\n\n# 02. Setting Up the Project\n\n## Installing and Configuring Amplify CLI\n\nThrough this tutorial, we will work with AWS Amplify CLI. You can install it by running,\n\n```\nnpm install -g @aws-amplify\u002Fcli@4.39.0\n```\n\nThen you need to run `amplify configure`. This will set up your Amplify CLI. There you will set up a new IAM User. You will finish setting up your IAM User, by providing the `accessKeyId` and `secretAccessKey` for your IAM user.\n\nIf you are stuck at some point, you can refer to this original guideline on installing Amplify CLI, [https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall](https:\u002F\u002Fdocs.amplify.aws\u002Fcli\u002Fstart\u002Finstall)\n\n## Creating a New ReactNative Application\n\nHope you have installed and configured Amplify CLI.\n\nTo work with ReactNative, you will have to set up the Android development environment. You can refer to this original guide, [https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fenvironment-setup](https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fenvironment-setup)\n\nLet‚Äôs create a new React Native app called AmplifyShop.\n\n```\nnpx react-native init amplify_shop\n```\n\nIf you have already installed `react-native-cli`, you can use that instead of `npx`.\n\nOpen the newly created React Native Project using Android Studio. Open the Android Emulator using Android Studio‚Äôs AVD Manager. In the project directory, run these two commands.\n\n```\nnpx react-native start \nnpx react-native run-android\n```\n\nNow, the React Native project should run on your Android Emulator. If you are stuck at some point, please refer to the guide that I have suggested earlier.\n\n## Initializing Amplify Backend\n\nLet‚Äôs initialize Amplify for our project. Then we can add services one by one.\n\nIn the project directory, run\n\n```\namplify init\n```\n\nThen you will be prompted for the following information regarding the project you initialize.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fkzlkqwvh0kz8qehnkjwg.jpg\"\u003E\n  \u003Cfigcaption\u003ERunning 'amplify init'\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nWhen you initialize your Amplify Project,\n\n* It creates a file called `aws-exports.js` in the src directory. This file will store all the relevant information to identify the AWS resources\u002Fservices that will allocate in the future.\n\n* It creates a directory called `amplify`. We will use this directory to store the templates and configuration details of the services that we will use in the future. In this directory, Amplify will hold our backend schema as well.\n\n* It creates a Cloud Project. That project can be viewed using the `amplify console` command.\n\nNext, we need to install all the necessary dependencies by running the following command.\n\n```\nnpm install aws-amplify aws-amplify-react-native amazon-cognito-identity-js @react-native-community\u002Fnetinfo\n```\n\nYou will also need to install the pod dependencies for iOS.\n\n```\nnpx pod-install\n```\n\n## Configuring Amplify Backend\n\nTo complete setting up our Amplify project, we need to configure amplify in a higher-order component. Adding the following lines of code in your `App.js` or `index.js` file will do the job.\n\n```\nimport Amplify from 'aws-amplify';\nimport awsconfig from '.\u002Faws-exports';\n\nAmplify.configure({\n  ...awsconfig,\n  Analytics: {\n    disabled: true,\n  },\n});\n```\n\nThat completes setting up the project. Now let‚Äôs add those services one by one.\n\n# 03. Adding Cognito Authentication\n\nNow, adding Authentication to your React Native App never gets easier than Amplify.\n\n## Adding Sign-up and Log-in \n\nRun `amplify add auth` in your project directory. Submit the following information when configuring Authentication.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fksng76rmodeldkklvk5i.jpg\"\u003E\n  \u003Cfigcaption\u003ERunning 'amplify add auth'\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nThen, run `amplify push`, to deploy your backend changes. Amplify will take care of the rest by creating your [Cognito Userpool](https:\u002F\u002Fdocs.aws.amazon.com\u002Fcognito\u002Flatest\u002Fdeveloperguide\u002Fcognito-user-identity-pools.html).\n\nThe authentication UI component, provided by Amplify Framework, will provide the entire authentication flow. \n\nIn the `App.js` file,\n\n* Import `withAuthenticator` component\n\n```\nimport { withAuthenticator } from 'aws-amplify-react-native'\n```\n\n* Wrap the main component with `withAuthenticator` component.\n\n```\nexport default withAuthenticator(App)\n```\n\nWhen you run your app. This login screen will show up. Try logging in as a new user. This will lead you to the home page. The newly created user will be saved in our Cognito User Pool.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Frj4sw9suaap24rimbdxf.png\"\u003E\n  \u003Cfigcaption\u003ESign-in Screen by Amplify\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nBefore Adding AppSync API, let‚Äôs add navigation to our App. \n\n## Adding ReactNative Navigation\n\nOur App will contain two screens. One Screen to display the list of products and the other to add new products. Let‚Äôs create these two screens. \n\nCreate a new directory called `src`. In that directory, create a folder called `screens`. In that folder `src\u002Fscreens`, create two new javascript files named `add-product-screen.js` and `home-screen.js` I just prefer this naming convention. You can use any convention.\n\nCopy and paste the following sample code. Do change the function name (‚ÄòHomeScreen‚Äô and ‚ÄòAddProductScreen‚Äô) and the title according to the page.\n\n***directory: src\u002Fscreens\u002F home.js, add-product-screen.js***\n\n```\nimport React from 'react';\nimport {SafeAreaView, StatusBar, Text} from 'react-native';\n\nconst HomeScreen = (props) =\u003E {\n  return (\n    \u003C\u003E\n      \u003CStatusBar barStyle=\"dark-content\" \u002F\u003E\n      \u003CSafeAreaView\u003E\n        \u003CText\u003EHome\u003C\u002FText\u003E\n      \u003C\u002FSafeAreaView\u003E\n    \u003C\u002F\u003E\n  );\n};\n\nexport default HomeScreen;\n```\n\nThere are multiple ways to add navigation into ReactNative Apps. In this tutorial, we will use ‚ÄòStack Navigator Library‚Äô from React Navigation. First, we should install it using npm.\n\n```\nnpm install @react-navigation\u002Fnative\n```\n\nInstall all the additional third-party dependencies as well.\n\n```\nnpm install react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community\u002Fmasked-view @react-navigation\u002Fstack\n```\n\nFrom React Native 0.60 and higher, [linking is automatic](https:\u002F\u002Fgithub.com\u002Freact-native-community\u002Fcli\u002Fblob\u002Fmaster\u002Fdocs\u002Fautolinking.md). So you don‚Äôt need to run `react-native link`.\n\nIf you‚Äôre on a Mac and developing for iOS, you need to install the pods (via [Cocoapods](https:\u002F\u002Fcocoapods.org\u002F)) to complete the linking.\n\n```\nnpx pod-install ios\n```\n\nTo finish installing React Native Navigation, add the following import in your `App.js` or `index.js` file.\n\n```\nimport 'react-native-gesture-handler';\n```\n\nFor the sake of this tutorial, I will use two additional styling libraries. I will use `react-native-elements` and `react-native-vector-icons`. Let‚Äôs install those using npm.\n\n```\nnpm install react-native-elements\nnpm install react-native-vector-icons\n```\n\nIn order to view `fontawesome icons`, we need to add the following line into android\u002Fapp\u002F**build.gradle** file.\n\n```\napply from: \"..\u002F..\u002Fnode_modules\u002Freact-native-vector-icons\u002Ffonts.gradle\"\n```\n\nWith that out of the way, move into `App.js` file. We will use the `App.js` file to set up navigation in our App. Replace the current code with the following.\n\n***directory: App.js***\n\n```\nimport React from 'react';\nimport {StyleSheet, View, TouchableOpacity} from 'react-native';\nimport {createStackNavigator} from '@react-navigation\u002Fstack';\nimport {NavigationContainer} from '@react-navigation\u002Fnative';\nimport AddProductScreen from '.\u002Fsrc\u002Fscreens\u002Fadd-product-screen';\nimport HomeScreen from '.\u002Fsrc\u002Fscreens\u002Fhome-screen';\nimport {Button} from 'react-native-elements';\nimport Icon from 'react-native-vector-icons\u002FFontAwesome';\nimport {withAuthenticator} from 'aws-amplify-react-native';\n\nconst App: () =\u003E React$Node = () =\u003E {\n  const Stack = createStackNavigator();\n  return (\n    \u003C\u003E\n      \u003CNavigationContainer\u003E\n        \u003CStack.Navigator initialRouteName=\"Home\"\u003E\n          \u003CStack.Screen\n            name=\"Home\"\n            component={HomeScreen}\n            options={({navigation}) =\u003E ({\n              title: 'Home',\n              headerStyle: {\n                backgroundColor: '#ff9300',\n              },\n              headerRight: () =\u003E (\n                \u003CTouchableOpacity\n                  style={styles.addButton}\n                  onPress={() =\u003E navigation.navigate('AddProduct')}\u003E\n                  \u003CIcon name={'plus'} size={20} color=\"#000000\" \u002F\u003E\n                \u003C\u002FTouchableOpacity\u003E\n              ),\n            })}\n          \u002F\u003E\n          \u003CStack.Screen\n            name=\"AddProduct\"\n            buttonStyle={styles.addButton}\n            component={AddProductScreen}\n            options={{\n              title: 'Add Product',\n              headerStyle: {\n                backgroundColor: '#ff9300',\n              },\n            }}\n          \u002F\u003E\n        \u003C\u002FStack.Navigator\u003E\n      \u003C\u002FNavigationContainer\u003E\n    \u003C\u002F\u003E\n  );\n};\nconst styles = StyleSheet.create({\n  addButton: {\n    marginRight: 20,\n  },\n  logOutBtn: {\n    marginLeft: 10,\n  },\n});\n\nexport default withAuthenticator(App);\n```\n\nThis is the simplest and easiest way to add navigation. We got `Stack.Navigator` Component, which we can provide an initial route. Inside that wrapper component, we can define each screen using the `Stack.Screen` component.\n\nWe can use that `options` prop to define the header for each screen. I just added a navigation button on the right side of our header. It should navigate to our AddProduct Screen.\n\nSince we are using Stack Navigation, the new screen gets loaded on top of the previous screen. Therefore, the back button will be added automatically.\n\n## Adding Sign-Out Option\n\nHow about adding a sign-out option to our Home Screen. We are already passing `headerRight` to our home screen. We can pass another prop called `headerLeft`. This will create a new button on the left side of our header.\n\nDo paste in the following code along with the import.\n\n```\n\u002F\u002F importing Auth Class from Amplify Library\nimport {Auth} from 'aws-amplify';\nheaderLeft: () =\u003E (\n  \u003CView style={styles.logOutBtn}\u003E\n    \u003CButton\n      icon={\u003CIcon name=\"sign-out\" size={25} color=\"#000000\" \u002F\u003E}\n      onPress={}\n      type=\"clear\"\n    \u002F\u003E\n  \u003C\u002FView\u003E\n),\n```\n\nSign-out button will trigger, `Auth.signOut()` method. This method will end the user‚Äôs login session. When the session is over, the login-screen gets loaded automatically.  We don‚Äôt need to manage any state variable. Amplify will do the authentication session handling.\n\nSo, that‚Äôs it for Navigation. Learn more about React Native Navigation [here](https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fgetting-started). In the end, the result should be something like this.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcd9axmc2073qvab48tb8.png\"\u003E\n  \u003Cfigcaption\u003EAfter Adding Navigation\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\n# 04. Adding AppSync API\n\nLet‚Äôs store details about products by adding an AppSync API. We will save details about products such as name, price, and description. We will also add an image to every product. Let‚Äôs keep that image option for later.\n\n## Executing ‚Äòamplify add api‚Äô\n\nAs I‚Äôve said earlier, through AppSync, we can build a [GraphQL API](https:\u002F\u002Fgraphql.org\u002F). All the heavy lifting, such as connecting and creating DynamoDB tables, generation queries, and mutations, will be done by [AppSync](https:\u002F\u002Faws.amazon.com\u002Fappsync\u002F).\n\nLet‚Äôs started by provisioning an AppSync API for our Amplify Backend. Execute,\n\n```\namplify add api\n```\n\nand you will be prompted for the following information. \n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fmzh5a7xmrec0lbaswapm.png\"\u003E\n  \u003Cfigcaption\u003ERunning 'amplify add api'\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nJust accept the defaults. \n\n## Editing GraphQL Schema\n\nLet‚Äôs edit our schema. You will find our `schema.graphql` file in `amplify\u002Fbackend\u002Fapi\u002Fschema.graphql` directory. Copy and paste the following schema.\n\n```\ntype Product\n@model(subscriptions: null)\n@auth(\n  rules: [\n    { allow: owner },\n    { allow: private, operations: [read] }\n  ]) {\n  id: ID!\n  name: String!\n  description: String\n  price: Float\n  userId: String\n  userName: String\n  image: String\n}\n```\n\nSave the file. Follow with an `amplify push` to deploy your changes into AWS Cloud.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fcxij1fciolzb2pl48gxg.JPG\"\u003E\n  \u003Cfigcaption\u003ERunning 'amplify push' after adding AppSync API\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nNow, our AppSync API has been created. Also, the AppSync Library automatically created queries, mutations for our GraphQL Schema. Run `amplify api console` to view your AppSync API in AWS.\n\nYou could play around with some GraphQL operations in this AWS AppSync Console.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fd35btwxr1lox5nrb32xc.JPG\"\u003E\n  \u003Cfigcaption\u003EAWS AppSync Console\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\n## Adding AddProduct Screen\n\nLet‚Äôs start interacting with our AppSync API.\n\nBefore that, I want to add an extra package that will help in creating a React Native Form. With the [tcomb-form-native](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Ftcomb-form-native) package, you can quickly create a form on the fly. So, let‚Äôs install it using npm.\n\n```\nnpm install tcomb-form-native\n```\n\nCopy and paste the following code into our add-product-screen.js file.\n\n***directory: src\u002Fscreens\u002Fadd-product-screen.js***\n\n```\nimport React, {useState} from 'react';\nimport {StyleSheet, SafeAreaView, ScrollView} from 'react-native';\nimport {Button} from 'react-native-elements';\nimport t from 'tcomb-form-native';\nconst Form = t.form.Form;\nconst User = t.struct({\n  name: t.String,\n  price: t.Number,\n  description: t.String,\n});\nconst AddProductScreen = ({navigation}) =\u003E {\n  const [form, setForm] = useState(null); \n  const [initialValues, setInitialValues] = useState({});\n  \n  const options = {\n    auto: 'placeholders',\n    fields: {\n      description: {\n        multiLine: true,\n        stylesheet: {\n          ...Form.stylesheet,\n          textbox: {\n            ...Form.stylesheet.textbox,\n            normal: {\n              ...Form.stylesheet.textbox.normal,\n              height: 100,\n              textAlignVertical: 'top',\n            },\n          },\n        },\n      },\n    },\n  };\nconst handleSubmit = async () =\u003E {\n    \u002F\u002F Saving product details\n  };\nreturn (\n    \u003C\u003E\n      \u003CSafeAreaView style={styles.addProductView}\u003E\n        \u003CScrollView\u003E\n          \u003CForm\n            ref={(c) =\u003E setForm(c)}\n            value={initialValues}\n            type={User}\n            options={options}\n          \u002F\u003E\n          \u003CButton title=\"Save\" onPress={handleSubmit} \u002F\u003E\n        \u003C\u002FScrollView\u003E\n      \u003C\u002FSafeAreaView\u003E\n    \u003C\u002F\u003E\n  );\n};\nconst styles = StyleSheet.create({\n  addProductView: {\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    paddingTop: 15,\n    height: 'auto',\n  },\n});\nexport default AddProductScreen;\n```\n\nTry running your app, you should see a form just like this.\n\nLet‚Äôs inspect our code.\n\nYou can see that, I didn't use any `textInputs`. I just defined our fields using `t.struct` and only since the description is a multiple `textInput`, we need to pass in extra options.\n\nIn our `handleSubmit` function, we are saving entered details in the database. Paste in the following code inside our `handleSubmit` function. Don‚Äôt forget the imports.\n\n```\nimport { Auth, API, graphqlOperation} from 'aws-amplify';\nimport {createProduct} from '..\u002F..\u002Fgraphql\u002Fmutations';\n\ntry {\n      const value = await form.getValue();\n      const user = await Auth.currentAuthenticatedUser();\nconst response = await API.graphql(\n        graphqlOperation(createProduct, {\n          input: {\n            name: value.name,\n            price: value.price.toFixed(2),\n            description: value.description,\n            userId: user.attributes.sub,\n            userName: user.username,\n          },\n        }),\n      );\n      console.log('Response :\\n');\n      console.log(response);\n    } catch (e) {\n      console.log(e.message);\n    }\n```\n\n`Auth.currentAuthenticatedUser()` will do exactly what the name suggests. It will return details about the logged-in user. Cognito gives every user an attribute called `sub`, a unique string value. We will save that as the userId assigned to a product. Username will showcase the product owner.\n\nThe `createProduct` mutation was generated automatically. Here we are referring to that mutation, which was defined in `graphql\u002Fmutations.js` file.\n\nNow, after running the app and saving a product, you should see a console.log of the response. You could also query in the AWS AppSync Console.\n\n# 05. Adding S3 Storage\n\nNow by far, users can save product details. We should also add an extra option to upload a product image. We will need an S3 Bucket to store product images. Working with S3 really gets easier with Amplify. Let me show you.\n\nBefore that, install the [React Native image picker library](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002Freact-native-image-picker). \n\n```\nnpm install react-native-image-picker\n```\n    \n\u003E    RN \u003E= 0.60\n    cd ios && pod install\n    \n\u003E    RN \u003C 0.60\n    react-native link react-native-image-picker\n\nFor now, this image picker library will support only 21 or newer SDK Versions. So edit **minSDK version** in ***android\u002Fbuild.gradle*** file.\n\n  \u003E  buildToolsVersion = \"29.0.2\"\n    **minSdkVersion = 21**\n    compileSdkVersion = 29\n    targetSdkVersion = 29\n\n## Executing ‚Äòamplify add storage‚Äô\n\nRun,\n\n```\namplify add storage\n```\n\nto create a new S3 Bucket. Accept the defaults in the prompt.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F9lqgpqe3nrltgwyy7oo7.png\"\u003E\n  \u003Cfigcaption\u003ERunning 'amplify add storage'\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nRun `amplify push`, to deploy your changes.\n\n## Updating the Form\n\nLet‚Äôs add image uploading and previewing options into our form. I build a fancy ImageUploader Component with an image preview. Make sure to add that by making a new `components` directory in the `src` folder.\n\n***directory: src\u002Fcomponents\u002FImageUploader.js***\n\n```\nimport React from 'react';\nimport {View, Image, Button, StyleSheet} from 'react-native';\n\nconst ImageUploader = ({handleChoosePhoto, photo}) =\u003E {\n  return (\n    \u003CView style={styles.imageView}\u003E\n      {photo && \u003CImage source={{uri: photo.uri}} style={styles.photo} \u002F\u003E}\n      \u003CButton\n        style={styles.photoBtn}\n        title=\"Choose Photo\"\n        onPress={handleChoosePhoto}\n      \u002F\u003E\n    \u003C\u002FView\u003E\n  );\n};\n\nconst styles = StyleSheet.create({\n  imageView: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingBottom: 15,\n  },\n  photo: {\n    width: 200,\n    height: 200,\n  },\n});\n\nexport default ImageUploader;\n```\n\nIn order to use this image uploading option, we will make the following changes in our `add-product-screen.js` file.\n\nWe will add the extra ImageUploader Component inside our ScrollView Component.\n\n```\nreturn (\n  \u003C\u003E\n    \u003CSafeAreaView style={styles.addProductView}\u003E\n      \u003CScrollView\u003E\n        \u003CForm\n          ref={(c) =\u003E setForm(c)}\n          value={initialValues}\n          type={User}\n          options={options}\n        \u002F\u003E\n        \u003CImageUploader photo={photo} handleChoosePhoto={handleChoosePhoto} \u002F\u003E\n        \u003CButton title=\"Save\" onPress={handleSubmit} \u002F\u003E\n      \u003C\u002FScrollView\u003E\n    \u003C\u002FSafeAreaView\u003E\n  \u003C\u002F\u003E\n);\n```\n\nDeclare this state variable along with the new handleChoosePhoto function.\n\n```\nconst [photo, setPhoto] = useState(null);\nconst handleChoosePhoto = async () =\u003E {\n  const product = await form.getValue();\n\n  setInitialValues({\n    name: product.name,\n    price: product.price,\n    description: product.description,\n  });\n  await launchImageLibrary({}, (response) =\u003E {\n    \u002F\u002F console.log(response.data);\n    if (response.uri) {\n      console.log('Photo Extension: \\n');\n      \u002F\u002F console.log(response);\n      setPhoto(response);\n    }\n  });\n};\n```\n\nIf we don‚Äôt set initial values, launching the image library will reset the form.\n\nDon‚Äôt forget to add these imports as well.\n\n```\nimport {launchImageLibrary} from 'react-native-image-picker'; \nimport {Storage} from 'aws-amplify';\n```\n\nYou can do a test run of the form. You should see something like this.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002F3g2gwrtxc0hrlkzzjpef.png\"\u003E\n  \u003Cfigcaption\u003EAddProduct Screen\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\nAlso, we should update our `handleSubmit` function.\n\n```\nconst handleSubmit = async () =\u003E {\n  try {\n    const value = await form.getValue();\n    console.log('value: ', value);\n    const user = await Auth.currentAuthenticatedUser();\n    if (photo) {\n      const response = await fetch(photo.uri);\n\n      const blob = await response.blob();\n      console.log('FileName: \\n');\n      await Storage.put(photo.fileName, blob, {\n        contentType: 'image\u002Fjpeg',\n      });\n    }\n    const response = await API.graphql(\n      graphqlOperation(createProduct, {\n        input: {\n          name: value.name,\n          price: value.price.toFixed(2),\n          description: value.description,\n          userId: user.attributes.sub,\n          userName: user.username,\n          image: photo.fileName,\n        },\n      }),\n    );\n    console.log('Response :\\n');\n    console.log(response);\n    navigation.navigate('Home');\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n```\n\nWe can upload an S3 Image into our bucket using `Storage.put` method, provided by AWS Amplify Library. We need our file name (image key in S3 ) to access our file again. So we will store that in our database.\n\nTry uploading a new image. Submit the form. Wait until the image uploads. You should see a console.log like this.\n\n```\n    [Sat Jan 02 2021 01:58:21.981]  LOG      Response :\n\n    [Sat Jan 02 2021 01:58:21.982]  LOG      {\"data\": {\"createProduct\": {\"createdAt\": \"2021-01-01T20:28:22.382Z\", \"description\": \"About Sahan New Product\", \"id\": \"f3188508-5ee7-4af4-acf3-3c948f61d868\", \"image\": \"6ca2947e-766b-445e-b260-0041502e652a\", \"name\": \"Sahan New Product\", \"price\": 200, \"updatedAt\": \"2021-01-01T20:28:22.382Z\", \"userId\": \"7d5fa0a3-4d26-4354-8028-7cc597a69447\", \"userName\": \"sahan\"}}}\n```\n\n# 06. Retrieving AppSync Data\n\nNow, let‚Äôs show a Product List View on our home screen. For that, I have created two new components,\n\n* ProductCard Component\n\n***directory: src\u002Fcomponents\u002FProductCard.js***\n\n```\nimport React, {useEffect, useState} from 'react';\nimport {Text, StyleSheet, View} from 'react-native';\nimport {Card, Icon, Image} from 'react-native-elements';\nimport {Storage} from 'aws-amplify';\n\nconst ProductCard = ({\n  productName,\n  productOwner,\n  productPrice,\n  productImage,\n}) =\u003E {\n  const [imageSource, setImageSource] = useState(null);\n  const getImage = async () =\u003E {\n    try {\n      const imageURL = await Storage.get(productImage);\n      setImageSource({\n        uri: imageURL,\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  useEffect(() =\u003E {\n    getImage();\n  }, []);\n  return (\n    \u003CCard containerStyle={styles.cardContainer}\u003E\n      \u003CCard.Title style={styles.cardTitle}\u003E{productName}\u003C\u002FCard.Title\u003E\n      \u003CCard.Divider \u002F\u003E\n      {imageSource && (\n        \u003CImage source={imageSource} style={styles.productImage} \u002F\u003E\n      )}\n      {!imageSource && (\n        \u003CView style={styles.altView}\u003E\n          \u003CText\u003EProduct Image\u003C\u002FText\u003E\n        \u003C\u002FView\u003E\n      )}\n      \u003CText style={styles.productPrice}\u003E{productPrice}$\u003C\u002FText\u003E\n      \u003CView style={styles.ownerTitle}\u003E\n        \u003CIcon name=\"person-pin\" \u002F\u003E\n        \u003CText style={styles.productOwner}\u003E{productOwner}\u003C\u002FText\u003E\n      \u003C\u002FView\u003E\n    \u003C\u002FCard\u003E\n  );\n};\nconst styles = StyleSheet.create({\n  cardContainer: {\n    marginBottom: 20,\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n\n    elevation: 5,\n  },\n  productImage: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n  },\n  productPrice: {\n    marginTop: 10,\n    marginBottom: 10,\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n  altView: {\n    width: 200,\n    height: 200,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n  },\n  cardTitle: {\n    fontSize: 20,\n  },\n  productOwner: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    alignSelf: 'center',\n  },\n  ownerTitle: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'flex-end',\n  },\n});\nexport default ProductCard;\n```\n\n* ProductList Component\n\n***directory: src\u002Fcomponents\u002FProductList.js***\n\n```\nimport React from 'react';\nimport {View, Text, FlatList, StyleSheet, RefreshControl} from 'react-native';\n\nimport ProductCard from '.\u002FProductCard';\n\nconst ProductList = ({productList, refreshing, onRefresh}) =\u003E {\n  return (\n    \u003CView style={styles.productsView}\u003E\n      {productList && (\n        \u003CFlatList\n          style={styles.productList}\n          refreshControl={\n            \u003CRefreshControl refreshing={refreshing} onRefresh={onRefresh} \u002F\u003E\n          }\n          keyExtractor={(item) =\u003E item.id}\n          data={productList}\n          renderItem={({item}) =\u003E {\n            return (\n              \u003CProductCard\n                productName={item.name}\n                productImage={item.image}\n                productOwner={item.userName}\n                productPrice={item.price}\n              \u002F\u003E\n            );\n          }}\n        \u002F\u003E\n      )}\n    \u003C\u002FView\u003E\n  );\n};\n\nconst styles = StyleSheet.create({\n  itemText: {\n    fontSize: 15,\n  },\n  productText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    alignSelf: 'center',\n  },\n  productsView: {\n    padding: 0,\n    margin: 0,\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  productList: {\n    padding: 5,\n    marginBottom: 20,\n  },\n});\nexport default ProductList;\n```\n\nNow, let‚Äôs use this ProductList Component in the Home Screen. Replace the current sample code with the following code.\n\n***directory: src\u002Fscreens\u002Fhome-screen.js***\n\n```\nimport React, {useEffect, useState} from 'react';\nimport {API} from 'aws-amplify';\nimport {SafeAreaView, StatusBar, TouchableOpacity} from 'react-native';\n\nimport {listProducts} from '..\u002F..\u002Fgraphql\u002Fqueries';\nimport ProductList from '..\u002Fcomponents\u002FProductList';\nconst HomeScreen = (props) =\u003E {\n  const [productsList, setProducts] = useState([]);\n  const [refreshing, setRefreshing] = useState(false);\n\n  const fetchProducts = async () =\u003E {\n    try {\n      const products = await API.graphql({query: listProducts});\n      if (products.data.listProducts) {\n        console.log('Products: \\n');\n        console.log(products);\n        setProducts(products.data.listProducts.items);\n      }\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n  useEffect(() =\u003E {\n    fetchProducts();\n  }, []);\n\n  const onRefresh = async () =\u003E {\n    setRefreshing(true);\n    await fetchProducts();\n    setRefreshing(false);\n  };\n  return (\n    \u003C\u003E\n      \u003CStatusBar barStyle=\"dark-content\" \u002F\u003E\n      \u003CSafeAreaView\u003E\n        {productsList && (\n          \u003CProductList\n            productList={productsList}\n            refreshing={refreshing}\n            onRefresh={onRefresh}\n          \u002F\u003E\n        )}\n      \u003C\u002FSafeAreaView\u003E\n    \u003C\u002F\u003E\n  );\n};\n\nexport default HomeScreen;\n```\n\nIn the useEffect hook of our Home Screen, we are fetching all products. This time, we are running a GraphQL query `listProducts`, which will be defined automatically in the `graphql\u002Fqueries.js` file.\n\nWe are passing those fetched products, into our ProductList Component. ProductList Component will render a ProductCard for each product.\n\nIn PtoductCard Component, when we pass in the image filename to `Storage.get` function, we will get the full image URL. \n\nTry running your app, you should now see your product list.\n\n\u003Cfigure\u003E\n  \u003Cimg src=\"https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwtxi2skgh2z54dy63mxz.png\"\u003E\n  \u003Cfigcaption\u003EHome Screen\u003C\u002Ffigcaption\u003E\n\u003C\u002Ffigure\u003E\n\n# 07. Conclusion\n\nWith that, we were able to complete all our functionalities successfully. How about letting users order products? I will save that for you to try on üòÉ.\n\nCongratulations on Completing the Tutorial! üéâ\n\nIf we recap on what we have done,\n\n1. We added Cognito Authentication to let users log-in or sign-up to our app.\n\n2. Additionally, we included Navigation and Sign-out options.\n\n3. We created the AppSync GraphQL API, and we saved some product details in our Database.\n\n4. We created S3 Bucket to let users upload an image to each product.\n\n5. At the Home Screen, we were able to show a product ListView to the user.\n\nI think now you have a good understanding of working with these different AWS resources in your ReactNative Apps.\n\nI hope you have completed all the steps without running into any issues. However, if you do, you can ask anything in the comments section below.\n\nVideo Walkthrough related to this BlogPost:\n\n***Aws Amplify and React Native Crash Course***\n\n{% youtube NqYQ0Muwf3c %}";b.user={name:"Sahan Amarsha",username:f,twitter_username:f,github_username:"SahanAmarsha",website_url:"https:\u002F\u002Fiamsahan.web.app\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mzdKhCPA--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F369483\u002F6e77d5d8-405d-417f-849f-7c873de0b5b7.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--sO9o75Qb--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F369483\u002F6e77d5d8-405d-417f-849f-7c873de0b5b7.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:b}},mutations:[["SET_CURRENT_ARTICLE",b]]}}(null,{},"https:\u002F\u002Fdev.to\u002Fdev_sahan\u002Fcomplete-guide-to-aws-amplify-and-react-native-4on5",38,"2021-01-22T20:57:24Z","dev_sahan")));
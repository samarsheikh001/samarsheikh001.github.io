window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:512923,title:"Code-efficient Theming and  Coloring in CSS thanks to an OOP-inspired pattern",description:"I'd like to introduce a pattern for writing CSS I've been using in production for almost a year now t...",readable_publish_date:"Nov 12 '20",slug:"theming-and-coloring-finally-made-efficient-in-css-thanks-to-an-oop-inspired-pattern-27ca",path:"\u002Fdrno\u002Ftheming-and-coloring-finally-made-efficient-in-css-thanks-to-an-oop-inspired-pattern-27ca",url:b,comments_count:2,public_reactions_count:c,collection_id:9674,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rhXRekus--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fe5lthdkd5qx7gz48cz00.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--8m3u8v7g--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fe5lthdkd5qx7gz48cz00.png",canonical_url:b,created_at:"2020-11-12T10:57:22Z",edited_at:"2020-11-13T23:57:53Z",crossposted_at:a,published_at:d,last_comment_at:"2021-02-08T23:54:29Z",reading_time_minutes:7,tag_list:"css, html, webdev, scss",tags:["css","html","webdev","scss"],body_html:"\u003Cp\u003E\u003Cstrong\u003EI'd like to introduce a pattern for writing CSS\u003C\u002Fstrong\u003E I've been using in production for almost a year now \u003Cstrong\u003Ethat aims at solving the hassle of theming and coloring in CSS.\u003C\u002Fstrong\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis pattern helped me reduce by 60-90% the size of my CSS code related to coloring and theming compared to libraries like Bootstrap or Semantic.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWarning : If you're a beginner, you might find this too abstract, so I advise you to read what follows only if you have already a bit of experience doing front-end design. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"introduction-context-and-pattern-requirements\" href=\"#introduction-context-and-pattern-requirements\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction : context and pattern requirements\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo introduce a bit what comes next, here are a few words about my view on front-end design. I've been web-designing since 1999 (starting with the infamous Microsoft Front-Page). I have written quantities of front-end code, for platforms and frameworks like Dotclear, Wordpress, Drupal, making full-fledged Django applications, React, while I still enjoy writing static sites and pure HTML+CSS. I am confortable saying I am quite familiar with not only the DOM syntax, but also with the \u003Cem\u003EDOM rationale and philosphy\u003C\u002Fem\u003E, which is my opinion amounts to kepping the three languages (HTML \u002F CSS \u002F JS) separated by function. As for CSS (the topic of the day), CSS should be as much as possible the only language to take care of styling. HTML shouldnt take care of CSS (avoid using \u003Ccode\u003Estyle\u003C\u002Fcode\u003E property), JS shouldnt take care of CSS (avoid using CSS-in-JS, CSS modules, or setting properties in JS). Nevertheless these languages can be \u003Cem\u003Einterfaced\u003C\u002Fem\u003E, namely (in a simplified way) HTML interfaces with CSS using \u003Cem\u003Eclasses\u003C\u002Fem\u003E and \u003Cem\u003Eids\u003C\u002Fem\u003E, and JS can interface with CSS setting \u003Cem\u003Eclasses\u003C\u002Fem\u003E and \u003Cem\u003Eids\u003C\u002Fem\u003E dynamically. Of course, there may be some exceptions to doing front-end this way, but it's a philosophy I like to stick to as much as I can, it makes my code clean, predicable and maintainable.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELet's get back to our problem. \u003Cstrong\u003EI wanted to expose a theming and coloring CSS library that fullfiled the following requirements :\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EHaving a large color palette\u003C\u002Fstrong\u003E that encompasses the color wheel (red, blue, pink ... green), monochrome shades (grey, black, white ...), social network shades (instagram, twitter, google), modal shades (success, error, warning)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EStoring the colors in variables, whether using preprocessor variables (SCSS)\u003C\u002Fstrong\u003E or \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FCSS\u002FUsing_CSS_custom_properties\"\u003Enative CSS variables\u003C\u002Fa\u003E (aka \"CSS custom properties\", also sometimes wrongly called \"CSS4 variables\"). So these can be customized by compiling a custom version of the library.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EThe CSS color API doesn't need to know anything at all about all the other parts of my front-end.\u003C\u002Fstrong\u003E In other words, the CSS must completely be framework-agnostic (so to avoid being locked down in a way of doing things, like styled components or bootstrap.) \u003C\u002Fli\u003E\n\u003Cli\u003EAlso, \u003Cstrong\u003Ethe CSS color API must be provided separately from any components or html code\u003C\u002Fstrong\u003E. Again, this means the color API cannot know anything about the rest of the front-end framework. \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EDoing all of this in a way that respects the DOM philosphy\u003C\u002Fstrong\u003E (C in CSS means cascading, so no CSS modules or weird \u003Ca href=\"https:\u002F\u002Fgomakethings.com\u002Fwhats-wrong-with-css-in-js\u002F\"\u003ECSS-in-JS naive reinterpretations of what CSS should be\u003C\u002Fa\u003E). I just want to import a CSS file into my HTML and leverage the color API out of the box. But I also want to be able to include it in more complex React applications, for instance, and leverage it when designing components.\u003C\u002Fli\u003E\n\u003Cli\u003ELast but not least : I would consider being successful in designing such a CSS library if \u003Cstrong\u003EI manage to reduce the quantity of code necessary\u003C\u002Fstrong\u003E to color components using it \u003Cstrong\u003Efrom polynomial\u003C\u002Fstrong\u003E to \u003Cstrong\u003Elinear\u003C\u002Fstrong\u003E. Yes, because traditional component libraries such as Bootstrap, Semantic, Material-UI, even Tailwind CSS, encourage you to write \"one class per color per component\". Instead, \u003Cstrong\u003EI'd like to have only \"one class per component\", meaning CSS component classes must be able to understand any color.\u003C\u002Fstrong\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EBonus : Making this color API expose custom themes, like a dark theme.\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"what-we-want-to-avoid-writing-a-polynomial-number-of-classes-to-style-components-per-color\" href=\"#what-we-want-to-avoid-writing-a-polynomial-number-of-classes-to-style-components-per-color\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  What we want to avoid : writing a polynomial number of classes to style components per color\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's look at how Bootstrap works. This is very illustrative of the mainstream way of doing component coloring and theming, and libraries like Semantic-UI and Tailwind offer a similar syntax for classes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf we look the styling of a button in the bootstrap source we have\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant($value);\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftwbs\u002Fbootstrap\u002Fblob\u002Fmain\u002Fscss\u002F_buttons.scss\"\u003E\u003Ccode\u003E(bootstrap\u002Fscss\u002F_buttons.scss)\u003C\u002Fcode\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHere, in theory the SCSS is quite neat. The code is readable and understandable. You can see that we loop through a hash of colors and define \u003Cstrong\u003Eone class per color\u003C\u002Fstrong\u003E. The problem is with the compiled output.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis way of writing classes is actually \u003Cstrong\u003Every unefficient\u003C\u002Fstrong\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhy ?\u003C\u002Fp\u003E\n\n\u003Cp\u003EBecause this makes us compile to a polynomial quantity of code :\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EIf we have a number \u003Ccode\u003Ei\u003C\u002Fcode\u003E of colors (red, green, blue, yellow ...)\u003C\u002Fli\u003E\n\u003Cli\u003Eand a number \u003Ccode\u003En\u003C\u002Fcode\u003E of components (button, card, modal, ...)\nWe would end up having \u003Cstrong\u003E\u003Ccode\u003Ei * n\u003C\u002Fcode\u003E CSS classes\u003C\u002Fstrong\u003E. (\u003Ccode\u003ENumber of colors\u003C\u002Fcode\u003E times \u003Ccode\u003Enumber of components\u003C\u002Fcode\u003E). If we increase one or the other, this has a polynomial (&gt; linear) effect on the size of the compiled output. This will make your CSS files huge, with all the issues that come with it (increased page loading time, browser unable to pick up what's really important to render, not to mention hard to read compiled output for debugging).\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"a-codeefficient-pattern-for-coloring-inspired-by-oop-using-css-variables\" href=\"#a-codeefficient-pattern-for-coloring-inspired-by-oop-using-css-variables\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  A code-efficient pattern for coloring, inspired by OOP, using CSS variables\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's take a look at what \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FCSS\u002FUsing_CSS_custom_properties\"\u003ECSS variables\u003C\u002Fa\u003E can do for us. For the sake of example simplicity, we'll say we have 3 colors : red, blue and yellow.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"first-lets-store-the-colors-in-css-variables\" href=\"#first-lets-store-the-colors-in-css-variables\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  First, let's store the colors in CSS variables\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWe store the variables according to the spec the colors in the root HTML element. Namely :\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E:root {\n  --red:#DF2F00;\n  --yellow:#FFDA22;\n  --blue:#89A6FB;\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003E(main.css\u002Fmain.scss)\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf we're using a preprocessor, we could have something like this to make it a bit more maintainable\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E$colors:(\n  \"red\":#DF2F00;\n  \"yellow\":#FFDA22;\n  \"blue\":#89A6FB;\n)!default;\n\n@mixin define-root-variables {\n  :root{\n   @each $color, $value in $colors{\n     --#{$color}:#{$value};\n   }\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen, if we don't look to improve on having the polynomial number of classes, we would write component classes like this \u003C\u002Fp\u003E\n\n\u003Cp\u003E(I'm just adapting the bootstrap code, don't do this at home kids!)\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant(var(--#{$color})); \u002F\u002FWe don't need to provide the value anymore because the CSS var takes care of it !\n  }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAt the moment, this doesn't seem like a huge improvement and it is not ! ... but wait, the magic has yet to come. We're almost there.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"introducing-setters-and-getter-classes\" href=\"#introducing-setters-and-getter-classes\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Introducing Setters and Getter classes\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETaking inspiration from the world of Object-Oriented Programming, we create helper classes which we call \u003Cem\u003Esetters\u003C\u002Fem\u003E and \u003Cem\u003Egetters\u003C\u002Fem\u003E, that set and read a local variable. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESetters set \u003Ccode\u003E:root\u003C\u002Fcode\u003E variables to an intermediate variable that we call (at the moment, in a bit verbose way) \u003Ccode\u003E--current-color\u003C\u002Fcode\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EGetters consume the locally set \u003Ccode\u003E--current-color\u003C\u002Fcode\u003E to apply it to an element in a particular way.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAn example is worth a thousand words :\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ciframe height=\"600\" src=\"https:\u002F\u002Fcodepen.io\u002Fdr-no\u002Fembed\u002FVwjqMjb?height=600&amp;default-tab=css,result&amp;embed-version=2\" scrolling=\"no\" frameborder=\"no\" allowtransparency=\"true\" loading=\"lazy\" style=\"width: 100%;\"\u003E\n\u003C\u002Fiframe\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAs you can see, with this approach :\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EWe only have to create one class per 'use-case', in the example we provided three (text color, background color, and a transparent button). This class is compatible with all the colors.\u003C\u002Fli\u003E\n\u003Cli\u003ESubsequently, the theming of html block or components only requires, for \u003Ccode\u003En\u003C\u002Fcode\u003E components and \u003Ccode\u003Ei\u003C\u002Fcode\u003E colors : \n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003Ei\u003C\u002Fcode\u003E classes for the color setters\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003En\u003C\u002Fcode\u003E classes for the components\u003C\u002Fli\u003E\n\u003Cli\u003E= \u003Cstrong\u003E\u003Ccode\u003En+i\u003C\u002Fcode\u003E classes\u003C\u002Fstrong\u003E which is linear.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ELet's take a second to realize the code savings:\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFor 5 colors (\u003Ccode\u003Ei=5\u003C\u002Fcode\u003E) and 10 components (\u003Ccode\u003En=10\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E, the \"classic\" approach would imply the creation of \u003Ccode\u003Ei*n = 5 * 10 = 50\u003C\u002Fcode\u003E CSS classes, whereas the Setter\u002FGetter pattern would only create \u003Ccode\u003Ei + n = 5 + 10 = 15\u003C\u002Fcode\u003E. This is a \u003Cstrong\u003E70% reduction\u003C\u002Fstrong\u003E in the number of CSS classes needed.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFor 10 colors (\u003Ccode\u003Ei=10\u003C\u002Fcode\u003E) and 20 components (\u003Ccode\u003En=20\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E, the \"classic\" approach would imply the creation of \u003Ccode\u003Ei*n = 10 * 20 = 200\u003C\u002Fcode\u003E CSS classes, whereas the Setter\u002FGetter pattern would only create \u003Ccode\u003Ei + n = 10 + 20 = 30\u003C\u002Fcode\u003E. This is a \u003Cstrong\u003E85% reduction\u003C\u002Fstrong\u003E in the number of CSS classes needed.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFor 15 colors (\u003Ccode\u003Ei=15\u003C\u002Fcode\u003E) and 100 components (\u003Ccode\u003En=100\u003C\u002Fcode\u003E)\u003C\u002Fstrong\u003E, the \"classic\" approach would imply the creation of \u003Ccode\u003Ei*n = 15 * 100 = 1500\u003C\u002Fcode\u003E CSS classes, whereas the Setter\u002FGetter pattern would only create \u003Ccode\u003Ei + n = 15 + 100 = 115\u003C\u002Fcode\u003E. This is a \u003Cstrong\u003E93% reduction\u003C\u002Fstrong\u003E in the number of CSS classes needed.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EA few limitations of this approach (at this point, as we will solve most of them in the part 2) :\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EThe CSS classes used above as \u003Cem\u003Esetters\u003C\u002Fem\u003E are quite verbose (\u003Ccode\u003E.current-color-red\u003C\u002Fcode\u003E), this can be improved before using this in production\u003C\u002Fli\u003E\n\u003Cli\u003EIf we wish to have more complex color interactions, such as changing color shade\u002Ftint on hover, or contrasting the text automatically, we need a slightly more complex pattern, but it's completely feasible in a linear number of classes as well. Look at the second part of the article for how to do this.\u003C\u002Fli\u003E\n\u003Cli\u003EThe CSS vars are only compatible with 95%+ of browsers. This will not make it in IE11.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBy using an intermediate class we call \u003Cem\u003Esetter\u003C\u002Fem\u003E, that acts in between the component class (\u003Cem\u003Egetter\u003C\u002Fem\u003E) and the \u003Ccode\u003E:root\u003C\u002Fcode\u003E CSS variables, we are able to reduce the quantity of CSS classes needed to style components from a polynomial number to a linear number.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI write this hoping to give you some inspiration on how to improve your theming and coloring game. IMHO this is long overdue in 2020 ! \u003C\u002Fp\u003E\n\n\u003Cp\u003EIf this helped you, I invite you to look at Swatch (\u003Ca href=\"https:\u002F\u002Fswatch.dev\"\u003Edocs\u003C\u002Fa\u003E | \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ffwrlines\u002Fswatch\"\u003Egithub\u003C\u002Fa\u003E ), a library that exposes this pattern in CSS with more than 80 colors. And it's only 2.5KB gzipped. If you like it, a star on github would warm our heart !\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"in-the-part-2-of-the-article-coming-soon\" href=\"#in-the-part-2-of-the-article-coming-soon\" class=\"anchor\"\u003E\n  \u003C\u002Fa\u003E\n  In the part 2 of the article (coming soon)\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EI will introduce the CSS library Swatch (\u003Ca href=\"https:\u002F\u002Fswatch.dev\"\u003Edocs\u003C\u002Fa\u003E | \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ffwrlines\u002Fswatch\"\u003Egithub\u003C\u002Fa\u003E ), that exposes a coloring API based on the previous pattern. We will take a look at how to use it in just a few minutes :)\u003C\u002Fli\u003E\n\u003Cli\u003EWe will see how to use this pattern with Swatches of colors (dark, normal, light, contrast), to make coloring more complex, interesting and interactive\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThank you for reading !\u003C\u002Fp\u003E\n\n",body_markdown:"**I'd like to introduce a pattern for writing CSS** I've been using in production for almost a year now **that aims at solving the hassle of theming and coloring in CSS.** \n\nThis pattern helped me reduce by 60-90% the size of my CSS code related to coloring and theming compared to libraries like Bootstrap or Semantic.\n\nWarning : If you're a beginner, you might find this too abstract, so I advise you to read what follows only if you have already a bit of experience doing front-end design. \n\n## Introduction : context and pattern requirements\n\nTo introduce a bit what comes next, here are a few words about my view on front-end design. I've been web-designing since 1999 (starting with the infamous Microsoft Front-Page). I have written quantities of front-end code, for platforms and frameworks like Dotclear, Wordpress, Drupal, making full-fledged Django applications, React, while I still enjoy writing static sites and pure HTML+CSS. I am confortable saying I am quite familiar with not only the DOM syntax, but also with the _DOM rationale and philosphy_, which is my opinion amounts to kepping the three languages (HTML \u002F CSS \u002F JS) separated by function. As for CSS (the topic of the day), CSS should be as much as possible the only language to take care of styling. HTML shouldnt take care of CSS (avoid using `style` property), JS shouldnt take care of CSS (avoid using CSS-in-JS, CSS modules, or setting properties in JS). Nevertheless these languages can be _interfaced_, namely (in a simplified way) HTML interfaces with CSS using _classes_ and _ids_, and JS can interface with CSS setting _classes_ and _ids_ dynamically. Of course, there may be some exceptions to doing front-end this way, but it's a philosophy I like to stick to as much as I can, it makes my code clean, predicable and maintainable.\n\nLet's get back to our problem. **I wanted to expose a theming and coloring CSS library that fullfiled the following requirements :**\n\n+ **Having a large color palette** that encompasses the color wheel (red, blue, pink ... green), monochrome shades (grey, black, white ...), social network shades (instagram, twitter, google), modal shades (success, error, warning)\n+ **Storing the colors in variables, whether using preprocessor variables (SCSS)** or [native CSS variables](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FCSS\u002FUsing_CSS_custom_properties) (aka \"CSS custom properties\", also sometimes wrongly called \"CSS4 variables\"). So these can be customized by compiling a custom version of the library.\n+ **The CSS color API doesn't need to know anything at all about all the other parts of my front-end.** In other words, the CSS must completely be framework-agnostic (so to avoid being locked down in a way of doing things, like styled components or bootstrap.) \n+ Also, **the CSS color API must be provided separately from any components or html code**. Again, this means the color API cannot know anything about the rest of the front-end framework. \n+ **Doing all of this in a way that respects the DOM philosphy** (C in CSS means cascading, so no CSS modules or weird [CSS-in-JS naive reinterpretations of what CSS should be](https:\u002F\u002Fgomakethings.com\u002Fwhats-wrong-with-css-in-js\u002F)). I just want to import a CSS file into my HTML and leverage the color API out of the box. But I also want to be able to include it in more complex React applications, for instance, and leverage it when designing components.\n+ Last but not least : I would consider being successful in designing such a CSS library if **I manage to reduce the quantity of code necessary** to color components using it **from polynomial** to **linear**. Yes, because traditional component libraries such as Bootstrap, Semantic, Material-UI, even Tailwind CSS, encourage you to write \"one class per color per component\". Instead, **I'd like to have only \"one class per component\", meaning CSS component classes must be able to understand any color.**\n+ **Bonus : Making this color API expose custom themes, like a dark theme.**\n\n## What we want to avoid : writing a polynomial number of classes to style components per color\n\nLet's look at how Bootstrap works. This is very illustrative of the mainstream way of doing component coloring and theming, and libraries like Semantic-UI and Tailwind offer a similar syntax for classes.\n\nIf we look the styling of a button in the bootstrap source we have \n```\n@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant($value);\n  }\n}\n```\n[`(bootstrap\u002Fscss\u002F_buttons.scss)`](https:\u002F\u002Fgithub.com\u002Ftwbs\u002Fbootstrap\u002Fblob\u002Fmain\u002Fscss\u002F_buttons.scss)\n\nHere, in theory the SCSS is quite neat. The code is readable and understandable. You can see that we loop through a hash of colors and define **one class per color**. The problem is with the compiled output.\n\nThis way of writing classes is actually **very unefficient**. \n\nWhy ?\n\nBecause this makes us compile to a polynomial quantity of code :\n+ If we have a number `i` of colors (red, green, blue, yellow ...)\n+ and a number `n` of components (button, card, modal, ...)\nWe would end up having **`i * n` CSS classes**. (`Number of colors` times `number of components`). If we increase one or the other, this has a polynomial (\u003E linear) effect on the size of the compiled output. This will make your CSS files huge, with all the issues that come with it (increased page loading time, browser unable to pick up what's really important to render, not to mention hard to read compiled output for debugging).\n\n## A code-efficient pattern for coloring, inspired by OOP, using CSS variables\n\nLet's take a look at what [CSS variables](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FCSS\u002FUsing_CSS_custom_properties) can do for us. For the sake of example simplicity, we'll say we have 3 colors : red, blue and yellow.\n\n### First, let's store the colors in CSS variables\n\nWe store the variables according to the spec the colors in the root HTML element. Namely :\n\n```\n:root {\n  --red:#DF2F00;\n  --yellow:#FFDA22;\n  --blue:#89A6FB;\n}\n```\n`(main.css\u002Fmain.scss)`\n\nIf we're using a preprocessor, we could have something like this to make it a bit more maintainable\n\n```\n$colors:(\n  \"red\":#DF2F00;\n  \"yellow\":#FFDA22;\n  \"blue\":#89A6FB;\n)!default;\n\n@mixin define-root-variables {\n  :root{\n   @each $color, $value in $colors{\n     --#{$color}:#{$value};\n   }\n  }\n}\n```\nThen, if we don't look to improve on having the polynomial number of classes, we would write component classes like this \n\n(I'm just adapting the bootstrap code, don't do this at home kids!)\n```\n@each $color, $value in $theme-colors {\n  .btn-#{$color} {\n    @include button-variant(var(--#{$color})); \u002F\u002FWe don't need to provide the value anymore because the CSS var takes care of it !\n  }\n}\n```\n\nAt the moment, this doesn't seem like a huge improvement and it is not ! ... but wait, the magic has yet to come. We're almost there.\n\n### Introducing Setters and Getter classes\n\nTaking inspiration from the world of Object-Oriented Programming, we create helper classes which we call _setters_ and _getters_, that set and read a local variable. \n\nSetters set `:root` variables to an intermediate variable that we call (at the moment, in a bit verbose way) `--current-color`. \n\nGetters consume the locally set `--current-color` to apply it to an element in a particular way.\n\nAn example is worth a thousand words :\n\n{% codepen https:\u002F\u002Fcodepen.io\u002Fdr-no\u002Fpen\u002FVwjqMjb default-tab=css,result %}\n\n**As you can see, with this approach :**\n+ We only have to create one class per 'use-case', in the example we provided three (text color, background color, and a transparent button). This class is compatible with all the colors.\n+ Subsequently, the theming of html block or components only requires, for `n` components and `i` colors : \n  + `i` classes for the color setters\n  + `n` classes for the components\n  + = **`n+i` classes** which is linear.\n\n**Let's take a second to realize the code savings:**\n+ **For 5 colors (`i=5`) and 10 components (`n=10`)**, the \"classic\" approach would imply the creation of `i*n = 5 * 10 = 50` CSS classes, whereas the Setter\u002FGetter pattern would only create `i + n = 5 + 10 = 15`. This is a **70% reduction** in the number of CSS classes needed.\n+ **For 10 colors (`i=10`) and 20 components (`n=20`)**, the \"classic\" approach would imply the creation of `i*n = 10 * 20 = 200` CSS classes, whereas the Setter\u002FGetter pattern would only create `i + n = 10 + 20 = 30`. This is a **85% reduction** in the number of CSS classes needed.\n+ **For 15 colors (`i=15`) and 100 components (`n=100`)**, the \"classic\" approach would imply the creation of `i*n = 15 * 100 = 1500` CSS classes, whereas the Setter\u002FGetter pattern would only create `i + n = 15 + 100 = 115`. This is a **93% reduction** in the number of CSS classes needed.\n\nA few limitations of this approach (at this point, as we will solve most of them in the part 2) :\n+ The CSS classes used above as _setters_ are quite verbose (`.current-color-red`), this can be improved before using this in production\n+ If we wish to have more complex color interactions, such as changing color shade\u002Ftint on hover, or contrasting the text automatically, we need a slightly more complex pattern, but it's completely feasible in a linear number of classes as well. Look at the second part of the article for how to do this.\n+ The CSS vars are only compatible with 95%+ of browsers. This will not make it in IE11.\n\n## Conclusion\n\nBy using an intermediate class we call _setter_, that acts in between the component class (_getter_) and the `:root` CSS variables, we are able to reduce the quantity of CSS classes needed to style components from a polynomial number to a linear number.\n\nI write this hoping to give you some inspiration on how to improve your theming and coloring game. IMHO this is long overdue in 2020 ! \n\nIf this helped you, I invite you to look at Swatch ([docs](https:\u002F\u002Fswatch.dev) | [github](https:\u002F\u002Fgithub.com\u002Ffwrlines\u002Fswatch) ), a library that exposes this pattern in CSS with more than 80 colors. And it's only 2.5KB gzipped. If you like it, a star on github would warm our heart !\n\n## In the part 2 of the article (coming soon)\n\n+ I will introduce the CSS library Swatch ([docs](https:\u002F\u002Fswatch.dev) | [github](https:\u002F\u002Fgithub.com\u002Ffwrlines\u002Fswatch) ), that exposes a coloring API based on the previous pattern. We will take a look at how to use it in just a few minutes :)\n+ We will see how to use this pattern with Swatches of colors (dark, normal, light, contrast), to make coloring more complex, interesting and interactive\n\nThank you for reading !\n\n\n\n\n\n\n\n\n",user:{name:"Dr No",username:"drno",twitter_username:a,github_username:"advl",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5kls_UtF--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F512781\u002F3480bc43-b2bd-4e5d-a805-e54b0d698a07.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HjyWWVD2--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F512781\u002F3480bc43-b2bd-4e5d-a805-e54b0d698a07.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fdrno\u002F512923",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Fdrno\u002Ftheming-and-coloring-finally-made-efficient-in-css-thanks-to-an-oop-inspired-pattern-27ca",83,"2020-11-12T14:07:58Z"));
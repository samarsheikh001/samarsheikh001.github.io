__NUXT_JSONP__("/articles/mare_milenkovic/655661", (function(a,b,c,d,e,f){c.type_of="article";c.id=655661;c.title="How do I become proficient with functional programming in Java";c.description="As a Java developer, I always look for ways to improve my coding skills. I heard about functional p...";c.readable_publish_date="Apr 5";c.slug="how-do-i-become-proficient-with-functional-programming-in-java-52pa";c.path="\u002Fmare_milenkovic\u002Fhow-do-i-become-proficient-with-functional-programming-in-java-52pa";c.url=d;c.comments_count=1;c.public_reactions_count=e;c.collection_id=a;c.published_timestamp=b;c.positive_reactions_count=e;c.cover_image=a;c.social_image="https:\u002F\u002Fdev.to\u002Fsocial_previews\u002Farticle\u002F655661.png";c.canonical_url=d;c.created_at=b;c.edited_at=a;c.crossposted_at=a;c.published_at=b;c.last_comment_at="2021-04-08T06:44:37Z";c.reading_time_minutes=4;c.tag_list="java, functional, beginners";c.tags=["java","functional","beginners"];c.body_html="\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--z4N8_Lqn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsgzmn4ha3ks4ov0f17or.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--z4N8_Lqn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsgzmn4ha3ks4ov0f17or.png\" alt=\"FP in Jav\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\nAs a Java developer, I always look for ways to improve my coding skills. I heard about functional programming (FP) back when I was a student. Then, FP was not very popular and most developers considered code written using FP to be slow. \u003C\u002Fp\u003E\n\n\u003Cp\u003ETime has changed and today FP is very popular. Some developers are considering it to be the future of how developers write code.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFP is the most useful concept that I learned in the last several years. It helped me to become a better developer. I started writing cleaner code with fewer bugs. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"here-are-the-immediate-benefits-i-got-from-fp\" href=\"#here-are-the-immediate-benefits-i-got-from-fp\"\u003E\n  \u003C\u002Fa\u003E\n  Here are the immediate benefits I got from FP:\n\u003C\u002Fh3\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EI sharpen my skills related to using Java Streams. It is much easier for me to work with Streams when I understand FP concepts. \u003C\u002Fli\u003E\n\u003Cli\u003EMy functions that follow FP concepts are easy to understand and maintain. There is no risk to using them in a concurrent environment. The reusability of those functions is much greater. \u003C\u002Fli\u003E\n\u003Cli\u003EIf you are not a fan of “if” and “for” statements, then you will like FP. It can help you write more understandable code that doesn’t include those statements. I can do more with fewer lines of code.\u003C\u002Fli\u003E\n\u003Cli\u003EThe FP is a declarative paradigm. With FP you describe what you want, rather than how to get it. This means that the code is more readable, reusable, and it is easier to maintain.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"so-how-i-started-with-functional-programming\" href=\"#so-how-i-started-with-functional-programming\"\u003E\n  \u003C\u002Fa\u003E\n  So, how I started with functional programming?\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWe can find a ton of material on the internet related to FP. I usually like to watch video material when I want to learn about a new subject.\u003C\u002Fp\u003E\n\n\u003Cp\u003EI attended an online presentation hold by Venkat Subramaniam. It was a great and inspiring presentation. The good news is that you can watch it on the following link: \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=15X0qFtBqiQ&amp;t=135s\"\u003EFunctional Programming with Java 8\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter that presentation, I gained an interest in FP, so I decided to study more about FP. I watched the Pluralsight course \u003Ca href=\"https:\u002F\u002Fwww.pluralsight.com\u002Fcourses\u002Ffunctional-programming-big-picture\"\u003EFunctional Programming: The Big Picture\u003C\u002Fa\u003E. This course helped me understand the big picture of FP and why it matters.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe next natural step was to check if there is a course that's subject is related to implementing FP concepts in Java. I found the course \u003Ca href=\"https:\u002F\u002Fwww.pluralsight.com\u002Fcourses\u002Fapplying-functional-programming-techniques-java\"\u003EApplying Functional Programming Techniques in Java\u003C\u002Fa\u003E. It is a great course. It helped me learn, understand, and apply new FP concepts in Java.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter watching those courses, I wanted to know more about Monads. They are very important in FP. Following two videos helped me understand Monads: \u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=ZhuHCtR3xq8&amp;t=14s\"\u003EBrian Beckman: Don't fear the Monad\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fyoutu.be\u002FOSuu8zBBNAA\"\u003EWhat the ƒ is a Monad?\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"learn-from-haskell\" href=\"#learn-from-haskell\"\u003E\n  \u003C\u002Fa\u003E\n  Learn from Haskell\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EI started learning Haskell. At the end of Venkat Subramaniam's presentation, I asked him if learning Haskell will help me better understand FP concepts. The answer was something like: “Not only Haskell helped me to understand FP, Haskell LEARNED ME how to write good code”. Some developers say that learning Haskell is like learning programming again from scratch. I learned great stuff from Haskell, and it was easy and fun to get started with it. \u003Ca href=\"http:\u002F\u002Flearnyouahaskell.com\u002Fchapters\"\u003ELearn You a Haskell for Great Good!\u003C\u002Fa\u003E is a great tutorial to get started with Haskell.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"learn-some-fp-language\" href=\"#learn-some-fp-language\"\u003E\n  \u003C\u002Fa\u003E\n  Learn some FP language\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EIf you don’t like Haskell, don’t worry, you can learn another FP language. You can check Kotlin, Scala, F#, Clojure, Elixir, Erlang... \u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you want to stick with JVM, then you can learn Kotlin, Scala, or Clojure. Kotlin and Scala support functional and OOP paradigms and Java developers can easily get started with them. Kotlin is a new language, Spring framework supports it, and some Java developers started switching to it. Because of those reasons, I suggest trying Kotlin.\u003C\u002Fp\u003E\n\n\u003Cp\u003EClojure is a modern Lisp variant that runs on JVM. It is useful to know that Lisp is the oldest FP language. Also, Uncle Bob is using Clojure.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"my-experience-with-functional-programming\" href=\"#my-experience-with-functional-programming\"\u003E\n  \u003C\u002Fa\u003E\n  My experience with Functional Programming\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETo get familiar with FP, I studied and applied in practice FP concepts. The most important concepts that I learned are:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EImmutability\u003C\u002Fstrong\u003E - I have as many as possible immutable objects in my codebase. This leads to fewer places where I can change the state of the program. And that leads to fewer bugs. \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EReferential transparency\u003C\u002Fstrong\u003E - I write as much as possible pure functions. Those functions are like mathematical functions. For the same input, they always have the same output.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EPure and unpure functions\u003C\u002Fstrong\u003E - before FP, I was not aware of this concept. Now, I separate pure functions from unpure. It allowed me to easier test the code and improved my code reusability.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EFunction Composition\u003C\u002Fstrong\u003E - promotes better code readability and it is easier to write code by composing functions.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ECurried Functions\u003C\u002Fstrong\u003E - brilliant concept, but it is not natural to use it in Java like in other FP languages. I don’t use them for now.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ELazy evaluation\u003C\u002Fstrong\u003E - evaluate values when they are needed. Lambdas are the way to do a lazy evaluation in Java.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EHigher-Order functions\u003C\u002Fstrong\u003E - receive other functions as parameters in existing functions. Those functions are usually utility functions.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMap, filter, reduce pattern\u003C\u002Fstrong\u003E - Java Stream API implements this pattern. \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EMonads\u003C\u002Fstrong\u003E - helped me understand how to handle unpure functions safely. \u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EOptional class\u003C\u002Fstrong\u003E - FP provides an efficient solution on how to work with nullable objects. I always return the Optional object instead of null in a method that can return null.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cstrong\u003ERailway programming\u003C\u002Fstrong\u003E - helped me understand how Stream API and Optional class works.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EUsing FP in code doesn’t prevent us, developers, from writing bad code. We still need to write unit tests, have a good understanding of our task and our codebase. We still need to apply all the best practices that we learned in the past. FP is promoting good practices and makes it easier for us developers to write good and maintainable code. \u003C\u002Fp\u003E\n\n\u003Cp\u003EI plan to further learn about FP and Java. I will continue to write posts on this subject. For updates, you can follow me on \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fmare_milenkovic\"\u003ETwitter\u003C\u002Fa\u003E or \u003Ca href=\"https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fmarko-milenkovic-48320b59\u002F\"\u003ELinkedIn\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n";c.body_markdown="![FP in Jav](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsgzmn4ha3ks4ov0f17or.png) \nAs a Java developer, I always look for ways to improve my coding skills. I heard about functional programming (FP) back when I was a student. Then, FP was not very popular and most developers considered code written using FP to be slow. \n\nTime has changed and today FP is very popular. Some developers are considering it to be the future of how developers write code.\n\nFP is the most useful concept that I learned in the last several years. It helped me to become a better developer. I started writing cleaner code with fewer bugs. \n\n###Here are the immediate benefits I got from FP:\n\n- I sharpen my skills related to using Java Streams. It is much easier for me to work with Streams when I understand FP concepts. \n- My functions that follow FP concepts are easy to understand and maintain. There is no risk to using them in a concurrent environment. The reusability of those functions is much greater. \n- If you are not a fan of “if” and “for” statements, then you will like FP. It can help you write more understandable code that doesn’t include those statements. I can do more with fewer lines of code.\n- The FP is a declarative paradigm. With FP you describe what you want, rather than how to get it. This means that the code is more readable, reusable, and it is easier to maintain.\n\n###So, how I started with functional programming?\nWe can find a ton of material on the internet related to FP. I usually like to watch video material when I want to learn about a new subject.\n\nI attended an online presentation hold by Venkat Subramaniam. It was a great and inspiring presentation. The good news is that you can watch it on the following link: [Functional Programming with Java 8](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=15X0qFtBqiQ&t=135s).\n\nAfter that presentation, I gained an interest in FP, so I decided to study more about FP. I watched the Pluralsight course [Functional Programming: The Big Picture](https:\u002F\u002Fwww.pluralsight.com\u002Fcourses\u002Ffunctional-programming-big-picture). This course helped me understand the big picture of FP and why it matters.\n\nThe next natural step was to check if there is a course that's subject is related to implementing FP concepts in Java. I found the course [Applying Functional Programming Techniques in Java](https:\u002F\u002Fwww.pluralsight.com\u002Fcourses\u002Fapplying-functional-programming-techniques-java). It is a great course. It helped me learn, understand, and apply new FP concepts in Java.\n\nAfter watching those courses, I wanted to know more about Monads. They are very important in FP. Following two videos helped me understand Monads: [Brian Beckman: Don't fear the Monad](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=ZhuHCtR3xq8&t=14s) and [What the ƒ is a Monad?](https:\u002F\u002Fyoutu.be\u002FOSuu8zBBNAA).\n\n####Learn from Haskell\nI started learning Haskell. At the end of Venkat Subramaniam's presentation, I asked him if learning Haskell will help me better understand FP concepts. The answer was something like: “Not only Haskell helped me to understand FP, Haskell LEARNED ME how to write good code”. Some developers say that learning Haskell is like learning programming again from scratch. I learned great stuff from Haskell, and it was easy and fun to get started with it. [Learn You a Haskell for Great Good!](http:\u002F\u002Flearnyouahaskell.com\u002Fchapters) is a great tutorial to get started with Haskell.\n\n\n\n####Learn some FP language\nIf you don’t like Haskell, don’t worry, you can learn another FP language. You can check Kotlin, Scala, F#, Clojure, Elixir, Erlang... \n\nIf you want to stick with JVM, then you can learn Kotlin, Scala, or Clojure. Kotlin and Scala support functional and OOP paradigms and Java developers can easily get started with them. Kotlin is a new language, Spring framework supports it, and some Java developers started switching to it. Because of those reasons, I suggest trying Kotlin.\n\nClojure is a modern Lisp variant that runs on JVM. It is useful to know that Lisp is the oldest FP language. Also, Uncle Bob is using Clojure.\n\n###My experience with Functional Programming \nTo get familiar with FP, I studied and applied in practice FP concepts. The most important concepts that I learned are:\n\n- **Immutability** - I have as many as possible immutable objects in my codebase. This leads to fewer places where I can change the state of the program. And that leads to fewer bugs. \n- **Referential transparency** - I write as much as possible pure functions. Those functions are like mathematical functions. For the same input, they always have the same output.\n- **Pure and unpure functions** - before FP, I was not aware of this concept. Now, I separate pure functions from unpure. It allowed me to easier test the code and improved my code reusability.\n- **Function Composition** - promotes better code readability and it is easier to write code by composing functions.\n- **Curried Functions** - brilliant concept, but it is not natural to use it in Java like in other FP languages. I don’t use them for now.\n- **Lazy evaluation** - evaluate values when they are needed. Lambdas are the way to do a lazy evaluation in Java.\n- **Higher-Order functions** - receive other functions as parameters in existing functions. Those functions are usually utility functions.\n- **Map, filter, reduce pattern** - Java Stream API implements this pattern. \n- **Monads** - helped me understand how to handle unpure functions safely. \n- **Optional class** - FP provides an efficient solution on how to work with nullable objects. I always return the Optional object instead of null in a method that can return null.\n- **Railway programming** - helped me understand how Stream API and Optional class works.\n\nUsing FP in code doesn’t prevent us, developers, from writing bad code. We still need to write unit tests, have a good understanding of our task and our codebase. We still need to apply all the best practices that we learned in the past. FP is promoting good practices and makes it easier for us developers to write good and maintainable code. \n\nI plan to further learn about FP and Java. I will continue to write posts on this subject. For updates, you can follow me on [Twitter](https:\u002F\u002Ftwitter.com\u002Fmare_milenkovic) or [LinkedIn](https:\u002F\u002Fwww.linkedin.com\u002Fin\u002Fmarko-milenkovic-48320b59\u002F).";c.user={name:"Marko Milenkovic",username:f,twitter_username:f,github_username:a,website_url:"https:\u002F\u002Fprofessionaldev.dev\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1X7I-3GE--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F608892\u002F2ec8aa50-a1b3-4160-9920-f3561bd8a116.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tVfu6kLI--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F608892\u002F2ec8aa50-a1b3-4160-9920-f3561bd8a116.jpg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:c}},mutations:[["SET_CURRENT_ARTICLE",c]]}}(null,"2021-04-05T13:50:19Z",{},"https:\u002F\u002Fdev.to\u002Fmare_milenkovic\u002Fhow-do-i-become-proficient-with-functional-programming-in-java-52pa",69,"mare_milenkovic")));
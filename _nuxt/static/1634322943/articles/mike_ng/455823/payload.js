__NUXT_JSONP__("/articles/mike_ng/455823", (function(a,b,c,d,e,f){a.type_of="article";a.id=455823;a.title="Best Practices for Running  Container WordPress on AWS (ECS, EFS, RDS, ELB) using CDK";a.description="Introduction   Recently I helped my friend migrate her eShop from WordPress.com to AWS. Sinc...";a.readable_publish_date="Oct 31 '20";a.slug="best-practices-for-running-wordpress-on-aws-using-cdk-aj9";a.path="\u002Faws-builders\u002Fbest-practices-for-running-wordpress-on-aws-using-cdk-aj9";a.url=b;a.comments_count=3;a.public_reactions_count=c;a.collection_id=d;a.published_timestamp=e;a.positive_reactions_count=c;a.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Sk2SV2mR--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fisx76i4lh7o13c7twd2c.png";a.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_pJgqIV5--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fisx76i4lh7o13c7twd2c.png";a.canonical_url=b;a.created_at="2020-09-14T15:11:39Z";a.edited_at="2020-12-30T14:24:27Z";a.crossposted_at=d;a.published_at=e;a.last_comment_at="2021-09-23T10:48:21Z";a.reading_time_minutes=11;a.tag_list="aws, serverless, wordpress, cdk";a.tags=["aws","serverless","wordpress","cdk"];a.body_html="\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERecently I helped my friend migrate her eShop from WordPress.com to AWS. Since her business keeps growing to a larger scale,  a third-party eCommerce hosting platform no longer fulfill her business needed. To satisfy the growing business needed, I have designed, transform, enhance, and migrated to a high availability architecture on AWS for her WordPress eCommerce business.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo reuse the infrastructure and simplify the deployment, I have used the AWS CDK. Cloud Development Kit is an open-source framework to define the infrastructure as code using familiar programming languages. I have written the infrastructure using Typescript, and after the CDK is compiled, a CloudFormation template will be generated and deployed on AWS.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fcdk\u002F\"\u003EAWS CDK\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EDuring the migration, I find out there aren't many documents or information about hosting WordPress on AWS, that why I written this blog post.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003EIn this post, I won't explain so much about what those AWS services usage and benefit, and only talk about the reason I use it and how I configure it. This blog post is more like the extension of the \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Ftw\u002Fblogs\u002Farchitecture\u002Fwordpress-best-practices-on-aws\u002F\"\u003EWordPress: Best Practices on AWS\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iK4mk-h1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fd2908q01vomqb2.cloudfront.net\u002Ffc074d501302eb2b93e2554793fcaf50b3bf7291\u002F2018\u002F03\u002F23\u002Fwordpress-on-aws.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iK4mk-h1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fd2908q01vomqb2.cloudfront.net\u002Ffc074d501302eb2b93e2554793fcaf50b3bf7291\u002F2018\u002F03\u002F23\u002Fwordpress-on-aws.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAWS has provided the Best Practice document \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Ftw\u002Fblogs\u002Farchitecture\u002Fwordpress-best-practices-on-aws\u002F\"\u003EWordPress: Best Practices on AWS\u003C\u002Fa\u003E. After I read the document, I find out it still has a lot of room for improvement, it also doesn't take care much of the security of the WordPress application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOther than that, there are some interesting ideas I have implement in this solution. Like:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EHow to secure the admin page(wp-admin)?\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EHow to ensure your internet-facing application load balancer only allow traffic from CloudFront?\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003Chr\u003E\n\n\u003Cp\u003E❗❗❗\u003Cstrong\u003EPlease ensure you have read through the Best Practice document before reading down.\u003C\u002Fstrong\u003E❗❗❗\u003C\u002Fp\u003E\n\n\u003Cp\u003E❗❗❗\u003Cstrong\u003EAlso please ensure you have the basic knowledge of AWS cloud or any other cloud providers.\u003C\u002Fstrong\u003E❗❗❗\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"architecture\" href=\"#architecture\"\u003E\n  \u003C\u002Fa\u003E\n  Architecture\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dLODdTCY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fniqpcxkepv6aio914jul.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--dLODdTCY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fniqpcxkepv6aio914jul.png\" alt=\"Architecture Diagram\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EBasically, the architecture can split it into multiple pillars:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003ECompute\u003C\u002Fli\u003E\n\u003Cli\u003EStorage\u003C\u002Fli\u003E\n\u003Cli\u003EDatabase\u003C\u002Fli\u003E\n\u003Cli\u003ECache\u003C\u002Fli\u003E\n\u003Cli\u003ECDN\u003C\u002Fli\u003E\n\u003Cli\u003EDNS\u003C\u002Fli\u003E\n\u003Cli\u003ESecurity\u003C\u002Fli\u003E\n\u003Cli\u003EBackup\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"compute\" href=\"#compute\"\u003E\n  \u003C\u002Fa\u003E\n  Compute\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAccording to the best practice document, it used EC2 for hosting. But I choose to containerize the WordPress application because Docker runs above OS, which means the container is much lighter than an EC2 instance, also the startup speed is faster and uses much less memory.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor running a containerized application on AWS, I am hosting the WordPress application using Fargate on ECS.  By using Fargate, I don't need to provision and manage any EC2 servers, only need to allocate how much vCPUs and memory for the container. And recently, \u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fblogs\u002Faws\u002Faws-fargate-spot-now-generally-available\u002F\"\u003EFargate Spot\u003C\u002Fa\u003E has announced which can take up to 70% of cost-saving.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Ffargate\u002F\"\u003EAWS Fargate\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EThis architecture takes advantage of the capability of the capacity provider on the ECS cluster, using the default capacity provider strategy to launch multiple tasks mixed with Fargate and Fargate Spot launch type. For the first 3 tasks in the services, it will be standard Fargate launch type, which provided a baseline for high availability. And for the rest of the tasks, for every 3 tasks, 2 tasks will be the regular Fargate launch type, and the rest 1 task will be the Fargate Spot launch type. This strategy which can provide \u003Cstrong\u003Ehigh availability service but also maximize the cost optimization.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo distribute the incoming request to the multiple running containers equally, an application load balancer has been set up. I have chosen to use the LOR algorithm instead of the regular round-robin algorithm. Because the round-robin algorithm will not consider the capacity or utilization of the target containers, this led to over-utilization or under-utilization of the target containers when the request has long process times. Whit the LOR algorithm, now the application load balancer can router the requests to the least number of an outstanding request, which further reduces the response time and balanced the utilization for each container.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W3cFEl5Z--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fct1zsbrzfkcqibg0996w.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W3cFEl5Z--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fct1zsbrzfkcqibg0996w.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere are 3 containers for each task, Nginx, PHP FPM, and X-Ray daemon. The reason I choose Nginx instead of Apache is the plugin W3 Total Cache support set up the page caching on Nginx instead of the application level. The X-Ray daemon was created for the AWS X-Ray plugin in WordPress, the plugin which collects the performance and information of each request and sends it to AWS X-Ray through the daemon.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"storage\" href=\"#storage\"\u003E\n  \u003C\u002Fa\u003E\n  Storage\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWordPress is a stateful application, which means for each time you do some changes to the configuration, the files of WordPress will be changed. But Docker is a stateless service, which will lose all of it changes when every time you restart the container. If the WordPress application running in such an environment, its configuration will be lost when scale-in or scale-out events. To handle such a situation, I have used AWS EFS to store the WordPress application. EFS is a distributed file system, which means when every time the WordPress application file changed, the other running container will still using the same file instead of a local isolated file. Also, I have set up the lifecycle rule for the files where hasn't use over the past 90 days, to change the storage class to infrequent access, which to lower the cost.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fefs\u002F\"\u003EAmazon EFS\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EThe WordPress application has a lot of static files, like Javascript, CSS, images, videos, etc. Intending to lower the response time and the request counts to the WordPress application, I have used a plugin WP Offload Media to offload the static files to S3. This plugin will upload the newly created media to S3 whenever I upload any images or videos.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"database\" href=\"#database\"\u003E\n  \u003C\u002Fa\u003E\n  Database\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETo start a WordPress application, a MySQL database is required. Amazon RDS is a managed database service, which means I don't need to take care of database setup, patching, and backup. RDS support multiple databases, Aurora is one supported database in RDS. Amazon Aurora is developed by AWS and it is a relational database with MySQL and Postgres-compatible, It provides 5-times faster than a regular MySQL database, and the security, availability, and reliability of commercial databases at 1\u002F10th the cost.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Frds\u002F\"\u003EAmazon RDS\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EAurora has 2 types of database - Provisioned and Serverless. The provisioned cluster is a regular database cluster, a master node, and multiple read replica. Another type is Serverless and I have chosen to use Aurora Serverless to running the MySQL database because I am not sure what size of the node type should be used. The Aurora Serverless was a little different from the provisioned type, it simular to Fargate. I only need to allocate how many ACU it need on startup and the maximum ACU it can scale, it natively provides auto-scaling features according to the CPU usage and number of connections of the database. Also, the Aurora Serverless support auto-pause, when your database has zero activity for a period of time, the database will be closed, and the database will back online when there is an activity to the database. I have disabled the auto-pause features since when the database went sleep, it needs to take at least 30 seconds to back online.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut be noticed! Aurora Serverless database divided into 3 layers:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EProxy\u003C\u002Fli\u003E\n\u003Cli\u003ECompute\u003C\u002Fli\u003E\n\u003Cli\u003EStorage\nAlthough the proxy and storage layer are multi-AZ, the compute layer was SINGLE-AZ, which means when your database went down at the compute layer, it takes more time to back online compare to the provisioned cluster.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Frds\u002Faurora\u002F\"\u003EAmazon Aurora\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Frds\u002Faurora\u002Fserverless\u002F\"\u003EAmazon Aurora Serverless\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EIF YOUR REQUIRE FOR RUNNING A HIGH AVAILABILITY DATABASE, DO NOT USE AURORA SERVERLESS. AND PLEASE USE THE AURORA PROVISIONED CLUSTER.\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"cache\" href=\"#cache\"\u003E\n  \u003C\u002Fa\u003E\n  Cache\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EI have chosen Memcached as the in-memory cache storage instead of Redis. And using Amazon ElastiCache for running the Memcached cluster. Amazon ElastiCache is a fully managed in-memory data store compatible with Redis and Memcached, which means I don't need to take care of the setup and patching.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Felasticache\u002Fmemcached\u002F\"\u003EAmazon ElastiCache for Memcached\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1UF29wre--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002F4.bp.blogspot.com\u002F-SDb-lOTDwvg\u002FW2WyicgB94I\u002FAAAAAAAAJbY\u002FDxRHMO-cHIkPtLrTNeGh2K3MobMM9tlggCLcBGAs\u002Fs640\u002Fmemcached-vs-redis-wordpress.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1UF29wre--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002F4.bp.blogspot.com\u002F-SDb-lOTDwvg\u002FW2WyicgB94I\u002FAAAAAAAAJbY\u002FDxRHMO-cHIkPtLrTNeGh2K3MobMM9tlggCLcBGAs\u002Fs640\u002Fmemcached-vs-redis-wordpress.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe Memcached has better performance than Redis, according to these 2 blog posts.\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fblog.kernl.us\u002F2020\u002F02\u002Fshould-i-use-memcached-or-redis-for-wordpress-caching\u002F\"\u003EShould I use Memcached or Redis for WordPress caching?\u003Cbr\u003E\n\u003C\u002Fa\u003E and \u003Ca href=\"https:\u002F\u002Fwww.mtwebsol.com\u002Fredis-and-memcached-wordpress-cache-vps-cloud\"\u003ERedis &amp; Memcached Cache for WordPress on VPS or Cloud \u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo reduce the response time and put the cache into Memcached from WordPress, I have installed W3 Total Cache in WordPress. This plugin can setup different cache like \u003Ccode\u003EPage Cache\u003C\u002Fcode\u003E,  \u003Ccode\u003EDatabase Cache\u003C\u002Fcode\u003E, \u003Ccode\u003EObject Cache\u003C\u002Fcode\u003E, and \u003Ccode\u003EFragment Cache\u003C\u002Fcode\u003E into Memcached. As above mentioned, I am using Nginx for running the WordPress application, and the W3TC support setting up the \u003Ccode\u003EPage Cache\u003C\u002Fcode\u003E at Nginx level instead of WordPress application, which means when a request comes in, the Nginx will first search for the Memcached for the page caching, if any cache hit, Nginx will return the hit page cache instead forward the request to PHP-FMP, which further reduce the response time.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwordpress.org\u002Fplugins\u002Fw3-total-cache\u002F\"\u003EW3 Total Cache\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"cdn\" href=\"#cdn\"\u003E\n  \u003C\u002Fa\u003E\n  CDN\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ETo further reduces the response time, a CloudFront distribution has set up in front of the application load balancer. The distribution will cache the static content or requests into the edge location around the globe. When any user browsing the WordPress application, if the requested content is hit at the edge location, the distribution will return the hit cache instead of forward the request to the servers. The edge locations are usually located around the user which provided the lowest latency and faster delivery speed.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fcloudfront\u002F\"\u003EAmazon CloudFront\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"dns\" href=\"#dns\"\u003E\n  \u003C\u002Fa\u003E\n  DNS\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThere are 2 hosted zones in Route 53, a public and a private. The public hosted zone will have multiple records including an alias A record of the WordPress and an alias A record of the static file of the CloudFront distributions.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe private hosted zone is associated with the VPC and in the private hosted zone, multiple A records were created for the different AWS resources hostname, including the Aurora Serverless cluster, the EFS file system, the ElastiCache Memcached cluster, the Elasticseach domain, and the private application load balancer. It provides identical and memorizable names With these records to various created AWS resources.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Froute53\u002F\"\u003EAmazon Route 53\u003C\u002Fa\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002FRoute53\u002Flatest\u002FDeveloperGuide\u002Fhosted-zones-private.html\"\u003EWorking with private hosted zone\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"security\" href=\"#security\"\u003E\n  \u003C\u002Fa\u003E\n  Security\n\u003C\u002Fh3\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"network-security\" href=\"#network-security\"\u003E\n  \u003C\u002Fa\u003E\n  Network Security\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EUnlike the usual subnet division, the VPC is consists of 3 types of the subnet, \u003Ccode\u003EPublic\u003C\u002Fcode\u003E, \u003Ccode\u003EPrivate\u003C\u002Fcode\u003E, and \u003Ccode\u003EIsolated\u003C\u002Fcode\u003E. The first 2 types of subnets are the same as usual, the outbound-traffic in the \u003Ccode\u003EPublic\u003C\u002Fcode\u003E subnet route through internet gateway, the outbound-traffic in the \u003Ccode\u003EPrivate\u003C\u002Fcode\u003E subnet route through NAT gateway. The traffic in the \u003Ccode\u003EIsolated\u003C\u002Fcode\u003E subnet will not have any internet access and only have local routing accessibility, which can ensure the resources inside are absolutely safe and isolated away from the internet.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpc\u002Flatest\u002Fuserguide\u002FVPC_Scenario2.html\"\u003EVPC with public and private subnets (NAT)\u003Cbr\u003E\n\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EAlso, a network access control list has been set up for the created VPC, which can ensure any traffics comes in are for browsing WordPress application.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpc\u002Flatest\u002Fuserguide\u002Fvpc-network-acls.html\"\u003ENetwork ACLs\u003Cbr\u003E\n\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"encryption\" href=\"#encryption\"\u003E\n  \u003C\u002Fa\u003E\n  Encryption\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ETo encrypt data in transit, both application load balancer and CloudFront distribution have set up using the signed TLS certificate in ACM. With the benefit of the L2 constructor in CDK, these TLS certificates will create in ACM also create DNS records in Route 53 hosted zone for validation. For further to restrict user must connect to WordPress application using HTTPS, both CloudFront distribution and application load balancer has set up redirect HTTP to HTTPS.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor security consideration, all of the stored data will be encrypted using the AWS managed keys in AWS KMS. The AWS managed keys are fully managed by AWS including the rotation. The Aurora Serverless cluster, EFS file system, static and logging file bucket in the S3 bucket all are encrypted using different AWS managed keys in KMS.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fcertificate-manager\u002F\"\u003EAWS Certificate Manager\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"application-security\" href=\"#application-security\"\u003E\n  \u003C\u002Fa\u003E\n  Application Security\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003ETo secure the WordPress application away from the common web exploits, web ACLs have been set up on the CloudFront distribution. For the web ACL on the CloudFront distribution, I have assigned multiple AWS managed rule groups, they are \u003Ccode\u003ECommonRuleSet\u003C\u002Fcode\u003E, \u003Ccode\u003EKnownBadInputsRuleSet\u003C\u002Fcode\u003E, \u003Ccode\u003EWordPressRuleSet\u003C\u002Fcode\u003E, \u003Ccode\u003EPHPRuleSet\u003C\u002Fcode\u003E, \u003Ccode\u003ESQLiRuleSet\u003C\u002Fcode\u003E, and \u003Ccode\u003EAmazonIpReputationList\u003C\u002Fcode\u003E, please be reminded, part of the rules in some of the rule groups has been excluded, otherwise, it will block most of the requests to your WordPress application. With the above rules groups, the web ACL now can provide general protection against a wide variety of common threats and vulnerabilities.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fwaf\u002F\"\u003EAWS WAF\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fwaf\u002Flatest\u002Fdeveloperguide\u002Faws-managed-rule-groups.html\"\u003EAWS Managed Rules for AWS WAF\u003Cbr\u003E\n\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"ddos-protection\" href=\"#ddos-protection\"\u003E\n  \u003C\u002Fa\u003E\n  DDoS Protection\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EDDoS is the most popular attack over the internet, with AWS Shield it can provide always-on detection and automatic inline mitigations that minimize application downtime and latency. AWS Shield Standard is automatically enabled for the CloudFront distribution and Route 53 hosted zone, which can protect against all known infrastructure (Layer 3 &amp; 4) attack.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fshield\u002F\"\u003EAWS Shield\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"record-and-evaluate-configuration\" href=\"#record-and-evaluate-configuration\"\u003E\n  \u003C\u002Fa\u003E\n  Record and evaluate configuration\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAWS Config has enabled to record and evaluate the configuration of the created resource. Multiple managed rule in AWS Config has been configured. A tag \u003Ccode\u003Eaws-config:cloudformation:stack-name\u003C\u002Fcode\u003E will be associated with every created resource during the CDK deployment. And for every rule in AWS Config was set to use tag-based policy to record the tagged resources. If the AWS Config recorded any configuration changed and non-compliance to the changed configuration, it will send an email using SNS to the administrator to notify the non-compliance situation.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fconfig\u002F\"\u003EAWS Config\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"advanced-security\" href=\"#advanced-security\"\u003E\n  \u003C\u002Fa\u003E\n  Advanced Security\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EIn the following section, I will talk about\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cstrong\u003EHow to ensure your internet-facing application load balancer only allow traffic from CloudFront?\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cstrong\u003EHow to secure the admin page(wp-admin)?\u003C\u002Fstrong\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch4\u003E\n  \u003Ca name=\"how-to-ensure-your-internetfacing-application-load-balancer-only-allow-traffic-from-cloudfront\" href=\"#how-to-ensure-your-internetfacing-application-load-balancer-only-allow-traffic-from-cloudfront\"\u003E\n  \u003C\u002Fa\u003E\n  How to ensure your internet-facing application load balancer only allow traffic from CloudFront?\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kzXgUdpo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwxqojwrnurv7bo52n835.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--kzXgUdpo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwxqojwrnurv7bo52n835.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\n\u003Cdiv class=\"ltag__link\"\u003E\n  \u003Ca href=\"\u002Faws-builders\" class=\"ltag__link__link\"\u003E\n    \u003Cdiv class=\"ltag__link__org__pic\"\u003E\n      \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5zuWf912--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z-NQNKRG--\u002Fc_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png\" alt=\"AWS Community Builders \" loading=\"lazy\"\u003E\n      \u003Cdiv class=\"ltag__link__user__pic\"\u003E\n        \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hNiQL8Bo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--JG9NpEd9--\u002Fc_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F468988\u002Fddca1d78-b8f8-43de-a42c-eb4108264776.png\" alt=\"\" loading=\"lazy\"\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fa\u003E\n  \u003Ca href=\"\u002Faws-builders\u002Fhow-to-ensure-your-internet-facing-application-load-balancer-only-allow-traffic-from-cloudfront-56a\" class=\"ltag__link__link\"\u003E\n    \u003Cdiv class=\"ltag__link__content\"\u003E\n      \u003Ch2\u003EHow to secure and ensure the internet-facing application load balancer only allow traffic from CloudFront?\u003C\u002Fh2\u003E\n      \u003Ch3\u003EMike Ng for AWS Community Builders  ・ Nov 7 '20 ・ 2 min read\u003C\u002Fh3\u003E\n      \u003Cdiv class=\"ltag__link__taglist\"\u003E\n        \u003Cspan class=\"ltag__link__tag\"\u003E#aws\u003C\u002Fspan\u003E\n        \u003Cspan class=\"ltag__link__tag\"\u003E#cloudfront\u003C\u002Fspan\u003E\n        \u003Cspan class=\"ltag__link__tag\"\u003E#security\u003C\u002Fspan\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Fdiv\u003E\n  \u003C\u002Fa\u003E\n\u003C\u002Fdiv\u003E\n\n\n\u003Cp\u003EThe value of the custom header will be defined during the CDK deployment, and it will be a base64 encoded domain name of the public hosted zone, the hash value will be the same at the CloudFront distribution and the associated WAF web ACL, else all requests will be blocked.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"how-to-secure-the-admin-pagewpadmin\" href=\"#how-to-secure-the-admin-pagewpadmin\"\u003E\n  \u003C\u002Fa\u003E\n  How to secure the admin page(wp-admin)?\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAnyone who has ever used WordPress will know \u003Ccode\u003Ewp-admin\u003C\u002Fcode\u003E is the admin page, which causes huge loopholes in web security, which allow hackers to use brute force cracking methods similar to unlimited loops to crack the admin password.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThere are 2 methods were implement to secure the admin page in the solution. The first is to add a whitelist IP addresses list, second is set up a client VPN to access the private application load balancer.\u003C\u002Fp\u003E\n\n\u003Ch5\u003E\n  \u003Ca name=\"whitelisting-ip-address\" href=\"#whitelisting-ip-address\"\u003E\n  \u003C\u002Fa\u003E\n  Whitelisting IP Address\n\u003C\u002Fh5\u003E\n\n\u003Cp\u003EFor the first method, the whitelist IP addresses list need to fill in before the CDK deploy. After deployment, an IP set will be created in WAF. The WAF web ACL associated with the application load balancer will check the inbound request that comes from the CloudFront distribution, will also validate the IP address of the request with the 'admin' prefix in the path. If any other IP addresses that not on the whitelist attempt to enter the admin page will be blocked.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis should be the easiest way to protect the WordPress admin page, but it requires the end-user to have a static public IPV4 address. The whitelist needs to update whenever the IP address update or changes.\u003C\u002Fp\u003E\n\n\u003Ch5\u003E\n  \u003Ca name=\"using-client-vpn\" href=\"#using-client-vpn\"\u003E\n  \u003C\u002Fa\u003E\n  Using Client VPN\n\u003C\u002Fh5\u003E\n\n\u003Cp\u003EFor the second method, it should be the most secure, feasible, and flexible. AWS client VPN is a managed VPN client-based services that allow end-user to access the private or restricted resource on AWS or on-premise securely, and it can run on any OpenVPN-based client. An AWS client VPN will be created in the VPC, for every end-user who connected to this VPN will have internet access through NAT and access to the private resources. A private application load balancer has been created, and its created for the connected VPN end-user which allows access to the WordPress application including the admin page securely.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpn\u002Flatest\u002Fclientvpn-admin\u002Fwhat-is.html\"\u003EAWS Client VPN\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"backup\" href=\"#backup\"\u003E\n  \u003C\u002Fa\u003E\n  Backup\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAlthough Aurora Serverless cluster the snapshot and back in RDS, AWS Backup is set up to manage backups across the AWS services that WordPress used, including the Aurora Serverless cluster and the EFS file system.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Faws.amazon.com\u002Fbackup\u002F\"\u003EAWS Backup\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"deployment\" href=\"#deployment\"\u003E\n  \u003C\u002Fa\u003E\n  Deployment\n\u003C\u002Fh2\u003E\n\n\n\u003Cdiv class=\"ltag-github-readme-tag\"\u003E\n  \u003Cdiv class=\"readme-overview\"\u003E\n    \u003Ch2\u003E\n      \u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--i3JOwpme--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev.to\u002Fassets\u002Fgithub-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg\" alt=\"GitHub logo\" loading=\"lazy\"\u003E\n      \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FMikletNg\"\u003E\n        MikletNg\n      \u003C\u002Fa\u003E \u002F \u003Ca style=\"font-weight: 600;\" href=\"https:\u002F\u002Fgithub.com\u002FMikletNg\u002Faws-serverless-wordpress\"\u003E\n        aws-serverless-wordpress\n      \u003C\u002Fa\u003E\n    \u003C\u002Fh2\u003E\n    \u003Ch3\u003E\n      \n    \u003C\u002Fh3\u003E\n  \u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"ltag-github-body\"\u003E\n    \n\u003Cdiv id=\"readme\" class=\"md\" data-path=\"README.md\"\u003E\u003Carticle class=\"markdown-body entry-content container-lg\" itemprop=\"text\"\u003E\u003Ch1\u003E\nAWS Serverless WordPress\u003C\u002Fh1\u003E\n\u003Ch2\u003E\nIntroduction\u003C\u002Fh2\u003E\n\u003Cp\u003EPlease read the blog post for introduction and explanation\n\u003Ca href=\"https:\u002F\u002Fdev.to\u002Faws-builders\u002Fbest-practices-for-running-wordpress-on-aws-using-cdk-aj9\" rel=\"nofollow\"\u003EDev.to: Best Practices for Running WordPress on AWS using CDK\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch3\u003E\nWordPress Plugin Used\u003C\u002Fh3\u003E\n\u003Cul\u003E\n\u003Cli\u003EW3 Total Cache\u003C\u002Fli\u003E\n\u003Cli\u003EWP Offload Media Lite\u003C\u002Fli\u003E\n\u003Cli\u003EElasticPress\u003C\u002Fli\u003E\n\u003Cli\u003EMultiple Domain\u003C\u002Fli\u003E\n\u003Cli\u003EHumanMade - AWS-XRay (Working on making it work...)\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Ch2\u003E\nArchitecture Diagram\u003C\u002Fh2\u003E\n\u003Cp\u003E\u003Ca target=\"_blank\" rel=\"noopener noreferrer\" href=\"https:\u002F\u002Fgithub.com\u002FMikletNg\u002Faws-serverless-wordpressdoc\u002Farchitecture-diagram-v2.png\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--esBBPTaI--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fgithub.com\u002FMikletNg\u002Faws-serverless-wordpressdoc\u002Farchitecture-diagram-v2.png\" alt=\"Architecture Diagram\" style=\"max-width: 100%;\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\u003Ch2\u003E\nDeployment - (To be update)\u003C\u002Fh2\u003E\n\u003Ch3\u003E\nBefore getting started\u003C\u002Fh3\u003E\n\u003Cp\u003EPlease make sure you have\u002Fare\u003C\u002Fp\u003E\n\u003Cul\u003E\n\u003Cli\u003EUsing bash\u003C\u002Fli\u003E\n\u003Cli\u003ENode.js installed\u003C\u002Fli\u003E\n\u003Cli\u003ENPM and Yarn installed\u003C\u002Fli\u003E\n\u003Cli\u003EInstalled and running Docker\u003C\u002Fli\u003E\n\u003Cli\u003EInstalled and configured AWS CLI\u003C\u002Fli\u003E\n\u003Cli\u003EInstalled the latest version of AWS CDK CLI\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003Cp\u003E\u003Cem\u003EPlease be notice, this stack only can deploy into us-east-1\u003C\u002Fem\u003E\n0. You should have a public hosted zone in Route 53\u003C\u002Fp\u003E\n\u003Col\u003E\n\u003Cli\u003EInitialize the CDK project, run \u003Ccode\u003Emake init\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EDeploy the CDK Toolkit stack on to the target region, run \u003Ccode\u003Ecdk bootstrap aws:\u002F\u002FAWS_ACCOUNT_ID\u002FAWS_REGION --profile AWS_PROFILE_NAME\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ECopy the \u003Ccode\u003Econfig.sample.toml\u003C\u002Fcode\u003E and rename to \u003Ccode\u003Econfig.toml\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003ERun \u003Ccode\u003Emake easy-rsa-init gen-cert import-cert\u003C\u002Fcode\u003E to generate the certificate for the Client VPN\u003C\u002Fli\u003E\n\u003Cli\u003EModify the…\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\u003C\u002Farticle\u003E\u003C\u002Fdiv\u003E\n  \u003C\u002Fdiv\u003E\n  \u003Cdiv class=\"gh-btn-container\"\u003E\u003Ca class=\"gh-btn\" href=\"https:\u002F\u002Fgithub.com\u002FMikletNg\u002Faws-serverless-wordpress\"\u003EView on GitHub\u003C\u002Fa\u003E\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n";a.body_markdown="## Introduction\n\nRecently I helped my friend migrate her eShop from WordPress.com to AWS. Since her business keeps growing to a larger scale,  a third-party eCommerce hosting platform no longer fulfill her business needed. To satisfy the growing business needed, I have designed, transform, enhance, and migrated to a high availability architecture on AWS for her WordPress eCommerce business.\n\nTo reuse the infrastructure and simplify the deployment, I have used the AWS CDK. Cloud Development Kit is an open-source framework to define the infrastructure as code using familiar programming languages. I have written the infrastructure using Typescript, and after the CDK is compiled, a CloudFormation template will be generated and deployed on AWS.\n\n\u003E [AWS CDK](https:\u002F\u002Faws.amazon.com\u002Fcdk\u002F)\n\nDuring the migration, I find out there aren't many documents or information about hosting WordPress on AWS, that why I written this blog post.\n\n*** \nIn this post, I won't explain so much about what those AWS services usage and benefit, and only talk about the reason I use it and how I configure it. This blog post is more like the extension of the [WordPress: Best Practices on AWS](https:\u002F\u002Faws.amazon.com\u002Ftw\u002Fblogs\u002Farchitecture\u002Fwordpress-best-practices-on-aws\u002F).\n***\n\n![](https:\u002F\u002Fd2908q01vomqb2.cloudfront.net\u002Ffc074d501302eb2b93e2554793fcaf50b3bf7291\u002F2018\u002F03\u002F23\u002Fwordpress-on-aws.png)\n\nAWS has provided the Best Practice document [WordPress: Best Practices on AWS](https:\u002F\u002Faws.amazon.com\u002Ftw\u002Fblogs\u002Farchitecture\u002Fwordpress-best-practices-on-aws\u002F). After I read the document, I find out it still has a lot of room for improvement, it also doesn't take care much of the security of the WordPress application.\n\nOther than that, there are some interesting ideas I have implement in this solution. Like:\n- **How to secure the admin page(wp-admin)?**\n- **How to ensure your internet-facing application load balancer only allow traffic from CloudFront?**\n\n***\n❗❗❗**Please ensure you have read through the Best Practice document before reading down.**❗❗❗\n\n❗❗❗**Also please ensure you have the basic knowledge of AWS cloud or any other cloud providers.**❗❗❗\n***\n\n## Architecture\n\n![Architecture Diagram](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fniqpcxkepv6aio914jul.png)\n\nBasically, the architecture can split it into multiple pillars:\n- Compute\n- Storage\n- Database\n- Cache\n- CDN\n- DNS\n- Security\n- Backup\n\n### Compute\n\nAccording to the best practice document, it used EC2 for hosting. But I choose to containerize the WordPress application because Docker runs above OS, which means the container is much lighter than an EC2 instance, also the startup speed is faster and uses much less memory.\n\nFor running a containerized application on AWS, I am hosting the WordPress application using Fargate on ECS.  By using Fargate, I don't need to provision and manage any EC2 servers, only need to allocate how much vCPUs and memory for the container. And recently, [Fargate Spot](https:\u002F\u002Faws.amazon.com\u002Fblogs\u002Faws\u002Faws-fargate-spot-now-generally-available\u002F) has announced which can take up to 70% of cost-saving.\n\n\u003E [AWS Fargate](https:\u002F\u002Faws.amazon.com\u002Ffargate\u002F)\n\nThis architecture takes advantage of the capability of the capacity provider on the ECS cluster, using the default capacity provider strategy to launch multiple tasks mixed with Fargate and Fargate Spot launch type. For the first 3 tasks in the services, it will be standard Fargate launch type, which provided a baseline for high availability. And for the rest of the tasks, for every 3 tasks, 2 tasks will be the regular Fargate launch type, and the rest 1 task will be the Fargate Spot launch type. This strategy which can provide **high availability service but also maximize the cost optimization.**\n\nTo distribute the incoming request to the multiple running containers equally, an application load balancer has been set up. I have chosen to use the LOR algorithm instead of the regular round-robin algorithm. Because the round-robin algorithm will not consider the capacity or utilization of the target containers, this led to over-utilization or under-utilization of the target containers when the request has long process times. Whit the LOR algorithm, now the application load balancer can router the requests to the least number of an outstanding request, which further reduces the response time and balanced the utilization for each container.\n\n![](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fct1zsbrzfkcqibg0996w.png)\n\nThere are 3 containers for each task, Nginx, PHP FPM, and X-Ray daemon. The reason I choose Nginx instead of Apache is the plugin W3 Total Cache support set up the page caching on Nginx instead of the application level. The X-Ray daemon was created for the AWS X-Ray plugin in WordPress, the plugin which collects the performance and information of each request and sends it to AWS X-Ray through the daemon.\n\n### Storage\n\nWordPress is a stateful application, which means for each time you do some changes to the configuration, the files of WordPress will be changed. But Docker is a stateless service, which will lose all of it changes when every time you restart the container. If the WordPress application running in such an environment, its configuration will be lost when scale-in or scale-out events. To handle such a situation, I have used AWS EFS to store the WordPress application. EFS is a distributed file system, which means when every time the WordPress application file changed, the other running container will still using the same file instead of a local isolated file. Also, I have set up the lifecycle rule for the files where hasn't use over the past 90 days, to change the storage class to infrequent access, which to lower the cost.\n\n\u003E [Amazon EFS](https:\u002F\u002Faws.amazon.com\u002Fefs\u002F)\n\nThe WordPress application has a lot of static files, like Javascript, CSS, images, videos, etc. Intending to lower the response time and the request counts to the WordPress application, I have used a plugin WP Offload Media to offload the static files to S3. This plugin will upload the newly created media to S3 whenever I upload any images or videos.\n\n### Database\n\nTo start a WordPress application, a MySQL database is required. Amazon RDS is a managed database service, which means I don't need to take care of database setup, patching, and backup. RDS support multiple databases, Aurora is one supported database in RDS. Amazon Aurora is developed by AWS and it is a relational database with MySQL and Postgres-compatible, It provides 5-times faster than a regular MySQL database, and the security, availability, and reliability of commercial databases at 1\u002F10th the cost.\n\n\u003E [Amazon RDS](https:\u002F\u002Faws.amazon.com\u002Frds\u002F)\n\nAurora has 2 types of database - Provisioned and Serverless. The provisioned cluster is a regular database cluster, a master node, and multiple read replica. Another type is Serverless and I have chosen to use Aurora Serverless to running the MySQL database because I am not sure what size of the node type should be used. The Aurora Serverless was a little different from the provisioned type, it simular to Fargate. I only need to allocate how many ACU it need on startup and the maximum ACU it can scale, it natively provides auto-scaling features according to the CPU usage and number of connections of the database. Also, the Aurora Serverless support auto-pause, when your database has zero activity for a period of time, the database will be closed, and the database will back online when there is an activity to the database. I have disabled the auto-pause features since when the database went sleep, it needs to take at least 30 seconds to back online.\n\nBut be noticed! Aurora Serverless database divided into 3 layers:\n- Proxy\n- Compute\n- Storage\nAlthough the proxy and storage layer are multi-AZ, the compute layer was SINGLE-AZ, which means when your database went down at the compute layer, it takes more time to back online compare to the provisioned cluster.\n\n\u003E [Amazon Aurora](https:\u002F\u002Faws.amazon.com\u002Frds\u002Faurora\u002F)\n\u003E [Amazon Aurora Serverless](https:\u002F\u002Faws.amazon.com\u002Frds\u002Faurora\u002Fserverless\u002F)\n\n**IF YOUR REQUIRE FOR RUNNING A HIGH AVAILABILITY DATABASE, DO NOT USE AURORA SERVERLESS. AND PLEASE USE THE AURORA PROVISIONED CLUSTER.**\n\n### Cache\n\nI have chosen Memcached as the in-memory cache storage instead of Redis. And using Amazon ElastiCache for running the Memcached cluster. Amazon ElastiCache is a fully managed in-memory data store compatible with Redis and Memcached, which means I don't need to take care of the setup and patching.\n\n\u003E [Amazon ElastiCache for Memcached](https:\u002F\u002Faws.amazon.com\u002Felasticache\u002Fmemcached\u002F)\n\n![](https:\u002F\u002F4.bp.blogspot.com\u002F-SDb-lOTDwvg\u002FW2WyicgB94I\u002FAAAAAAAAJbY\u002FDxRHMO-cHIkPtLrTNeGh2K3MobMM9tlggCLcBGAs\u002Fs640\u002Fmemcached-vs-redis-wordpress.png)\n\nThe Memcached has better performance than Redis, according to these 2 blog posts.\n[Should I use Memcached or Redis for WordPress caching?\n](https:\u002F\u002Fblog.kernl.us\u002F2020\u002F02\u002Fshould-i-use-memcached-or-redis-for-wordpress-caching\u002F) and [Redis & Memcached Cache for WordPress on VPS or Cloud ](https:\u002F\u002Fwww.mtwebsol.com\u002Fredis-and-memcached-wordpress-cache-vps-cloud)\n\nTo reduce the response time and put the cache into Memcached from WordPress, I have installed W3 Total Cache in WordPress. This plugin can setup different cache like `Page Cache`,  `Database Cache`, `Object Cache`, and `Fragment Cache` into Memcached. As above mentioned, I am using Nginx for running the WordPress application, and the W3TC support setting up the `Page Cache` at Nginx level instead of WordPress application, which means when a request comes in, the Nginx will first search for the Memcached for the page caching, if any cache hit, Nginx will return the hit page cache instead forward the request to PHP-FMP, which further reduce the response time.\n\n\u003E [W3 Total Cache](https:\u002F\u002Fwordpress.org\u002Fplugins\u002Fw3-total-cache\u002F)\n\n### CDN\n\nTo further reduces the response time, a CloudFront distribution has set up in front of the application load balancer. The distribution will cache the static content or requests into the edge location around the globe. When any user browsing the WordPress application, if the requested content is hit at the edge location, the distribution will return the hit cache instead of forward the request to the servers. The edge locations are usually located around the user which provided the lowest latency and faster delivery speed.\n\n\u003E [Amazon CloudFront](https:\u002F\u002Faws.amazon.com\u002Fcloudfront\u002F)\n\n### DNS\n\nThere are 2 hosted zones in Route 53, a public and a private. The public hosted zone will have multiple records including an alias A record of the WordPress and an alias A record of the static file of the CloudFront distributions.\n\nThe private hosted zone is associated with the VPC and in the private hosted zone, multiple A records were created for the different AWS resources hostname, including the Aurora Serverless cluster, the EFS file system, the ElastiCache Memcached cluster, the Elasticseach domain, and the private application load balancer. It provides identical and memorizable names With these records to various created AWS resources.\n\n\u003E [Amazon Route 53](https:\u002F\u002Faws.amazon.com\u002Froute53\u002F)\n\u003E [Working with private hosted zone](https:\u002F\u002Fdocs.aws.amazon.com\u002FRoute53\u002Flatest\u002FDeveloperGuide\u002Fhosted-zones-private.html)\n\n### Security\n\n#### Network Security\n\nUnlike the usual subnet division, the VPC is consists of 3 types of the subnet, `Public`, `Private`, and `Isolated`. The first 2 types of subnets are the same as usual, the outbound-traffic in the `Public` subnet route through internet gateway, the outbound-traffic in the `Private` subnet route through NAT gateway. The traffic in the `Isolated` subnet will not have any internet access and only have local routing accessibility, which can ensure the resources inside are absolutely safe and isolated away from the internet.\n\n\u003E [VPC with public and private subnets (NAT)\n](https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpc\u002Flatest\u002Fuserguide\u002FVPC_Scenario2.html)\n\nAlso, a network access control list has been set up for the created VPC, which can ensure any traffics comes in are for browsing WordPress application.\n\n\u003E [Network ACLs\n](https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpc\u002Flatest\u002Fuserguide\u002Fvpc-network-acls.html)\n\n#### Encryption\n\nTo encrypt data in transit, both application load balancer and CloudFront distribution have set up using the signed TLS certificate in ACM. With the benefit of the L2 constructor in CDK, these TLS certificates will create in ACM also create DNS records in Route 53 hosted zone for validation. For further to restrict user must connect to WordPress application using HTTPS, both CloudFront distribution and application load balancer has set up redirect HTTP to HTTPS.\n\nFor security consideration, all of the stored data will be encrypted using the AWS managed keys in AWS KMS. The AWS managed keys are fully managed by AWS including the rotation. The Aurora Serverless cluster, EFS file system, static and logging file bucket in the S3 bucket all are encrypted using different AWS managed keys in KMS.\n\n\u003E [AWS Certificate Manager](https:\u002F\u002Faws.amazon.com\u002Fcertificate-manager\u002F)\n\n#### Application Security\n\nTo secure the WordPress application away from the common web exploits, web ACLs have been set up on the CloudFront distribution. For the web ACL on the CloudFront distribution, I have assigned multiple AWS managed rule groups, they are `CommonRuleSet`, `KnownBadInputsRuleSet`, `WordPressRuleSet`, `PHPRuleSet`, `SQLiRuleSet`, and `AmazonIpReputationList`, please be reminded, part of the rules in some of the rule groups has been excluded, otherwise, it will block most of the requests to your WordPress application. With the above rules groups, the web ACL now can provide general protection against a wide variety of common threats and vulnerabilities.\n\n\u003E [AWS WAF](https:\u002F\u002Faws.amazon.com\u002Fwaf\u002F)\n\n\u003E [AWS Managed Rules for AWS WAF\n](https:\u002F\u002Fdocs.aws.amazon.com\u002Fwaf\u002Flatest\u002Fdeveloperguide\u002Faws-managed-rule-groups.html)\n\n#### DDoS Protection\n\nDDoS is the most popular attack over the internet, with AWS Shield it can provide always-on detection and automatic inline mitigations that minimize application downtime and latency. AWS Shield Standard is automatically enabled for the CloudFront distribution and Route 53 hosted zone, which can protect against all known infrastructure (Layer 3 & 4) attack.\n\n\u003E [AWS Shield](https:\u002F\u002Faws.amazon.com\u002Fshield\u002F)\n\n#### Record and evaluate configuration\n\nAWS Config has enabled to record and evaluate the configuration of the created resource. Multiple managed rule in AWS Config has been configured. A tag `aws-config:cloudformation:stack-name` will be associated with every created resource during the CDK deployment. And for every rule in AWS Config was set to use tag-based policy to record the tagged resources. If the AWS Config recorded any configuration changed and non-compliance to the changed configuration, it will send an email using SNS to the administrator to notify the non-compliance situation.\n\n\u003E [AWS Config](https:\u002F\u002Faws.amazon.com\u002Fconfig\u002F)\n\n#### Advanced Security\n\nIn the following section, I will talk about\n- **How to ensure your internet-facing application load balancer only allow traffic from CloudFront?**\n- **How to secure the admin page(wp-admin)?**\n\n#### How to ensure your internet-facing application load balancer only allow traffic from CloudFront?\n\n![](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fi\u002Fwxqojwrnurv7bo52n835.png)\n\n{% link https:\u002F\u002Fdev.to\u002Faws-builders\u002Fhow-to-ensure-your-internet-facing-application-load-balancer-only-allow-traffic-from-cloudfront-56a %}\n\nThe value of the custom header will be defined during the CDK deployment, and it will be a base64 encoded domain name of the public hosted zone, the hash value will be the same at the CloudFront distribution and the associated WAF web ACL, else all requests will be blocked.\n\n\n#### How to secure the admin page(wp-admin)?\n\nAnyone who has ever used WordPress will know `wp-admin` is the admin page, which causes huge loopholes in web security, which allow hackers to use brute force cracking methods similar to unlimited loops to crack the admin password.\n\nThere are 2 methods were implement to secure the admin page in the solution. The first is to add a whitelist IP addresses list, second is set up a client VPN to access the private application load balancer.\n\n##### Whitelisting IP Address\n\nFor the first method, the whitelist IP addresses list need to fill in before the CDK deploy. After deployment, an IP set will be created in WAF. The WAF web ACL associated with the application load balancer will check the inbound request that comes from the CloudFront distribution, will also validate the IP address of the request with the 'admin' prefix in the path. If any other IP addresses that not on the whitelist attempt to enter the admin page will be blocked.\n\nThis should be the easiest way to protect the WordPress admin page, but it requires the end-user to have a static public IPV4 address. The whitelist needs to update whenever the IP address update or changes.\n\n##### Using Client VPN\n\nFor the second method, it should be the most secure, feasible, and flexible. AWS client VPN is a managed VPN client-based services that allow end-user to access the private or restricted resource on AWS or on-premise securely, and it can run on any OpenVPN-based client. An AWS client VPN will be created in the VPC, for every end-user who connected to this VPN will have internet access through NAT and access to the private resources. A private application load balancer has been created, and its created for the connected VPN end-user which allows access to the WordPress application including the admin page securely.\n\n\u003E [AWS Client VPN](https:\u002F\u002Fdocs.aws.amazon.com\u002Fvpn\u002Flatest\u002Fclientvpn-admin\u002Fwhat-is.html)\n\n### Backup\n\nAlthough Aurora Serverless cluster the snapshot and back in RDS, AWS Backup is set up to manage backups across the AWS services that WordPress used, including the Aurora Serverless cluster and the EFS file system.\n\n\u003E [AWS Backup](https:\u002F\u002Faws.amazon.com\u002Fbackup\u002F)\n\n## Deployment\n{% github MikletNg\u002Faws-serverless-wordpress %}";a.user={name:"Mike Ng",username:"mike_ng",twitter_username:"_mike_ng",github_username:"MikletNg",website_url:"https:\u002F\u002Fmikeng.io",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--lqjZo1Q4--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F468988\u002Fddca1d78-b8f8-43de-a42c-eb4108264776.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_64dvoPE--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F468988\u002Fddca1d78-b8f8-43de-a42c-eb4108264776.png"};a.organization={name:"AWS Community Builders ",username:f,slug:f,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zmOZQNzv--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vWmcJ-ty--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F2794\u002F88da75b6-aadd-4ea1-8083-ae2dfca8be94.png"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:a}},mutations:[["SET_CURRENT_ARTICLE",a]]}}({},"https:\u002F\u002Fdev.to\u002Faws-builders\u002Fbest-practices-for-running-wordpress-on-aws-using-cdk-aj9",31,null,"2020-10-31T16:20:49Z","aws-builders")));
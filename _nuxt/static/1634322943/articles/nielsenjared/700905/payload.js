__NUXT_JSONP__("/articles/nielsenjared/700905", (function(a,b,c,d,e){a.type_of="article";a.id=700905;a.title="How to Solve Any Algorithm";a.description="Learn how to solve any algorithm using these simple and easy-to-remember techniques.";a.readable_publish_date="May 17";a.slug="how-to-solve-algorithms-2jo9";a.path="\u002Fnielsenjared\u002Fhow-to-solve-algorithms-2jo9";a.url="https:\u002F\u002Fdev.to\u002Fnielsenjared\u002Fhow-to-solve-algorithms-2jo9";a.comments_count=24;a.public_reactions_count=b;a.collection_id=c;a.published_timestamp=d;a.positive_reactions_count=b;a.cover_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vys-bnnx--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F2uuinjhsatdh0slpj9h9.png";a.social_image="https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--A6djfVgK--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F2uuinjhsatdh0slpj9h9.png";a.canonical_url="https:\u002F\u002Fjarednielsen.com\u002Falgorithms\u002F";a.created_at="2021-05-17T14:45:20Z";a.edited_at="2021-05-19T02:53:00Z";a.crossposted_at=c;a.published_at=d;a.last_comment_at="2021-06-07T14:00:24Z";a.reading_time_minutes=5;a.tag_list="algorithms, career, beginners, computerscience";a.tags=["algorithms","career","beginners","computerscience"];a.body_html="\u003Cp\u003E\u003Cem\u003EThis article originally published at \u003Ca href=\"https:\u002F\u002Fjarednielsen.com\u002Falgorithms\u002F\"\u003Ejarednielsen.com\u003C\u002Fa\u003E\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn 1992, Mary Oliver published \u003Ca href=\"https:\u002F\u002Fwww.loc.gov\u002Fprograms\u002Fpoetry-and-literature\u002Fpoet-laureate\u002Fpoet-laureate-projects\u002Fpoetry-180\u002Fall-poems\u002Fitem\u002Fpoetry-180-133\u002Fthe-summer-day\u002F\"\u003EPoem 133: The Summer Day\u003C\u002Fa\u003E, which ends with a question for the reader:\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003ETell me, what is it you plan to do with your one wild and precious life?\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EWhat do you plan to do? Are you going to spend your one wild and precious life solving the same problem over and over? Or, worse yet, working on the wrong problem? \u003C\u002Fp\u003E\n\n\u003Cp\u003EWe want to work smarter, not harder. \u003C\u002Fp\u003E\n\n\u003Cp\u003EHow do we do that? \u003C\u002Fp\u003E\n\n\u003Cp\u003ELucky for us, there's an old school approach to problem solving that is still relevant today. It's called, you'll never guess...\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"how-to-solve-it\" href=\"#how-to-solve-it\"\u003E\n  \u003C\u002Fa\u003E\n  How To Solve It\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn \u003Ca href=\"https:\u002F\u002Famzn.to\u002F33Mp30d\"\u003EHow to Solve It\u003C\u002Fa\u003E, George Polya outlines four steps of problem solving: \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\u003Cp\u003EUnderstand the problem.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EMake a plan.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EExecute the plan. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EEvaluate the result.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"understand-the-problem\" href=\"#understand-the-problem\"\u003E\n  \u003C\u002Fa\u003E\n  Understand the Problem\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIf you're a good developer, you'll realize that the best solutions emerge from listening to your customer tell their story. Many alogirthms are disguised as story problems, such as the farmer who needs to get duck, corn, and fox across the river.  But! He can only carry one of these at a time. If left alone, the duck will eat the corn and the fox will eat the duck. How does he get everything across?\u003C\u002Fp\u003E\n\n\u003Cp\u003EStory time.\u003C\u002Fp\u003E\n\n\u003Cp\u003EUser story time, that is.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYeah, I know. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThey're awkward. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThey \u003Cem\u003Efeel\u003C\u002Fem\u003E like work, don't they?\u003C\u002Fp\u003E\n\n\u003Cp\u003EBut the thing is, they \u003Cem\u003Ework\u003C\u002Fem\u003E! \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe format for a user story is:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight markdown\"\u003E\u003Ccode\u003EAS A \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003EUSER\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EOF\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ESOME\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ESORT\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\nI WANT \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003ETO\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EDO\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ETHIS\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\nSO THAT \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003EMY\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EEXISTENCE\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EIS\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EVALIDATED\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn our farmer example above:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight markdown\"\u003E\u003Ccode\u003EAS A farmer\nI WANT to ferry my duck, fox, and corn across the river\nSO THAT we all live happily ever after\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EReframing a problem as a user story then makes it very easy to write acceptance criteria. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe format for acceptance criteria is:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight markdown\"\u003E\u003Ccode\u003EGIVEN \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003EAPPLICATION\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\nWHEN \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003EI\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EDO\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ETHIS\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\nTHEN \u003Cspan class=\"nt\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003EI\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EEXPECT\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ETHE\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EAPP\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ETO\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003EDO\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003ETHAT\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn our farmer example above:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight markdown\"\u003E\u003Ccode\u003EGIVE three items that will eat each other\nWHEN I ferry one item across the river\nTHEN the other two are safe\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch3\u003E\n  \u003Ca name=\"make-a-plan\" href=\"#make-a-plan\"\u003E\n  \u003C\u002Fa\u003E\n  Make a Plan\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe next step in Polya's heuristic is to make a plan.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAKA pseudocode. \u003C\u002Fp\u003E\n\n\u003Cp\u003EYou write pseudocode, don't you? \u003C\u002Fp\u003E\n\n\u003Cp\u003EWriting pseudocode is like making a sketch for a design. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's your back-of-the-envelope proof-of-concept. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's your discovery phase, your user research, your market validation. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's your roadmap. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt's also the comments for your function. Just \u002F\u002F each line and there you go. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"execute-the-plan\" href=\"#execute-the-plan\"\u003E\n  \u003C\u002Fa\u003E\n  Execute the Plan\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIt's show time! \u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter all this problem understanding and plan making, it's time to crack your fingers, dust off the keyboard, and write some code! This part will be easy because why? Because you wrote pseudocode! All you need to do now is translate that plain language into JavaScript, Python, or (shudder) Java. Then hit Enter...\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"evaluate-the-plan\" href=\"#evaluate-the-plan\"\u003E\n  \u003C\u002Fa\u003E\n  Evaluate the Plan\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EDid your plan work? \u003C\u002Fp\u003E\n\n\u003Cp\u003EIf no, back to step 1. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIf yes, can you do better? \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"how-to-solve-it-with-computational-thinking\" href=\"#how-to-solve-it-with-computational-thinking\"\u003E\n  \u003C\u002Fa\u003E\n  How to Solve It with Computational Thinking\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe steps above are table stakes for problem solving and can be applied to any domain. If you want to turn pro, you need to assimilate with the Borg and learn how to think like a computer. There are four primary stages of computational thinking: \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003EDecomposition\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EGeneralisation\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAbstraction \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAlgorithms \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"decomposition\" href=\"#decomposition\"\u003E\n  \u003C\u002Fa\u003E\n  Decomposition\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIf composing a function is the process of assembling the various components, such as variable, control flow, and conditions, then decomposition is the opposite: it's breaking a problem down into smaller parts. This is both the easiest \u003Cem\u003Eand\u003C\u002Fem\u003E the hardest step in the process because sometimes the component parts of a problem are obvious, but other times the component parts are emergent, or intertwined, and it's difficult to cleanly separate them. \u003C\u002Fp\u003E\n\n\u003Cp\u003EHow does our farmer decompose? \u003C\u002Fp\u003E\n\n\u003Cp\u003EWell, yes, he makes compost.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHe also thinks through the problem.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf there was only one item, he would simply need to carry it across the river.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf there were two items, he would need to carry one across the river, then return for the second item and carry it across the river. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIf there are three? He would still need to carry one across the river, but he would need to ensure that the two left behind did not destroy, or should we say, decompose, one another. In thinking through his items he sees that there is only one combination that can be safely left alone: the fox 🦊 and the corn 🌽. The duck is the crux of the problem! 🦆 He sees that he must carry it across first. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat does he choose when he returns for the second item? It doesn't matter. Either can be left alone and neither can be left with the duck. \u003C\u002Fp\u003E\n\n\u003Cp\u003EDo you see a pattern? \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"generalisation\" href=\"#generalisation\"\u003E\n  \u003C\u002Fa\u003E\n  Generalisation\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EIn decomposing the farmer's problem, we revealed a handful of crucial components to a solution: \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003Econditional statements\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003Erepetition\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003Elogic\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAnother way of saying this is that we \u003Cem\u003Erecognized patterns\u003C\u002Fem\u003E. \u003C\u002Fp\u003E\n\n\u003Cp\u003EA useful question to be in the habit of asking yourself is: where have I seen this or something like it before? \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"abstraction\" href=\"#abstraction\"\u003E\n  \u003C\u002Fa\u003E\n  Abstraction\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EOnce we recognize patterns, we can remove the details, or form abstractions.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhat if it wasn't a farmer? What if it was a lawyer? With three clients who would eat each other and they needed to get across town to the courthouse. \u003C\u002Fp\u003E\n\n\u003Cp\u003EOr what if it was a space shuttle transporting lifeforms to another planet and we needed to find the right combination of carbon and oxygen producers? \u003C\u002Fp\u003E\n\n\u003Cp\u003EIt no longer matter who or what it is. What matters is that we can remove the details in order to form a conceptual model and focus on the relationships between concepts. \u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"algorithm\" href=\"#algorithm\"\u003E\n  \u003C\u002Fa\u003E\n  Algorithm\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003ENow we simply need to write a series of repeatable steps to solve our problem, and, like above, evaluate its success. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWhere have we seen this or something like it before? \u003C\u002Fp\u003E\n\n\u003Cp\u003E🤔\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"how-to-solve-any-algorithm\" href=\"#how-to-solve-any-algorithm\"\u003E\n  \u003C\u002Fa\u003E\n  How to Solve Any Algorithm\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EYou can solve any algorithm using Polya's heuristic and computational thinking. Like your health or your retirement, there's no shortcut to learning how to solve algorithms. Do the work. Practice makes practice. \u003C\u002Fp\u003E\n\n\u003Cp\u003EGive yourself an A. Grab your copy of \u003Ca href=\"https:\u002F\u002Fgum.co\u002Falgorithms\"\u003EA is for Algorithms\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you want to stay in the loop, sign up for my newsletter, \u003Ca href=\"http:\u002F\u002Feepurl.com\u002FcP8CMn\"\u003EThe Solution\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n";a.body_markdown="---\ntitle: How to Solve Any Algorithm\npublished: true\ndescription: Learn how to solve any algorithm using these simple and easy-to-remember techniques.\ntags: algorithms, career, beginners, computerscience\ncover_image: https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F2uuinjhsatdh0slpj9h9.png\ncanonical_url: https:\u002F\u002Fjarednielsen.com\u002Falgorithms\u002F\n---\n\n_This article originally published at [jarednielsen.com](https:\u002F\u002Fjarednielsen.com\u002Falgorithms\u002F)_\n\nIn 1992, Mary Oliver published [Poem 133: The Summer Day](https:\u002F\u002Fwww.loc.gov\u002Fprograms\u002Fpoetry-and-literature\u002Fpoet-laureate\u002Fpoet-laureate-projects\u002Fpoetry-180\u002Fall-poems\u002Fitem\u002Fpoetry-180-133\u002Fthe-summer-day\u002F), which ends with a question for the reader:\n\n\u003E Tell me, what is it you plan to do with your one wild and precious life?\n\nWhat do you plan to do? Are you going to spend your one wild and precious life solving the same problem over and over? Or, worse yet, working on the wrong problem? \n\nWe want to work smarter, not harder. \n\nHow do we do that? \n\nLucky for us, there's an old school approach to problem solving that is still relevant today. It's called, you'll never guess...\n\n\n## How To Solve It\n\nIn [How to Solve It](https:\u002F\u002Famzn.to\u002F33Mp30d), George Polya outlines four steps of problem solving: \n\n1. Understand the problem.\n\n2. Make a plan.\n\n3. Execute the plan. \n\n4. Evaluate the result.\n\n\n### Understand the Problem\n\nIf you're a good developer, you'll realize that the best solutions emerge from listening to your customer tell their story. Many alogirthms are disguised as story problems, such as the farmer who needs to get duck, corn, and fox across the river.  But! He can only carry one of these at a time. If left alone, the duck will eat the corn and the fox will eat the duck. How does he get everything across?\n\nStory time.\n\nUser story time, that is.\n\nYeah, I know. \n\nThey're awkward. \n\nThey _feel_ like work, don't they?\n\nBut the thing is, they _work_! \n\nThe format for a user story is: \n\n```md\nAS A \u003C USER OF SOME SORT \u003E\nI WANT \u003C TO DO THIS \u003E\nSO THAT \u003C MY EXISTENCE IS VALIDATED \u003E\n```\n\nIn our farmer example above: \n\n```md\nAS A farmer\nI WANT to ferry my duck, fox, and corn across the river\nSO THAT we all live happily ever after\n```\n\nReframing a problem as a user story then makes it very easy to write acceptance criteria. \n\nThe format for acceptance criteria is: \n```md\nGIVEN \u003C APPLICATION \u003E\nWHEN \u003C I DO THIS \u003E\nTHEN \u003C I EXPECT THE APP TO DO THAT \u003E\n```\n\nIn our farmer example above: \n```md\nGIVE three items that will eat each other\nWHEN I ferry one item across the river\nTHEN the other two are safe\n```\n\n\n### Make a Plan\n\nThe next step in Polya's heuristic is to make a plan.\n\nAKA pseudocode. \n\nYou write pseudocode, don't you? \n\nWriting pseudocode is like making a sketch for a design. \n\nIt's your back-of-the-envelope proof-of-concept. \n\nIt's your discovery phase, your user research, your market validation. \n\nIt's your roadmap. \n\nIt's also the comments for your function. Just \u002F\u002F each line and there you go. \n\n\n### Execute the Plan\n\nIt's show time! \n\nAfter all this problem understanding and plan making, it's time to crack your fingers, dust off the keyboard, and write some code! This part will be easy because why? Because you wrote pseudocode! All you need to do now is translate that plain language into JavaScript, Python, or (shudder) Java. Then hit Enter...\n\n\n### Evaluate the Plan\n\nDid your plan work? \n\nIf no, back to step 1. \n\nIf yes, can you do better? \n\n\n## How to Solve It with Computational Thinking \n\nThe steps above are table stakes for problem solving and can be applied to any domain. If you want to turn pro, you need to assimilate with the Borg and learn how to think like a computer. There are four primary stages of computational thinking: \n\n* Decomposition\n\n* Generalisation\n\n* Abstraction \n\n* Algorithms \n\n\n### Decomposition\n\nIf composing a function is the process of assembling the various components, such as variable, control flow, and conditions, then decomposition is the opposite: it's breaking a problem down into smaller parts. This is both the easiest _and_ the hardest step in the process because sometimes the component parts of a problem are obvious, but other times the component parts are emergent, or intertwined, and it's difficult to cleanly separate them. \n\nHow does our farmer decompose? \n\nWell, yes, he makes compost.\n\nHe also thinks through the problem.\n\nIf there was only one item, he would simply need to carry it across the river.\n\nIf there were two items, he would need to carry one across the river, then return for the second item and carry it across the river. \n\nIf there are three? He would still need to carry one across the river, but he would need to ensure that the two left behind did not destroy, or should we say, decompose, one another. In thinking through his items he sees that there is only one combination that can be safely left alone: the fox 🦊 and the corn 🌽. The duck is the crux of the problem! 🦆 He sees that he must carry it across first. \n\nWhat does he choose when he returns for the second item? It doesn't matter. Either can be left alone and neither can be left with the duck. \n\nDo you see a pattern? \n\n\n### Generalisation\n\nIn decomposing the farmer's problem, we revealed a handful of crucial components to a solution: \n\n* conditional statements\n\n* repetition\n\n* logic\n\nAnother way of saying this is that we _recognized patterns_. \n\nA useful question to be in the habit of asking yourself is: where have I seen this or something like it before? \n\n\n### Abstraction \n\nOnce we recognize patterns, we can remove the details, or form abstractions.\n\nWhat if it wasn't a farmer? What if it was a lawyer? With three clients who would eat each other and they needed to get across town to the courthouse. \n\nOr what if it was a space shuttle transporting lifeforms to another planet and we needed to find the right combination of carbon and oxygen producers? \n\nIt no longer matter who or what it is. What matters is that we can remove the details in order to form a conceptual model and focus on the relationships between concepts. \n\n\n### Algorithm\n\nNow we simply need to write a series of repeatable steps to solve our problem, and, like above, evaluate its success. \n\nWhere have we seen this or something like it before? \n\n🤔\n\n\n## How to Solve Any Algorithm\n\nYou can solve any algorithm using Polya's heuristic and computational thinking. Like your health or your retirement, there's no shortcut to learning how to solve algorithms. Do the work. Practice makes practice. \n\nGive yourself an A. Grab your copy of [A is for Algorithms](https:\u002F\u002Fgum.co\u002Falgorithms)\n\nIf you want to stay in the loop, sign up for my newsletter, [The Solution](http:\u002F\u002Feepurl.com\u002FcP8CMn).";a.user={name:"Jared Nielsen",username:e,twitter_username:"jarednielsen",github_username:e,website_url:"https:\u002F\u002Fjarednielsen.com\u002F",profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p7mC6kwk--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F113738\u002Fd11bb8c2-1ec8-4fe4-a0f9-f9ae0263528e.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--H49dB3Mn--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F113738\u002Fd11bb8c2-1ec8-4fe4-a0f9-f9ae0263528e.jpeg"};return {data:[{}],fetch:{"data-v-25febe66:0":{article:a}},mutations:[["SET_CURRENT_ARTICLE",a]]}}({},847,null,"2021-05-17T15:04:58Z","nielsenjared")));
window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:855175,title:"Saving videos to cloud in Flutter",description:"Motivation   If you ever thought: \"Video-calls, VoIP, codecs, all these things, it's so...",readable_publish_date:"Oct 8",slug:"saving-videos-to-cloud-in-flutter-57ld",path:"\u002Fbunopus\u002Fsaving-videos-to-cloud-in-flutter-57ld",url:c,comments_count:0,public_reactions_count:d,collection_id:a,published_timestamp:b,positive_reactions_count:d,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tfzDPkJs--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgk1o51m926kco2qbjpg3.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--SqoKTQKp--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgk1o51m926kco2qbjpg3.png",canonical_url:c,created_at:"2021-10-07T15:38:09Z",edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:7,tag_list:"flutter, video, voximplant",tags:["flutter","video","voximplant"],body_html:"\u003Ch2\u003E\n  \u003Ca name=\"motivation\" href=\"#motivation\"\u003E\n  \u003C\u002Fa\u003E\n  Motivation\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIf you ever thought: \u003Cem\u003E\"Video-calls, VoIP, codecs, all these things, it's so complicated!\u003C\u002Fem\u003E 🤯 \u003Cem\u003EI can't code it myself\"\u003C\u002Fem\u003E – you're right. This area can be quite challenging for beginners (like me). Some time ago I got an idea for an app: \u003Cem\u003Ewhat if in dangerous situations I can press one button on my phone and record a video directly to the cloud?\u003C\u002Fem\u003E But preparing servers, understanding protocols, codecs and the whole world of telephony – that's not the thing I want (and can) do in one evening.\u003Cbr\u003E\nTurns out it's much easier than I thought! In this article I will show you how to create an uber-simple Flutter app that can save video from the camera to the cloud server.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 This article describes how to use \u003Cstrong\u003EVoxImplant\u003C\u002Fstrong\u003E platform. You need to bear in mind that this is a paid service, so please check their \u003Ca href=\"https:\u002F\u002Fvoximplant.com\u002Fpricing\"\u003Epricelist\u003C\u002Fa\u003E before jumping in.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"content\" href=\"#content\"\u003E\n  \u003C\u002Fa\u003E\n  Content\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#platform\"\u003EHow to prepare platform\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ca href=\"#client\"\u003EClient\u003C\u002Fa\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"#preparations\"\u003EPreparations\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#camera\"\u003ECamera permissions and debugging\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#clientcode\"\u003EClient code\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#conclusion\"\u003EConclusion\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"#links\"\u003ELinks\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Chr\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"preparing-platform\" href=\"#preparing-platform\"\u003E\n  \u003C\u002Fa\u003E\n  Preparing platform \u003Ca name=\"platform\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EBefore we get our fingers dirty, we need to prepare the platform. VoxImplant provides a user-friendly interface and rich API for their services, so let's cook the backend part of our app.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreate a new account on \u003Ca href=\"\u002F\u002Fvoximplant.com\"\u003Evoximplant.com\u003C\u002Fa\u003E and login into the dashboard.\n\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--h4_RdTTS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F50v5yw4rjkaj9acfbxiw.png\" alt=\"Dashboard\" loading=\"lazy\"\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003EOpen left menu -&gt; Applications -&gt; Create application\n\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--S-gc9MFb--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F0jpgu94jkrj6p7rcf8hf.png\" alt=\"Create application\" loading=\"lazy\"\u003E\nName it as you wish (in my case - \u003Ccode\u003Erecorder\u003C\u002Fcode\u003E). Click at the created application to go to its settings.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EIn the app dashboard go to Users -&gt; Create user\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cXIrdTaN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqik4mkqvmu739epcy4qz.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--cXIrdTaN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqik4mkqvmu739epcy4qz.png\" alt=\"Create user\" loading=\"lazy\"\u003E\u003C\u002Fa\u003EChoose name and password.\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 I used \u003Cem\u003E\"Separate account balance\"\u003C\u002Fem\u003E checkbox, so this user would have separate balance from main account. You can call me paranoid, but it's never too much security!\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EFinally we can add some code. Go to Scenarios -&gt; New Scenario. I called mine \u003Ccode\u003Evideo-recorder\u003C\u002Fcode\u003E. Copy-Paste this code to the editor:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cpre class=\"highlight javascript\"\u003E\u003Ccode\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002Fsubscribe to the events\u003C\u002Fspan\u003E\n\u003Cspan class=\"nx\"\u003EVoxEngine\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EAppEvents\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECallAlerting\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECallEvents\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EConnected\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EhandleCallConnected\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECallEvents\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ERecordStarted\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EhandleRecordStarted\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECallEvents\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EFailed\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EVoxEngine\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eterminate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EaddEventListener\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003ECallEvents\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EDisconnected\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EVoxEngine\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eterminate\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eanswer\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E();\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EhandleCallConnected\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Record call including video\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Erecord\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E({\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Evideo\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E\u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E});\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"kd\"\u003Efunction\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003EhandleRecordStarted\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F Send video URL to client\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EsendMessage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003EJSON\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Estringify\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E({\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"nx\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"nx\"\u003Eurl\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E}));\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\n\n\u003Cp\u003EIt's self-explanatory, but in short: we subscribe to \u003Ccode\u003EConnected\u003C\u002Fcode\u003E event and record incoming video to the cloud. When recording is started (\u003Ccode\u003ERecordStarted\u003C\u002Fcode\u003E event), we send message with its link to the client. For the sake of simplicity we will not add video player to the client, so this code is here just to show how to do that.\u003C\u002Fp\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EAnd the last thing! We should add a router that will handle our calls. Go to Routing -&gt; Create rule. In my case the pattern accepts all incoming calls, but in a production environment you should change it to something meaningful. Choose our scenario from the box.\u003Cbr\u003E\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Q8ztPzoZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4hi682hydbj752q7795b.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Q8ztPzoZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4hi682hydbj752q7795b.png\" alt=\"Create rule\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EAnd that's it with the platform. So simple! Now we can switch to client part.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"client\" href=\"#client\"\u003E\n  \u003C\u002Fa\u003E\n  Client \u003Ca name=\"client\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"preparations\" href=\"#preparations\"\u003E\n  \u003C\u002Fa\u003E\n  Preparations \u003Ca name=\"preparations\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 If you don't want to code client yourself - just clone it:\u003Cbr\u003E\n\u003Ccode\u003Egit clone git@github.com:bunopus\u002Fvideo_recorder.git\u003C\u002Fcode\u003E\u003Cbr\u003E\nDon't forget to add your \u003Cem\u003EUSERNAME\u003C\u002Fem\u003E and \u003Cem\u003EPASSWORD\u003C\u002Fem\u003E. Create .env file in root folder with following content and run an app.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E  USER=USERNAME@YOUR_APP_URL\n  PASSWORD=ACTUAL_PASSWORD\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ELet's start preparing our client. I assume that you already have Flutter SDK up and running. If not - check their \u003Ca href=\"https:\u002F\u002Fflutter.dev\u002Fdocs\u002Fget-started\u002Finstall\"\u003Edocs\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003E\n\u003Cp\u003ECreate empty project\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Eflutter create video_recorder\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Cp\u003EAdd \u003Ccode\u003Eflutter_voximplant\u003C\u002Fcode\u003E package with\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003Eflutter pub add flutter_voximplant\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\n\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EWe don't need any other packages, at least for our super-simple app. You can check that it's up and running with \u003Ccode\u003Eflutter run\u003C\u002Fcode\u003E.\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"camera-access-and-debugging\" href=\"#camera-access-and-debugging\"\u003E\n  \u003C\u002Fa\u003E\n  Camera access and debugging \u003Ca name=\"camera\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EBefore we continue I would like to say a couple of words about debugging apps that use camera. Even though it should be straightforward – it's not 🤦‍♀️. At least for Android.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EFor VoxImplant plugin to work – add this into your project (\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant\u002Fblob\u002Fmaster\u002FREADME.md\"\u003Edocs\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"ios\" href=\"#ios\"\u003E\n  \u003C\u002Fa\u003E\n  iOS\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EAdd the following entry to your \u003Ccode\u003EInfo.plist\u003C\u002Fcode\u003E file, located in \u003Ccode\u003E&lt;project root&gt;\u002Fios\u002FRunner\u002FInfo.plist\u003C\u002Fcode\u003E:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E&lt;key&gt;NSMicrophoneUsageDescription&lt;\u002Fkey&gt;\n&lt;string&gt;Microphone is required to make audio calls&lt;\u002Fstring&gt;\n&lt;key&gt;NSCameraUsageDescription&lt;\u002Fkey&gt;\n&lt;string&gt;Camera is required to make video calls&lt;\u002Fstring&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis entry allows your app to access the microphone and cameras.\u003C\u002Fp\u003E\n\n\u003Ch4\u003E\n  \u003Ca name=\"android\" href=\"#android\"\u003E\n  \u003C\u002Fa\u003E\n  Android\n\u003C\u002Fh4\u003E\n\n\u003Cp\u003EIt is required to add Java 8 support.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOpen \u003Ccode\u003E&lt;project root&gt;android\u002Fapp\u002Fbuild.gradle\u003C\u002Fcode\u003E file and add the following lines to ‘android’ section:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003EcompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EBut that's not enough (check \u003Ca href=\"https:\u002F\u002Fwww.oreilly.com\u002Flibrary\u002Fview\u002Fflutter-for-beginners\u002F9781788996082\u002F378b452d-3b50-4de5-9e98-8571b813a924.xhtml\"\u003Ethis article\u003C\u002Fa\u003E)!\u003Cbr\u003E\nFor Android, go to \u003Ccode\u003Eandroid\u002Fapp\u002Fsrc\u002F(main|debug|profile)\u002FAndroidManifest.xml\u003C\u002Fcode\u003E and add\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight xml\"\u003E\u003Ccode\u003E\u003Cspan class=\"nt\"\u003E&lt;manifest\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Exmlns:android=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres\u002Fandroid\"\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Epackage=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"com.example.handson\"\u003C\u002Fspan\u003E\u003Cspan class=\"nt\"\u003E&gt;\u003C\u002Fspan\u003E\n  ...  \n  \u003Cspan class=\"nt\"\u003E&lt;uses-permission\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eandroid:name=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"android.permission.CAMERA\"\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E\u002F&gt;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"nt\"\u003E&lt;uses-permission\u003C\u002Fspan\u003E \u003Cspan class=\"na\"\u003Eandroid:name=\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"android.permission.RECORD_AUDIO\"\u003C\u002Fspan\u003E \u003Cspan class=\"nt\"\u003E\u002F&gt;\u003C\u002Fspan\u003E\n\u003Cspan class=\"nt\"\u003E&lt;\u002Fmanifest&gt;\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen open the emulator and give access to an app.\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tnWSaHJe--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgi2eaedeyxoqn5xfddy1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tnWSaHJe--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgi2eaedeyxoqn5xfddy1.png\" alt=\"Access for app\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E  \u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 Best cross-platform solution for Flutter to handle permissions is \u003Ca href=\"https:\u002F\u002Fpub.dev\u002Fpackages\u002Fpermission_handler\"\u003Epermission_handler\u003C\u002Fa\u003E package. It removes neccesity to dance around your phone.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EAnd if you want to use your \u003Cstrong\u003Eactual web camera\u003C\u002Fstrong\u003E and not jumping square that comes with Android emulator - you should change setting as advised \u003Ca href=\"https:\u002F\u002Fyoutu.be\u002FB4JVqKHsYzk\"\u003Ehere\u003C\u002Fa\u003E  \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ciframe width=\"710\" height=\"399\" src=\"https:\u002F\u002Fwww.youtube.com\u002Fembed\u002FB4JVqKHsYzk\" allowfullscreen loading=\"lazy\"\u003E\n\u003C\u002Fiframe\u003E\n\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EBUT\u003C\u002Fstrong\u003E 🤦‍♀️ in my case, i've got one problem: i have several cams, connected to my computer, and in emulator settings i had only first one!\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mxJbzjU9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7c1exu546lxkku2yyqol.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mxJbzjU9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7c1exu546lxkku2yyqol.png\" alt=\"Emulator settings\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EHopefully it can be solved if you run your emulator with \u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F63951011\u002Fhow-to-access-webcam-connected-using-usb-in-android-avd\"\u003Ethis command\u003C\u002Fa\u003E (on Mac)\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E\u003Cspan class=\"nb\"\u003Ecd\u003C\u002Fspan\u003E ~\u002FLibrary\u002FAndroid\u002Fsdk\u002Femulator\nemulator @YOUR_DEVICE_NAME \u003Cspan class=\"nt\"\u003E-camera-back\u003C\u002Fspan\u003E webcam1\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 For some reason you can't use \u003Ccode\u003E-camera-back webcam1 -camera-front webcam1\u003C\u002Fcode\u003E \u003Ca href=\"https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F11857006\u002Fandroid-webcam-enable-in-emulator\u002F11857261\"\u003Eat the same time\u003C\u002Fa\u003E 🤷‍♀️\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003ETo check if the camera is working – open the camera app in your emulator and see face of a person who spent their life trying to run this $h1t 👁👄👁\u003C\u002Fp\u003E\n\n\n\u003Chr\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"client-code\" href=\"#client-code\"\u003E\n  \u003C\u002Fa\u003E\n  Client code \u003Ca name=\"clientcode\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EFinally we have done everything to start coding our client. Let's take a look at \u003Ccode\u003Elib\u002Fmain.dart\u003C\u002Fcode\u003E. At the init phase we're creating a client for the platform calling \u003Ccode\u003EVoximplant().getClient()\u003C\u002Fcode\u003E.\u003Cbr\u003E\nThen we login \u003Ccode\u003E_client.login()\u003C\u002Fcode\u003E using the username and password created previously. To simplify code I store them in a .env file (and use \u003Ca href=\"https:\u002F\u002Fpub.dev\u002Fpackages\u002Fflutter_dotenv\"\u003Eflutter_dotenv\u003C\u002Fa\u003E package). For your prouction app you can implement login screen, and use auth token (\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_demos\u002Fblob\u002Fmaster\u002Fvideo_call\u002Flib\u002Fservices\u002Fauth_service.dart\"\u003Eexample\u003C\u002Fa\u003E)\u003C\u002Fp\u003E\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 Use \u003Ca href=\"mailto:user@application.account.voximplant.com\"\u003Euser@application.account.voximplant.com\u003C\u002Fa\u003E format to log in.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\n\u003C\u002Fblockquote\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight dart\"\u003E\u003Ccode\u003E\u003Cspan class=\"kd\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003E_MyHomePageState\u003C\u002Fspan\u003E \u003Cspan class=\"kd\"\u003Eextends\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EMyHomePage\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efinal\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EVIClient\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EVoximplant\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E().\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EgetClient\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003EVICall\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E?\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_call\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003EAppState\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_state\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EAppState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Einitialising\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"nd\"\u003E@override\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003EinitState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Esuper\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EinitState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_login\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\n  \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_login\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"k\"\u003Etry\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Econnect\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Elogin\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Edotenv\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eget\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'USER'\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E),\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Edotenv\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eget\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E'PASSWORD'\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E));\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003EsetState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{});\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003E_state\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EAppState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eready\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eon\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EException\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Ecatch\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ee\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EtoString\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E());\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003EsetState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003E_state\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EAppState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Eerror\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"o\"\u003E});\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhen we press \"Record\", our app starts a call to the platform with \u003Ccode\u003E_client.call()\u003C\u002Fcode\u003E. You can pass the \u003Ccode\u003EVICallSettings\u003C\u002Fcode\u003E structure to specify codec and other parameters. Pay attention to the empty string passed as the first argument to \u003Ccode\u003Ecall\u003C\u002Fcode\u003E: this is the route name for your call. If you remember, we put \u003Ccode\u003E.*\u003C\u002Fcode\u003E in our \u003Ccode\u003Epattern\u003C\u002Fcode\u003E field, so any name will be accepted. For production you can add a meaningful route here and then check it on the platform.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight dart\"\u003E\u003Ccode\u003E  \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E_record\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kd\"\u003Evar\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_settings\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EVICallSettings\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_settings\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EvideoFlags\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EVIVideoFlags\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nl\"\u003EsendVideo:\u003C\u002Fspan\u003E \u003Cspan class=\"kc\"\u003Etrue\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_call\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"s\"\u003E\"\"\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"nl\"\u003Esettings:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_settings\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E);\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_call\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E?.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EonCallConnected\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_onCallConnected\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_call\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E?.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EonCallDisconnected\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_onCallDisconneced\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003E_call\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E?.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EonMessageReceived\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_onMessage\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E;\u003C\u002Fspan\u003E\n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003E_call?.onCallConnected\u003C\u002Fcode\u003E and other callbacks are used to subscribe to events and change the UI of our app accordingly. \u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the \u003Ccode\u003E_onMessage\u003C\u002Fcode\u003E function we just log the video url that platform sends to us. You can then show it to the user with the help of \u003Ca href=\"https:\u002F\u002Fpub.dev\u002Fpackages\u002Fvideo_player\"\u003Evideo_player\u003C\u002Fa\u003E package.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight dart\"\u003E\u003Ccode\u003E\u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003E_onMessage\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EVICall\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecall\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003EString\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Elog\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Emessage\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E);\u003C\u002Fspan\u003E\n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 There is a \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant\u002Fissues\u002F24\"\u003Ebug\u003C\u002Fa\u003E in \u003Ccode\u003Eflutter_voximplant\u003C\u002Fcode\u003E package that makes messages unusable on Android. Fix is already merged into master, but not published to pub. Hopefully it will be fixed soon.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Cp\u003EWhen we need to end up the call, we're just calling method \u003Ccode\u003E_call?.hangup()\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAnd the last thing we need to do is to close the connection when we don't need it. I'm doing that inside the \u003Ccode\u003Edispose\u003C\u002Fcode\u003E method.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight dart\"\u003E\u003Ccode\u003E\u003Cspan class=\"nd\"\u003E@override\u003C\u002Fspan\u003E\n\u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Edispose\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Esuper\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Edispose\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"n\"\u003E_logout\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\n\u003Cspan class=\"n\"\u003EFuture\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_logout\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Easync\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"kd\"\u003Efinal\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Estate\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eawait\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EgetClientState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Estate\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E!=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EVIClientState\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003EDisconnected\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_client\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"na\"\u003Edisconnect\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E();\u003C\u002Fspan\u003E\n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cblockquote\u003E\n\u003Cp\u003E💡 \u003Ccode\u003Edispose\u003C\u002Fcode\u003E method in Flutter widgets has couple of issues, for example \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fflutter\u002Fflutter\u002Fissues\u002F28134\"\u003Enot called when app quit\u003C\u002Fa\u003E or \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fflutter\u002Fflutter\u002Fissues\u002F64935\"\u003Edoesn't work as async\u003C\u002Fa\u003E. In a production environment you will need some workarounds to make sure that connection is closed properly.\u003C\u002Fp\u003E\n\u003C\u002Fblockquote\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion \u003Ca name=\"conclusion\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EAaaand that's it 🎉! Our client is ready, and when we press the Record button (and then Stop), we can go to App -&gt; Call history and see the happy face of a happy developer! 😃\u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DFlZMJ_P--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fphqq6be21u0wj7g9fqkg.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DFlZMJ_P--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fphqq6be21u0wj7g9fqkg.png\" alt=\"Happy face\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"links\" href=\"#links\"\u003E\n  \u003C\u002Fa\u003E\n  Links \u003Ca name=\"links\"\u003E\u003C\u002Fa\u003E\n\u003C\u002Fh2\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant\"\u003EVoximplant flutter package\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fvideorecorder\"\u003ETypescript implementation of video recorder\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Ca href=\"https:\u002F\u002Fvoximplant.com\u002Fdocs\u002Ftutorials\u002Frecording\u002Fvideo-recording\"\u003EVideo recording tutorial\u003C\u002Fa\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E\u003Csub\u003E\u003Csup\u003EIllustration created by stories - \u003Ca href=\"https:\u002F\u002Fwww.freepik.com\u002Fvectors\u002Fmobile\"\u003E\u003C\u002Fa\u003E\u003Ca href=\"http:\u002F\u002Fwww.freepik.com\"\u003Ewww.freepik.com\u003C\u002Fa\u003E\u003C\u002Fsup\u003E\u003C\u002Fsub\u003E\u003C\u002Fp\u003E\n\n",body_markdown:"## Motivation\nIf you ever thought: _\"Video-calls, VoIP, codecs, all these things, it's so complicated!_ 🤯 _I can't code it myself\"_ – you're right. This area can be quite challenging for beginners (like me). Some time ago I got an idea for an app: _what if in dangerous situations I can press one button on my phone and record a video directly to the cloud?_ But preparing servers, understanding protocols, codecs and the whole world of telephony – that's not the thing I want (and can) do in one evening.\nTurns out it's much easier than I thought! In this article I will show you how to create an uber-simple Flutter app that can save video from the camera to the cloud server.\n\n\u003E💡 This article describes how to use **VoxImplant** platform. You need to bear in mind that this is a paid service, so please check their [pricelist](https:\u002F\u002Fvoximplant.com\u002Fpricing) before jumping in.\n\n## Content\n- [How to prepare platform](#platform)\n- [Client](#client)\n  - [Preparations](#preparations)\n  - [Camera permissions and debugging](#camera)\n  - [Client code](#clientcode)\n- [Conclusion](#conclusion)\n- [Links](#links)\n\n------\n\n## Preparing platform \u003Ca name=\"platform\"\u003E\u003C\u002Fa\u003E\nBefore we get our fingers dirty, we need to prepare the platform. VoxImplant provides a user-friendly interface and rich API for their services, so let's cook the backend part of our app.\n\n1. Create a new account on [voximplant.com](voximplant.com) and login into the dashboard.\n![Dashboard](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F50v5yw4rjkaj9acfbxiw.png)\n2. Open left menu -\u003E Applications -\u003E Create application\n![Create application](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F0jpgu94jkrj6p7rcf8hf.png )\nName it as you wish (in my case - `recorder`). Click at the created application to go to its settings.\n3. In the app dashboard go to Users -\u003E Create user\n![Create user](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqik4mkqvmu739epcy4qz.png)Choose name and password.\n\n    \u003E💡 I used _\"Separate account balance\"_ checkbox, so this user would have separate balance from main account. You can call me paranoid, but it's never too much security!\n\n4. Finally we can add some code. Go to Scenarios -\u003E New Scenario. I called mine `video-recorder`. Copy-Paste this code to the editor:\n\n    ```javascript\n    \u002F\u002Fsubscribe to the events\n    VoxEngine.addEventListener(AppEvents.CallAlerting, (e) =\u003E {\n      e.call.addEventListener(CallEvents.Connected, handleCallConnected);\n      e.call.addEventListener(CallEvents.RecordStarted, handleRecordStarted);\n      e.call.addEventListener(CallEvents.Failed, VoxEngine.terminate);\n      e.call.addEventListener(CallEvents.Disconnected, VoxEngine.terminate);\n      e.call.answer();\n    });\n\n    function handleCallConnected(e) {\n      \u002F\u002F Record call including video\n      e.call.record({video:true});\n    }\n\n    function handleRecordStarted(e) {\n      \u002F\u002F Send video URL to client\n      e.call.sendMessage(JSON.stringify({url: e.url}));\n    }\n    ```  \n\n    It's self-explanatory, but in short: we subscribe to `Connected` event and record incoming video to the cloud. When recording is started (`RecordStarted` event), we send message with its link to the client. For the sake of simplicity we will not add video player to the client, so this code is here just to show how to do that.\n5. And the last thing! We should add a router that will handle our calls. Go to Routing -\u003E Create rule. In my case the pattern accepts all incoming calls, but in a production environment you should change it to something meaningful. Choose our scenario from the box.\n![Create rule](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F4hi682hydbj752q7795b.png)\n\nAnd that's it with the platform. So simple! Now we can switch to client part.\n\n------\n\n## Client \u003Ca name=\"client\"\u003E\u003C\u002Fa\u003E\n### Preparations \u003Ca name=\"preparations\"\u003E\u003C\u002Fa\u003E\n\u003E💡 If you don't want to code client yourself - just clone it:\n`git clone git@github.com:bunopus\u002Fvideo_recorder.git`\nDon't forget to add your _USERNAME_ and _PASSWORD_. Create .env file in root folder with following content and run an app.\n  ```\n  USER=USERNAME@YOUR_APP_URL\n  PASSWORD=ACTUAL_PASSWORD\n  ```\n\nLet's start preparing our client. I assume that you already have Flutter SDK up and running. If not - check their [docs](https:\u002F\u002Fflutter.dev\u002Fdocs\u002Fget-started\u002Finstall)\n\n1. Create empty project \n\n    ```bash\n    flutter create video_recorder\n    ```\n\n2. Add `flutter_voximplant` package with \n\n    ```bash\n    flutter pub add flutter_voximplant\n    ```\nWe don't need any other packages, at least for our super-simple app. You can check that it's up and running with `flutter run`.\n\n------\n\n### Camera access and debugging \u003Ca name=\"camera\"\u003E\u003C\u002Fa\u003E\n\nBefore we continue I would like to say a couple of words about debugging apps that use camera. Even though it should be straightforward – it's not 🤦‍♀️. At least for Android.  \n\nFor VoxImplant plugin to work – add this into your project ([docs](https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant\u002Fblob\u002Fmaster\u002FREADME.md))\n#### iOS\n\nAdd the following entry to your `Info.plist` file, located in `\u003Cproject root\u003E\u002Fios\u002FRunner\u002FInfo.plist`:\n```\n\u003Ckey\u003ENSMicrophoneUsageDescription\u003C\u002Fkey\u003E\n\u003Cstring\u003EMicrophone is required to make audio calls\u003C\u002Fstring\u003E\n\u003Ckey\u003ENSCameraUsageDescription\u003C\u002Fkey\u003E\n\u003Cstring\u003ECamera is required to make video calls\u003C\u002Fstring\u003E\n```\nThis entry allows your app to access the microphone and cameras.\n\n#### Android\nIt is required to add Java 8 support.\n\nOpen `\u003Cproject root\u003Eandroid\u002Fapp\u002Fbuild.gradle` file and add the following lines to ‘android’ section:\n```\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n}\n```\n\nBut that's not enough (check [this article](https:\u002F\u002Fwww.oreilly.com\u002Flibrary\u002Fview\u002Fflutter-for-beginners\u002F9781788996082\u002F378b452d-3b50-4de5-9e98-8571b813a924.xhtml))!\nFor Android, go to `android\u002Fapp\u002Fsrc\u002F(main|debug|profile)\u002FAndroidManifest.xml` and add\n```xml\n\u003Cmanifest xmlns:android=\"http:\u002F\u002Fschemas.android.com\u002Fapk\u002Fres\u002Fandroid\" package=\"com.example.handson\"\u003E\n  ...  \n  \u003Cuses-permission android:name=\"android.permission.CAMERA\" \u002F\u003E\n  \u003Cuses-permission android:name=\"android.permission.RECORD_AUDIO\" \u002F\u003E\n\u003C\u002Fmanifest\u003E\n```\nThen open the emulator and give access to an app.\n![Access for app](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fgi2eaedeyxoqn5xfddy1.png)  \n\n\u003E💡 Best cross-platform solution for Flutter to handle permissions is [permission_handler](https:\u002F\u002Fpub.dev\u002Fpackages\u002Fpermission_handler) package. It removes neccesity to dance around your phone.\n\nAnd if you want to use your **actual web camera** and not jumping square that comes with Android emulator - you should change setting as advised [here](https:\u002F\u002Fyoutu.be\u002FB4JVqKHsYzk)  \n\n{% youtube B4JVqKHsYzk %}\n\n**BUT** 🤦‍♀️ in my case, i've got one problem: i have several cams, connected to my computer, and in emulator settings i had only first one!\n![Emulator settings](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F7c1exu546lxkku2yyqol.png)\n\nHopefully it can be solved if you run your emulator with [this command](https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F63951011\u002Fhow-to-access-webcam-connected-using-usb-in-android-avd) (on Mac)\n```bash\ncd ~\u002FLibrary\u002FAndroid\u002Fsdk\u002Femulator\nemulator @YOUR_DEVICE_NAME -camera-back webcam1\n```\n\u003E💡 For some reason you can't use `-camera-back webcam1 -camera-front webcam1` [at the same time](https:\u002F\u002Fstackoverflow.com\u002Fquestions\u002F11857006\u002Fandroid-webcam-enable-in-emulator\u002F11857261) 🤷‍♀️\n\n\nTo check if the camera is working – open the camera app in your emulator and see face of a person who spent their life trying to run this $h1t 👁👄👁\n\n--------\n\n### Client code \u003Ca name=\"clientcode\"\u003E\u003C\u002Fa\u003E\n\nFinally we have done everything to start coding our client. Let's take a look at `lib\u002Fmain.dart`. At the init phase we're creating a client for the platform calling `Voximplant().getClient()`.\nThen we login `_client.login()` using the username and password created previously. To simplify code I store them in a .env file (and use [flutter_dotenv](https:\u002F\u002Fpub.dev\u002Fpackages\u002Fflutter_dotenv) package). For your prouction app you can implement login screen, and use auth token ([example](https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_demos\u002Fblob\u002Fmaster\u002Fvideo_call\u002Flib\u002Fservices\u002Fauth_service.dart))\n\n\u003E💡 Use user@application.account.voximplant.com format to log in.\n\n```dart\nclass _MyHomePageState extends State\u003CMyHomePage\u003E {\n  final VIClient _client = Voximplant().getClient();\n  VICall? _call;\n  AppState _state = AppState.initialising;\n\n  @override\n  initState() {\n    super.initState();\n    _login();\n  }\n\n  void _login() async {\n    try {\n      await _client.connect();\n      await _client.login(dotenv.get('USER'), dotenv.get('PASSWORD'));\n      setState(() {});\n      _state = AppState.ready;\n    } on Exception catch (e) {\n      log(e.toString());\n      setState(() {\n        _state = AppState.error;\n      });\n    }\n  }\n```\n\nWhen we press \"Record\", our app starts a call to the platform with `_client.call()`. You can pass the `VICallSettings` structure to specify codec and other parameters. Pay attention to the empty string passed as the first argument to `call`: this is the route name for your call. If you remember, we put `.*` in our `pattern` field, so any name will be accepted. For production you can add a meaningful route here and then check it on the platform.\n\n```dart\n  void _record() async {\n    var _settings = VICallSettings();\n    _settings.videoFlags = VIVideoFlags(sendVideo: true);\n    _call = await _client.call(\"\", settings: _settings);\n    _call?.onCallConnected = _onCallConnected;\n    _call?.onCallDisconnected = _onCallDisconneced;\n    _call?.onMessageReceived = _onMessage;\n  }\n```\n\n`_call?.onCallConnected` and other callbacks are used to subscribe to events and change the UI of our app accordingly. \n\nIn the `_onMessage` function we just log the video url that platform sends to us. You can then show it to the user with the help of [video_player](https:\u002F\u002Fpub.dev\u002Fpackages\u002Fvideo_player) package.\n\n```dart\nvoid _onMessage(VICall call, String message) {\n    log(message);\n  }\n```\n\n\u003E💡 There is a [bug](https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant\u002Fissues\u002F24) in `flutter_voximplant` package that makes messages unusable on Android. Fix is already merged into master, but not published to pub. Hopefully it will be fixed soon.\n\nWhen we need to end up the call, we're just calling method `_call?.hangup()`\n\nAnd the last thing we need to do is to close the connection when we don't need it. I'm doing that inside the `dispose` method.\n\n```dart\n@override\nvoid dispose() {\n  super.dispose();\n  _logout();\n}\n\nFuture\u003Cvoid\u003E _logout() async {\n  final state = await _client.getClientState();\n  if (state != VIClientState.Disconnected) _client.disconnect();\n}\n```\n\u003E💡 `dispose` method in Flutter widgets has couple of issues, for example [not called when app quit](https:\u002F\u002Fgithub.com\u002Fflutter\u002Fflutter\u002Fissues\u002F28134) or [doesn't work as async](https:\u002F\u002Fgithub.com\u002Fflutter\u002Fflutter\u002Fissues\u002F64935). In a production environment you will need some workarounds to make sure that connection is closed properly.\n\n### Conclusion \u003Ca name=\"conclusion\"\u003E\u003C\u002Fa\u003E\nAaaand that's it 🎉! Our client is ready, and when we press the Record button (and then Stop), we can go to App -\u003E Call history and see the happy face of a happy developer! 😃\n![Happy face](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fphqq6be21u0wj7g9fqkg.png)\n\n## Links \u003Ca name=\"links\"\u003E\u003C\u002Fa\u003E\n- [Voximplant flutter package](https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fflutter_voximplant)\n- [Typescript implementation of video recorder](https:\u002F\u002Fgithub.com\u002Fvoximplant\u002Fvideorecorder)\n- [Video recording tutorial](https:\u002F\u002Fvoximplant.com\u002Fdocs\u002Ftutorials\u002Frecording\u002Fvideo-recording)\n\n\u003Csub\u003E\u003Csup\u003EIllustration created by stories - \u003Ca href=\"https:\u002F\u002Fwww.freepik.com\u002Fvectors\u002Fmobile\"\u003Ewww.freepik.com\u003C\u002Fa\u003E\u003C\u002Fsup\u003E\u003C\u002Fsub\u003E",user:{name:"Evgeny Kot",username:e,twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--zU0e89Vj--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F721159\u002F9f655afb-1235-4fdb-9684-8a28f206f63b.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--FFqWS0f9--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F721159\u002F9f655afb-1235-4fdb-9684-8a28f206f63b.jpeg"}}},serverRendered:true,routePath:"\u002Farticles\u002Fbunopus\u002F855175",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-10-08T11:42:16Z","https:\u002F\u002Fdev.to\u002Fbunopus\u002Fsaving-videos-to-cloud-in-flutter-57ld",1,"bunopus"));
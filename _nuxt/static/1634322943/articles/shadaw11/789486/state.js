window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:789486,title:"A Deep Dive into Strapi GraphQL",description:"Introduction   REST API design pattern is one of the best practices when building API’s for...",readable_publish_date:"Aug 12",slug:"a-deep-dive-into-strapi-graphql-5bc4",path:"\u002Fstrapi\u002Fa-deep-dive-into-strapi-graphql-5bc4",url:"https:\u002F\u002Fdev.to\u002Fstrapi\u002Fa-deep-dive-into-strapi-graphql-5bc4",comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--iBi-uOgF--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqyn1pkjdrlc8ihqyekg9.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Xx_szFhj--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fqyn1pkjdrlc8ihqyekg9.png",canonical_url:"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fa-deep-dive-into-strapi-graph-ql?utm_source=devto&utm_medium=post",created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:19,tag_list:"graphql, restapi, cms, apollo",tags:["graphql","restapi","cms","apollo"],body_html:"\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EREST API design pattern is one of the best practices when building API’s for the back end of any application. It’s benefits supersede it’s downside. When fetching data from an extensive REST application with many database relationships, there is can be an information overload problem. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis post will explore \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EHow GraphQL helps solve this problem and how implementing GraphQL in Strapi is even easier than we think.\u003C\u002Fli\u003E\n\u003Cli\u003EHow to use of Apollo in Vue.js applications to make GraphQL queries to a Strap backend server\u003C\u002Fli\u003E\n\u003Cli\u003EMaking CRUD requests using both the Strapi GraphQL playground and Apollo GraphQL in a Vue.js app\u003C\u002Fli\u003E\n\u003Cli\u003EObtaining a JSON web tokens (JWT) for users in case of authenticated requests\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"graphql-overview\" href=\"#graphql-overview\"\u003E\n  \u003C\u002Fa\u003E\n  GraphQL Overview\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ECons Of The REST API\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn a typical REST API-based application, data is fetched from the back end and displayed on the front end. There is the problem of overloading information (mentioned earlier). I'll further explain this using an example.\u003C\u002Fp\u003E\n\n\u003Cp\u003EA front end developer wants to fetch just the \u003Ccode\u003EuserName\u003C\u002Fcode\u003E of a user in the database. He expects his response to look like this\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    user :{\n      userName:\"alloyking12300\"\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Ebut instead he gets this:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    user: {\n      userName:\"alloying12300\",\n      email:\"testemail@email.com\",\n      age: 21,\n      profile: {\n        img:\"image\u002Fpath\",\n        profession:\"developer\"\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow you see, the response above is packed with lot of data that we do not need. It is, of course, possible to display what you need on the front end and be done with it, but this has a massive impact on the performance of the application. In the quest to solve this, GraphQL was born. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESecondly, REST API applications have too many routes. In very complex applications, the routes can become challenging to handle and manage. GraphQL helps us tackle this too.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EGraphQL\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EGraphQL is a query language for your API and a server-side runtime for executing queries using a type system you define for your data.\u003C\u002Fp\u003E\n\n\u003Cp\u003EGraphQL provides developers access to just the particular data they need in a specific request by using just one endpoint (l like to think of it as a smart endpoint), which understands what the front end application expects and returns precisely.  \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe bulk of the technicalities of implementing GraphQL have been simplified when using \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002F\"\u003EStrapi\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"strapi-graphql\" href=\"#strapi-graphql\"\u003E\n  \u003C\u002Fa\u003E\n  Strapi GraphQL\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EStrapi is an easily customizable open-source headless CMS. Strapi’s API can return responses in both REST or GraphQL. In this tutorial, we will look at how GraphQL works in Strapi.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"implementing-graphql-in-strapi\" href=\"#implementing-graphql-in-strapi\"\u003E\n  \u003C\u002Fa\u003E\n  Implementing GraphQL in Strapi\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo explore the wonders of GraphQL in Strapi, we need a Strapi project to test. Let's proceed by creating a new Strapi project using the following command:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    yarn create strapi-app my-project --quickstart\n    or\n    npx create-strapi-app my-project --quickstart\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThis command will create a new Strapi project and launch it in your browser like this:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5Zwg7GmZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621600004384_register.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5Zwg7GmZ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621600004384_register.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhen you fill in this form, you will create your first Admin User. After that, the application will redirect to the dashboard.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"blog-collection-type\" href=\"#blog-collection-type\"\u003E\n  \u003C\u002Fa\u003E\n  Blog Collection Type\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe need content to test our GraphQL API. Let's create a blog collection type and add some blog posts to it.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOn the left navigation menu, from the plugin section, click on Content-TypesBuilder. Fill the form to create a new Collection Type.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--jGS58Stm--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_75763409C2F676A56666F5A72B9E5F7A23BC73D4BF13033A6B3418E998DD3AF1_1620384576736_ContentType.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--jGS58Stm--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_75763409C2F676A56666F5A72B9E5F7A23BC73D4BF13033A6B3418E998DD3AF1_1620384576736_ContentType.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe need to modify our Blog content type further to contain the \u003Cstrong\u003ETitle\u003C\u002Fstrong\u003E, \u003Cstrong\u003EBody\u003C\u002Fstrong\u003E, and \u003Cstrong\u003EDate\u003C\u002Fstrong\u003E fields. These are necessary fields that we need. Fill the form and select these fields. You can use the images below for guidance.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--aL1FxQQr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621603201815_BlogCollection.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--aL1FxQQr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621603201815_BlogCollection.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1cPwA_Zu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625064825839_BlogContentType.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--1cPwA_Zu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625064825839_BlogContentType.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ERepeat the process in the image above for the rest of the fields. Then save. After saving, we should have a newly created Collection Type of Blog. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"add-blog-posts\" href=\"#add-blog-posts\"\u003E\n  \u003C\u002Fa\u003E\n  Add Blog Posts\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe have created our Collection Type. We need few blog posts to be able to explore how GraphQL works in Strapi.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFrom the Collection Type section in the navigation menu, click on \u003Cstrong\u003EBlogs→Add new blog post\u003C\u002Fstrong\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KNKWWh68--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065021333_createBlog.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KNKWWh68--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065021333_createBlog.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ELets create a blog post with some dummy text as this is for educational purpose only\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5yyvBuIn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065117104_blogPost2.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5yyvBuIn--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065117104_blogPost2.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo use GraphQL in Strapi, we need to install the GraphQL Plugin using the command below\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    yarn strapi install graphql\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOn completion of the installation, our Strapi application is set for GraphQL. Strapi also has a Playground for testing GraphQL operations. We can access this Playground using \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:1337\u002Fgraphql.\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe GraphQL Playground has an inbuilt text editor for you to enter your GraphQL commands, a play button for you to run your code and a screen to display the return values, error or success message.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VXdJ5c1C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621786761481_graphQLPlayGround.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--VXdJ5c1C--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621786761481_graphQLPlayGround.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore we proceed to the Strapi playground to test, we need to grant the public user access to the Blogs collection type. Authentication will be covered later on in this post. For now, lets get started with the public user. To do this, click on \u003Cstrong\u003Esettings→roles→permissions\u003C\u002Fstrong\u003E to grant all the necessary access to the Blogs and save.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--YZoK1e5c--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625066172791_grantAccess.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--YZoK1e5c--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625066172791_grantAccess.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"strapi-graphql-playground\" href=\"#strapi-graphql-playground\"\u003E\n  \u003C\u002Fa\u003E\n  Strapi GraphQL Playground\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe Strapi GraphQl playground is a development environment for you to interact with your Strapi application using GraphQl. Lets proceed by carrying out CRUD operations on our blog content using the playground.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn order to interact with the GraphQL server, we either need to write a \u003Cstrong\u003EQuery\u003C\u002Fstrong\u003E or a \u003Cstrong\u003EMutation\u003C\u002Fstrong\u003E.\u003Cbr\u003E\nA \u003Cstrong\u003EGraphQL query\u003C\u002Fstrong\u003E is used to read or fetch data from the server while a \u003Cstrong\u003Emutation\u003C\u002Fstrong\u003E is used to write or post values. For easier understanding you can think of it as GET request and POST request where Query is used to make GET request and Mutation to make POST request. \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"fetching-multiple-contents\" href=\"#fetching-multiple-contents\"\u003E\n  \u003C\u002Fa\u003E\n  Fetching Multiple Contents\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWith that said, lets getting started by reading from our GraphQL server. We need to write a query for this. The code below is a basic GraphQL query to fetch all Blogs from our Strapi backend. It  returns the \u003Ccode\u003EId\u003C\u002Fcode\u003E, \u003Ccode\u003ETitle\u003C\u002Fcode\u003E and \u003Ccode\u003EBody\u003C\u002Fcode\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    query{\n      blogs{\n        id\n        Title\n        Body\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EEnter the code in your Strapi playground and it should fetch all Blog posts in your Blog collection \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--64l5c9MO--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1622377664427_graphQLPlayGroundResult.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--64l5c9MO--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1622377664427_graphQLPlayGroundResult.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"fetching-single-content\" href=\"#fetching-single-content\"\u003E\n  \u003C\u002Fa\u003E\n  Fetching Single Content:\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe can fetch a single blog post from the collection by passing along a unique key. In our case, we will pass along the \u003Ccode\u003Eid\u003C\u002Fcode\u003E .\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    query {\n      blog(id:\"3\"){\n        id\n        Title\n        Body\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--R4c9CWne--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625915489319_screen18.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--R4c9CWne--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625915489319_screen18.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"create-content\" href=\"#create-content\"\u003E\n  \u003C\u002Fa\u003E\n  Create Content\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ERemember when we talked about Queries and Mutations earlier, we will use a Mutation to create a new entry. Lets create a new blog post to continue.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    mutation {\n      createBlog(input: { data: { Title: \"Fifth Post\", Body: \" This is the fifth blog post. It  was created using a graphQl mutaiton from the strapi graphql playground\" } }) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe function \u003Ccode\u003EcreateBlog\u003C\u002Fcode\u003E accepts \u003Ccode\u003Einput\u003C\u002Fcode\u003E object which in turn accepts a  \u003Ccode\u003Edata\u003C\u002Fcode\u003E object with inputs to insert. This function derives its name from the name of the Strapi collection type. If we wanted to create a new user for instance, it would be \u003Ccode\u003EcreateUser\u003C\u002Fcode\u003E instead. The \u003Ccode\u003ETitle\u003C\u002Fcode\u003E and \u003Ccode\u003EBody\u003C\u002Fcode\u003E are corresponding fields in the  \u003Ccode\u003EBlog\u003C\u002Fcode\u003E collection. In the case of a different collection type, they should correspond with the fields of the collection type.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p7KCmqWJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625384229006_screen1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--p7KCmqWJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625384229006_screen1.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"update-content\" href=\"#update-content\"\u003E\n  \u003C\u002Fa\u003E\n  Update Content\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe use Mutations for update features too. Lets edit the post we just created like so:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    mutation {\n      updateBlog(\n        input: {\n          where: { id: \"5\" }\n          data: { Title: \"Fifth Post Edited\", Body: \"This is the fifth blog post (edited). This was created using a graphQl mutaiton from the strapi graphql playground\" }\n        }\n      ) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003EupdateBlog\u003C\u002Fcode\u003E  method accepts an \u003Ccode\u003Einput\u003C\u002Fcode\u003E object that specifies the \u003Ccode\u003Eid\u003C\u002Fcode\u003E of the post we intend to edit and the data in the \u003Ccode\u003Ewhere\u003C\u002Fcode\u003E and \u003Ccode\u003Edata\u003C\u002Fcode\u003E objects respectively. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vw04dQop--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625387252986_screen2.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--vw04dQop--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625387252986_screen2.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"delete-content\" href=\"#delete-content\"\u003E\n  \u003C\u002Fa\u003E\n  Delete Content\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003Elet us delete this post to see if it actually goes away. The Mutation below will do just that.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    mutation {\n      deleteBlog(input: { where: { id: \"5\" } }) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ccode\u003EdeleteBlog\u003C\u002Fcode\u003E  method accepts an \u003Ccode\u003Einput\u003C\u002Fcode\u003E object with a \u003Ccode\u003Ewhere\u003C\u002Fcode\u003E object that accepts the \u003Ccode\u003Eid\u003C\u002Fcode\u003E of the post to delete. After a successful delete, the blog returns \u003Ccode\u003Enull\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--0_CPaxs---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625389040625_screen3.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--0_CPaxs---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625389040625_screen3.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"authentication\" href=\"#authentication\"\u003E\n  \u003C\u002Fa\u003E\n  Authentication\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn order for a user to access any protect route in Strapi, the user needs to be authenticated. We can implement authentication in our Strapi application using GraphQl too. Lets get started by creating a new user\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    mutation {\n      register(input: { username: \"alloyuser\", email: \"email@gmail.com\", password: \"password\" }) {\n        jwt\n        user {\n          username\n          email\n        }\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Ewe used a new function here. The  \u003Ccode\u003Eregister\u003C\u002Fcode\u003E function which accepts an \u003Ccode\u003Eintput\u003C\u002Fcode\u003E object that contains the user details to be created. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HXAvKPej--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625405766235_screen4.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--HXAvKPej--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625405766235_screen4.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter successfully creating a user, it returns the \u003Ccode\u003Euser\u003C\u002Fcode\u003E  object and a \u003Ccode\u003Ejwt\u003C\u002Fcode\u003E token. We need the token to be passed along as  \u003Ccode\u003EAuthorization\u003C\u002Fcode\u003E header in the form of \u003Ccode\u003E\"Authorization\": \"Bearer YOUR_JWT_GOES_HERE\"\u003C\u002Fcode\u003E. In the Strapi GraphQL playground, this can be set in the HTTP header section. That way it will be passed along with every request and user will be able to access protected routes.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RpI762fj--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407387637_screen5.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RpI762fj--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407387637_screen5.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the case of an already existing user, Users can login to generate a token. Lets login using the details of the user we just created above.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    mutation {\n      login(input: { identifier: \"seconduser@gmail.com\", password: \"password\" }) {\n        jwt\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Ethis would also return a \u003Ccode\u003Ejwt\u003C\u002Fcode\u003E token for access like so\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oHEpdcfV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407884205_screen6.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--oHEpdcfV--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407884205_screen6.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"filters\" href=\"#filters\"\u003E\n  \u003C\u002Fa\u003E\n  Filters\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo make more complex GraphQL queries, we can apply some filters to the query. Lets explore some of the most useful filters.\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003Elimit\u003C\u002Fcode\u003E type =&gt; integer : Places a limit on the number of returned data.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Estart\u003C\u002Fcode\u003E  type =&gt; integer: Ability to specify where the query will start.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Esort\u003C\u002Fcode\u003E type =&gt; string: Sorts data to be returned\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003EpublicationState\u003C\u002Fcode\u003E type =&gt; PublicationState: Only select entries matching the publication state provided.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Elocale\u003C\u002Fcode\u003E type =&gt; string: This requires the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fi18n.html\"\u003E(i18n) plugin\u003C\u002Fa\u003E plugin to be activated and properly configured. It can be used to fetch contents from a selected locale\u003C\u002Fli\u003E\n\u003Cli\u003EHandled states are:\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003Elive\u003C\u002Fcode\u003E: Return only published entries (default)\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Epreview\u003C\u002Fcode\u003E: Return both draft entries &amp; published entries\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;:asc\u003C\u002Fcode\u003E or \u003Ccode\u003E&lt;field&gt;:desc\u003C\u002Fcode\u003E\n\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003Ewhere\u003C\u002Fcode\u003E (object): Define the filters to apply in the query.\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;\u003C\u002Fcode\u003E: Equals.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_ne\u003C\u002Fcode\u003E: Not equals.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_lt\u003C\u002Fcode\u003E: Lower than.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_lte\u003C\u002Fcode\u003E: Lower than or equal to.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_gt\u003C\u002Fcode\u003E: Greater than.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_gte\u003C\u002Fcode\u003E: Greater than or equal to.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_contains\u003C\u002Fcode\u003E: Contains.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_containss\u003C\u002Fcode\u003E: Contains sensitive.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_ncontains\u003C\u002Fcode\u003E: Doesn't contain.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_ncontainss\u003C\u002Fcode\u003E: Doesn't contain, case sensitive\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_in\u003C\u002Fcode\u003E: Matches any value in the array of values.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_nin\u003C\u002Fcode\u003E: Doesn't match any value in the array of values.\u003C\u002Fli\u003E\n\u003Cli\u003E\n\u003Ccode\u003E&lt;field&gt;_null\u003C\u002Fcode\u003E: Equals null\u002FNot equals null\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\n\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ETo better understand how filters can be used, lets make a query to fetch all the Blog post with \u003Ccode\u003Eid\u003C\u002Fcode\u003E greater than \u003Ccode\u003E2\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    query {\n      blogs(where: { id_gt: \"2\" }) {\n        Title\n        Body\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHere we used the \u003Ccode\u003Ewhere\u003C\u002Fcode\u003E object and \u003Ccode\u003E&lt;field&gt;_gt\u003C\u002Fcode\u003E.  \u003Ccode\u003Eid\u003C\u002Fcode\u003E in our case is the \u003Ccode\u003Efield\u003C\u002Fcode\u003E . We added the \u003Ccode\u003Egt\u003C\u002Fcode\u003E (greater than) prefix to get all post with \u003Ccode\u003Eid\u003C\u002Fcode\u003E greater than \u003Ccode\u003E2\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--v8Y0L7mu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625474857799_screen7.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--v8Y0L7mu--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625474857799_screen7.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe can extend it further by adding a \u003Ccode\u003Elimit\u003C\u002Fcode\u003E to the query and also sorting the result in descending order like so\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    query {\n      blogs(limit: 2, sort: \"id:desc\" where: { id_gt: \"1\" }) {\n        Title\n        Body\n      }\n    }\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe result is a listed of sorted posts in descending order starting from the second post with an \u003Ccode\u003Eid\u003C\u002Fcode\u003E of 2 downwards \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hfrbrYjJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625477957505_screen8.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--hfrbrYjJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625477957505_screen8.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"explore-strapi-graphql-with-vuejs\" href=\"#explore-strapi-graphql-with-vuejs\"\u003E\n  \u003C\u002Fa\u003E\n  Explore Strapi GraphQL with Vue.js\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELet's go a little further by interacting with Strapi GraphQL from an external Vue.js application. To get started, we need to create a Vue.js application. You can create it using the following \u003Ca href=\"https:\u002F\u002Fcli.vuejs.org\u002F\"\u003EVue CLI\u003C\u002Fa\u003E command:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    vue create strapiproject\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EMake sure you have the Vue CLI installed globally. If you need help installing the CLI or upgrading to the latest version of Vue.js, follow this tutorial \u003Ca href=\"https:\u002F\u002Fv3.vuejs.org\u002Fguide\u002Finstallation.html#cli\"\u003Ehere\u003C\u002Fa\u003E for details.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter a successful installation, launch the project using the following command:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npm run serve\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENow you should be able to serve up the Vue.js application on the browser. Find a screenshot of my served screen below:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2HIHOiBX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621889903452_vueGQ.PNG\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2HIHOiBX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621889903452_vueGQ.PNG\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"install-apollo\" href=\"#install-apollo\"\u003E\n  \u003C\u002Fa\u003E\n  Install Apollo\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo interact with GraphQL from our Vue.js application, we need to install Apollo and query our Strapi GraphQL server using Apollo. \u003C\u002Fp\u003E\n\n\u003Cp\u003EInstall Apollo using the following command:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    vue add apollo\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EApollo boost and Apollo client are the two variations of Apollo that can be installed in a Vue.js application. We will proceed with the Apollo client as this best suits the purpose of this tutorial. Check Apollo official documentation for \u003Ca href=\"https:\u002F\u002Fapollo.vuejs.org\u002Fguide\u002Finstallation.html#_1-apollo-client\"\u003Emore\u003C\u002Fa\u003E details. \u003C\u002Fp\u003E\n\n\u003Cp\u003EInstall Apollo client using the following command:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag\n    Or:\n    yarn add vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the HTML section, I used Bootstrap classes for basic styling. There are many different ways you can add bootstrap to your Vue.js project, but for this tutorial, I used a CDN (Content delivery network).  \u003C\u002Fp\u003E\n\n\u003Cp\u003EOpen \u003Cstrong\u003Epublic→index.html\u003C\u002Fstrong\u003E, add the following to the head section of the page:\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E   &lt;link rel=\"stylesheet\" href=\"https:\u002F\u002Fstackpath.bootstrapcdn.com\u002Fbootstrap\u002F4.3.1\u002Fcss\u002Fbootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH\u002F1fQ784\u002Fj6cY\u002FiJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003Eadd this before the closing \u003Cstrong\u003EBody\u003C\u002Fstrong\u003E tag of the page\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E&lt;!-- built files will be auto injected --&gt;\n    &lt;script src=\"https:\u002F\u002Fcode.jquery.com\u002Fjquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj\u002Fzy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"&gt;&lt;\u002Fscript&gt;\n    &lt;script src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap@4.6.0\u002Fdist\u002Fjs\u002Fbootstrap.bundle.min.js\" integrity=\"sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns\" crossorigin=\"anonymous\"&gt;&lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EAfter the installation, next, we need to configure Apollo to work in our application. Edit \u003Cstrong\u003Esrc→main.js\u003C\u002Fstrong\u003E file and add the following code\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    import Vue from 'vue'\n    import App from '.\u002FApp.vue'\n\n    \u002F\u002F import { createProvider } from '.\u002Fvue-apollo'\n    Vue.config.productionTip = false\n\n    \u002F\u002F custom\n    import VueApollo from 'vue-apollo'\n\n    Vue.use(VueApollo)\n    import { ApolloClient } from 'apollo-client'\n    import { createHttpLink } from 'apollo-link-http'\n    import { InMemoryCache } from 'apollo-cache-inmemory'\n\n    \u002F\u002F HTTP connection to the API\n    const httpLink = createHttpLink({\n      \u002F\u002F You should use an absolute URL here\n      uri: 'http:\u002F\u002Flocalhost:1337\u002Fgraphql',\n    })\n\n    \u002F\u002F Cache implementation\n    const cache = new InMemoryCache()\n\n    \u002F\u002F Create the apollo client\n    const apolloClient = new ApolloClient({\n      link: httpLink,\n      cache,\n    })\n\n    const apolloProvider = new VueApollo({\n      defaultClient: apolloClient,\n    })\n\n    new Vue({\n      \u002F\u002F apolloProvider: createProvider(),\n      apolloProvider,\n      render: h =&gt; h(App)\n    }).$mount('#app')\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the code above, \u003Ccode\u003EURI: 'http:\u002F\u002Flocalhost:1337\u002Fgraphql\u003C\u002Fcode\u003E\u003Ccode\u003E'\u003C\u002Fcode\u003E, points to the Strapi GraphQL endpoint. I have my Strapi server running in that port. Do not close your Strapi project while working on Vue.js.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"vue-router\" href=\"#vue-router\"\u003E\n  \u003C\u002Fa\u003E\n  Vue Router\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ENow we have GraphQL configured and working in our app. Lets try fetching post from our GraphQL backend. This will require a router feature. Lets install \u003Ca href=\"https:\u002F\u002Frouter.vuejs.org\u002Fguide\u002F#html\"\u003EVue router\u003C\u002Fa\u003E using NPM to continue.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npm install vue-router\n    OR\n    yarn add vue-router\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOnce its done installing, we need to configure the router to work with our application effectively. Head over to \u003Cstrong\u003Esrc→main.js\u003C\u002Fstrong\u003E and add the following block of code\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    import VueRouter from 'vue-router'\n    Vue.use(VueRouter)\n\n\n    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHelloWorld.vue').default },\n      ],\n    })\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThen add this \u003Ccode\u003Erouter\u003C\u002Fcode\u003E to your vue instance like so\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E     new Vue({\n      apolloProvider,\n      router: router,  \u002F\u002Fadd this\n      render: h =&gt; h(App)\n    }).$mount('#app')\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe created just one route for our home page. Lets edit our \u003Cstrong\u003EApp.vue\u003C\u002Fstrong\u003E component to work with our router. Add the following\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div id=\"app\"&gt;\n        &lt;Nav \u002F&gt;\n        &lt;router-view&gt;&lt;\u002Frouter-view&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;script&gt;\n    import Nav from \".\u002Fcomponents\u002FNav.vue\";\n    export default {\n      name: \"App\",\n      components: {\n        Nav,\n      },\n    };\n    &lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENotice the \u003Cstrong\u003ENav.vue\u003C\u002Fstrong\u003E component. I added it for ease of navigation. The component was created in the \u003Cstrong\u003E\u002Fcomponents\u003C\u002Fstrong\u003E directory. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UcvKdReY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625571797975_screen9.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--UcvKdReY--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625571797975_screen9.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdd the following to your \u003Cstrong\u003ENav\u003C\u002Fstrong\u003E component to create a basic bootstrap navigation\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div&gt;\n        &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt;\n          &lt;router-link class=\"navbar-brand\" to=\"\u002F\"&gt;Home&lt;\u002Frouter-link&gt;\n          &lt;button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          &gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;\u002Fspan&gt;\n          &lt;\u002Fbutton&gt;\n          &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"#\"&gt;Link&lt;\u002Frouter-link&gt;\n              &lt;\u002Fli&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"#\"&gt;Link&lt;\u002Frouter-link&gt;\n              &lt;\u002Fli&gt;\n            &lt;\u002Ful&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fnav&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"fetching-post\" href=\"#fetching-post\"\u003E\n  \u003C\u002Fa\u003E\n  Fetching Post\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELets make our actual GraphQL query from the Vue.js application to access data from the Strapi GraphQL server. \u003C\u002Fp\u003E\n\n\u003Cp\u003EOur Vue app has just one component at the moment named \u003Cstrong\u003EHelloWorld\u003C\u002Fstrong\u003E, I renamed mine to \u003Cstrong\u003EHome\u003C\u002Fstrong\u003E  Click on \u003Cstrong\u003Esrc→components→Home.vue\u003C\u002Fstrong\u003E and replace the content of the page with the following:\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div&gt;\n        &lt;div class=\"container\"&gt;\n          &lt;div class=\"container\"&gt;\n            &lt;div class=\"customPadding\"&gt;\n              &lt;div class=\"row\"&gt;\n                &lt;div class=\"col-sm\"&gt;\n                  &lt;div class=\"customCard\"&gt;\n                    &lt;h1\n                      style=\"\n                        font-size: 3rem;\n                        text-align: center;\n                        padding-bottom: 6rem;\n                      \"\n                    &gt;\n                      Blog Post\n                    &lt;\u002Fh1&gt;\n                  &lt;\u002Fdiv&gt;\n                  &lt;div v-for=\"blog in blogs\" :key=\"blog.id\"&gt;\n                    &lt;router-link\n                      class=\"nav-link\"\n                      :to=\"{ path: '\u002Fblog\u002F' + blog.id }\"\n                    &gt;\n                      &lt;div class=\"container\"&gt;\n                        &lt;div class=\"customCard\"&gt;\n                          &lt;div\n                            class=\"\n                              card\n                              shadow-lg\n                              p-3\n                              mb-5\n                              bg-white\n                              rounded\n                              mr-5\n                              ml-5\n                            \"\n                          &gt;\n                            &lt;div class=\"card-head\" style=\"padding: 4rem\"&gt;\n                              &lt;h1 style=\"font-size: 6rem\"&gt;\n                                {{ blog.Title }}\n                                &lt;hr \u002F&gt;\n                              &lt;\u002Fh1&gt;\n                            &lt;\u002Fdiv&gt;\n                            &lt;div class=\"card-body text-center\"&gt;\n                              &lt;p style=\"line-height: 26pt\"&gt;{{ blog.Body }}&lt;\u002Fp&gt;\n                            &lt;\u002Fdiv&gt;\n                          &lt;\u002Fdiv&gt;\n                        &lt;\u002Fdiv&gt;\n                      &lt;\u002Fdiv&gt;\n                    &lt;\u002Frouter-link&gt;\n                    &lt;br \u002F&gt;\n                  &lt;\u002Fdiv&gt;\n                &lt;\u002Fdiv&gt;\n              &lt;\u002Fdiv&gt;\n            &lt;\u002Fdiv&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;script&gt;\n    import gql from \"graphql-tag\";\n    export default {\n      name: \"HelloWorld\",\n      data() {\n        return {\n          blogs: [],\n        };\n      },\n      apollo: {\n        blogs: {\n          query: gql`\n            query {\n              blogs {\n                id\n                Title\n                Body\n              }\n            }\n          `,\n        },\n      },\n    };\n    &lt;\u002Fscript&gt;\n    &lt;style&gt;\n    .customPadding {\n      margin-top: 12rem !important;\n      margin-bottom: 12rem !important;\n      \u002F* padding: 4rem; *\u002F\n    }\n    &lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFirst, we imported \u003Ccode\u003Egql\u003C\u002Fcode\u003E, used in making our GraphQL query. We stored the response data from the query in \u003Ccode\u003Eblogs:[]\u003C\u002Fcode\u003E array.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, the data in this array was looped through and displayed in the HTML section of this component. We added a router link to fetch each post to the displayed post in the loop. This router link accepts the post \u003Ccode\u003Eid\u003C\u002Fcode\u003E. The \u003Ccode\u003Eid\u003C\u002Fcode\u003E is passed along to the single post component. \u003C\u002Fp\u003E\n\n\u003Cp\u003ELets register this newly created \u003Cstrong\u003EUR\u003C\u002Fstrong\u003EL as a route. To do this, open \u003Cstrong\u003Emain.js\u003C\u002Fstrong\u003E once again and update the \u003Ccode\u003Erouter\u003C\u002Fcode\u003E with the newly created route like so\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n      ],\n    })\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe also need to create a new component named \u003Cstrong\u003ESingleBlog.vue\u003C\u002Fstrong\u003E The router link already points to it. Create this in the Components folder like so\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ASe1NbjW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625587013827_screen11.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ASe1NbjW--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625587013827_screen11.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow, your Vue app should be able to fetch data from the Strapi GraphQL server like my page below.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mkV-O7vG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625586287779_screen10.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mkV-O7vG--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625586287779_screen10.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"fetching-single-post\" href=\"#fetching-single-post\"\u003E\n  \u003C\u002Fa\u003E\n  Fetching Single Post\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe already added a router link to each displayed blog post to fetch single post, add the following to our \u003Cstrong\u003ESingleBlog.vue\u003C\u002Fstrong\u003E component\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div&gt;\n        &lt;div class=\"container customPadding\"&gt;\n          &lt;div class=\"customPadding\"&gt;\n            &lt;div class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"&gt;\n              &lt;div class=\"container\"&gt;\n                &lt;div class=\"card-head\" style=\"padding: 4rem\"&gt;\n                  &lt;h1 style=\"font-size: 6rem\"&gt;{{ blog.Title }}&lt;\u002Fh1&gt;\n                &lt;\u002Fdiv&gt;\n                &lt;hr \u002F&gt;\n                &lt;p style=\"line-height: 26pt\"&gt;\n                  {{ blog.Body }}\n                &lt;\u002Fp&gt;\n              &lt;\u002Fdiv&gt;\n            &lt;\u002Fdiv&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;script&gt;\n    import gql from \"graphql-tag\";\n    export default {\n      name: \"SingleBlog\",\n      data() {\n        return {\n          blog: [],\n          id: this.$route.params.id,\n        };\n      },\n      apollo: {\n        blog: {\n          query: gql`\n            query blog($id: ID!) {\n              blog(id: $id) {\n                id\n                Title\n                Body\n              }\n            }\n          `,\n          variables() {\n            return {\n              id: this.id,\n            };\n          },\n        },\n      },\n    };\n    &lt;\u002Fscript&gt;\n\n    &lt;style&gt;\n    .customPadding {\n      margin-top: 12rem !important;\n      margin-bottom: 12rem !important;\n      \u002F* padding: 4rem; *\u002F\n    }\n    &lt;\u002Fstyle&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EHere, we modified our GraphQL query to fetch single post by passing the post \u003Ccode\u003Eid\u003C\u002Fcode\u003E along with the query. If your observant, you will notice that the QraphQL query is a little different from the query in the playground. This is because in \u003Cstrong\u003EVue\u003C\u002Fstrong\u003E we cannot access the value of \u003Ccode\u003Ethis.$route.params.id\u003C\u002Fcode\u003E from within the query. We have to pass it along as a variable using\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    variables() {\n      return {\n         id: this.id,\n    };\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFor more on GraphQL queries with Vue click \u003Ca href=\"https:\u002F\u002Fapollo.vuejs.org\u002Fguide\u002Fapollo\u002Fqueries.html#simple-query\"\u003Ehere\u003C\u002Fa\u003E. If everything is done right, you should be able to click on a post from the home page and be redirected to a single page that will display the content of the post. \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"delete-post\" href=\"#delete-post\"\u003E\n  \u003C\u002Fa\u003E\n  Delete Post\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELets take it even further by implementing the delete feature. Lets add a button for the delete functionality. Edit the code in \u003Cstrong\u003ESingleBlog.vue\u003C\u002Fstrong\u003E and the following in the \u003Ccode\u003Ecard-head\u003C\u002Fcode\u003E section of your \u003Ccode\u003Ehtml\u003C\u002Fcode\u003E\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;div class=\"card-head\" style=\"padding: 4rem\"&gt;\n                  &lt;h1 style=\"font-size: 6rem\"&gt;{{ blog.Title }}&lt;\u002Fh1&gt;\n                  &lt;button type=\"button\" class=\"btn btn-primary mr-2\"&gt;Edit&lt;\u002Fbutton&gt;\n                  &lt;button\n                    type=\"button\"\n                    class=\"btn btn-danger\"\n                    @click=\"deletePost()\"\n                  &gt;\n                    Delete\n                  &lt;\u002Fbutton&gt;\n                &lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XmPksnAr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625753416536_screen12.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XmPksnAr--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625753416536_screen12.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENotice that we already add \u003Ccode\u003E@click=\"deletePost()\u003C\u002Fcode\u003E  to the \u003Cstrong\u003EDelete Button\u003C\u002Fstrong\u003E, that method is not yet created. In the JavaScript section of your component, add the following after the data function.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    methods: {\n        deletePost() {\n          const check = confirm();\n          if (check) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation deleteBlog($id: ID!) {\n                    deleteBlog(input: { where: { id: $id } }) {\n                      blog {\n                        Title\n                        Body\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  id: this.id,\n                },\n              })\n          } else {\n            return false;\n          }\n        },\n      }, \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EOn click of the button, its call the \u003Ccode\u003EdeletePost()\u003C\u002Fcode\u003E  function. We used a JavaScript confirm function to confirm before making the GraphQL query to delete the post. Notice that  \u003Ccode\u003Evariables\u003C\u002Fcode\u003E in the GraphQl mutation is an object not a function like we have in the query earlier.  \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"edit-post\" href=\"#edit-post\"\u003E\n  \u003C\u002Fa\u003E\n  Edit Post\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ELets take a look at how we can implement updating of our post content from within our Vue.js application. We need a form for this so I added a bootstrap Modal with a form to the \u003Cstrong\u003ESingleBlog.vue\u003C\u002Fstrong\u003E component using the following\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;div class=\"modal-dialog modal-lg\" role=\"document\"&gt;\n            &lt;div class=\"modal-content\"&gt;\n              &lt;div class=\"modal-header\"&gt;\n                &lt;h5 class=\"modal-title\" id=\"exampleModalLabel\"&gt;Edit Post&lt;\u002Fh5&gt;\n                &lt;button\n                  type=\"button\"\n                  class=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                &gt;\n                  &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;\u002Fspan&gt;\n                &lt;\u002Fbutton&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"modal-body\"&gt;\n                &lt;form&gt;\n                  &lt;div class=\"form-group\"&gt;\n                    &lt;label for=\"recipient-name\" class=\"col-form-label\"\n                      &gt;Title:&lt;\u002Flabel\n                    &gt;\n                    &lt;input type=\"text\" v-model=\"blog.Title\" class=\"form-control\" \u002F&gt;\n                  &lt;\u002Fdiv&gt;\n                  &lt;div class=\"form-group\"&gt;\n                    &lt;label for=\"message-text\" class=\"col-form-label\"&gt;Body:&lt;\u002Flabel&gt;\n                    &lt;textarea class=\"form-control\" v-model=\"blog.Body\"&gt;&lt;\u002Ftextarea&gt;\n                  &lt;\u002Fdiv&gt;\n                &lt;\u002Fform&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"modal-footer\"&gt;\n                &lt;button type=\"button\" class=\"btn btn-primary\" @click=\"editPost()\"&gt;\n                  Save\n                &lt;\u002Fbutton&gt;\n              &lt;\u002Fdiv&gt;\n            &lt;\u002Fdiv&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe \u003Cstrong\u003EEdit\u003C\u002Fstrong\u003E button was also changed to contain code to open the modal like this\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E&lt;button type=\"button\" class=\"btn btn-primary mr-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" data-whatever=\"@mdo\"&gt; Edit&lt;\u002Fbutton&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\u003Cp\u003EWe used \u003Ccode\u003Ev-model=\"blog.Title\"\u003C\u002Fcode\u003E and \u003Ccode\u003Ev-model=\"blog.Body\"\u003C\u002Fcode\u003E to bind the post Title and Body to the respective form fields. \u003Ccode\u003E@click=\"editPo\u003C\u002Fcode\u003E\u003Ccode\u003Es\u003C\u002Fcode\u003E\u003Ccode\u003Et()\u003C\u002Fcode\u003E\u003Ccode\u003E\"\u003C\u002Fcode\u003E was called upon submission of the form. Lets add that function to the Methods object of our app like this.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    editPost() {\n          this.$apollo\n            .mutate({\n              mutation: gql`\n                mutation updateBlog($id: ID!, $Title: String!, $Body: String!) {\n                  updateBlog(\n                    input: {\n                      where: { id: $id }\n                      data: { Title: $Title, Body: $Body }\n                    }\n                  ) {\n                    blog {\n                      Title\n                      Body\n                    }\n                  }\n                }\n              `,\n              variables: {\n                id: this.id,\n                Title: this.blog.Title,\n                Body: this.blog.Body,\n              },\n            })\n            .then((res) =&gt; {\n              console.log(res);\n              alert(\"Edited\");\n            });\n        },\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe method looks a lot similar to that of the Delete function implemented above except for the data we passed along in this case and the additional two variable added \u003Ccode\u003E$Title: String!\u003C\u002Fcode\u003E and \u003Ccode\u003E$Body: String!\u003C\u002Fcode\u003E . But now you should be able to open and close the Edit form modal \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4WO9ih-9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625797473418_screen13.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4WO9ih-9--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625797473418_screen13.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou should also be able to Edit post and save like so\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tGdcMAA2--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798137659_screen14.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tGdcMAA2--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798137659_screen14.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RvmG1Vl2--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798176353_screen15.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--RvmG1Vl2--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798176353_screen15.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"create-a-post\" href=\"#create-a-post\"\u003E\n  \u003C\u002Fa\u003E\n  Create A Post\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThus far, we have covered Reading, Editing and Deleting post from our GraphQL server. Lets look at how we can create new post in this section. We need a new router and a new component for this feature. In your \u003Cstrong\u003EMain.js\u003C\u002Fstrong\u003E add a new route to the already existing\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E     const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n\n        \u002F\u002Fadd this\n        { path: '\u002Fcreate', component: require('.\u002Fcomponents\u002FCreatePost.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n      ],\n    })\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Efurther more, we need to create the component that our newly created route points to. In \u003Cstrong\u003Esrc→components\u003C\u002Fstrong\u003E create a new component name \u003Cstrong\u003ECreatePost.vue\u003C\u002Fstrong\u003E like we have in the route.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEdit the content of the component and add the following code to it to display our form, validate and create a new post\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div class=\"container\"&gt;\n        &lt;div class=\"mt-5\"&gt;\n          &lt;div class=\"card-head\" style=\"padding: 4rem\"&gt;\n            &lt;h1 style=\"font-size: 6rem\"&gt;\n              Create New Post\n              &lt;hr \u002F&gt;\n            &lt;\u002Fh1&gt;\n          &lt;\u002Fdiv&gt;\n          &lt;div class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"&gt;\n            &lt;form&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"recipient-name\" class=\"col-form-label\"&gt;Title:&lt;\u002Flabel&gt;\n                &lt;input type=\"text\" v-model=\"Title\" class=\"form-control\" \u002F&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"message-text\" class=\"col-form-label\"&gt;Body:&lt;\u002Flabel&gt;\n                &lt;textarea class=\"form-control\" rows=\"8\" v-model=\"Body\"&gt;&lt;\u002Ftextarea&gt;\n              &lt;\u002Fdiv&gt;\n            &lt;\u002Fform&gt;\n            &lt;div&gt;\n              &lt;button type=\"button\" class=\"btn btn-primary\" @click=\"createPost()\"&gt;\n                Save\n              &lt;\u002Fbutton&gt;\n            &lt;\u002Fdiv&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;script&gt;\n    import gql from \"graphql-tag\";\n    export default {\n      data() {\n        return {\n          Title: \"\",\n          Body: \"\",\n        };\n      },\n      methods: {\n        createPost() {\n          if (this.Title &amp;&amp; this.Body) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation createBlog($Title: String!, $Body: String!) {\n                    createBlog(input: { data: { Title: $Title, Body: $Body } }) {\n                      blog {\n                        Title\n                        Body\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  Title: this.Title,\n                  Body: this.Body,\n                },\n              })\n              .then((res) =&gt; {\n                console.log(res);\n                alert(\"Post Created\");\n              });\n          } else {\n            alert(\"all fields are required\");\n          }\n        },\n      },\n    };\n    &lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWe used basic bootstrap to beautify our HTML form. Vue.js \u003Ccode\u003Ev-model\u003C\u002Fcode\u003E was used to binned form values to its respective elements. in \u003Ccode\u003EcreatePost()\u003C\u002Fcode\u003E method, we validated this form and created our GraphQL query to create a new post. \u003Cbr\u003E\nLets edit the Navbar and add a link to this component.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div&gt;\n        &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt;\n          &lt;router-link class=\"navbar-brand\" to=\"\u002F\"&gt;Home&lt;\u002Frouter-link&gt;\n          &lt;button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          &gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;\u002Fspan&gt;\n          &lt;\u002Fbutton&gt;\n          &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"\u002Fcreate\"\n                  &gt;Add New Post&lt;\u002Frouter-link\n                &gt; \u002F\u002FcreatePost Link added here\n              &lt;\u002Fli&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"#\"&gt;Link&lt;\u002Frouter-link&gt;\n              &lt;\u002Fli&gt;\n            &lt;\u002Ful&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fnav&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--j5mqRrUH--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625802048664_screen16.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--j5mqRrUH--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625802048664_screen16.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003Elets go ahead and create a new post to see our form in action\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7JbsgN2b--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916372504_screen19.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--7JbsgN2b--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916372504_screen19.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter creating the new post, you can find it in the home page like so\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4WBBUCtz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916509335_screen20.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4WBBUCtz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916509335_screen20.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"signup\" href=\"#signup\"\u003E\n  \u003C\u002Fa\u003E\n  Signup\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWe have been able to explore the CRUD feature of GraphQL using Vue.js. Let us scratch the surface of implementing authentication by creating a new user using GraphQL. A newly created user returns a \u003Ccode\u003Ejwt\u003C\u002Fcode\u003E . When making request to protected routes in GraphQL, you need to pass the \u003Ccode\u003Ejwt\u003C\u002Fcode\u003E token along with the request. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWith that said, lets proceed. We need to create a new route and a new component for this and also edit the navigation bar once more.\u003C\u002Fp\u003E\n\n\u003Cp\u003Ein \u003Cstrong\u003Esrc→components\u003C\u002Fstrong\u003E create a component name \u003Cstrong\u003EAuthentication.vue.\u003C\u002Fstrong\u003E in the main.js, add a new route pointing to this component like so\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n        { path: '\u002Fcreate', component: require('.\u002Fcomponents\u002FCreatePost.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n        \u002F\u002Fnewly created route\n        { path: '\u002Fuser\u002Fsignup', component: require('.\u002Fcomponents\u002FAuthentication.vue').default},\n      ],\n    })\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003Eedit the last link in the nav menu and add a link to the route\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div&gt;\n        &lt;nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"&gt;\n          &lt;router-link class=\"navbar-brand\" to=\"\u002F\"&gt;Home&lt;\u002Frouter-link&gt;\n          &lt;button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          &gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;\u002Fspan&gt;\n          &lt;\u002Fbutton&gt;\n          &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"\u002Fcreate\"\n                  &gt;Add New Post&lt;\u002Frouter-link\n                &gt;\n              &lt;\u002Fli&gt;\n              &lt;li class=\"nav-item\"&gt;\n                &lt;router-link class=\"nav-link\" to=\"\u002Fuser\u002Fsignup\"\n                  &gt;sign up&lt;\u002Frouter-link\n                &gt;\n              &lt;\u002Fli&gt;\n            &lt;\u002Ful&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fnav&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the newly created component, add the following\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    &lt;template&gt;\n      &lt;div class=\"container\"&gt;\n        &lt;div class=\"mt-5\"&gt;\n          &lt;div class=\"card-head\" style=\"padding: 4rem\"&gt;\n            &lt;h1 style=\"font-size: 6rem\"&gt;\n              Create New User\n              &lt;hr \u002F&gt;\n            &lt;\u002Fh1&gt;\n          &lt;\u002Fdiv&gt;\n          &lt;div class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"&gt;\n            &lt;form&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"recipient-name\" class=\"col-form-label\"\n                  &gt;User Name:&lt;\u002Flabel\n                &gt;\n                &lt;input type=\"text\" v-model=\"username\" class=\"form-control\" \u002F&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"recipient-name\" class=\"col-form-label\"&gt;Email:&lt;\u002Flabel&gt;\n                &lt;input type=\"email\" v-model=\"email\" class=\"form-control\" \u002F&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"recipient-name\" class=\"col-form-label\"&gt;Password:&lt;\u002Flabel&gt;\n                &lt;input type=\"password\" v-model=\"password\" class=\"form-control\" \u002F&gt;\n              &lt;\u002Fdiv&gt;\n              &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"recipient-name\" class=\"col-form-label\"&gt;Password:&lt;\u002Flabel&gt;\n                &lt;input\n                  type=\"password\"\n                  v-model=\"password_confirm\"\n                  class=\"form-control\"\n                \u002F&gt;\n              &lt;\u002Fdiv&gt;\n            &lt;\u002Fform&gt;\n            &lt;div&gt;\n              &lt;button type=\"button\" class=\"btn btn-primary\" @click=\"createUser()\"&gt;\n                Save\n              &lt;\u002Fbutton&gt;\n            &lt;\u002Fdiv&gt;\n          &lt;\u002Fdiv&gt;\n        &lt;\u002Fdiv&gt;\n      &lt;\u002Fdiv&gt;\n    &lt;\u002Ftemplate&gt;\n    &lt;script&gt;\n    import gql from \"graphql-tag\";\n    export default {\n      data() {\n        return {\n          username: \"\",\n          email: \"\",\n          password: \"\",\n          password_confirm: \"\",\n        };\n      },\n      methods: {\n        createUser() {\n          if (\n            this.username &amp;&amp;\n            this.email &amp;&amp;\n            this.password &amp;&amp;\n            this.password_confirm\n          ) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation register(\n                    $username: String!\n                    $email: String!\n                    $password: String!\n                  ) {\n                    register(\n                      input: {\n                        username: $username\n                        email: $email\n                        password: $password\n                      }\n                    ) {\n                      jwt\n                      user {\n                        username\n                        email\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  username: this.username,\n                  email: this.email,\n                  password: this.password,\n                },\n              })\n              .then((res) =&gt; {\n                console.log(res);\n                alert(\"User created Created\");\n              });\n          } else {\n            alert(\"all fields are required\");\n          }\n        },\n      },\n    };\n    &lt;\u002Fscript&gt;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn our newly created component, we added a form, implemented slight authentication and made our GraphQL query to create a new user.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--lGj_tG2G--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625818780956_screen17.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--lGj_tG2G--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625818780956_screen17.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter successfully creating the user, we will get back a response from our Strapi GraphQL containing the \u003Ccode\u003Ejwt\u003C\u002Fcode\u003E token which will enable you carrying out every authenticated user feature. You can get access to the token from the response object.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    .then((res) =&gt; {\n        console.log(res);\n          alert(\"User created Created\");\n    });\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion:\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ECongratutlations, you've made it this far. By now, you should \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EBe able to setup GraphQL in Strapi\u003C\u002Fli\u003E\n\u003Cli\u003EBe able to run GraphQL queries and Mutations using the Strapi playground, and within a Vue.js application using Apollo.\u003C\u002Fli\u003E\n\u003Cli\u003EBe able to carry out CRUD request using GraphQL \u003C\u002Fli\u003E\n\u003Cli\u003EBe able to Create an authentication system in Strapi using GraphQL\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ENow you have the basics. It's good enough to start building real-world projects. Remember to share your experience with the rest of the Strapi Community.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou can find the Vue.js project code base on GitHub \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Falloyking1\u002FstrapiGraphQL\"\u003E\u003Cstrong\u003Ehere\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n",body_markdown:"## Introduction\n\nREST API design pattern is one of the best practices when building API’s for the back end of any application. It’s benefits supersede it’s downside. When fetching data from an extensive REST application with many database relationships, there is can be an information overload problem. \n\nThis post will explore \n\n- How GraphQL helps solve this problem and how implementing GraphQL in Strapi is even easier than we think.\n- How to use of Apollo in Vue.js applications to make GraphQL queries to a Strap backend server\n- Making CRUD requests using both the Strapi GraphQL playground and Apollo GraphQL in a Vue.js app\n- Obtaining a JSON web tokens (JWT) for users in case of authenticated requests\n\n\n\n## GraphQL Overview \n\n\n**Cons Of The REST API**\n\nIn a typical REST API-based application, data is fetched from the back end and displayed on the front end. There is the problem of overloading information (mentioned earlier). I'll further explain this using an example.\n\nA front end developer wants to fetch just the `userName` of a user in the database. He expects his response to look like this\n\n```\n    user :{\n      userName:\"alloyking12300\"\n    }\n```\n\nbut instead he gets this:\n\n```\n    user: {\n      userName:\"alloying12300\",\n      email:\"testemail@email.com\",\n      age: 21,\n      profile: {\n        img:\"image\u002Fpath\",\n        profession:\"developer\"\n      }\n    }\n```\n\nNow you see, the response above is packed with lot of data that we do not need. It is, of course, possible to display what you need on the front end and be done with it, but this has a massive impact on the performance of the application. In the quest to solve this, GraphQL was born. \n\nSecondly, REST API applications have too many routes. In very complex applications, the routes can become challenging to handle and manage. GraphQL helps us tackle this too.\n\n**GraphQL**\n\nGraphQL is a query language for your API and a server-side runtime for executing queries using a type system you define for your data.\n\nGraphQL provides developers access to just the particular data they need in a specific request by using just one endpoint (l like to think of it as a smart endpoint), which understands what the front end application expects and returns precisely.  \n\nThe bulk of the technicalities of implementing GraphQL have been simplified when using [Strapi](https:\u002F\u002Fstrapi.io\u002F).\n\n\n## Strapi GraphQL\n\nStrapi is an easily customizable open-source headless CMS. Strapi’s API can return responses in both REST or GraphQL. In this tutorial, we will look at how GraphQL works in Strapi.\n\n## Implementing GraphQL in Strapi\n\nTo explore the wonders of GraphQL in Strapi, we need a Strapi project to test. Let's proceed by creating a new Strapi project using the following command:\n\n```\n    yarn create strapi-app my-project --quickstart\n    or\n    npx create-strapi-app my-project --quickstart\n```\n\nThis command will create a new Strapi project and launch it in your browser like this:\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621600004384_register.PNG)\n\n\nWhen you fill in this form, you will create your first Admin User. After that, the application will redirect to the dashboard.\n\n\n## Blog Collection Type\n\nWe need content to test our GraphQL API. Let's create a blog collection type and add some blog posts to it.\n\nOn the left navigation menu, from the plugin section, click on Content-TypesBuilder. Fill the form to create a new Collection Type.\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_75763409C2F676A56666F5A72B9E5F7A23BC73D4BF13033A6B3418E998DD3AF1_1620384576736_ContentType.PNG)\n\n\nWe need to modify our Blog content type further to contain the **Title**, **Body**, and **Date** fields. These are necessary fields that we need. Fill the form and select these fields. You can use the images below for guidance.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621603201815_BlogCollection.PNG)\n\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625064825839_BlogContentType.png)\n\n\nRepeat the process in the image above for the rest of the fields. Then save. After saving, we should have a newly created Collection Type of Blog. \n\n\n## Add Blog Posts\n\nWe have created our Collection Type. We need few blog posts to be able to explore how GraphQL works in Strapi.\n\nFrom the Collection Type section in the navigation menu, click on **Blogs→Add new blog post**.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065021333_createBlog.png)\n\n\nLets create a blog post with some dummy text as this is for educational purpose only\n \n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625065117104_blogPost2.PNG)\n\n\n \nTo use GraphQL in Strapi, we need to install the GraphQL Plugin using the command below\n\n```\n    yarn strapi install graphql\n```\n\nOn completion of the installation, our Strapi application is set for GraphQL. Strapi also has a Playground for testing GraphQL operations. We can access this Playground using `http:\u002F\u002Flocalhost:1337\u002Fgraphql.`\n\nThe GraphQL Playground has an inbuilt text editor for you to enter your GraphQL commands, a play button for you to run your code and a screen to display the return values, error or success message.\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621786761481_graphQLPlayGround.PNG)\n\n\nBefore we proceed to the Strapi playground to test, we need to grant the public user access to the Blogs collection type. Authentication will be covered later on in this post. For now, lets get started with the public user. To do this, click on **settings→roles→permissions** to grant all the necessary access to the Blogs and save.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625066172791_grantAccess.png)\n\n\n\n## Strapi GraphQL Playground\n\nThe Strapi GraphQl playground is a development environment for you to interact with your Strapi application using GraphQl. Lets proceed by carrying out CRUD operations on our blog content using the playground.\n\nIn order to interact with the GraphQL server, we either need to write a **Query** or a **Mutation**.\nA **GraphQL query** is used to read or fetch data from the server while a **mutation** is used to write or post values. For easier understanding you can think of it as GET request and POST request where Query is used to make GET request and Mutation to make POST request. \n\n\n## Fetching Multiple Contents\n\nWith that said, lets getting started by reading from our GraphQL server. We need to write a query for this. The code below is a basic GraphQL query to fetch all Blogs from our Strapi backend. It  returns the `Id`, `Title` and `Body`.\n\n```\n    query{\n      blogs{\n        id\n        Title\n        Body\n      }\n    }\n```\n\nEnter the code in your Strapi playground and it should fetch all Blog posts in your Blog collection \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1622377664427_graphQLPlayGroundResult.PNG)\n\n\n\n## Fetching Single Content:\n\nWe can fetch a single blog post from the collection by passing along a unique key. In our case, we will pass along the `id` . \n\n```\n    query {\n      blog(id:\"3\"){\n        id\n        Title\n        Body\n      }\n    }\n```\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625915489319_screen18.png)\n\n## Create Content\n\nRemember when we talked about Queries and Mutations earlier, we will use a Mutation to create a new entry. Lets create a new blog post to continue. \n\n\n```\n    mutation {\n      createBlog(input: { data: { Title: \"Fifth Post\", Body: \" This is the fifth blog post. It  was created using a graphQl mutaiton from the strapi graphql playground\" } }) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n```\n\nThe function `createBlog` accepts `input` object which in turn accepts a  `data` object with inputs to insert. This function derives its name from the name of the Strapi collection type. If we wanted to create a new user for instance, it would be `createUser` instead. The `Title` and `Body` are corresponding fields in the  `Blog` collection. In the case of a different collection type, they should correspond with the fields of the collection type.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625384229006_screen1.png)\n\n## Update Content\n\nWe use Mutations for update features too. Lets edit the post we just created like so:\n\n```\n    mutation {\n      updateBlog(\n        input: {\n          where: { id: \"5\" }\n          data: { Title: \"Fifth Post Edited\", Body: \"This is the fifth blog post (edited). This was created using a graphQl mutaiton from the strapi graphql playground\" }\n        }\n      ) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n```\n\n`updateBlog`  method accepts an `input` object that specifies the `id` of the post we intend to edit and the data in the `where` and `data` objects respectively. \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625387252986_screen2.png)\n\n## Delete Content\n\nlet us delete this post to see if it actually goes away. The Mutation below will do just that.\n\n```\n    mutation {\n      deleteBlog(input: { where: { id: \"5\" } }) {\n        blog {\n          Title\n          Body\n        }\n      }\n    }\n```    \n\n`deleteBlog`  method accepts an `input` object with a `where` object that accepts the `id` of the post to delete. After a successful delete, the blog returns `null`\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625389040625_screen3.png)\n\n\n\n## Authentication\n\nIn order for a user to access any protect route in Strapi, the user needs to be authenticated. We can implement authentication in our Strapi application using GraphQl too. Lets get started by creating a new user\n\n```\n    mutation {\n      register(input: { username: \"alloyuser\", email: \"email@gmail.com\", password: \"password\" }) {\n        jwt\n        user {\n          username\n          email\n        }\n      }\n    }\n```\n\nwe used a new function here. The  `register` function which accepts an `intput` object that contains the user details to be created. \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625405766235_screen4.png)\n\n\nAfter successfully creating a user, it returns the `user`  object and a `jwt` token. We need the token to be passed along as  `Authorization` header in the form of `\"Authorization\": \"Bearer YOUR_JWT_GOES_HERE\"`. In the Strapi GraphQL playground, this can be set in the HTTP header section. That way it will be passed along with every request and user will be able to access protected routes.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407387637_screen5.png)\n\n\nIn the case of an already existing user, Users can login to generate a token. Lets login using the details of the user we just created above.\n\n```\n    mutation {\n      login(input: { identifier: \"seconduser@gmail.com\", password: \"password\" }) {\n        jwt\n      }\n    }\n```\n\nthis would also return a `jwt` token for access like so\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625407884205_screen6.png)\n\n\n\n## Filters\n\nTo make more complex GraphQL queries, we can apply some filters to the query. Lets explore some of the most useful filters.\n\n\n- `limit` type =\u003E integer : Places a limit on the number of returned data.\n- `start`  type =\u003E integer: Ability to specify where the query will start.\n- `sort` type =\u003E string: Sorts data to be returned\n- `publicationState` type =\u003E PublicationState: Only select entries matching the publication state provided.\n- `locale` type =\u003E string: This requires the [(i18n) plugin](https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fi18n.html) plugin to be activated and properly configured. It can be used to fetch contents from a selected locale\n- Handled states are:\n    - `live`: Return only published entries (default)\n    - `preview`: Return both draft entries & published entries\n- `\u003Cfield\u003E:asc` or `\u003Cfield\u003E:desc`\n- `where` (object): Define the filters to apply in the query.\n    - `\u003Cfield\u003E`: Equals.\n    - `\u003Cfield\u003E_ne`: Not equals.\n    - `\u003Cfield\u003E_lt`: Lower than.\n    - `\u003Cfield\u003E_lte`: Lower than or equal to.\n    - `\u003Cfield\u003E_gt`: Greater than.\n    - `\u003Cfield\u003E_gte`: Greater than or equal to.\n    - `\u003Cfield\u003E_contains`: Contains.\n    - `\u003Cfield\u003E_containss`: Contains sensitive.\n    - `\u003Cfield\u003E_ncontains`: Doesn't contain.\n    - `\u003Cfield\u003E_ncontainss`: Doesn't contain, case sensitive\n    - `\u003Cfield\u003E_in`: Matches any value in the array of values.\n    - `\u003Cfield\u003E_nin`: Doesn't match any value in the array of values.\n    - `\u003Cfield\u003E_null`: Equals null\u002FNot equals null\n\nTo better understand how filters can be used, lets make a query to fetch all the Blog post with `id` greater than `2` \n\n```\n    query {\n      blogs(where: { id_gt: \"2\" }) {\n        Title\n        Body\n      }\n    }\n```\n\nHere we used the `where` object and `\u003Cfield\u003E_gt`.  `id` in our case is the `field` . We added the `gt` (greater than) prefix to get all post with `id` greater than `2`\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625474857799_screen7.png)\n\n\nWe can extend it further by adding a `limit` to the query and also sorting the result in descending order like so\n\n```\n    query {\n      blogs(limit: 2, sort: \"id:desc\" where: { id_gt: \"1\" }) {\n        Title\n        Body\n      }\n    }\n```\n\nThe result is a listed of sorted posts in descending order starting from the second post with an `id` of 2 downwards \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625477957505_screen8.png)\n\n\n\n## Explore Strapi GraphQL with Vue.js\n\nLet's go a little further by interacting with Strapi GraphQL from an external Vue.js application. To get started, we need to create a Vue.js application. You can create it using the following [Vue CLI](https:\u002F\u002Fcli.vuejs.org\u002F) command:\n\n```\n    vue create strapiproject\n```\n\nMake sure you have the Vue CLI installed globally. If you need help installing the CLI or upgrading to the latest version of Vue.js, follow this tutorial [here](https:\u002F\u002Fv3.vuejs.org\u002Fguide\u002Finstallation.html#cli) for details.\n\nAfter a successful installation, launch the project using the following command:\n\n```\n    npm run serve\n```\n\nNow you should be able to serve up the Vue.js application on the browser. Find a screenshot of my served screen below:\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1621889903452_vueGQ.PNG)\n\n\n\n## Install Apollo\n\nTo interact with GraphQL from our Vue.js application, we need to install Apollo and query our Strapi GraphQL server using Apollo. \n\nInstall Apollo using the following command:\n\n```\n    vue add apollo\n```\n\nApollo boost and Apollo client are the two variations of Apollo that can be installed in a Vue.js application. We will proceed with the Apollo client as this best suits the purpose of this tutorial. Check Apollo official documentation for [more](https:\u002F\u002Fapollo.vuejs.org\u002Fguide\u002Finstallation.html#_1-apollo-client) details. \n\nInstall Apollo client using the following command:\n\n```\n    npm install --save vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag\n    Or:\n    yarn add vue-apollo graphql apollo-client apollo-link apollo-link-http apollo-cache-inmemory graphql-tag\n```\n\nIn the HTML section, I used Bootstrap classes for basic styling. There are many different ways you can add bootstrap to your Vue.js project, but for this tutorial, I used a CDN (Content delivery network).  \n\nOpen **public→index.html**, add the following to the head section of the page:\n\n\n       \u003Clink rel=\"stylesheet\" href=\"https:\u002F\u002Fstackpath.bootstrapcdn.com\u002Fbootstrap\u002F4.3.1\u002Fcss\u002Fbootstrap.min.css\" integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH\u002F1fQ784\u002Fj6cY\u002FiJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\"\u003E\n\nadd this before the closing **Body** tag of the page\n\n\n    \u003C!-- built files will be auto injected --\u003E\n        \u003Cscript src=\"https:\u002F\u002Fcode.jquery.com\u002Fjquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj\u002Fzy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\n        \u003Cscript src=\"https:\u002F\u002Fcdn.jsdelivr.net\u002Fnpm\u002Fbootstrap@4.6.0\u002Fdist\u002Fjs\u002Fbootstrap.bundle.min.js\" integrity=\"sha384-Piv4xVNRyMGpqkS2by6br4gNJ7DXjqk09RmUpJ8jgGtD7zP9yug3goQfGII0yAns\" crossorigin=\"anonymous\"\u003E\u003C\u002Fscript\u003E\n    \n\nAfter the installation, next, we need to configure Apollo to work in our application. Edit **src→main.js** file and add the following code\n\n```\n    import Vue from 'vue'\n    import App from '.\u002FApp.vue'\n    \n    \u002F\u002F import { createProvider } from '.\u002Fvue-apollo'\n    Vue.config.productionTip = false\n    \n    \u002F\u002F custom\n    import VueApollo from 'vue-apollo'\n    \n    Vue.use(VueApollo)\n    import { ApolloClient } from 'apollo-client'\n    import { createHttpLink } from 'apollo-link-http'\n    import { InMemoryCache } from 'apollo-cache-inmemory'\n    \n    \u002F\u002F HTTP connection to the API\n    const httpLink = createHttpLink({\n      \u002F\u002F You should use an absolute URL here\n      uri: 'http:\u002F\u002Flocalhost:1337\u002Fgraphql',\n    })\n    \n    \u002F\u002F Cache implementation\n    const cache = new InMemoryCache()\n    \n    \u002F\u002F Create the apollo client\n    const apolloClient = new ApolloClient({\n      link: httpLink,\n      cache,\n    })\n    \n    const apolloProvider = new VueApollo({\n      defaultClient: apolloClient,\n    })\n    \n    new Vue({\n      \u002F\u002F apolloProvider: createProvider(),\n      apolloProvider,\n      render: h =\u003E h(App)\n    }).$mount('#app')\n```\n    \n\nIn the code above, `URI: 'http:\u002F\u002Flocalhost:1337\u002Fgraphql``'`, points to the Strapi GraphQL endpoint. I have my Strapi server running in that port. Do not close your Strapi project while working on Vue.js.\n\n\n## Vue Router\n\nNow we have GraphQL configured and working in our app. Lets try fetching post from our GraphQL backend. This will require a router feature. Lets install [Vue router](https:\u002F\u002Frouter.vuejs.org\u002Fguide\u002F#html) using NPM to continue. \n\n```\n    npm install vue-router\n    OR\n    yarn add vue-router\n```\n\nOnce its done installing, we need to configure the router to work with our application effectively. Head over to **src→main.js** and add the following block of code\n\n```\n    import VueRouter from 'vue-router'\n    Vue.use(VueRouter)\n    \n    \n    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHelloWorld.vue').default },\n      ],\n    })\n```\n\nThen add this `router` to your vue instance like so\n\n```\n     new Vue({\n      apolloProvider,\n      router: router,  \u002F\u002Fadd this\n      render: h =\u003E h(App)\n    }).$mount('#app')\n```\n\nWe created just one route for our home page. Lets edit our **App.vue** component to work with our router. Add the following \n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv id=\"app\"\u003E\n        \u003CNav \u002F\u003E\n        \u003Crouter-view\u003E\u003C\u002Frouter-view\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n    \u003Cscript\u003E\n    import Nav from \".\u002Fcomponents\u002FNav.vue\";\n    export default {\n      name: \"App\",\n      components: {\n        Nav,\n      },\n    };\n    \u003C\u002Fscript\u003E\n ```   \n    \n\nNotice the **Nav.vue** component. I added it for ease of navigation. The component was created in the **\u002Fcomponents** directory. \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625571797975_screen9.png)\n\n\nAdd the following to your **Nav** component to create a basic bootstrap navigation\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv\u003E\n        \u003Cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003E\n          \u003Crouter-link class=\"navbar-brand\" to=\"\u002F\"\u003EHome\u003C\u002Frouter-link\u003E\n          \u003Cbutton\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          \u003E\n            \u003Cspan class=\"navbar-toggler-icon\"\u003E\u003C\u002Fspan\u003E\n          \u003C\u002Fbutton\u003E\n          \u003Cdiv class=\"collapse navbar-collapse\" id=\"navbarNav\"\u003E\n            \u003Cul class=\"navbar-nav\"\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"#\"\u003ELink\u003C\u002Frouter-link\u003E\n              \u003C\u002Fli\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"#\"\u003ELink\u003C\u002Frouter-link\u003E\n              \u003C\u002Fli\u003E\n            \u003C\u002Ful\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fnav\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n```\n\n## Fetching Post\n\nLets make our actual GraphQL query from the Vue.js application to access data from the Strapi GraphQL server. \n\nOur Vue app has just one component at the moment named **HelloWorld**, I renamed mine to **Home**  Click on **src→components→Home.vue** and replace the content of the page with the following:\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv\u003E\n        \u003Cdiv class=\"container\"\u003E\n          \u003Cdiv class=\"container\"\u003E\n            \u003Cdiv class=\"customPadding\"\u003E\n              \u003Cdiv class=\"row\"\u003E\n                \u003Cdiv class=\"col-sm\"\u003E\n                  \u003Cdiv class=\"customCard\"\u003E\n                    \u003Ch1\n                      style=\"\n                        font-size: 3rem;\n                        text-align: center;\n                        padding-bottom: 6rem;\n                      \"\n                    \u003E\n                      Blog Post\n                    \u003C\u002Fh1\u003E\n                  \u003C\u002Fdiv\u003E\n                  \u003Cdiv v-for=\"blog in blogs\" :key=\"blog.id\"\u003E\n                    \u003Crouter-link\n                      class=\"nav-link\"\n                      :to=\"{ path: '\u002Fblog\u002F' + blog.id }\"\n                    \u003E\n                      \u003Cdiv class=\"container\"\u003E\n                        \u003Cdiv class=\"customCard\"\u003E\n                          \u003Cdiv\n                            class=\"\n                              card\n                              shadow-lg\n                              p-3\n                              mb-5\n                              bg-white\n                              rounded\n                              mr-5\n                              ml-5\n                            \"\n                          \u003E\n                            \u003Cdiv class=\"card-head\" style=\"padding: 4rem\"\u003E\n                              \u003Ch1 style=\"font-size: 6rem\"\u003E\n                                {{ blog.Title }}\n                                \u003Chr \u002F\u003E\n                              \u003C\u002Fh1\u003E\n                            \u003C\u002Fdiv\u003E\n                            \u003Cdiv class=\"card-body text-center\"\u003E\n                              \u003Cp style=\"line-height: 26pt\"\u003E{{ blog.Body }}\u003C\u002Fp\u003E\n                            \u003C\u002Fdiv\u003E\n                          \u003C\u002Fdiv\u003E\n                        \u003C\u002Fdiv\u003E\n                      \u003C\u002Fdiv\u003E\n                    \u003C\u002Frouter-link\u003E\n                    \u003Cbr \u002F\u003E\n                  \u003C\u002Fdiv\u003E\n                \u003C\u002Fdiv\u003E\n              \u003C\u002Fdiv\u003E\n            \u003C\u002Fdiv\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fdiv\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n    \u003Cscript\u003E\n    import gql from \"graphql-tag\";\n    export default {\n      name: \"HelloWorld\",\n      data() {\n        return {\n          blogs: [],\n        };\n      },\n      apollo: {\n        blogs: {\n          query: gql`\n            query {\n              blogs {\n                id\n                Title\n                Body\n              }\n            }\n          `,\n        },\n      },\n    };\n    \u003C\u002Fscript\u003E\n    \u003Cstyle\u003E\n    .customPadding {\n      margin-top: 12rem !important;\n      margin-bottom: 12rem !important;\n      \u002F* padding: 4rem; *\u002F\n    }\n    \u003C\u002Fstyle\u003E\n  ```  \n\nFirst, we imported `gql`, used in making our GraphQL query. We stored the response data from the query in `blogs:[]` array.\n\nNext, the data in this array was looped through and displayed in the HTML section of this component. We added a router link to fetch each post to the displayed post in the loop. This router link accepts the post `id`. The `id` is passed along to the single post component. \n\nLets register this newly created **UR**L as a route. To do this, open **main.js** once again and update the `router` with the newly created route like so\n\n```\n    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n      ],\n    })\n```\n\nWe also need to create a new component named **SingleBlog.vue** The router link already points to it. Create this in the Components folder like so\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625587013827_screen11.png)\n\n\n\nNow, your Vue app should be able to fetch data from the Strapi GraphQL server like my page below.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625586287779_screen10.png)\n\n\n\n## Fetching Single Post\n\nWe already added a router link to each displayed blog post to fetch single post, add the following to our **SingleBlog.vue** component\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv\u003E\n        \u003Cdiv class=\"container customPadding\"\u003E\n          \u003Cdiv class=\"customPadding\"\u003E\n            \u003Cdiv class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"\u003E\n              \u003Cdiv class=\"container\"\u003E\n                \u003Cdiv class=\"card-head\" style=\"padding: 4rem\"\u003E\n                  \u003Ch1 style=\"font-size: 6rem\"\u003E{{ blog.Title }}\u003C\u002Fh1\u003E\n                \u003C\u002Fdiv\u003E\n                \u003Chr \u002F\u003E\n                \u003Cp style=\"line-height: 26pt\"\u003E\n                  {{ blog.Body }}\n                \u003C\u002Fp\u003E\n              \u003C\u002Fdiv\u003E\n            \u003C\u002Fdiv\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fdiv\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n    \u003Cscript\u003E\n    import gql from \"graphql-tag\";\n    export default {\n      name: \"SingleBlog\",\n      data() {\n        return {\n          blog: [],\n          id: this.$route.params.id,\n        };\n      },\n      apollo: {\n        blog: {\n          query: gql`\n            query blog($id: ID!) {\n              blog(id: $id) {\n                id\n                Title\n                Body\n              }\n            }\n          `,\n          variables() {\n            return {\n              id: this.id,\n            };\n          },\n        },\n      },\n    };\n    \u003C\u002Fscript\u003E\n    \n    \u003Cstyle\u003E\n    .customPadding {\n      margin-top: 12rem !important;\n      margin-bottom: 12rem !important;\n      \u002F* padding: 4rem; *\u002F\n    }\n    \u003C\u002Fstyle\u003E\n```\n\nHere, we modified our GraphQL query to fetch single post by passing the post `id` along with the query. If your observant, you will notice that the QraphQL query is a little different from the query in the playground. This is because in **Vue** we cannot access the value of `this.$route.params.id` from within the query. We have to pass it along as a variable using \n\n```\n    variables() {\n      return {\n         id: this.id,\n    };\n```\n\nFor more on GraphQL queries with Vue click [here](https:\u002F\u002Fapollo.vuejs.org\u002Fguide\u002Fapollo\u002Fqueries.html#simple-query). If everything is done right, you should be able to click on a post from the home page and be redirected to a single page that will display the content of the post. \n\n\n## Delete Post\n\nLets take it even further by implementing the delete feature. Lets add a button for the delete functionality. Edit the code in **SingleBlog.vue** and the following in the `card-head` section of your `html`\n\n```\n    \u003Cdiv class=\"card-head\" style=\"padding: 4rem\"\u003E\n                  \u003Ch1 style=\"font-size: 6rem\"\u003E{{ blog.Title }}\u003C\u002Fh1\u003E\n                  \u003Cbutton type=\"button\" class=\"btn btn-primary mr-2\"\u003EEdit\u003C\u002Fbutton\u003E\n                  \u003Cbutton\n                    type=\"button\"\n                    class=\"btn btn-danger\"\n                    @click=\"deletePost()\"\n                  \u003E\n                    Delete\n                  \u003C\u002Fbutton\u003E\n                \u003C\u002Fdiv\u003E\n```\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625753416536_screen12.png)\n\n\nNotice that we already add `@click=\"deletePost()`  to the **Delete Button**, that method is not yet created. In the JavaScript section of your component, add the following after the data function.\n\n```\n    methods: {\n        deletePost() {\n          const check = confirm();\n          if (check) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation deleteBlog($id: ID!) {\n                    deleteBlog(input: { where: { id: $id } }) {\n                      blog {\n                        Title\n                        Body\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  id: this.id,\n                },\n              })\n          } else {\n            return false;\n          }\n        },\n      }, \n```\n\nOn click of the button, its call the `deletePost()`  function. We used a JavaScript confirm function to confirm before making the GraphQL query to delete the post. Notice that  `variables` in the GraphQl mutation is an object not a function like we have in the query earlier.  \n\n\n## Edit Post\n\nLets take a look at how we can implement updating of our post content from within our Vue.js application. We need a form for this so I added a bootstrap Modal with a form to the **SingleBlog.vue** component using the following \n\n```\n    \u003Cdiv class=\"modal-dialog modal-lg\" role=\"document\"\u003E\n            \u003Cdiv class=\"modal-content\"\u003E\n              \u003Cdiv class=\"modal-header\"\u003E\n                \u003Ch5 class=\"modal-title\" id=\"exampleModalLabel\"\u003EEdit Post\u003C\u002Fh5\u003E\n                \u003Cbutton\n                  type=\"button\"\n                  class=\"close\"\n                  data-dismiss=\"modal\"\n                  aria-label=\"Close\"\n                \u003E\n                  \u003Cspan aria-hidden=\"true\"\u003E&times;\u003C\u002Fspan\u003E\n                \u003C\u002Fbutton\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"modal-body\"\u003E\n                \u003Cform\u003E\n                  \u003Cdiv class=\"form-group\"\u003E\n                    \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\n                      \u003ETitle:\u003C\u002Flabel\n                    \u003E\n                    \u003Cinput type=\"text\" v-model=\"blog.Title\" class=\"form-control\" \u002F\u003E\n                  \u003C\u002Fdiv\u003E\n                  \u003Cdiv class=\"form-group\"\u003E\n                    \u003Clabel for=\"message-text\" class=\"col-form-label\"\u003EBody:\u003C\u002Flabel\u003E\n                    \u003Ctextarea class=\"form-control\" v-model=\"blog.Body\"\u003E\u003C\u002Ftextarea\u003E\n                  \u003C\u002Fdiv\u003E\n                \u003C\u002Fform\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"modal-footer\"\u003E\n                \u003Cbutton type=\"button\" class=\"btn btn-primary\" @click=\"editPost()\"\u003E\n                  Save\n                \u003C\u002Fbutton\u003E\n              \u003C\u002Fdiv\u003E\n            \u003C\u002Fdiv\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fdiv\u003E\n```\n\nThe **Edit** button was also changed to contain code to open the modal like this\n\n\n    \u003Cbutton type=\"button\" class=\"btn btn-primary mr-2\" data-toggle=\"modal\" data-target=\"#exampleModal\" data-whatever=\"@mdo\"\u003E Edit\u003C\u002Fbutton\u003E\n\nWe used `v-model=\"blog.Title\"` and `v-model=\"blog.Body\"` to bind the post Title and Body to the respective form fields. `@click=\"editPo``s``t()``\"` was called upon submission of the form. Lets add that function to the Methods object of our app like this.\n\n```\n    editPost() {\n          this.$apollo\n            .mutate({\n              mutation: gql`\n                mutation updateBlog($id: ID!, $Title: String!, $Body: String!) {\n                  updateBlog(\n                    input: {\n                      where: { id: $id }\n                      data: { Title: $Title, Body: $Body }\n                    }\n                  ) {\n                    blog {\n                      Title\n                      Body\n                    }\n                  }\n                }\n              `,\n              variables: {\n                id: this.id,\n                Title: this.blog.Title,\n                Body: this.blog.Body,\n              },\n            })\n            .then((res) =\u003E {\n              console.log(res);\n              alert(\"Edited\");\n            });\n        },\n```\n\nThe method looks a lot similar to that of the Delete function implemented above except for the data we passed along in this case and the additional two variable added `$Title: String!` and `$Body: String!` . But now you should be able to open and close the Edit form modal \n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625797473418_screen13.png)\n\n\n \n You should also be able to Edit post and save like so\n \n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798137659_screen14.png)\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625798176353_screen15.png)\n\n##  Create A Post\n\n Thus far, we have covered Reading, Editing and Deleting post from our GraphQL server. Lets look at how we can create new post in this section. We need a new router and a new component for this feature. In your **Main.js** add a new route to the already existing \n \n```\n     const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n    \n        \u002F\u002Fadd this\n        { path: '\u002Fcreate', component: require('.\u002Fcomponents\u002FCreatePost.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n      ],\n    })\n```\n \nfurther more, we need to create the component that our newly created route points to. In **src→components** create a new component name **CreatePost.vue** like we have in the route.\n\nEdit the content of the component and add the following code to it to display our form, validate and create a new post\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv class=\"container\"\u003E\n        \u003Cdiv class=\"mt-5\"\u003E\n          \u003Cdiv class=\"card-head\" style=\"padding: 4rem\"\u003E\n            \u003Ch1 style=\"font-size: 6rem\"\u003E\n              Create New Post\n              \u003Chr \u002F\u003E\n            \u003C\u002Fh1\u003E\n          \u003C\u002Fdiv\u003E\n          \u003Cdiv class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"\u003E\n            \u003Cform\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\u003ETitle:\u003C\u002Flabel\u003E\n                \u003Cinput type=\"text\" v-model=\"Title\" class=\"form-control\" \u002F\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"message-text\" class=\"col-form-label\"\u003EBody:\u003C\u002Flabel\u003E\n                \u003Ctextarea class=\"form-control\" rows=\"8\" v-model=\"Body\"\u003E\u003C\u002Ftextarea\u003E\n              \u003C\u002Fdiv\u003E\n            \u003C\u002Fform\u003E\n            \u003Cdiv\u003E\n              \u003Cbutton type=\"button\" class=\"btn btn-primary\" @click=\"createPost()\"\u003E\n                Save\n              \u003C\u002Fbutton\u003E\n            \u003C\u002Fdiv\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fdiv\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n    \u003Cscript\u003E\n    import gql from \"graphql-tag\";\n    export default {\n      data() {\n        return {\n          Title: \"\",\n          Body: \"\",\n        };\n      },\n      methods: {\n        createPost() {\n          if (this.Title && this.Body) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation createBlog($Title: String!, $Body: String!) {\n                    createBlog(input: { data: { Title: $Title, Body: $Body } }) {\n                      blog {\n                        Title\n                        Body\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  Title: this.Title,\n                  Body: this.Body,\n                },\n              })\n              .then((res) =\u003E {\n                console.log(res);\n                alert(\"Post Created\");\n              });\n          } else {\n            alert(\"all fields are required\");\n          }\n        },\n      },\n    };\n    \u003C\u002Fscript\u003E\n```\n\nWe used basic bootstrap to beautify our HTML form. Vue.js `v-model` was used to binned form values to its respective elements. in `createPost()` method, we validated this form and created our GraphQL query to create a new post. \nLets edit the Navbar and add a link to this component.\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv\u003E\n        \u003Cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003E\n          \u003Crouter-link class=\"navbar-brand\" to=\"\u002F\"\u003EHome\u003C\u002Frouter-link\u003E\n          \u003Cbutton\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          \u003E\n            \u003Cspan class=\"navbar-toggler-icon\"\u003E\u003C\u002Fspan\u003E\n          \u003C\u002Fbutton\u003E\n          \u003Cdiv class=\"collapse navbar-collapse\" id=\"navbarNav\"\u003E\n            \u003Cul class=\"navbar-nav\"\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"\u002Fcreate\"\n                  \u003EAdd New Post\u003C\u002Frouter-link\n                \u003E \u002F\u002FcreatePost Link added here\n              \u003C\u002Fli\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"#\"\u003ELink\u003C\u002Frouter-link\u003E\n              \u003C\u002Fli\u003E\n            \u003C\u002Ful\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fnav\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n```\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625802048664_screen16.png)\n\n\nlets go ahead and create a new post to see our form in action\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916372504_screen19.png)\n\n\nAfter creating the new post, you can find it in the home page like so\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625916509335_screen20.png)\n\n\n## Signup\n\nWe have been able to explore the CRUD feature of GraphQL using Vue.js. Let us scratch the surface of implementing authentication by creating a new user using GraphQL. A newly created user returns a `jwt` . When making request to protected routes in GraphQL, you need to pass the `jwt` token along with the request. \n\nWith that said, lets proceed. We need to create a new route and a new component for this and also edit the navigation bar once more.\n\nin **src→components** create a component name **Authentication.vue.** in the main.js, add a new route pointing to this component like so\n\n```\n    const router = new VueRouter({\n      mode: 'history',\n      routes : [\n        { path: '\u002F', component: require('.\u002Fcomponents\u002FHome.vue').default },\n        { path: '\u002Fcreate', component: require('.\u002Fcomponents\u002FCreatePost.vue').default },\n        { path: '\u002Fblog\u002F:id', component: require('.\u002Fcomponents\u002FSingleBlog.vue').default},\n        \u002F\u002Fnewly created route\n        { path: '\u002Fuser\u002Fsignup', component: require('.\u002Fcomponents\u002FAuthentication.vue').default},\n      ],\n    })\n```\n\nedit the last link in the nav menu and add a link to the route\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv\u003E\n        \u003Cnav class=\"navbar navbar-expand-lg navbar-dark bg-dark\"\u003E\n          \u003Crouter-link class=\"navbar-brand\" to=\"\u002F\"\u003EHome\u003C\u002Frouter-link\u003E\n          \u003Cbutton\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          \u003E\n            \u003Cspan class=\"navbar-toggler-icon\"\u003E\u003C\u002Fspan\u003E\n          \u003C\u002Fbutton\u003E\n          \u003Cdiv class=\"collapse navbar-collapse\" id=\"navbarNav\"\u003E\n            \u003Cul class=\"navbar-nav\"\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"\u002Fcreate\"\n                  \u003EAdd New Post\u003C\u002Frouter-link\n                \u003E\n              \u003C\u002Fli\u003E\n              \u003Cli class=\"nav-item\"\u003E\n                \u003Crouter-link class=\"nav-link\" to=\"\u002Fuser\u002Fsignup\"\n                  \u003Esign up\u003C\u002Frouter-link\n                \u003E\n              \u003C\u002Fli\u003E\n            \u003C\u002Ful\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fnav\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n```\n\nIn the newly created component, add the following\n\n```\n    \u003Ctemplate\u003E\n      \u003Cdiv class=\"container\"\u003E\n        \u003Cdiv class=\"mt-5\"\u003E\n          \u003Cdiv class=\"card-head\" style=\"padding: 4rem\"\u003E\n            \u003Ch1 style=\"font-size: 6rem\"\u003E\n              Create New User\n              \u003Chr \u002F\u003E\n            \u003C\u002Fh1\u003E\n          \u003C\u002Fdiv\u003E\n          \u003Cdiv class=\"card card shadow-lg p-3 mb-5 bg-white rounded mr-5 ml-5\"\u003E\n            \u003Cform\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\n                  \u003EUser Name:\u003C\u002Flabel\n                \u003E\n                \u003Cinput type=\"text\" v-model=\"username\" class=\"form-control\" \u002F\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\u003EEmail:\u003C\u002Flabel\u003E\n                \u003Cinput type=\"email\" v-model=\"email\" class=\"form-control\" \u002F\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\u003EPassword:\u003C\u002Flabel\u003E\n                \u003Cinput type=\"password\" v-model=\"password\" class=\"form-control\" \u002F\u003E\n              \u003C\u002Fdiv\u003E\n              \u003Cdiv class=\"form-group\"\u003E\n                \u003Clabel for=\"recipient-name\" class=\"col-form-label\"\u003EPassword:\u003C\u002Flabel\u003E\n                \u003Cinput\n                  type=\"password\"\n                  v-model=\"password_confirm\"\n                  class=\"form-control\"\n                \u002F\u003E\n              \u003C\u002Fdiv\u003E\n            \u003C\u002Fform\u003E\n            \u003Cdiv\u003E\n              \u003Cbutton type=\"button\" class=\"btn btn-primary\" @click=\"createUser()\"\u003E\n                Save\n              \u003C\u002Fbutton\u003E\n            \u003C\u002Fdiv\u003E\n          \u003C\u002Fdiv\u003E\n        \u003C\u002Fdiv\u003E\n      \u003C\u002Fdiv\u003E\n    \u003C\u002Ftemplate\u003E\n    \u003Cscript\u003E\n    import gql from \"graphql-tag\";\n    export default {\n      data() {\n        return {\n          username: \"\",\n          email: \"\",\n          password: \"\",\n          password_confirm: \"\",\n        };\n      },\n      methods: {\n        createUser() {\n          if (\n            this.username &&\n            this.email &&\n            this.password &&\n            this.password_confirm\n          ) {\n            this.$apollo\n              .mutate({\n                mutation: gql`\n                  mutation register(\n                    $username: String!\n                    $email: String!\n                    $password: String!\n                  ) {\n                    register(\n                      input: {\n                        username: $username\n                        email: $email\n                        password: $password\n                      }\n                    ) {\n                      jwt\n                      user {\n                        username\n                        email\n                      }\n                    }\n                  }\n                `,\n                variables: {\n                  username: this.username,\n                  email: this.email,\n                  password: this.password,\n                },\n              })\n              .then((res) =\u003E {\n                console.log(res);\n                alert(\"User created Created\");\n              });\n          } else {\n            alert(\"all fields are required\");\n          }\n        },\n      },\n    };\n    \u003C\u002Fscript\u003E\n```\n\nIn our newly created component, we added a form, implemented slight authentication and made our GraphQL query to create a new user.\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_5BB4B57E7C13FFAD798C65F5C5ACBA9F2FE78507D0BD8DC2B28961C43F16EAC5_1625818780956_screen17.png)\n\n\nAfter successfully creating the user, we will get back a response from our Strapi GraphQL containing the `jwt` token which will enable you carrying out every authenticated user feature. You can get access to the token from the response object.\n\n```\n    .then((res) =\u003E {\n        console.log(res);\n          alert(\"User created Created\");\n    });\n```\n\n## Conclusion:\n\nCongratutlations, you've made it this far. By now, you should \n\n\n- Be able to setup GraphQL in Strapi\n- Be able to run GraphQL queries and Mutations using the Strapi playground, and within a Vue.js application using Apollo.\n- Be able to carry out CRUD request using GraphQL \n- Be able to Create an authentication system in Strapi using GraphQL\n\nNow you have the basics. It's good enough to start building real-world projects. Remember to share your experience with the rest of the Strapi Community.\n\nYou can find the Vue.js project code base on GitHub [**here**](https:\u002F\u002Fgithub.com\u002Falloyking1\u002FstrapiGraphQL).\n\n",user:{name:"Shada ",username:"shadaw11",twitter_username:"ShadaWehbe",github_username:"ShadaW11",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5iB_awIe--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GbKWt7ow--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg"},organization:{name:"Strapi",username:d,slug:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W257cHqH--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Kk8EQZ5l--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fshadaw11\u002F789486",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-08-12T12:10:46Z",6,"strapi"));
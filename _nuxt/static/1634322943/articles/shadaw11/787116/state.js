window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:787116,title:"How to Build a Voice Recording Application with Strapi",description:"Introduction   Within this tutorial, you will build a Voice Recorder service accessed via a...",readable_publish_date:"Aug 10",slug:"how-to-build-a-voice-recording-application-with-strapi-32k0",path:"\u002Fstrapi\u002Fhow-to-build-a-voice-recording-application-with-strapi-32k0",url:"https:\u002F\u002Fdev.to\u002Fstrapi\u002Fhow-to-build-a-voice-recording-application-with-strapi-32k0",comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--PpkVkh4J--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhb67gs1vkr07pie4lu3k.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ge74hJjJ--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhb67gs1vkr07pie4lu3k.jpg",canonical_url:"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-a-voice-recording-application-with-strapi?utm_source=devto&utm_medium=post",created_at:b,edited_at:a,crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:23,tag_list:"postgres, reactnative, tutorial, cms",tags:["postgres","reactnative","tutorial","cms"],body_html:"\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWithin this tutorial, you will build a Voice Recorder service accessed via a mobile React Native application that provides users with the functionality of creating a personal account and recording a voice input associated with their account data.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhile building this application, you will model your application data using Content-Types from a Strapi Admin dashboard. You will also learn how to enable and use the GraphQL API and perform file uploads using the GraphQL API.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"prerequisites\" href=\"#prerequisites\"\u003E\n  \u003C\u002Fa\u003E\n  Prerequisites\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo follow along with this tutorial, it is recommended that you satisfy the following requirements;\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EHave an installation of \u003Ca href=\"https:\u002F\u002Fwww.postgresql.org\u002F\"\u003EPostgreSQL\u003C\u002Fa\u003E on your local machine.\u003C\u002Fli\u003E\n\u003Cli\u003EHave either an android or iOS emulator set up on your local computer. The \u003Ca href=\"https:\u002F\u002Fdocs.expo.io\u002Fworkflow\u002Fdevelopment-mode\"\u003Edevelopment\u003C\u002Fa\u003E section of Expo documentation explains how to set up a development emulator on your local machine.\u003C\u002Fli\u003E\n\u003Cli\u003EHave \u003Ca href=\"https:\u002F\u002Fnodejs.dev\u002F\"\u003ENode\u003C\u002Fa\u003E installed with either Yarn or NPM as a package manager.\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EBefore building the Strapi and react native application, open your terminal window and execute the two commands below to create a parent directory and change your working directory to it.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    # create directory \n    mkdir strapi-voice\n\n    # change directory\n    cd strapi-voice\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe two applications that will be built in this article will be stored in the parent strapi-voice directory.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"creating-strapi-application\" href=\"#creating-strapi-application\"\u003E\n  \u003C\u002Fa\u003E\n  Creating Strapi Application\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EIn this tutorial, you will use a Postgres database to store data from your Strapi application. By default, Strapi uses an SQLite database for new applications, but you will change this to a Postgres database during the installation steps. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBefore creating the Strapi application, create a new database within your running Postgres cluster for the Strapi application. This database name will be specified while creating a new Strapi application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EExecute the SQL command below using \u003Ca href=\"https:\u002F\u002Fwww.postgresql.org\u002Fdocs\u002F13\u002Fapp-psql.html\"\u003Epsql\u003C\u002Fa\u003E to create a new database, replacing the \u003Ccode\u003EDATABASE_NAME\u003C\u002Fcode\u003E placeholder with your desired database name; \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E: A*lternatively, you can also use your preferred GUI database tool to create the database.*\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    CREATE DATABASE &lt;DATABASE_NAME&gt;;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe first step to working with Strapi is to create a new Strapi project using the \u003Ccode\u003Ecreate-strapi-app\u003C\u002Fcode\u003E CLI with \u003Ca href=\"https:\u002F\u002Fnodejs.dev\u002Flearn\u002Fthe-npx-nodejs-package-runner\"\u003Enpx\u003C\u002Fa\u003E. Execute the command below to launch the interactive installer;\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npx create-strapi-app voice-app \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EExecuting the command above would launch the interactive installer that would walk you through the process of configuring a new Strapi application in the following steps;\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ESelect the Custom installation method as you would be using a Postgres database with the Strapi application. \u003C\u002Fli\u003E\n\u003Cli\u003ESelect Postgres as the default database client for this application. \u003C\u002Fli\u003E\n\u003Cli\u003EProvide the connection details of your Postgres cluster and a database. If you are using a Postgres cluster running on your local system, you can use the default values provided by the installer for the Postgres connection.\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EAfter providing the database credentials, wait for some minutes for the Strapi installer to verify that the credentials are valid and create the data schema in the specified database. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter a complete installation, execute the commands below to change the directory into the Strapi application and start the development server to start the Strapi server.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    # change directory \n    cd voice-api\n\n    # start the development server\n    yarn develop\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EExecuting the command above will start the Strapi server on port 1337. Open the admin dashboard for your Strapi application at \u003Ccode\u003E[http:\u002F\u002Flocalhost:1337\u002Fadmin](http:\u002F\u002Flocalhost:1337\u002Fadmin)\u003C\u002Fcode\u003E to create a root admin user with an admin email and password.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KjXheAyF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FJb7w-yAx20CnekZdgWAimRsYfD5j4J537OEigou_SusoOlTgqCvb7lh6l_-rQUaUSA49_i7p4pAVV67a2gzt1otSkI8bdZT19Qi6R-hGL6O5O6HG0edeNOYivg8xmjs4ItvdIAES\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--KjXheAyF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FJb7w-yAx20CnekZdgWAimRsYfD5j4J537OEigou_SusoOlTgqCvb7lh6l_-rQUaUSA49_i7p4pAVV67a2gzt1otSkI8bdZT19Qi6R-hGL6O5O6HG0edeNOYivg8xmjs4ItvdIAES\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"modeling-strapi-contenttype\" href=\"#modeling-strapi-contenttype\"\u003E\n  \u003C\u002Fa\u003E\n  Modeling Strapi Content-Type\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAt this point, you have your Strapi application up and running with a full setup admin dashboard. The next step will be to model the data within your Strapi application using the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fuser-docs\u002Flatest\u002Fcontent-types-builder\u002Fintroduction-to-content-types-builder.html\"\u003EContent Builder.\u003C\u002Fa\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EFrom the Strapi dashboard, navigate to the Content-builder page using the left sidebar. Click the Create new collection type text from the left placed Collection Types section to launch the modal for creating a new collection type. \u003C\u002Fp\u003E\n\n\u003Cp\u003EWithin the opened modal, specify \u003Cstrong\u003Evoice-recordings\u003C\u002Fstrong\u003E in the display name text field as the name of this collection type.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OKptPP-h--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FEJhp08k1uVHDeQ6YZJ4dB6Tt8Ltn5wSXZYTzKUAUDgMlfEdiZeMh1Iw99Q82sU4bVq20Eb0RYCXgpHdbCTjbsK93dXIReJ4ptenoz-KJhjz0bPFg_UyEmnRitMRSZpuyBPhfa7Eg\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OKptPP-h--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FEJhp08k1uVHDeQ6YZJ4dB6Tt8Ltn5wSXZYTzKUAUDgMlfEdiZeMh1Iw99Q82sU4bVq20Eb0RYCXgpHdbCTjbsK93dXIReJ4ptenoz-KJhjz0bPFg_UyEmnRitMRSZpuyBPhfa7Eg\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs shown above, a unique identifier for the collection type will be generated from the display name. \u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, click the \u003Cstrong\u003EAdvanced Settings\u003C\u002Fstrong\u003E tab to reveal more advanced settings for the collection. Toggle off the default enabled \u003Cstrong\u003EDraft \u002F publish system\u003C\u002Fstrong\u003E for this collection type. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fconcepts\u002Fdraft-and-publish.html\"\u003Edraft \u002F publish system\u003C\u002Fa\u003E provides an application admin with the feature to create a draft entry and review it later before publishing. You will not need this feature within the application. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z6tZIssF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FEOQoiIoLfP6-tUbEbHsdf6wH_u5TI39RhDkPYpnT1EGr-h06li5qniszG0PVTvX2TxencGEYMqFdi4DAXQ-RR4n6LA4B5lWbl5Jq5E6g9Pfq6v8WduVzTmL6kjMliZnO-aMyNR8K\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Z6tZIssF--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FEOQoiIoLfP6-tUbEbHsdf6wH_u5TI39RhDkPYpnT1EGr-h06li5qniszG0PVTvX2TxencGEYMqFdi4DAXQ-RR4n6LA4B5lWbl5Jq5E6g9Pfq6v8WduVzTmL6kjMliZnO-aMyNR8K\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter toggling off the Draft \u002F publish system, leave other settings at their default and click the continue button.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe next step will be to create the fields within the collection content type. Select the following fields shown within the modal;\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EText\u003C\u002Fstrong\u003E -- Specify \u003Cstrong\u003Erecording_name\u003C\u002Fstrong\u003E as the name of this field. It would be used to identify each entry within the collection content type.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ERich Text\u003C\u002Fstrong\u003E -- Specify \u003Cstrong\u003Erecording_description\u003C\u002Fstrong\u003E as the name of this field. It will be used to store a description of each entry within the voice-recording content-type.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EDateTime\u003C\u002Fstrong\u003E -- Specify \u003Cstrong\u003Edate_created\u003C\u002Fstrong\u003E as the name of this field. It will be used to store the date and time the new voice recording was created.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003EMedia\u003C\u002Fstrong\u003E -- Specify the name of this field as \u003Cstrong\u003Erecording\u003C\u002Fstrong\u003E. It would contain the blob recording file from the User's device.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003E\u003Cstrong\u003ERelation\u003C\u002Fstrong\u003E -- Specify \u003Cstrong\u003Ecreated_by\u003C\u002Fstrong\u003E as the name of this relationship within the voice-recording field name text field. \u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EAt the right-hand side, click the default \u003Cem\u003EFile ( from: upload )\u003C\u002Fem\u003E dropdown and select the \u003Cem\u003EUser ( from: users-permission )\u003C\u002Fem\u003E option to relate the voice-recordings relation to the User collection-type. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ibpj-kpw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FLn5MZqjFQ_aJI-xdOSISHZUA9TF2ulOIcQl2GAfMWJyIIzh04voJ37NcvdxgHTlxz0r4UQncIu5QoZb142Twfp9KaBOWqi992xXoZCc69j49BFakWYVhzkbO6y2u9jx5rE_F45mu\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--ibpj-kpw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FLn5MZqjFQ_aJI-xdOSISHZUA9TF2ulOIcQl2GAfMWJyIIzh04voJ37NcvdxgHTlxz0r4UQncIu5QoZb142Twfp9KaBOWqi992xXoZCc69j49BFakWYVhzkbO6y2u9jx5rE_F45mu\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter creating the created_by relation similar to the relation shown in the image above, click the Finish button to complete the entire collection. \u003C\u002Fp\u003E\n\n\u003Cp\u003EFrom the Content Builder page, the voice-recordings collection content type will be listed with all the newly added fields as shown below;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AQ7tr-9v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002Fk3B5qywmRChCaeI1Q9zviMz-qbIUVOZ4YNtcX9KI8kK-1phyVwpePIBiuEfRGy_t6sL-IEqWUx-vSlgiGcbBuFHdudgY8aVqUqxhhEwsIfBiwV1GntFJ1b5mUGdEatMVYa38QglZ\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--AQ7tr-9v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002Fk3B5qywmRChCaeI1Q9zviMz-qbIUVOZ4YNtcX9KI8kK-1phyVwpePIBiuEfRGy_t6sL-IEqWUx-vSlgiGcbBuFHdudgY8aVqUqxhhEwsIfBiwV1GntFJ1b5mUGdEatMVYa38QglZ\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs shown in the image above, your voice-recordings collection type has five fields, each making up the voice-recording details.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"setting-application-rolebased-access-control\" href=\"#setting-application-rolebased-access-control\"\u003E\n  \u003C\u002Fa\u003E\n  Setting Application Role-Based Access Control\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EProper user management is an essential aspect of every application. In the design of this application, every User will be able to create a recording and view their past recordings. \u003C\u002Fp\u003E\n\n\u003Cp\u003ETo protect the privacy of each User's data, you will configure the role of users using the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Ffeatures\u002Fcustom-roles-and-permissions\"\u003ERole-Based Access Control\u003C\u002Fa\u003E ( RBAC ) feature provided by Strapi. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E: \u003Cem\u003EThis\u003C\u002Fem\u003E \u003Cem\u003Earticle within the Strapi blog provides an in-depth explanation of the\u003C\u002Fem\u003E \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fstrapi-s-user-roles-and-permissions-for-admin-panel\"\u003E\u003Cem\u003ERole-Based Access Control\u003C\u002Fem\u003E\u003C\u002Fa\u003E \u003Cem\u003Efeatures of Strapi.\u003C\u002Fem\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EUsing the Strapi Admin dashboard, navigate to the settings page, click the Roles item listed in the User &amp; Permissions section within the left-placed navigation bar. This will display the default Public and Authenticated roles for each created User.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pNB_fMuN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FSWen8HPy29nOHhWOUmwI3TneSSAGh7fZz0DGSHWnB_-y5GZ8ZBbwu1DhA7DjdMCO1ff93bSlbz103qTXNhydNOzj9eE1tj2gzZa8c-GEowypXgrflH7sfJ2U1nGegXIGjBgTnoOB\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--pNB_fMuN--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FSWen8HPy29nOHhWOUmwI3TneSSAGh7fZz0DGSHWnB_-y5GZ8ZBbwu1DhA7DjdMCO1ff93bSlbz103qTXNhydNOzj9eE1tj2gzZa8c-GEowypXgrflH7sfJ2U1nGegXIGjBgTnoOB\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAmong the two listed roles above, the \u003Cstrong\u003EAuthenticated\u003C\u002Fstrong\u003E role highlighted will be of primary focus as you will expand the scope of this role in the next step. \u003C\u002Fp\u003E\n\n\u003Cp\u003EClick the first \u003Cstrong\u003EAuthenticated\u003C\u002Fstrong\u003E role to display the view for the role that allows you to edit the permissions and details.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the Permissions card within the Authenticated role view, the voice-recording content type will be displayed with its allowed actions within the Application permission. Click the \u003Cstrong\u003ESelect All\u003C\u002Fstrong\u003E checkbox to grant all users with the authenticated role to perform the enabled actions on the voice-recording content type. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TVTvCiOd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FpA3_hTITwfrh8nLv85psS9bV_ooaXmc4eXiebwQt7DR0jTpHPtx65ripMeJoRVDmx4syCYSahzr9-m2JmbTWHv00ai6t6D5CEiJRiYpqSQwneibk_IPH6CMyb1k1UT2T7UZVe5WS\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TVTvCiOd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FpA3_hTITwfrh8nLv85psS9bV_ooaXmc4eXiebwQt7DR0jTpHPtx65ripMeJoRVDmx4syCYSahzr9-m2JmbTWHv00ai6t6D5CEiJRiYpqSQwneibk_IPH6CMyb1k1UT2T7UZVe5WS\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EClick the Save button and wait for the new change made to the Authenticated role to be effected. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAt this point, the Strapi application is fully functional and ready for use. However, the design of the mobile application is to send and consume data from a GraphQL API to enjoy the benefits of GraphQL. Hence, you need to enable the GraphQL API within the Strapi application by installing the GraphQL plugin.\u003C\u002Fp\u003E\n\n\u003Cp\u003EStop the running Strapi application, and install the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fgraphql.html#usage\"\u003EGraphQL\u003C\u002Fa\u003E plugin for Strapi using the command below;\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    yarn strapi install graphql \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EAfter installing the plugin above, restart the management server and navigate to the GraphiQL playground in your web browser at \u003Ccode\u003Ehttp:\u002F\u002Flocalhost:1337\u002Fgraphql\u003C\u002Fcode\u003E to view your application data.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--K4cUZHj6--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FlcKq-6FALCm-XJIKNr40Y_4zews9Bw_Z6Kl1olXRTLR_yn6uRka1_ya9856TTR8vNUhhIO0j95byz34CggSgp-RHgR2p3c8_rFW_wT1qUEO_guHMiCqEjIB0TPjCkWnuTDgkwf_y\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--K4cUZHj6--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FlcKq-6FALCm-XJIKNr40Y_4zews9Bw_Z6Kl1olXRTLR_yn6uRka1_ya9856TTR8vNUhhIO0j95byz34CggSgp-RHgR2p3c8_rFW_wT1qUEO_guHMiCqEjIB0TPjCkWnuTDgkwf_y\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fgraphql.html#usage\"\u003Eauthentication\u003C\u002Fa\u003E section of the GraphQL plugin documentation for Strapi explains how to generate and use a \u003Ca href=\"https:\u002F\u002Fwww.google.com\u002Furl?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjrtrDmuvfxAhXTNOwKHdcfBmoQFjAAegQICBAD&amp;url=https%3A%2F%2Fjwt.io%2F&amp;usg=AOvVaw0PqqYtnuCxjkbOK_ocY444\"\u003EJWT\u003C\u002Fa\u003E token in your playground HTTP headers before using a GraphQL operation from the GraphiQL playground.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith the Strapi application fully set up having a \u003Cstrong\u003EUsers\u003C\u002Fstrong\u003E and Voice-recordings collection type, whose data is served through a GraphQL API, you can build the React Native application connected to the GraphQL API.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"creating-a-react-native-application\" href=\"#creating-a-react-native-application\"\u003E\n  \u003C\u002Fa\u003E\n  Creating A React Native Application\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EWithin this article, we would use the \u003Ca href=\"https:\u002F\u002Fdocs.expo.io\u002Fget-started\u002Fcreate-a-new-app\u002F\"\u003EExpo CLI\u003C\u002Fa\u003E to bootstrap a new React Native application quickly. \u003Ca href=\"https:\u002F\u002Fexpo.dev\u002F\"\u003EExpo\u003C\u002Fa\u003E is an open-source platform that abstracts away all the complexities of building a React application by providing tools to effortlessly build and deploy your application.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIf you do not have the Expo CLI installed, execute the command below to install the expo-cli globally on your local computer using NPM.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npm install -g expo-cli\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003ENext, execute the command below to launch the interactive installer within the expo-cli that will walk you through creating a new react native application with Expo.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    expo init voice-app\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EWhen prompted to choose a template by the installer, select the blank template within the managed workflow type.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6gYj2C_Q--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FNhFYm1qjYXooqCzDIkTMgDqow6X1oHNat4sv1vW-W7fL9bEo1jBWXTjA8AExZVDgj8MIgyPrXQqEgq43r7flxZ3HNjM-NioHuOqTTLwact1YGqMPZh69gwav9jdjlD-jSgSkbfQ0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--6gYj2C_Q--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FNhFYm1qjYXooqCzDIkTMgDqow6X1oHNat4sv1vW-W7fL9bEo1jBWXTjA8AExZVDgj8MIgyPrXQqEgq43r7flxZ3HNjM-NioHuOqTTLwact1YGqMPZh69gwav9jdjlD-jSgSkbfQ0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith the application created, you can launch either an android or iOS emulator based on your operating system to view local changes to the application.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, start the expo metro server to bundle and install your code on the running emulator; \u003Cbr\u003E\nexpo start \u003C\u002Fp\u003E\n\n\u003Cp\u003EPress a to install the application on an Android emulator, or press o to install the application on an iOS emulator. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E: You can also work with the expo application using the Metro DevTools launched in your default browser.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo use the GraphQL API from Strapi within this application, you will need to install client libraries from react-apollo alongside libraries from react-navigation to implement navigation across screens within the application;\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    npm install @apollo\u002Fclient react-native-vector-icons @react-native-community\u002Fmasked-view @react-navigation\u002Fnative @react-navigation\u002Fstack graphql expo-av expo-file-system @react-native-async-storage\u002Fasync-storage apollo-link-error\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EEach time a GraphQL operation is performed against the Strapi API, you must provide a valid JWT token to authenticate the request. This JWT token will be obtained from the operation response when a user either signs in to the application or creates a new account. This token will be stored in the application using the \u003Ca href=\"https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F\"\u003E@react-native-async-storage\u002Fasync-storage\u003C\u002Fa\u003E library that was installed above. \u003C\u002Fp\u003E\n\n\u003Cp\u003ETo use the \u003Ccode\u003E@react-native-async-storage\u002Fasync-storage\u003C\u002Fcode\u003E library, it is recommended that you create an abstraction over the library's API. To do this, create a \u003Ccode\u003Estorage.js\u003C\u002Fcode\u003E file and add the code block's content below that contains helper functions for working with the \u003Ca href=\"https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F\"\u003E@react-native-async-storage\u002Fasync-storage\u003C\u002Fa\u003E library.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fstorage.js\n\n    import AsyncStorage from \"@react-native-async-storage\u002Fasync-storage\";\n\n    export const USER_TOKEN_KEY = \"@USER_TOKEN\";\n    export const USER_ID_KEY = \"@USER_ID\";\n\n    const validateParameter = (key) =&gt; {\n      if (!key &amp;&amp; key !== String) {\n        throw new Error(\"Invalid key specified\");\n      }\n    };\n\n    export const setItem = async (itemKey, itemValue) =&gt; {\n      if (!key &amp;&amp; !val &amp;&amp; typeof key !== String &amp;&amp; val !== String) {\n        throw new Error(\"Invalid key or val specified\");\n      }\n      try {\n        await AsyncStorage.setItem(\n          itemKey,\n          JSON.stringify({\n            data: itemValue,\n          })\n        );\n      } catch (e) {\n        console.log(`Error setting key: ${e}`);\n      }\n    };\n\n    export const clearItem = async (key) =&gt; {\n      validateParameter(key);\n      try {\n        await AsyncStorage.removeItem(key);\n      } catch (e) {\n        console.log(`Error removing key: ${e}`);\n      }\n    };\n\n    export const getItem = async (key) =&gt; {\n      validateParameter(key);\n      try {\n        const data = await AsyncStorage.getItem(key);\n        return JSON.parse(data);\n      } catch (e) {\n        console.log(`Error removing key: ${e}`);\n      }\n    };\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe code block above contains three exported asynchronous helper functions for creating, deleting, and retrieving data stored in the device local storage using the \u003Ca href=\"https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F\"\u003E@react-native-async-storage\u002Fasync-storage\u003C\u002Fa\u003E library. In the next step, you will use the \u003Ccode\u003EgetItem\u003C\u002Fcode\u003E function exported from the code block above to retrieve the stored token when creating an \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Fcore\u002FApolloClient\u002F#gatsby-focus-wrapper\"\u003EApolloClient\u003C\u002Fa\u003E instance. \u003C\u002Fp\u003E\n\n\u003Cp\u003EUsing your preferred code editor, open the \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file. You will replace the boilerplate code with the content of the code block below, which instantiates the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Fcore\u002FApolloClient\u002F#gatsby-focus-wrapper\"\u003EApolloClient\u003C\u002Fa\u003E class and adds the navigation screens within the application.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    import { StatusBar } from \"expo-status-bar\";\n    import React, { useState, useEffect } from \"react\";\n    import { ApolloProvider } from \"@apollo\u002Fclient\";\n    import { createStackNavigator } from \"@react-navigation\u002Fstack\";\n    import {\n     ApolloClient,\n     ApolloLink,\n     HttpLink,\n     InMemoryCache,\n    } from \"@apollo\u002Fclient\";\n    import { NavigationContainer } from \"@react-navigation\u002Fnative\";\n\n    import Home from \".\u002Fsrc\u002Fscreens\u002Fhome\";\n    import CreateRecording from \".\u002Fsrc\u002Fscreens\u002Fcreate-recording\";\n    import CreateAccount from \".\u002Fsrc\u002Fscreens\u002Fcreate-account\";\n    import Login from \".\u002Fsrc\u002Fscreens\u002Flogin\";\n    import { getToken, USER_TOKEN_KEY } from \".\u002Fsrc\u002Futils\";\n\n    const headerTitleStyle = {\n     fontSize: 17,\n     color: \"#fff\",\n     fontWeight: \"normal\",\n    };\n\n    export default function App() {\n     const [token, setToken] = useState(null);\n     const Stack = createStackNavigator();\n\n     useEffect(() =&gt; {\n       (async function () {\n         const data = await getToken(USER_TOKEN_KEY);\n         setToken(data);\n       })();\n     }, []);\n\n     const client = new ApolloClient({\n       cache: new InMemoryCache(),\n       link: ApolloLink.from([\n         new HttpLink({\n           # Replace this with an environment variable containing the URL to your deployed Strapi API\n           uri: \"http:\u002F\u002Flocalhost::1337\u002Fgraphql\",\n           headers: token\n             ? {\n                 Authorization: `Bearer ${token.jwt}`,\n               }\n             : null\n         }),\n       ]),\n     });\n\n     return (\n       &lt;NavigationContainer&gt;\n         &lt;ApolloProvider client={client}&gt;\n           &lt;StatusBar style=\"auto\" \u002F&gt;\n\n           &lt;Stack.Navigator&gt;\n             &lt;Stack.Screen\n               options={{\n                 title: \"Login\",\n                 headerShown: false,\n                 headerTitleStyle,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"login\"\n               component={Login}\n             \u002F&gt;\n\n             &lt;Stack.Screen\n               options={{\n                 title: \"CreateAccount\",\n                 headerTitleStyle,\n                 headerShown: false,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"create-account\"\n               component={CreateAccount}\n             \u002F&gt;\n\n             &lt;Stack.Screen\n               options={{\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n                 headerLeft: null,\n                 title: \"My Recordings\",\n                 headerTitleStyle,\n               }}\n               name=\"home\"\n               component={Home}\n             \u002F&gt;\n             &lt;Stack.Screen\n               options={{\n                 title: \"New Recording\",\n                 headerTitleStyle,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"CreateRecording\"\n               component={CreateRecording}\n             \u002F&gt;\n           &lt;\u002FStack.Navigator&gt;\n         &lt;\u002FApolloProvider&gt;\n       &lt;\u002FNavigationContainer&gt;\n     );\n    }  \n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe code block above contains the root component for the React Native application. When the component is mounted, a \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html\"\u003EuseEffect\u003C\u002Fa\u003E hook is first executed to retrieve any token stored locally.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWhatever token that is found is stored in the component's local state and further used in the ApolloClient headers for authenticating GraphQL operations made to the Strapi API. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe ApolloClient instance store in the \u003Ccode\u003Eclient\u003C\u002Fcode\u003E variable is further passed as a prop to the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Ftutorial\u002Fqueries\u002F#integrate-with-react\"\u003EApolloProvider\u003C\u002Fa\u003E wrapper, which wraps the entire application component tree. \u003C\u002Fp\u003E\n\n\u003Cp\u003ENavigation within this application is also implemented in the \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file by making use of the \u003Ca href=\"https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fgetting-started#installation\"\u003EReact-Navigation\u003C\u002Fa\u003E library. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ca href=\"https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fstack-navigator#api-definition\"\u003EcreateStackNavigator\u003C\u002Fa\u003E hook from \u003Ca href=\"https:\u002F\u002Freactnavigation.org\"\u003EReact-Navigation\u003C\u002Fa\u003E is used to create a stack of screens comprising a Login, CreateAccount, Home, and CreateRecording screen. These screens have not been created yet, but you will create them soon.\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo keep the component free from unnecessary code, we would keep all unrelated code in their respective files and only important what is needed. \u003C\u002Fp\u003E\n\n\u003Cp\u003ECreate a \u003Ccode\u003Egraphql.js\u003C\u002Fcode\u003E file within the \u003Ccode\u003Esrc\u003C\u002Fcode\u003E directory and add the code block content below that contains the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Fapollo-server\u002Fv2\u002Fapi\u002Fapollo-server\u002F#gql\"\u003Egql\u003C\u002Fa\u003E template literals created using the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Fapollo-server\u002Fv2\u002Fapi\u002Fapollo-server\u002F#gql\"\u003Egql\u003C\u002Fa\u003E template literal tag from \u003Ca href=\"https:\u002F\u002Fwww.google.com\u002Furl?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;ved=2ahUKEwjZmercvffxAhUjJMUKHclgBbcQFjAAegQIBRAD&amp;url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40apollo%2Fclient&amp;usg=AOvVaw0iW2Z_EzWNE_CdFQqvxTIH\"\u003E@apollo\u002Fclient\u003C\u002Fa\u003E.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fgraphql.js\n    import { gql } from \"@apollo\u002Fclient\";\n\n    export const FETCH_RECORDINGS = gql`\n      query fetchRecordings {\n        voiceRecordings {\n          description\n          recording_name\n          id\n          created_at\n        }\n      }\n    `;\n\n    export const CREATE_ACCOUNT = gql`\n      mutation createAccount(\n        $email: String!\n        $password: String!\n        $username: String!\n      ) {\n        createUser(\n          input: {\n            data: { username: $username, email: $email, password: $password }\n          }\n        ) {\n          __typename\n        }\n      }\n    `;\n\n    export const LOGIN_USER = gql`\n      mutation loginUser($email: String!, $password: String!) {\n        login(input: { identifier: $email, password: $password }) {\n          jwt\n          user {\n            id\n          }\n        }\n      }\n    `;\n\n    export const CREATE_RECORDING = gql`\n      mutation createRecording(\n        $description: String\n        $name: String\n        $userId: String\n        $fileId: String\n      ) {\n        createVoiceRecording(\n          input: {\n            data: {\n              description: $description\n              recording_name: $name\n              users_permissions_user: $userId\n              recording: $fileId\n            }\n          }\n        ) {\n          voiceRecording {\n            description\n            recording_name\n            recording {\n              id\n            }\n          }\n        }\n      }\n    `;\n\n    export const UPLOAD_FILE = gql`\n      mutation uploadFile($file: Upload!) {\n        upload(file: $file) {\n          id\n        }\n      }\n    `;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe code block above contains five exported variables, each containing the respective gql \u003Ca href=\"https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FTemplate_literals#Tagged_templates\"\u003Etemplate literal tag\u003C\u002Fa\u003E for the Query and Mutation operations within the application. \u003C\u002Fp\u003E\n\n\u003Cp\u003ECreate a new \u003Ccode\u003Escreens\u003C\u002Fcode\u003E directory within the \u003Ccode\u003Esrc\u003C\u002Fcode\u003E directory. This new directory will contain the navigation screens imported and used in the \u003Ccode\u003EApp.js\u003C\u002Fcode\u003E file. In the four outlined steps below, you will create a file for each of these screens and build the components within them;\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreate Account Screen\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EUsing your opened code editor, create a \u003Ccode\u003ECreateAccount.js\u003C\u002Fcode\u003E file and add the code block's content below into the new \u003Ccode\u003ECreateAccount.js\u003C\u002Fcode\u003E file to create a component with text fields for a user to specify a username, email, and password detail for creating a new account in the Voice recorder application.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FCreateAccount.js\n\n    import * as React from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ActivityIndicator,\n      StyleSheet,\n      Dimensions,\n      TouchableOpacity,\n    } from \"react-native\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import { CREATE_ACCOUNT } from \"..\u002Fgraphql\";\n\n    const { height, width } = Dimensions.get(\"window\");\n\n    const CreateAccount = (props) =&gt; {\n      const [Email, setEmail] = React.useState(\"\");\n      const [username, setUsername] = React.useState(\"\");\n      const [Password, setPassword] = React.useState(\"\");\n      const [confirmPassword, setConfirmPassword] = React.useState(\"\");\n      const [error, setError] = React.useState(null);\n      const [isLoading, setLoading] = React.useState(false);\n\n      const [createAccount, { data }] = useMutation(CREATE_ACCOUNT, {\n        variables: {\n          username,\n          email: Email,\n          password: Password,\n        },\n      });\n\n      const handleCreateAccount = async () =&gt; {\n        setLoading(true);\n        try {\n          await createAccount();\n          if (data) {\n            props.navigation.navigate(\"login\");\n          }\n        } catch (e) {\n          console.log(`error creating account : ${e}`);\n          setError(e);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      return (\n        &lt;View style={styles.body}&gt;\n          &lt;View&gt;\n            &lt;Text style={[styles.title, styles.alignCenter]}&gt;\n              Strapi Voice Recorder\n            &lt;\u002FText&gt;\n            &lt;View style={{ marginVertical: 5 }} \u002F&gt;\n            &lt;Text style={{ textAlign: \"center\", fontSize: 15 }}&gt;\n              {`Voice recorder application  powered \\n by Strapi CMS API`}{\" \"}\n            &lt;\u002FText&gt;\n            &lt;View style={{ marginVertical: 15 }} \u002F&gt;\n            {error &amp;&amp; (\n              &lt;Text style={{ textAlign: \"center\", fontSize: 14, color: \"red\" }}&gt;\n                {error.message}{\" \"}\n              &lt;\u002FText&gt;\n            )}\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                keyboardType=\"text\"\n                value={username}\n                placeholder=\"Your username. e.g Johnny\"\n                onChangeText={(val) =&gt; setUsername(val)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                keyboardType=\"email-address\"\n                value={Email}\n                placeholder=\"Your email. John@mail.com\"\n                onChangeText={(val) =&gt; setEmail(val)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                secureTextEntry={true}\n                value={Password}\n                placeholder=\"Your Password\"\n                onChangeText={(val) =&gt; setPassword(val)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                secureTextEntry={true}\n                value={confirmPassword}\n                placeholder=\"Confirm Your Password\"\n                onChangeText={(val) =&gt; setConfirmPassword(val)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.alignCenter}&gt;\n              &lt;TouchableOpacity\n                disabled={Password !== confirmPassword}\n                onPress={() =&gt; handleCreateAccount()}\n                style={[styles.button, styles.alignCenter]}\n              &gt;\n                {!isLoading ? (\n                  &lt;Text style={{ color: \"#fff\" }}&gt; Create New Account &lt;\u002FText&gt;\n                ) : (\n                  &lt;ActivityIndicator color=\"#282c34\" \u002F&gt;\n                )}\n              &lt;\u002FTouchableOpacity&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;TouchableOpacity\n              disabled={isLoading}\n              onPress={() =&gt; props.navigation.navigate(\"login\")}\n            &gt;\n              &lt;View style={styles.flex}&gt;\n                &lt;Text style={styles.infoText}&gt;Have An Account?&lt;\u002FText&gt;\n                &lt;Text style={[styles.infoText, { color: \"black\", marginLeft: 10 }]}&gt;\n                  Login Instead\n                &lt;\u002FText&gt;\n              &lt;\u002FView&gt;\n            &lt;\u002FTouchableOpacity&gt;\n          &lt;\u002FView&gt;\n        &lt;\u002FView&gt;\n      );\n    };\n    const styles = StyleSheet.create({\n      flex: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n      },\n      title: {\n        fontSize: 22,\n        textAlign: \"center\",\n        fontWeight: \"500\",\n      },\n      infoText: {\n        textAlign: \"center\",\n        fontSize: 14,\n        color: \"grey\",\n      },\n      body: {\n        backgroundColor: \"#fff\",\n        height,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingHorizontal: 10,\n        borderWidth: 1,\n        borderRadius: 5,\n        borderColor: \"#c0c0c0\",\n        height: 45,\n        width: width - 30,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        height: 40,\n        borderWidth: 1,\n        borderColor: \"#28BFFD\",\n        backgroundColor: \"#28BFFD\",\n        color: \"#fff\",\n        width: width - 30,\n        fontSize: 16,\n        borderRadius: 3,\n      },\n    });\n\n    export default CreateAccount;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe component within the code block above displays input fields and stores the values typed in the local component state, after which the input values are used in a GraphQL mutation as variables to create a new user.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOf peculiar interest is the \u003Ccode\u003EhandleCreateAccount\u003C\u002Fcode\u003E function within the \u003Ccode\u003ECreateAccount\u003C\u002Fcode\u003E component. This function is executed at the top of the \u003Cstrong\u003ECreate New Account\u003C\u002Fstrong\u003E button. It executes the createAccount GraphQL mutation destructured from the GraphQL literal using the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Freact\u002Fhooks\u002F#usemutation\"\u003EuseMutation\u003C\u002Fa\u003E hook from \u003Ca href=\"https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@apollo\u002Fclient\"\u003E@apollo\u002Fclient\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter the GraphQL mutation is executed without any error, the User is navigated to the Login screen to login using the same credentials used in creating the account. This flow adheres to the Strapi API structure and allows the application to retrieve the User's JWT token to authenticate future requests. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAn example of the Create-account screen in the voice recorder application running within an Android emulator is shown in the image below;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--U8A9w-4h--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967897327_strapi-create-account.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--U8A9w-4h--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967897327_strapi-create-account.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs shown in the image above, a user can also navigate to the Login screen to login to an existing account by tapping the \u003Cstrong\u003ELogin Instead\u003C\u002Fstrong\u003E text. In the next step, you will create the Login screen. \u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ELogin Screen\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EUsing your opened code editor, create a \u003Ccode\u003Elogin.js\u003C\u002Fcode\u003E file in the \u003Ccode\u003Escreens\u003C\u002Fcode\u003E directory and add the code block's content below into the \u003Ccode\u003Elogin.js\u003C\u002Fcode\u003E file to create a component that accepts a user's email and password specified when an account was created.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fscreens\u002Flogin.js\n\n    import * as React from \"react\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import {\n      View,\n      Text,\n      TextInput,\n      StyleSheet,\n      Dimensions,\n      ActivityIndicator,\n      TouchableOpacity,\n    } from \"react-native\";\n    import { setItem, getItem, USER_TOKEN_KEY } from \"..\u002Fstorage\";\n    import { LOGIN_USER } from \"..\u002Fgraphql\";\n    const { height, width } = Dimensions.get(\"window\");\n\n    const Login = (props) =&gt; {\n      const [Email, setEmail] = React.useState(\"\");\n      const [Password, setPassword] = React.useState(\"\");\n      const [isLoading, setLoading] = React.useState(false);\n      const [error, setLoginError] = React.useState(null);\n      const [loginUser, { data }] = useMutation(LOGIN_USER);\n\n      React.useEffect(() =&gt; {\n        (async function () {\n          const token = await getItem(USER_TOKEN_KEY);\n          if (token) {\n            props.navigation.navigate(\"home\");\n          }\n        })();\n      }, []);\n\n      const handleLogin = async () =&gt; {\n        setLoading(true);\n        try {\n          await loginUser({\n            variables: {\n              email: Email,\n              password: Password,\n            },\n          });\n          if (data) {\n            await setItem(data.login.jwt);\n            await setItem(data.login.user.id)\n            props.navigation.navigate(\"home\");\n          }\n        } catch (e) {\n          console.log(e);\n          setLoginError(e);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      return (\n        &lt;View style={styles.body}&gt;\n          &lt;View&gt;\n            &lt;Text style={[styles.title, styles.alignCenter]}&gt;\n              {\" \"}\n              Strapi Voice Recorder\n            &lt;\u002FText&gt;\n            &lt;View style={{ marginVertical: 5 }} \u002F&gt;\n            &lt;Text style={{ textAlign: \"center\", fontSize: 15 }}&gt;\n              {\" \"}\n              {`Voice recorder application  powered \\n by Strapi CMS API`}{\" \"}\n            &lt;\u002FText&gt;\n            &lt;View style={{ marginVertical: 15 }} \u002F&gt;\n            {error &amp;&amp; (\n              &lt;Text style={{ textAlign: \"center\", fontSize: 14, color: \"red\" }}&gt;\n                {error.message}\n              &lt;\u002FText&gt;\n            )}\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                value={Email}\n                placeholder=\"Enter your email address\"\n                onChangeText={(value) =&gt; setEmail(value)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.input}&gt;\n              &lt;TextInput\n                value={Password}\n                secureTextEntry={true}\n                placeholder=\"Enter your Password\"\n                onChangeText={(value) =&gt; setPassword(value)}\n              \u002F&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;View style={styles.alignCenter}&gt;\n              &lt;TouchableOpacity\n                onPress={() =&gt; handleLogin()}\n                disabled={isLoading}\n                style={[styles.button, styles.alignCenter]}\n              &gt;\n                {!isLoading ? (\n                  &lt;Text style={{ color: \"#fff\", fontSize: 15 }}&gt; Sign In &lt;\u002FText&gt;\n                ) : (\n                  &lt;ActivityIndicator color=\"#fff\" \u002F&gt;\n                )}\n              &lt;\u002FTouchableOpacity&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;TouchableOpacity\n              onPress={() =&gt; props.navigation.navigate(\"create-account\")}\n            &gt;\n              &lt;View style={styles.flex}&gt;\n                &lt;Text style={styles.infoText}&gt;Don't Have An Account?&lt;\u002FText&gt;\n                &lt;Text style={[styles.infoText, { color: \"black\", marginLeft: 10 }]}&gt;\n                  Create Account\n                &lt;\u002FText&gt;\n              &lt;\u002FView&gt;\n            &lt;\u002FTouchableOpacity&gt;\n          &lt;\u002FView&gt;\n        &lt;\u002FView&gt;\n      );\n    };\n\n    const styles = StyleSheet.create({\n      flex: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n      },\n      title: {\n        fontSize: 22,\n        textAlign: \"center\",\n        fontWeight: \"500\",\n      },\n      infoText: {\n        textAlign: \"center\",\n        fontSize: 14,\n        color: \"grey\",\n      },\n      body: {\n        backgroundColor: \"#fff\",\n        height,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingHorizontal: 10,\n        borderWidth: 1,\n        borderRadius: 5,\n        borderColor: \"#c0c0c0\",\n        height: 45,\n        width: width - 30,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        height: 40,\n        borderWidth: 1,\n        borderColor: \"#28BFFD\",\n        backgroundColor: \"#28BFFD\",\n        color: \"#fff\",\n        width: width - 30,\n        fontSize: 16,\n        borderRadius: 3,\n      },\n    });\n\n    export default Login;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe component above uses a \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html\"\u003EuseEffect\u003C\u002Fa\u003E hook to check if a \u003Ca href=\"https:\u002F\u002Fjwt.io\u002F\"\u003EJWT\u003C\u002Fa\u003E token for the User is present in the device. If the JWT token is found, the User is navigated to the Home screen. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThis check serves as a simple means to detect if the User is already authenticated, and it is performed here because the Login screen is the first screen in the Navigation Stack, and it will be the first screen shown when the application is opened. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ENote\u003C\u002Fstrong\u003E: \u003Cem\u003EThis authentication can be better performed by writing a custom middleware with React Navigation.\u003C\u002Fem\u003E \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe component also contains two input fields for collecting a user email and password input values and stores them in the local state created using the \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-state.html\"\u003EuseState\u003C\u002Fa\u003E hooks. These input values are further passed as variables into a GraphQL mutation to authenticate the User. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ccode\u003EhandleLogin\u003C\u002Fcode\u003E function is executed at the tap of the \u003Cstrong\u003ESign In\u003C\u002Fstrong\u003E button, and it executes the GraphQL mutation to submit the User's email and password to the Strapi GraphQL API and returns an object containing the JWT token and the User's ID. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe token and user id values are further stored in the device local storage using the \u003Ccode\u003EsetItem\u003C\u002Fcode\u003E helper function, which uses the \u003Ca href=\"https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F\"\u003E@react-native-async-storage\u002Fasync-storage\u003C\u002Fa\u003E library underneath. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe JWT token will be used to authenticate GraphQL operations to retrieve and create data to the Strapi API. The user ID will be used to identify the User when creating a new recording later on.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe image below shows the Login screen within the voice recorder application running on an Android emulator.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DIEHPMLd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967811872_strapi-emulator-login.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--DIEHPMLd--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967811872_strapi-emulator-login.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003EHome Screen\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EThe home screen within this application will serve as the default screen for all authenticated users, displaying a list of created recordings.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe Home screen has been broken down into a Home parent component to follow React composition design principle. A record card child component displays a card with details about a user's recording gotten from the parent component as a prop.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWe would begin by building the RecordCard component. Create a new \u003Ccode\u003Ecomponents\u003C\u002Fcode\u003E directory within the \u003Ccode\u003Esrc\u003C\u002Fcode\u003E directory and create a \u003Ccode\u003ERecordCard.js\u003C\u002Fcode\u003E file within the component directory. Add the content of the code block below into the \u003Ccode\u003ERecordCard.js\u003C\u002Fcode\u003E file.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fcomponents\u002FRecordCard.js\n\n    import * as React from \"react\";\n    import { View, Text } from \"react-native\";\n    import Icon from 'react-native-vector-icons\u002FAntDesign';\n\n    import { HomeStyles as styles  } from \"..\u002Fstyles\"\n\n    const RecordingCard = ({data, onPlay}) =&gt; (\n       &lt;View style={[styles.alignCenter]}&gt;\n           &lt;View style={styles.post}&gt;\n               &lt;View\n                   onClick={() =&gt; onPlay()}\n                   style={[styles.play, styles.alignCenter\n                       , {\n                           flexDirection: \"column\"\n                       }]}&gt;\n                   &lt;Icon size={30} name={\"playcircleo\"}\u002F&gt;\n                   &lt;Text style={{fontSize: 14}}&gt; Play &lt;\u002FText&gt;\n               &lt;\u002FView&gt;\n\n               &lt;View style={[styles.alignCenter, {flexDirection: 'column'}]}&gt;\n                   &lt;Text style={styles.title}&gt;  {data.recording_name}&lt;\u002FText&gt;\n                   &lt;Text&gt; {data.created_at} &lt;\u002FText&gt;\n               &lt;\u002FView&gt;\n\n               &lt;View \u002F&gt;\n           &lt;\u002FView&gt;\n       &lt;\u002FView&gt;\n    )\n\n    export default RecordingCard;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe RecordingCard component above receives a data object containing the details of a user's recording and an \u003Ccode\u003EonPlay\u003C\u002Fcode\u003E function that is executed when the play icon within the card is clicked. This function plays the recorded audio for the User to listen to.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, create a \u003Ccode\u003EHome.js\u003C\u002Fcode\u003E file in the screens directory and add the code block content below to import and use the RecordingCard component in a \u003Ca href=\"https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fflatlist\"\u003EFlat list\u003C\u002Fa\u003E component.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FHome.js\n\n    import React, { useEffect } from \"react\";\n    import {\n     View,\n     Text,\n     TouchableOpacity,\n     StyleSheet,\n     FlatList,\n     Dimensions,\n     ActivityIndicator,\n    } from \"react-native\";\n    import { useQuery } from \"@apollo\u002Fclient\";\n    import Icon from \"react-native-vector-icons\u002FIonicons\";\n    import MaterialIcons from \"react-native-vector-icons\u002FMaterialIcons\";\n    import RecordingCard from \"..\u002Fcomponents\u002FrecordingCard\";\n\n    import { clearToken, getToken, USER_TOKEN_KEY } from \"..\u002Futils\";\n    import { FETCH_RECORDINGS } from \"..\u002Fgraphql\";\n\n    const { width, height } = Dimensions.get(\"screen\");\n\n    const handleLogout = async (navigation) =&gt; {\n     try {\n       await clearToken(USER_TOKEN_KEY);\n\n       navigation.navigate(\"login\");\n     } catch (e) {\n       console.log(e);\n     }\n    };\n\n    const Home = ({ navigation }) =&gt; {\n     useEffect(() =&gt; {\n       (async function () {\n         const token = await getToken(USER_TOKEN_KEY);\n         if (!token) {\n           navigation.navigate(\"login\");\n         }\n\n         navigation.setOptions({\n           headerRight: () =&gt; {\n             return (\n               &lt;View style={{ paddingRight: 15 }}&gt;\n                 &lt;TouchableOpacity\n                   style={{ flexDirection: \"row\" }}\n                   onPress={() =&gt; handleLogout(navigation)}\n                 &gt;\n                   &lt;MaterialIcons name={\"logout\"} color={\"#fff\"} size={20} \u002F&gt;\n                 &lt;\u002FTouchableOpacity&gt;\n               &lt;\u002FView&gt;\n             );\n           },\n         });\n       })();\n     }, []);\n\n     const { data, error, loading } = useQuery(FETCH_RECORDINGS);\n\n     if (loading) {\n       return (\n         &lt;View style={styles.alignCenter}&gt;\n           &lt;ActivityIndicator color=\"#8c4bff\" \u002F&gt;\n         &lt;\u002FView&gt;\n       );\n     }\n\n     if (error) {\n       return (\n         &lt;View style={[styles.alignCenter, { paddingTop: 15 }]}&gt;\n           &lt;Text&gt; An error occurred while loading your recordings... &lt;\u002FText&gt;\n         &lt;\u002FView&gt;\n       );\n     }\n\n     return (\n       &lt;View style={{ flex: 1, backgroundColor: \"#fff\" }}&gt;\n         &lt;FlatList\n           data={data.voiceRecordings}\n           keyExtractor={(item) =&gt; item.id}\n           renderItem={({ item }) =&gt; (\n             &lt;RecordingCard onPlay={() =&gt; playAudio()} data={item} \u002F&gt;\n           )}\n         \u002F&gt;\n\n         &lt;View style={styles.alignCenter}&gt;\n           &lt;TouchableOpacity\n             onPress={() =&gt; navigation.navigate(\"CreateRecording\")}\n             style={styles.button}\n           &gt;\n             &lt;Icon name={\"ios-add\"} color={\"#fff\"} size={20} \u002F&gt;\n             &lt;Text style={{ color: \"#fff\" }}&gt; Create New Recording &lt;\u002FText&gt;\n           &lt;\u002FTouchableOpacity&gt;\n         &lt;\u002FView&gt;\n       &lt;\u002FView&gt;\n     );\n    };\n\n    const styles = StyleSheet.create({\n     alignCenter: {\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\",\n     },\n     button: {\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\",\n       flexDirection: \"row\",\n       borderColor: \"#8c4bff\",\n       backgroundColor: \"#8c4bff\",\n       height: 47,\n       width: width - 25,\n       borderWidth: 1,\n       color: \"#fff\",\n       fontSize: 16,\n       borderRadius: 5,\n       marginBottom: 10,\n     },\n    });\n\n    export default Home;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EIn the Home component above, a GraphQL Query operation was made to retrieve the created recordings through the \u003Ca href=\"https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Freact\u002Fhooks\u002F#usequery\"\u003EuseQuery\u003C\u002Fa\u003E hook from the @apollo\u002Fclient library. The data gotten from the GraphQL Query is passed into a \u003Ca href=\"https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fflatlist\"\u003EFlat list\u003C\u002Fa\u003E component to render a performant list of recordings using the previously created RecordingCard component. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe Home component also contains a \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html\"\u003EuseEffect\u003C\u002Fa\u003E hook, and the logic to check if a user is authenticated from the Login screen is also performed within the \u003Ca href=\"https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html\"\u003EuseEffect\u003C\u002Fa\u003E hook. If no token is found, the User is navigated to the Login screen. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe image below shows the Home screen within the application running on an Android emulator;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5nyQsMHc--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966591851_strapi-empty-recordings.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5nyQsMHc--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966591851_strapi-empty-recordings.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAs displayed in the image above, an empty array was returned from the GraphQL Query because a recording within the voice-recording content type hasn't been created yet.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAt the top of the \u003Cstrong\u003ECreate New Recording\u003C\u002Fstrong\u003E button at the bottom of the page, a user will be navigated to the CreateRecording screen. This screen doesn't exist yet. Hence you will create it in the next step.\u003C\u002Fp\u003E\n\n\u003Col\u003E\n\u003Cli\u003ECreate Recording Screen\u003C\u002Fli\u003E\n\u003C\u002Fol\u003E\n\n\u003Cp\u003EAs the name implies, the CreateRecording screen has a record button for a user to record a voice input and provide a name and description using the two input fields on the page. \u003C\u002Fp\u003E\n\n\u003Cp\u003ECreate a \u003Ccode\u003EcreateRecording.js\u003C\u002Fcode\u003E file within the \u003Ccode\u003Escreens\u003C\u002Fcode\u003E directory and add the code block content below to build the component within the CreateRecording screen.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FcreateRecording.js\n\n    import * as React from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      StyleSheet,\n      Dimensions,\n      TouchableOpacity,\n    } from \"react-native\";\n    import Icon from \"react-native-vector-icons\u002FIonicons\";\n    import { Audio } from \"expo-av\";\n    import * as FileSystem from \"expo-file-system\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import { CREATE_RECORDING, UPLOAD_FILE } from \"..\u002Fgraphql\";\n    import { getItem, USER_ID_KEY } from \"..\u002Futils\";\n\n    const { width, height } = Dimensions.get(\"screen\");\n\n    const CreateRecording = ({ navigation }) =&gt; {\n      const [name, setName] = React.useState(\"\");\n      const [description, setDescription] = React.useState(\"\");\n      const [canRecord, setRecordStatus] = React.useState(false);\n      const [record, setRecord] = React.useState(null);\n      const [uploadFile, { data }] = useMutation(UPLOAD_FILE);\n      const [createRecording, { error }] = useMutation(CREATE_RECORDING);\n\n      const startRecording = async () =&gt; {\n        setRecordStatus(!canRecord);\n        try {\n          await Audio.requestPermissionsAsync();\n          await Audio.setAudioModeAsync({\n            allowsRecordingIOS: true,\n            playsInSilentModeIOS: true,\n          });\n          console.log(\"Starting recording...\");\n          const recording = new Audio.Recording();\n          await recording.prepareToRecordAsync(\n            Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n          );\n          await recording.startAsync();\n          setRecord(recording);\n        } catch (err) {\n          console.error(\"Failed to start recording\", err);\n        }\n      };\n\n      const submitRecording = async () =&gt; {\n\n        await record.stopAndUnloadAsync();\n        const uri = record.getURI();\n        const Recording = await FileSystem.readAsStringAsync(uri, {\n          encoding: FileSystem.EncodingType.UTF8,\n        });\n\n        try {\n          await uploadFile({\n            variables: {\n              file: Recording,\n            },\n          });\n          const userId = await getItem(USER_ID_KEY);\n          await createRecording({\n            variables: {\n              name,\n              fileId: data.id,\n              description,\n              userId,\n            },\n          });\n          navigation.navigate(\"home\");\n        } catch (e) {\n          console.log(e);\n        } finally {\n          setRecordStatus(!canRecord);\n        }\n      };\n\n      return (\n        &lt;View style={styles.root}&gt;\n          &lt;View style={styles.alignCenter}&gt;\n            &lt;Text&gt; {error} &lt;\u002FText&gt;\n            &lt;View style={styles.inputContainer}&gt;\n              &lt;Text style={styles.title}&gt; Recording Name &lt;\u002FText&gt;\n              &lt;View style={styles.input}&gt;\n                &lt;TextInput\n                  value={name}\n                  placeholder=\"A name for the recording\"\n                  onChangeText={(value) =&gt; setName(value)}\n                \u002F&gt;\n              &lt;\u002FView&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={styles.inputContainer}&gt;\n              &lt;Text style={styles.title}&gt; Recording Description &lt;\u002FText&gt;\n              &lt;View style={styles.input}&gt;\n                &lt;TextInput\n                  value={description}\n                  placeholder=\"A description of your recording\"\n                  onChangeText={(value) =&gt; setDescription(value)}\n                \u002F&gt;\n              &lt;\u002FView&gt;\n            &lt;\u002FView&gt;\n            &lt;View style={{ marginVertical: 10 }} \u002F&gt;\n            &lt;TouchableOpacity\n              disabled={!name.length &gt; 2 &amp;&amp; description.length &gt; 2}\n              onPress={() =&gt; {\n                if (!canRecord) {\n                  startRecording();\n                } else {\n                  submitRecording();\n                }\n              }}\n              style={[\n                styles.button,\n                styles.alignCenter,\n                {\n                  backgroundColor: canRecord ? \"red\" : \"#8c4bff\",\n                  borderColor: canRecord ? \"red\" : \"#8c4bff\",\n                },\n              ]}\n            &gt;\n              {!canRecord ? (\n                &lt;Text style={{ color: \"#fff\", fontSize: 15 }}&gt;\n                  Save and Start Recording\n                &lt;\u002FText&gt;\n              ) : (\n                &lt;Text style={{ color: \"#fff\", fontSize: 15 }}&gt;Stop Recording&lt;\u002FText&gt;\n              )}\n            &lt;\u002FTouchableOpacity&gt;\n            &lt;View style={[styles.iconContainer, styles.alignCenter]}&gt;\n              {canRecord ? (\n                &lt;View&gt;\n                  &lt;Icon name={\"ios-mic-outline\"} size={85} \u002F&gt;\n                &lt;\u002FView&gt;\n              ) : (\n                &lt;Icon\n                  name={\"md-mic-off-circle-outline\"}\n                  color={\"#c0c0c0\"}\n                  size={85}\n                \u002F&gt;\n              )}\n            &lt;\u002FView&gt;\n          &lt;\u002FView&gt;\n        &lt;\u002FView&gt;\n      );\n    };\n\n    const styles = StyleSheet.create({\n      title: {\n        fontSize: 15,\n        paddingBottom: 8,\n      },\n      root: {\n        backgroundColor: \"#fff\",\n        height,\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingLeft: 10,\n        borderWidth: 0.7,\n        borderColor: \"#c0c0c0\",\n        height: 50,\n        borderRadius: 4,\n        marginBottom: 5,\n        width: width - 25,\n      },\n      inputContainer: {\n        marginTop: 10,\n        width: width - 25,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        borderColor: \"#8c4bff\",\n        backgroundColor: \"#8c4bff\",\n        height: 47,\n        width: width - 25,\n        borderWidth: 1,\n        color: \"#fff\",\n        fontSize: 16,\n        borderRadius: 5,\n      },\n      iconContainer: {\n        height: 350,\n      },\n    });\n\n    export default CreateRecording;\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EThe \u003Ccode\u003ECreateRecording\u003C\u002Fcode\u003E component in the code block above provides a user with the functionality to record a voice input, provide a name and description detail, then submit the recording to the Strapi GraphQL API.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThis is made possible through the use of three functions within the component that is explained below;\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EstartRecording\u003C\u002Fstrong\u003E — \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThis function is executed at the tap of the \u003Cstrong\u003ESave and Start Recording\u003C\u002Fstrong\u003E button, and it uses the \u003Ca href=\"https:\u002F\u002Fdocs.expo.io\u002Fversions\u002Flatest\u002Fsdk\u002Fav\u002F\"\u003Eexpo-av\u003C\u002Fa\u003E library in a try\u002Fcatch block to record a user's voice input.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe \u003Ccode\u003ErequestPermissionAsync\u003C\u002Fcode\u003E method is invoked to request the User's permission to use the device audio API. After which, a recording session is started and stored in the component's local state. \u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\n\u003Cstrong\u003EsubmitRecording\u003C\u002Fstrong\u003E — \u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EThis function is executed at the tap of the \u003Cstrong\u003EStop Recording\u003C\u002Fstrong\u003E button, which is shown when the recording session is active. This function stops the active recording session and uploads the recording to the Strapi GraphQL API.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst, the \u003Ca href=\"https:\u002F\u002Fdocs.expo.io\u002Fversions\u002Flatest\u002Fsdk\u002Faudio\u002F#audiorecording\"\u003E\u003Cem\u003EstopAndUnloadAsync\u003C\u002Fem\u003E\u003C\u002Fa\u003E method in the record class is invoked to stop the active recording and save it to the device's local storage in a \u003Ca href=\"https:\u002F\u002Fdocs.fileformat.com\u002Faudio\u002Fwav\u002F\"\u003EWAV\u003C\u002Fa\u003E file. The file path to the recording file is gotten using the \u003Ccode\u003EgetURI\u003C\u002Fcode\u003E method and stored in the \u003Ccode\u003Euri\u003C\u002Fcode\u003E variable for later use.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, the recording file is retrieved in a \u003Ca href=\"https:\u002F\u002Fwww.w3schools.com\u002Fcharsets\u002Fref_html_utf8.asp\"\u003EUTF8 encoding\u003C\u002Fa\u003E format and stored in a variable. The User's recording stored in the \u003Ccode\u003ErecordingFile\u003C\u002Fcode\u003E variable is then uploaded to the Strapi API in a GraphQL mutation containing the file. \u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter the file has been uploaded, another GraphQL mutation containing the recording name, description, userId, and fileId is executed. The \u003Ccode\u003EfileId\u003C\u002Fcode\u003E used in this mutation is gotten from the response object returned after the \u003Ccode\u003EuploadFile\u003C\u002Fcode\u003E mutation was executed successfully. It relates the voice-recording file within Strapi to the recording details created by a user. \u003C\u002Fp\u003E\n\n\u003Cp\u003EThe image below shows the Home screen within the application running on an Android emulator;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wsoVCc4v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966515682_strapi-create-recording.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wsoVCc4v--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966515682_strapi-create-recording.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAfter a recording has been taken and two GraphQL mutations within the CreateRecording component have been executed successfully, the User is programmatically navigated to the Home screen where the recording created is listed out.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe image below shows the recording created in the previous image listed out;\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--V4dS68Y7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1627018154405_strapi-recordings-list.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--V4dS68Y7--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1627018154405_strapi-recordings-list.png\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith the application fully functional, you can create more recordings and show them on the Home screen. \u003C\u002Fp\u003E\n\n\u003Cp\u003EGoing through the Strapi web admin dashboard, you will find the recordings in the voice-recording collection type and the uploaded files in the Media-library.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EHuge congrats to you. \u003C\u002Fp\u003E\n\n\u003Cp\u003EBy going through the various steps within this article, you have built a fully functional mobile application that allows users to create an account and record their voice input.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst, we began the article by creating a new Strapi application. Then we built the data model for the application using the Content builder from the new application's admin dashboard. After that, you enabled GraphQL support for the API.\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we bootstrapped a React Native application using the Expo CLI then we connected the mobile application to the Strapi GraphQL API. Lastly, we ended the article by building the application screens and making GraphQL queries and mutations from the components.\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe source code for the React Native application has been pushed to this \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fvickywane\u002Fstrapi-react-native-voice-article\"\u003EGitHub repository\u003C\u002Fa\u003E. Feel free to clone it and use it as a boilerplate when building your mobile application using Strapi.\u003C\u002Fp\u003E\n\n",body_markdown:"## Introduction\n\nWithin this tutorial, you will build a Voice Recorder service accessed via a mobile React Native application that provides users with the functionality of creating a personal account and recording a voice input associated with their account data.\n  \nWhile building this application, you will model your application data using Content-Types from a Strapi Admin dashboard. You will also learn how to enable and use the GraphQL API and perform file uploads using the GraphQL API.\n \n## Prerequisites\n\nTo follow along with this tutorial, it is recommended that you satisfy the following requirements;\n\n- Have an installation of [PostgreSQL](https:\u002F\u002Fwww.postgresql.org\u002F) on your local machine.\n- Have either an android or iOS emulator set up on your local computer. The [development](https:\u002F\u002Fdocs.expo.io\u002Fworkflow\u002Fdevelopment-mode) section of Expo documentation explains how to set up a development emulator on your local machine.\n- Have [Node](https:\u002F\u002Fnodejs.dev\u002F) installed with either Yarn or NPM as a package manager.\n\nBefore building the Strapi and react native application, open your terminal window and execute the two commands below to create a parent directory and change your working directory to it. \n\n```\n    # create directory \n    mkdir strapi-voice\n    \n    # change directory\n    cd strapi-voice\n```\n\nThe two applications that will be built in this article will be stored in the parent strapi-voice directory.\n\n## Creating Strapi Application\n\nIn this tutorial, you will use a Postgres database to store data from your Strapi application. By default, Strapi uses an SQLite database for new applications, but you will change this to a Postgres database during the installation steps. \n\nBefore creating the Strapi application, create a new database within your running Postgres cluster for the Strapi application. This database name will be specified while creating a new Strapi application.\n\nExecute the SQL command below using [psql](https:\u002F\u002Fwww.postgresql.org\u002Fdocs\u002F13\u002Fapp-psql.html) to create a new database, replacing the `DATABASE_NAME` placeholder with your desired database name; \n\n**Note**: A*lternatively, you can also use your preferred GUI database tool to create the database.*\n\n```\n    CREATE DATABASE \u003CDATABASE_NAME\u003E;\n```\n\nThe first step to working with Strapi is to create a new Strapi project using the `create-strapi-app` CLI with [npx](https:\u002F\u002Fnodejs.dev\u002Flearn\u002Fthe-npx-nodejs-package-runner). Execute the command below to launch the interactive installer;\n\n```\n    npx create-strapi-app voice-app \n```\n\nExecuting the command above would launch the interactive installer that would walk you through the process of configuring a new Strapi application in the following steps;\n\n\n1. Select the Custom installation method as you would be using a Postgres database with the Strapi application. \n2. Select Postgres as the default database client for this application. \n3. Provide the connection details of your Postgres cluster and a database. If you are using a Postgres cluster running on your local system, you can use the default values provided by the installer for the Postgres connection.\n\nAfter providing the database credentials, wait for some minutes for the Strapi installer to verify that the credentials are valid and create the data schema in the specified database. \n\nAfter a complete installation, execute the commands below to change the directory into the Strapi application and start the development server to start the Strapi server. \n\n```\n    # change directory \n    cd voice-api\n    \n    # start the development server\n    yarn develop\n```\n\nExecuting the command above will start the Strapi server on port 1337. Open the admin dashboard for your Strapi application at `[http:\u002F\u002Flocalhost:1337\u002Fadmin](http:\u002F\u002Flocalhost:1337\u002Fadmin)` to create a root admin user with an admin email and password.\n\n![](https:\u002F\u002Flh3.googleusercontent.com\u002FJb7w-yAx20CnekZdgWAimRsYfD5j4J537OEigou_SusoOlTgqCvb7lh6l_-rQUaUSA49_i7p4pAVV67a2gzt1otSkI8bdZT19Qi6R-hGL6O5O6HG0edeNOYivg8xmjs4ItvdIAES)\n\n## Modeling Strapi Content-Type\n\nAt this point, you have your Strapi application up and running with a full setup admin dashboard. The next step will be to model the data within your Strapi application using the [Content Builder.](https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fuser-docs\u002Flatest\u002Fcontent-types-builder\u002Fintroduction-to-content-types-builder.html) \n\nFrom the Strapi dashboard, navigate to the Content-builder page using the left sidebar. Click the Create new collection type text from the left placed Collection Types section to launch the modal for creating a new collection type. \n\nWithin the opened modal, specify **voice-recordings** in the display name text field as the name of this collection type.\n\n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FEJhp08k1uVHDeQ6YZJ4dB6Tt8Ltn5wSXZYTzKUAUDgMlfEdiZeMh1Iw99Q82sU4bVq20Eb0RYCXgpHdbCTjbsK93dXIReJ4ptenoz-KJhjz0bPFg_UyEmnRitMRSZpuyBPhfa7Eg)\n\n\nAs shown above, a unique identifier for the collection type will be generated from the display name. \n\nNext, click the **Advanced Settings** tab to reveal more advanced settings for the collection. Toggle off the default enabled **Draft \u002F publish system** for this collection type. \n\nThe [draft \u002F publish system](https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fconcepts\u002Fdraft-and-publish.html) provides an application admin with the feature to create a draft entry and review it later before publishing. You will not need this feature within the application. \n \n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FEOQoiIoLfP6-tUbEbHsdf6wH_u5TI39RhDkPYpnT1EGr-h06li5qniszG0PVTvX2TxencGEYMqFdi4DAXQ-RR4n6LA4B5lWbl5Jq5E6g9Pfq6v8WduVzTmL6kjMliZnO-aMyNR8K)\n\n\nAfter toggling off the Draft \u002F publish system, leave other settings at their default and click the continue button.\n\nThe next step will be to create the fields within the collection content type. Select the following fields shown within the modal;\n\n\n- **Text** -- Specify **recording_name** as the name of this field. It would be used to identify each entry within the collection content type.\n\n\n- **Rich Text** -- Specify **recording_description** as the name of this field. It will be used to store a description of each entry within the voice-recording content-type.\n\n\n- **DateTime** -- Specify **date_created** as the name of this field. It will be used to store the date and time the new voice recording was created.\n\n\n- **Media** -- Specify the name of this field as **recording**. It would contain the blob recording file from the User's device.\n\n\n- **Relation** -- Specify **created_by** as the name of this relationship within the voice-recording field name text field. \n\nAt the right-hand side, click the default *File ( from: upload )* dropdown and select the *User ( from: users-permission )* option to relate the voice-recordings relation to the User collection-type. \n\n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FLn5MZqjFQ_aJI-xdOSISHZUA9TF2ulOIcQl2GAfMWJyIIzh04voJ37NcvdxgHTlxz0r4UQncIu5QoZb142Twfp9KaBOWqi992xXoZCc69j49BFakWYVhzkbO6y2u9jx5rE_F45mu)\n\n\nAfter creating the created_by relation similar to the relation shown in the image above, click the Finish button to complete the entire collection. \n\nFrom the Content Builder page, the voice-recordings collection content type will be listed with all the newly added fields as shown below;\n\n\n![](https:\u002F\u002Flh6.googleusercontent.com\u002Fk3B5qywmRChCaeI1Q9zviMz-qbIUVOZ4YNtcX9KI8kK-1phyVwpePIBiuEfRGy_t6sL-IEqWUx-vSlgiGcbBuFHdudgY8aVqUqxhhEwsIfBiwV1GntFJ1b5mUGdEatMVYa38QglZ)\n\n\n  \nAs shown in the image above, your voice-recordings collection type has five fields, each making up the voice-recording details.\n\n\n## Setting Application Role-Based Access Control\n\nProper user management is an essential aspect of every application. In the design of this application, every User will be able to create a recording and view their past recordings. \n\nTo protect the privacy of each User's data, you will configure the role of users using the [Role-Based Access Control](https:\u002F\u002Fstrapi.io\u002Ffeatures\u002Fcustom-roles-and-permissions) ( RBAC ) feature provided by Strapi. \n\n**Note**: *This* *article within the Strapi blog provides an in-depth explanation of the* [*Role-Based Access Control*](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fstrapi-s-user-roles-and-permissions-for-admin-panel) *features of Strapi.* \n\nUsing the Strapi Admin dashboard, navigate to the settings page, click the Roles item listed in the User & Permissions section within the left-placed navigation bar. This will display the default Public and Authenticated roles for each created User.\n\n\n![](https:\u002F\u002Flh3.googleusercontent.com\u002FSWen8HPy29nOHhWOUmwI3TneSSAGh7fZz0DGSHWnB_-y5GZ8ZBbwu1DhA7DjdMCO1ff93bSlbz103qTXNhydNOzj9eE1tj2gzZa8c-GEowypXgrflH7sfJ2U1nGegXIGjBgTnoOB)\n\n\nAmong the two listed roles above, the **Authenticated** role highlighted will be of primary focus as you will expand the scope of this role in the next step. \n\nClick the first **Authenticated** role to display the view for the role that allows you to edit the permissions and details.\n\nIn the Permissions card within the Authenticated role view, the voice-recording content type will be displayed with its allowed actions within the Application permission. Click the **Select All** checkbox to grant all users with the authenticated role to perform the enabled actions on the voice-recording content type. \n\n\n![](https:\u002F\u002Flh5.googleusercontent.com\u002FpA3_hTITwfrh8nLv85psS9bV_ooaXmc4eXiebwQt7DR0jTpHPtx65ripMeJoRVDmx4syCYSahzr9-m2JmbTWHv00ai6t6D5CEiJRiYpqSQwneibk_IPH6CMyb1k1UT2T7UZVe5WS)\n\n\nClick the Save button and wait for the new change made to the Authenticated role to be effected. \n\nAt this point, the Strapi application is fully functional and ready for use. However, the design of the mobile application is to send and consume data from a GraphQL API to enjoy the benefits of GraphQL. Hence, you need to enable the GraphQL API within the Strapi application by installing the GraphQL plugin.\n\nStop the running Strapi application, and install the [GraphQL](https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fgraphql.html#usage) plugin for Strapi using the command below;\n\n```\n    yarn strapi install graphql \n```\n\nAfter installing the plugin above, restart the management server and navigate to the GraphiQL playground in your web browser at `http:\u002F\u002Flocalhost:1337\u002Fgraphql` to view your application data.\n\n\n![](https:\u002F\u002Flh5.googleusercontent.com\u002FlcKq-6FALCm-XJIKNr40Y_4zews9Bw_Z6Kl1olXRTLR_yn6uRka1_ya9856TTR8vNUhhIO0j95byz34CggSgp-RHgR2p3c8_rFW_wT1qUEO_guHMiCqEjIB0TPjCkWnuTDgkwf_y)\n\n\n \nThe [authentication](https:\u002F\u002Fstrapi.io\u002Fdocumentation\u002Fdeveloper-docs\u002Flatest\u002Fdevelopment\u002Fplugins\u002Fgraphql.html#usage) section of the GraphQL plugin documentation for Strapi explains how to generate and use a [JWT](https:\u002F\u002Fwww.google.com\u002Furl?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjrtrDmuvfxAhXTNOwKHdcfBmoQFjAAegQICBAD&url=https%3A%2F%2Fjwt.io%2F&usg=AOvVaw0PqqYtnuCxjkbOK_ocY444) token in your playground HTTP headers before using a GraphQL operation from the GraphiQL playground.\n\nWith the Strapi application fully set up having a **Users** and Voice-recordings collection type, whose data is served through a GraphQL API, you can build the React Native application connected to the GraphQL API.\n\n\n## Creating A React Native Application\n\nWithin this article, we would use the [Expo CLI](https:\u002F\u002Fdocs.expo.io\u002Fget-started\u002Fcreate-a-new-app\u002F) to bootstrap a new React Native application quickly. [Expo](https:\u002F\u002Fexpo.dev\u002F) is an open-source platform that abstracts away all the complexities of building a React application by providing tools to effortlessly build and deploy your application.\n\nIf you do not have the Expo CLI installed, execute the command below to install the expo-cli globally on your local computer using NPM. \n\n```\n    npm install -g expo-cli\n```\n\nNext, execute the command below to launch the interactive installer within the expo-cli that will walk you through creating a new react native application with Expo.\n\n```\n    expo init voice-app\n```\n\nWhen prompted to choose a template by the installer, select the blank template within the managed workflow type.\n\n\n![](https:\u002F\u002Flh3.googleusercontent.com\u002FNhFYm1qjYXooqCzDIkTMgDqow6X1oHNat4sv1vW-W7fL9bEo1jBWXTjA8AExZVDgj8MIgyPrXQqEgq43r7flxZ3HNjM-NioHuOqTTLwact1YGqMPZh69gwav9jdjlD-jSgSkbfQ0)\n\n\nWith the application created, you can launch either an android or iOS emulator based on your operating system to view local changes to the application.\n\nNext, start the expo metro server to bundle and install your code on the running emulator; \nexpo start \n\nPress a to install the application on an Android emulator, or press o to install the application on an iOS emulator. \n\n**Note**: You can also work with the expo application using the Metro DevTools launched in your default browser.\n\nTo use the GraphQL API from Strapi within this application, you will need to install client libraries from react-apollo alongside libraries from react-navigation to implement navigation across screens within the application;\n\n```\n    npm install @apollo\u002Fclient react-native-vector-icons @react-native-community\u002Fmasked-view @react-navigation\u002Fnative @react-navigation\u002Fstack graphql expo-av expo-file-system @react-native-async-storage\u002Fasync-storage apollo-link-error\n```\n\nEach time a GraphQL operation is performed against the Strapi API, you must provide a valid JWT token to authenticate the request. This JWT token will be obtained from the operation response when a user either signs in to the application or creates a new account. This token will be stored in the application using the [@react-native-async-storage\u002Fasync-storage](https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F) library that was installed above. \n \nTo use the `@react-native-async-storage\u002Fasync-storage` library, it is recommended that you create an abstraction over the library's API. To do this, create a `storage.js` file and add the code block's content below that contains helper functions for working with the [@react-native-async-storage\u002Fasync-storage](https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F) library.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fstorage.js\n    \n    import AsyncStorage from \"@react-native-async-storage\u002Fasync-storage\";\n    \n    export const USER_TOKEN_KEY = \"@USER_TOKEN\";\n    export const USER_ID_KEY = \"@USER_ID\";\n    \n    const validateParameter = (key) =\u003E {\n      if (!key && key !== String) {\n        throw new Error(\"Invalid key specified\");\n      }\n    };\n    \n    export const setItem = async (itemKey, itemValue) =\u003E {\n      if (!key && !val && typeof key !== String && val !== String) {\n        throw new Error(\"Invalid key or val specified\");\n      }\n      try {\n        await AsyncStorage.setItem(\n          itemKey,\n          JSON.stringify({\n            data: itemValue,\n          })\n        );\n      } catch (e) {\n        console.log(`Error setting key: ${e}`);\n      }\n    };\n    \n    export const clearItem = async (key) =\u003E {\n      validateParameter(key);\n      try {\n        await AsyncStorage.removeItem(key);\n      } catch (e) {\n        console.log(`Error removing key: ${e}`);\n      }\n    };\n    \n    export const getItem = async (key) =\u003E {\n      validateParameter(key);\n      try {\n        const data = await AsyncStorage.getItem(key);\n        return JSON.parse(data);\n      } catch (e) {\n        console.log(`Error removing key: ${e}`);\n      }\n    };\n```\n\n\nThe code block above contains three exported asynchronous helper functions for creating, deleting, and retrieving data stored in the device local storage using the [@react-native-async-storage\u002Fasync-storage](https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F) library. In the next step, you will use the `getItem` function exported from the code block above to retrieve the stored token when creating an [ApolloClient](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Fcore\u002FApolloClient\u002F#gatsby-focus-wrapper) instance. \n\nUsing your preferred code editor, open the `App.js` file. You will replace the boilerplate code with the content of the code block below, which instantiates the [ApolloClient](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Fcore\u002FApolloClient\u002F#gatsby-focus-wrapper) class and adds the navigation screens within the application.\n\n```\n    import { StatusBar } from \"expo-status-bar\";\n    import React, { useState, useEffect } from \"react\";\n    import { ApolloProvider } from \"@apollo\u002Fclient\";\n    import { createStackNavigator } from \"@react-navigation\u002Fstack\";\n    import {\n     ApolloClient,\n     ApolloLink,\n     HttpLink,\n     InMemoryCache,\n    } from \"@apollo\u002Fclient\";\n    import { NavigationContainer } from \"@react-navigation\u002Fnative\";\n    \n    import Home from \".\u002Fsrc\u002Fscreens\u002Fhome\";\n    import CreateRecording from \".\u002Fsrc\u002Fscreens\u002Fcreate-recording\";\n    import CreateAccount from \".\u002Fsrc\u002Fscreens\u002Fcreate-account\";\n    import Login from \".\u002Fsrc\u002Fscreens\u002Flogin\";\n    import { getToken, USER_TOKEN_KEY } from \".\u002Fsrc\u002Futils\";\n    \n    const headerTitleStyle = {\n     fontSize: 17,\n     color: \"#fff\",\n     fontWeight: \"normal\",\n    };\n    \n    export default function App() {\n     const [token, setToken] = useState(null);\n     const Stack = createStackNavigator();\n    \n     useEffect(() =\u003E {\n       (async function () {\n         const data = await getToken(USER_TOKEN_KEY);\n         setToken(data);\n       })();\n     }, []);\n    \n     const client = new ApolloClient({\n       cache: new InMemoryCache(),\n       link: ApolloLink.from([\n         new HttpLink({\n           # Replace this with an environment variable containing the URL to your deployed Strapi API\n           uri: \"http:\u002F\u002Flocalhost::1337\u002Fgraphql\",\n           headers: token\n             ? {\n                 Authorization: `Bearer ${token.jwt}`,\n               }\n             : null\n         }),\n       ]),\n     });\n    \n     return (\n       \u003CNavigationContainer\u003E\n         \u003CApolloProvider client={client}\u003E\n           \u003CStatusBar style=\"auto\" \u002F\u003E\n    \n           \u003CStack.Navigator\u003E\n             \u003CStack.Screen\n               options={{\n                 title: \"Login\",\n                 headerShown: false,\n                 headerTitleStyle,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"login\"\n               component={Login}\n             \u002F\u003E\n    \n             \u003CStack.Screen\n               options={{\n                 title: \"CreateAccount\",\n                 headerTitleStyle,\n                 headerShown: false,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"create-account\"\n               component={CreateAccount}\n             \u002F\u003E\n    \n             \u003CStack.Screen\n               options={{\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n                 headerLeft: null,\n                 title: \"My Recordings\",\n                 headerTitleStyle,\n               }}\n               name=\"home\"\n               component={Home}\n             \u002F\u003E\n             \u003CStack.Screen\n               options={{\n                 title: \"New Recording\",\n                 headerTitleStyle,\n                 headerLeftContainerStyle: {\n                   color: \"#fff\",\n                 },\n                 headerStyle: {\n                   backgroundColor: \"#8c4bff\",\n                 },\n               }}\n               name=\"CreateRecording\"\n               component={CreateRecording}\n             \u002F\u003E\n           \u003C\u002FStack.Navigator\u003E\n         \u003C\u002FApolloProvider\u003E\n       \u003C\u002FNavigationContainer\u003E\n     );\n    }  \n```\n\nThe code block above contains the root component for the React Native application. When the component is mounted, a [useEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html) hook is first executed to retrieve any token stored locally.\n\nWhatever token that is found is stored in the component's local state and further used in the ApolloClient headers for authenticating GraphQL operations made to the Strapi API. \n\nThe ApolloClient instance store in the `client` variable is further passed as a prop to the [ApolloProvider](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Ftutorial\u002Fqueries\u002F#integrate-with-react) wrapper, which wraps the entire application component tree. \n\nNavigation within this application is also implemented in the `App.js` file by making use of the [React-Navigation](https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fgetting-started#installation) library. \n\nThe [createStackNavigator](https:\u002F\u002Freactnavigation.org\u002Fdocs\u002Fstack-navigator#api-definition) hook from [React-Navigation](https:\u002F\u002Freactnavigation.org) is used to create a stack of screens comprising a Login, CreateAccount, Home, and CreateRecording screen. These screens have not been created yet, but you will create them soon.\n\nTo keep the component free from unnecessary code, we would keep all unrelated code in their respective files and only important what is needed. \n\nCreate a `graphql.js` file within the `src` directory and add the code block content below that contains the [gql](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Fapollo-server\u002Fv2\u002Fapi\u002Fapollo-server\u002F#gql) template literals created using the [gql](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Fapollo-server\u002Fv2\u002Fapi\u002Fapollo-server\u002F#gql) template literal tag from [@apollo\u002Fclient](https:\u002F\u002Fwww.google.com\u002Furl?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjZmercvffxAhUjJMUKHclgBbcQFjAAegQIBRAD&url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40apollo%2Fclient&usg=AOvVaw0iW2Z_EzWNE_CdFQqvxTIH).   \n\n```\n    \u002F\u002F .\u002Fsrc\u002Fgraphql.js\n    import { gql } from \"@apollo\u002Fclient\";\n    \n    export const FETCH_RECORDINGS = gql`\n      query fetchRecordings {\n        voiceRecordings {\n          description\n          recording_name\n          id\n          created_at\n        }\n      }\n    `;\n    \n    export const CREATE_ACCOUNT = gql`\n      mutation createAccount(\n        $email: String!\n        $password: String!\n        $username: String!\n      ) {\n        createUser(\n          input: {\n            data: { username: $username, email: $email, password: $password }\n          }\n        ) {\n          __typename\n        }\n      }\n    `;\n    \n    export const LOGIN_USER = gql`\n      mutation loginUser($email: String!, $password: String!) {\n        login(input: { identifier: $email, password: $password }) {\n          jwt\n          user {\n            id\n          }\n        }\n      }\n    `;\n    \n    export const CREATE_RECORDING = gql`\n      mutation createRecording(\n        $description: String\n        $name: String\n        $userId: String\n        $fileId: String\n      ) {\n        createVoiceRecording(\n          input: {\n            data: {\n              description: $description\n              recording_name: $name\n              users_permissions_user: $userId\n              recording: $fileId\n            }\n          }\n        ) {\n          voiceRecording {\n            description\n            recording_name\n            recording {\n              id\n            }\n          }\n        }\n      }\n    `;\n    \n    export const UPLOAD_FILE = gql`\n      mutation uploadFile($file: Upload!) {\n        upload(file: $file) {\n          id\n        }\n      }\n    `;\n```\n\n\nThe code block above contains five exported variables, each containing the respective gql [template literal tag](https:\u002F\u002Fdeveloper.mozilla.org\u002Fen-US\u002Fdocs\u002FWeb\u002FJavaScript\u002FReference\u002FTemplate_literals#Tagged_templates) for the Query and Mutation operations within the application. \n\nCreate a new `screens` directory within the `src` directory. This new directory will contain the navigation screens imported and used in the `App.js` file. In the four outlined steps below, you will create a file for each of these screens and build the components within them;\n\n\n1. Create Account Screen\n\nUsing your opened code editor, create a `CreateAccount.js` file and add the code block's content below into the new `CreateAccount.js` file to create a component with text fields for a user to specify a username, email, and password detail for creating a new account in the Voice recorder application.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FCreateAccount.js\n    \n    import * as React from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      ActivityIndicator,\n      StyleSheet,\n      Dimensions,\n      TouchableOpacity,\n    } from \"react-native\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import { CREATE_ACCOUNT } from \"..\u002Fgraphql\";\n    \n    const { height, width } = Dimensions.get(\"window\");\n    \n    const CreateAccount = (props) =\u003E {\n      const [Email, setEmail] = React.useState(\"\");\n      const [username, setUsername] = React.useState(\"\");\n      const [Password, setPassword] = React.useState(\"\");\n      const [confirmPassword, setConfirmPassword] = React.useState(\"\");\n      const [error, setError] = React.useState(null);\n      const [isLoading, setLoading] = React.useState(false);\n    \n      const [createAccount, { data }] = useMutation(CREATE_ACCOUNT, {\n        variables: {\n          username,\n          email: Email,\n          password: Password,\n        },\n      });\n    \n      const handleCreateAccount = async () =\u003E {\n        setLoading(true);\n        try {\n          await createAccount();\n          if (data) {\n            props.navigation.navigate(\"login\");\n          }\n        } catch (e) {\n          console.log(`error creating account : ${e}`);\n          setError(e);\n        } finally {\n          setLoading(false);\n        }\n      };\n    \n      return (\n        \u003CView style={styles.body}\u003E\n          \u003CView\u003E\n            \u003CText style={[styles.title, styles.alignCenter]}\u003E\n              Strapi Voice Recorder\n            \u003C\u002FText\u003E\n            \u003CView style={{ marginVertical: 5 }} \u002F\u003E\n            \u003CText style={{ textAlign: \"center\", fontSize: 15 }}\u003E\n              {`Voice recorder application  powered \\n by Strapi CMS API`}{\" \"}\n            \u003C\u002FText\u003E\n            \u003CView style={{ marginVertical: 15 }} \u002F\u003E\n            {error && (\n              \u003CText style={{ textAlign: \"center\", fontSize: 14, color: \"red\" }}\u003E\n                {error.message}{\" \"}\n              \u003C\u002FText\u003E\n            )}\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                keyboardType=\"text\"\n                value={username}\n                placeholder=\"Your username. e.g Johnny\"\n                onChangeText={(val) =\u003E setUsername(val)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                keyboardType=\"email-address\"\n                value={Email}\n                placeholder=\"Your email. John@mail.com\"\n                onChangeText={(val) =\u003E setEmail(val)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                secureTextEntry={true}\n                value={Password}\n                placeholder=\"Your Password\"\n                onChangeText={(val) =\u003E setPassword(val)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                secureTextEntry={true}\n                value={confirmPassword}\n                placeholder=\"Confirm Your Password\"\n                onChangeText={(val) =\u003E setConfirmPassword(val)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.alignCenter}\u003E\n              \u003CTouchableOpacity\n                disabled={Password !== confirmPassword}\n                onPress={() =\u003E handleCreateAccount()}\n                style={[styles.button, styles.alignCenter]}\n              \u003E\n                {!isLoading ? (\n                  \u003CText style={{ color: \"#fff\" }}\u003E Create New Account \u003C\u002FText\u003E\n                ) : (\n                  \u003CActivityIndicator color=\"#282c34\" \u002F\u003E\n                )}\n              \u003C\u002FTouchableOpacity\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CTouchableOpacity\n              disabled={isLoading}\n              onPress={() =\u003E props.navigation.navigate(\"login\")}\n            \u003E\n              \u003CView style={styles.flex}\u003E\n                \u003CText style={styles.infoText}\u003EHave An Account?\u003C\u002FText\u003E\n                \u003CText style={[styles.infoText, { color: \"black\", marginLeft: 10 }]}\u003E\n                  Login Instead\n                \u003C\u002FText\u003E\n              \u003C\u002FView\u003E\n            \u003C\u002FTouchableOpacity\u003E\n          \u003C\u002FView\u003E\n        \u003C\u002FView\u003E\n      );\n    };\n    const styles = StyleSheet.create({\n      flex: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n      },\n      title: {\n        fontSize: 22,\n        textAlign: \"center\",\n        fontWeight: \"500\",\n      },\n      infoText: {\n        textAlign: \"center\",\n        fontSize: 14,\n        color: \"grey\",\n      },\n      body: {\n        backgroundColor: \"#fff\",\n        height,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingHorizontal: 10,\n        borderWidth: 1,\n        borderRadius: 5,\n        borderColor: \"#c0c0c0\",\n        height: 45,\n        width: width - 30,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        height: 40,\n        borderWidth: 1,\n        borderColor: \"#28BFFD\",\n        backgroundColor: \"#28BFFD\",\n        color: \"#fff\",\n        width: width - 30,\n        fontSize: 16,\n        borderRadius: 3,\n      },\n    });\n    \n    export default CreateAccount;\n```\n\n\nThe component within the code block above displays input fields and stores the values typed in the local component state, after which the input values are used in a GraphQL mutation as variables to create a new user.\n\nOf peculiar interest is the `handleCreateAccount` function within the `CreateAccount` component. This function is executed at the top of the **Create New Account** button. It executes the createAccount GraphQL mutation destructured from the GraphQL literal using the [useMutation](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Freact\u002Fhooks\u002F#usemutation) hook from [@apollo\u002Fclient](https:\u002F\u002Fwww.npmjs.com\u002Fpackage\u002F@apollo\u002Fclient).\n\nAfter the GraphQL mutation is executed without any error, the User is navigated to the Login screen to login using the same credentials used in creating the account. This flow adheres to the Strapi API structure and allows the application to retrieve the User's JWT token to authenticate future requests. \n\nAn example of the Create-account screen in the voice recorder application running within an Android emulator is shown in the image below;\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967897327_strapi-create-account.png)\n\n\n\nAs shown in the image above, a user can also navigate to the Login screen to login to an existing account by tapping the **Login Instead** text. In the next step, you will create the Login screen. \n\n\n1. Login Screen\n\nUsing your opened code editor, create a `login.js` file in the `screens` directory and add the code block's content below into the `login.js` file to create a component that accepts a user's email and password specified when an account was created.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fscreens\u002Flogin.js\n    \n    import * as React from \"react\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import {\n      View,\n      Text,\n      TextInput,\n      StyleSheet,\n      Dimensions,\n      ActivityIndicator,\n      TouchableOpacity,\n    } from \"react-native\";\n    import { setItem, getItem, USER_TOKEN_KEY } from \"..\u002Fstorage\";\n    import { LOGIN_USER } from \"..\u002Fgraphql\";\n    const { height, width } = Dimensions.get(\"window\");\n    \n    const Login = (props) =\u003E {\n      const [Email, setEmail] = React.useState(\"\");\n      const [Password, setPassword] = React.useState(\"\");\n      const [isLoading, setLoading] = React.useState(false);\n      const [error, setLoginError] = React.useState(null);\n      const [loginUser, { data }] = useMutation(LOGIN_USER);\n    \n      React.useEffect(() =\u003E {\n        (async function () {\n          const token = await getItem(USER_TOKEN_KEY);\n          if (token) {\n            props.navigation.navigate(\"home\");\n          }\n        })();\n      }, []);\n    \n      const handleLogin = async () =\u003E {\n        setLoading(true);\n        try {\n          await loginUser({\n            variables: {\n              email: Email,\n              password: Password,\n            },\n          });\n          if (data) {\n            await setItem(data.login.jwt);\n            await setItem(data.login.user.id)\n            props.navigation.navigate(\"home\");\n          }\n        } catch (e) {\n          console.log(e);\n          setLoginError(e);\n        } finally {\n          setLoading(false);\n        }\n      };\n    \n      return (\n        \u003CView style={styles.body}\u003E\n          \u003CView\u003E\n            \u003CText style={[styles.title, styles.alignCenter]}\u003E\n              {\" \"}\n              Strapi Voice Recorder\n            \u003C\u002FText\u003E\n            \u003CView style={{ marginVertical: 5 }} \u002F\u003E\n            \u003CText style={{ textAlign: \"center\", fontSize: 15 }}\u003E\n              {\" \"}\n              {`Voice recorder application  powered \\n by Strapi CMS API`}{\" \"}\n            \u003C\u002FText\u003E\n            \u003CView style={{ marginVertical: 15 }} \u002F\u003E\n            {error && (\n              \u003CText style={{ textAlign: \"center\", fontSize: 14, color: \"red\" }}\u003E\n                {error.message}\n              \u003C\u002FText\u003E\n            )}\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                value={Email}\n                placeholder=\"Enter your email address\"\n                onChangeText={(value) =\u003E setEmail(value)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.input}\u003E\n              \u003CTextInput\n                value={Password}\n                secureTextEntry={true}\n                placeholder=\"Enter your Password\"\n                onChangeText={(value) =\u003E setPassword(value)}\n              \u002F\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CView style={styles.alignCenter}\u003E\n              \u003CTouchableOpacity\n                onPress={() =\u003E handleLogin()}\n                disabled={isLoading}\n                style={[styles.button, styles.alignCenter]}\n              \u003E\n                {!isLoading ? (\n                  \u003CText style={{ color: \"#fff\", fontSize: 15 }}\u003E Sign In \u003C\u002FText\u003E\n                ) : (\n                  \u003CActivityIndicator color=\"#fff\" \u002F\u003E\n                )}\n              \u003C\u002FTouchableOpacity\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CTouchableOpacity\n              onPress={() =\u003E props.navigation.navigate(\"create-account\")}\n            \u003E\n              \u003CView style={styles.flex}\u003E\n                \u003CText style={styles.infoText}\u003EDon't Have An Account?\u003C\u002FText\u003E\n                \u003CText style={[styles.infoText, { color: \"black\", marginLeft: 10 }]}\u003E\n                  Create Account\n                \u003C\u002FText\u003E\n              \u003C\u002FView\u003E\n            \u003C\u002FTouchableOpacity\u003E\n          \u003C\u002FView\u003E\n        \u003C\u002FView\u003E\n      );\n    };\n    \n    const styles = StyleSheet.create({\n      flex: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        justifyContent: \"center\",\n      },\n      title: {\n        fontSize: 22,\n        textAlign: \"center\",\n        fontWeight: \"500\",\n      },\n      infoText: {\n        textAlign: \"center\",\n        fontSize: 14,\n        color: \"grey\",\n      },\n      body: {\n        backgroundColor: \"#fff\",\n        height,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingHorizontal: 10,\n        borderWidth: 1,\n        borderRadius: 5,\n        borderColor: \"#c0c0c0\",\n        height: 45,\n        width: width - 30,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        height: 40,\n        borderWidth: 1,\n        borderColor: \"#28BFFD\",\n        backgroundColor: \"#28BFFD\",\n        color: \"#fff\",\n        width: width - 30,\n        fontSize: 16,\n        borderRadius: 3,\n      },\n    });\n    \n    export default Login;\n```\n\n\nThe component above uses a [useEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html) hook to check if a [JWT](https:\u002F\u002Fjwt.io\u002F) token for the User is present in the device. If the JWT token is found, the User is navigated to the Home screen. \n\nThis check serves as a simple means to detect if the User is already authenticated, and it is performed here because the Login screen is the first screen in the Navigation Stack, and it will be the first screen shown when the application is opened. \n\n**Note**: *This authentication can be better performed by writing a custom middleware with React Navigation.* \n\nThe component also contains two input fields for collecting a user email and password input values and stores them in the local state created using the [useState](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-state.html) hooks. These input values are further passed as variables into a GraphQL mutation to authenticate the User. \n\nThe `handleLogin` function is executed at the tap of the **Sign In** button, and it executes the GraphQL mutation to submit the User's email and password to the Strapi GraphQL API and returns an object containing the JWT token and the User's ID. \n\nThe token and user id values are further stored in the device local storage using the `setItem` helper function, which uses the [@react-native-async-storage\u002Fasync-storage](https:\u002F\u002Freact-native-async-storage.github.io\u002Fasync-storage\u002F) library underneath. \n\nThe JWT token will be used to authenticate GraphQL operations to retrieve and create data to the Strapi API. The user ID will be used to identify the User when creating a new recording later on.\n\nThe image below shows the Login screen within the voice recorder application running on an Android emulator.\n \n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626967811872_strapi-emulator-login.png)\n\n\n\n1. Home Screen\n\nThe home screen within this application will serve as the default screen for all authenticated users, displaying a list of created recordings.\n\nThe Home screen has been broken down into a Home parent component to follow React composition design principle. A record card child component displays a card with details about a user's recording gotten from the parent component as a prop.\n\nWe would begin by building the RecordCard component. Create a new `components` directory within the `src` directory and create a `RecordCard.js` file within the component directory. Add the content of the code block below into the `RecordCard.js` file.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fcomponents\u002FRecordCard.js\n    \n    import * as React from \"react\";\n    import { View, Text } from \"react-native\";\n    import Icon from 'react-native-vector-icons\u002FAntDesign';\n    \n    import { HomeStyles as styles  } from \"..\u002Fstyles\"\n    \n    const RecordingCard = ({data, onPlay}) =\u003E (\n       \u003CView style={[styles.alignCenter]}\u003E\n           \u003CView style={styles.post}\u003E\n               \u003CView\n                   onClick={() =\u003E onPlay()}\n                   style={[styles.play, styles.alignCenter\n                       , {\n                           flexDirection: \"column\"\n                       }]}\u003E\n                   \u003CIcon size={30} name={\"playcircleo\"}\u002F\u003E\n                   \u003CText style={{fontSize: 14}}\u003E Play \u003C\u002FText\u003E\n               \u003C\u002FView\u003E\n    \n               \u003CView style={[styles.alignCenter, {flexDirection: 'column'}]}\u003E\n                   \u003CText style={styles.title}\u003E  {data.recording_name}\u003C\u002FText\u003E\n                   \u003CText\u003E {data.created_at} \u003C\u002FText\u003E\n               \u003C\u002FView\u003E\n    \n               \u003CView \u002F\u003E\n           \u003C\u002FView\u003E\n       \u003C\u002FView\u003E\n    )\n    \n    export default RecordingCard;\n```\n\nThe RecordingCard component above receives a data object containing the details of a user's recording and an `onPlay` function that is executed when the play icon within the card is clicked. This function plays the recorded audio for the User to listen to.\n\nNext, create a `Home.js` file in the screens directory and add the code block content below to import and use the RecordingCard component in a [Flat list](https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fflatlist) component.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FHome.js\n    \n    import React, { useEffect } from \"react\";\n    import {\n     View,\n     Text,\n     TouchableOpacity,\n     StyleSheet,\n     FlatList,\n     Dimensions,\n     ActivityIndicator,\n    } from \"react-native\";\n    import { useQuery } from \"@apollo\u002Fclient\";\n    import Icon from \"react-native-vector-icons\u002FIonicons\";\n    import MaterialIcons from \"react-native-vector-icons\u002FMaterialIcons\";\n    import RecordingCard from \"..\u002Fcomponents\u002FrecordingCard\";\n    \n    import { clearToken, getToken, USER_TOKEN_KEY } from \"..\u002Futils\";\n    import { FETCH_RECORDINGS } from \"..\u002Fgraphql\";\n    \n    const { width, height } = Dimensions.get(\"screen\");\n    \n    const handleLogout = async (navigation) =\u003E {\n     try {\n       await clearToken(USER_TOKEN_KEY);\n    \n       navigation.navigate(\"login\");\n     } catch (e) {\n       console.log(e);\n     }\n    };\n    \n    const Home = ({ navigation }) =\u003E {\n     useEffect(() =\u003E {\n       (async function () {\n         const token = await getToken(USER_TOKEN_KEY);\n         if (!token) {\n           navigation.navigate(\"login\");\n         }\n    \n         navigation.setOptions({\n           headerRight: () =\u003E {\n             return (\n               \u003CView style={{ paddingRight: 15 }}\u003E\n                 \u003CTouchableOpacity\n                   style={{ flexDirection: \"row\" }}\n                   onPress={() =\u003E handleLogout(navigation)}\n                 \u003E\n                   \u003CMaterialIcons name={\"logout\"} color={\"#fff\"} size={20} \u002F\u003E\n                 \u003C\u002FTouchableOpacity\u003E\n               \u003C\u002FView\u003E\n             );\n           },\n         });\n       })();\n     }, []);\n    \n     const { data, error, loading } = useQuery(FETCH_RECORDINGS);\n    \n     if (loading) {\n       return (\n         \u003CView style={styles.alignCenter}\u003E\n           \u003CActivityIndicator color=\"#8c4bff\" \u002F\u003E\n         \u003C\u002FView\u003E\n       );\n     }\n    \n     if (error) {\n       return (\n         \u003CView style={[styles.alignCenter, { paddingTop: 15 }]}\u003E\n           \u003CText\u003E An error occurred while loading your recordings... \u003C\u002FText\u003E\n         \u003C\u002FView\u003E\n       );\n     }\n    \n     return (\n       \u003CView style={{ flex: 1, backgroundColor: \"#fff\" }}\u003E\n         \u003CFlatList\n           data={data.voiceRecordings}\n           keyExtractor={(item) =\u003E item.id}\n           renderItem={({ item }) =\u003E (\n             \u003CRecordingCard onPlay={() =\u003E playAudio()} data={item} \u002F\u003E\n           )}\n         \u002F\u003E\n    \n         \u003CView style={styles.alignCenter}\u003E\n           \u003CTouchableOpacity\n             onPress={() =\u003E navigation.navigate(\"CreateRecording\")}\n             style={styles.button}\n           \u003E\n             \u003CIcon name={\"ios-add\"} color={\"#fff\"} size={20} \u002F\u003E\n             \u003CText style={{ color: \"#fff\" }}\u003E Create New Recording \u003C\u002FText\u003E\n           \u003C\u002FTouchableOpacity\u003E\n         \u003C\u002FView\u003E\n       \u003C\u002FView\u003E\n     );\n    };\n    \n    const styles = StyleSheet.create({\n     alignCenter: {\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\",\n     },\n     button: {\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\",\n       flexDirection: \"row\",\n       borderColor: \"#8c4bff\",\n       backgroundColor: \"#8c4bff\",\n       height: 47,\n       width: width - 25,\n       borderWidth: 1,\n       color: \"#fff\",\n       fontSize: 16,\n       borderRadius: 5,\n       marginBottom: 10,\n     },\n    });\n    \n    export default Home;\n```\n\nIn the Home component above, a GraphQL Query operation was made to retrieve the created recordings through the [useQuery](https:\u002F\u002Fwww.apollographql.com\u002Fdocs\u002Freact\u002Fapi\u002Freact\u002Fhooks\u002F#usequery) hook from the @apollo\u002Fclient library. The data gotten from the GraphQL Query is passed into a [Flat list](https:\u002F\u002Freactnative.dev\u002Fdocs\u002Fflatlist) component to render a performant list of recordings using the previously created RecordingCard component. \n\nThe Home component also contains a [useEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html) hook, and the logic to check if a user is authenticated from the Login screen is also performed within the [useEffect](https:\u002F\u002Freactjs.org\u002Fdocs\u002Fhooks-effect.html) hook. If no token is found, the User is navigated to the Login screen. \n\nThe image below shows the Home screen within the application running on an Android emulator;\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966591851_strapi-empty-recordings.png)\n\n\n\nAs displayed in the image above, an empty array was returned from the GraphQL Query because a recording within the voice-recording content type hasn't been created yet.\n\nAt the top of the **Create New Recording** button at the bottom of the page, a user will be navigated to the CreateRecording screen. This screen doesn't exist yet. Hence you will create it in the next step.\n\n\n4. Create Recording Screen\n\nAs the name implies, the CreateRecording screen has a record button for a user to record a voice input and provide a name and description using the two input fields on the page. \n\nCreate a `createRecording.js` file within the `screens` directory and add the code block content below to build the component within the CreateRecording screen.\n\n```\n    \u002F\u002F .\u002Fsrc\u002Fscreens\u002FcreateRecording.js\n    \n    import * as React from \"react\";\n    import {\n      View,\n      Text,\n      TextInput,\n      StyleSheet,\n      Dimensions,\n      TouchableOpacity,\n    } from \"react-native\";\n    import Icon from \"react-native-vector-icons\u002FIonicons\";\n    import { Audio } from \"expo-av\";\n    import * as FileSystem from \"expo-file-system\";\n    import { useMutation } from \"@apollo\u002Fclient\";\n    import { CREATE_RECORDING, UPLOAD_FILE } from \"..\u002Fgraphql\";\n    import { getItem, USER_ID_KEY } from \"..\u002Futils\";\n    \n    const { width, height } = Dimensions.get(\"screen\");\n    \n    const CreateRecording = ({ navigation }) =\u003E {\n      const [name, setName] = React.useState(\"\");\n      const [description, setDescription] = React.useState(\"\");\n      const [canRecord, setRecordStatus] = React.useState(false);\n      const [record, setRecord] = React.useState(null);\n      const [uploadFile, { data }] = useMutation(UPLOAD_FILE);\n      const [createRecording, { error }] = useMutation(CREATE_RECORDING);\n    \n      const startRecording = async () =\u003E {\n        setRecordStatus(!canRecord);\n        try {\n          await Audio.requestPermissionsAsync();\n          await Audio.setAudioModeAsync({\n            allowsRecordingIOS: true,\n            playsInSilentModeIOS: true,\n          });\n          console.log(\"Starting recording...\");\n          const recording = new Audio.Recording();\n          await recording.prepareToRecordAsync(\n            Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n          );\n          await recording.startAsync();\n          setRecord(recording);\n        } catch (err) {\n          console.error(\"Failed to start recording\", err);\n        }\n      };\n    \n      const submitRecording = async () =\u003E {\n    \n        await record.stopAndUnloadAsync();\n        const uri = record.getURI();\n        const Recording = await FileSystem.readAsStringAsync(uri, {\n          encoding: FileSystem.EncodingType.UTF8,\n        });\n    \n        try {\n          await uploadFile({\n            variables: {\n              file: Recording,\n            },\n          });\n          const userId = await getItem(USER_ID_KEY);\n          await createRecording({\n            variables: {\n              name,\n              fileId: data.id,\n              description,\n              userId,\n            },\n          });\n          navigation.navigate(\"home\");\n        } catch (e) {\n          console.log(e);\n        } finally {\n          setRecordStatus(!canRecord);\n        }\n      };\n    \n      return (\n        \u003CView style={styles.root}\u003E\n          \u003CView style={styles.alignCenter}\u003E\n            \u003CText\u003E {error} \u003C\u002FText\u003E\n            \u003CView style={styles.inputContainer}\u003E\n              \u003CText style={styles.title}\u003E Recording Name \u003C\u002FText\u003E\n              \u003CView style={styles.input}\u003E\n                \u003CTextInput\n                  value={name}\n                  placeholder=\"A name for the recording\"\n                  onChangeText={(value) =\u003E setName(value)}\n                \u002F\u003E\n              \u003C\u002FView\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={styles.inputContainer}\u003E\n              \u003CText style={styles.title}\u003E Recording Description \u003C\u002FText\u003E\n              \u003CView style={styles.input}\u003E\n                \u003CTextInput\n                  value={description}\n                  placeholder=\"A description of your recording\"\n                  onChangeText={(value) =\u003E setDescription(value)}\n                \u002F\u003E\n              \u003C\u002FView\u003E\n            \u003C\u002FView\u003E\n            \u003CView style={{ marginVertical: 10 }} \u002F\u003E\n            \u003CTouchableOpacity\n              disabled={!name.length \u003E 2 && description.length \u003E 2}\n              onPress={() =\u003E {\n                if (!canRecord) {\n                  startRecording();\n                } else {\n                  submitRecording();\n                }\n              }}\n              style={[\n                styles.button,\n                styles.alignCenter,\n                {\n                  backgroundColor: canRecord ? \"red\" : \"#8c4bff\",\n                  borderColor: canRecord ? \"red\" : \"#8c4bff\",\n                },\n              ]}\n            \u003E\n              {!canRecord ? (\n                \u003CText style={{ color: \"#fff\", fontSize: 15 }}\u003E\n                  Save and Start Recording\n                \u003C\u002FText\u003E\n              ) : (\n                \u003CText style={{ color: \"#fff\", fontSize: 15 }}\u003EStop Recording\u003C\u002FText\u003E\n              )}\n            \u003C\u002FTouchableOpacity\u003E\n            \u003CView style={[styles.iconContainer, styles.alignCenter]}\u003E\n              {canRecord ? (\n                \u003CView\u003E\n                  \u003CIcon name={\"ios-mic-outline\"} size={85} \u002F\u003E\n                \u003C\u002FView\u003E\n              ) : (\n                \u003CIcon\n                  name={\"md-mic-off-circle-outline\"}\n                  color={\"#c0c0c0\"}\n                  size={85}\n                \u002F\u003E\n              )}\n            \u003C\u002FView\u003E\n          \u003C\u002FView\u003E\n        \u003C\u002FView\u003E\n      );\n    };\n    \n    const styles = StyleSheet.create({\n      title: {\n        fontSize: 15,\n        paddingBottom: 8,\n      },\n      root: {\n        backgroundColor: \"#fff\",\n        height,\n      },\n      input: {\n        backgroundColor: \"#fff\",\n        paddingLeft: 10,\n        borderWidth: 0.7,\n        borderColor: \"#c0c0c0\",\n        height: 50,\n        borderRadius: 4,\n        marginBottom: 5,\n        width: width - 25,\n      },\n      inputContainer: {\n        marginTop: 10,\n        width: width - 25,\n      },\n      alignCenter: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      },\n      button: {\n        borderColor: \"#8c4bff\",\n        backgroundColor: \"#8c4bff\",\n        height: 47,\n        width: width - 25,\n        borderWidth: 1,\n        color: \"#fff\",\n        fontSize: 16,\n        borderRadius: 5,\n      },\n      iconContainer: {\n        height: 350,\n      },\n    });\n    \n    export default CreateRecording;\n```\n\nThe `CreateRecording` component in the code block above provides a user with the functionality to record a voice input, provide a name and description detail, then submit the recording to the Strapi GraphQL API.\n\nThis is made possible through the use of three functions within the component that is explained below;\n\n\n- **startRecording** — \n\nThis function is executed at the tap of the **Save and Start Recording** button, and it uses the [expo-av](https:\u002F\u002Fdocs.expo.io\u002Fversions\u002Flatest\u002Fsdk\u002Fav\u002F) library in a try\u002Fcatch block to record a user's voice input.\n\nThe `requestPermissionAsync` method is invoked to request the User's permission to use the device audio API. After which, a recording session is started and stored in the component's local state. \n\n\n- **submitRecording** — \n\nThis function is executed at the tap of the **Stop Recording** button, which is shown when the recording session is active. This function stops the active recording session and uploads the recording to the Strapi GraphQL API.\n\nFirst, the [*stopAndUnloadAsync*](https:\u002F\u002Fdocs.expo.io\u002Fversions\u002Flatest\u002Fsdk\u002Faudio\u002F#audiorecording) method in the record class is invoked to stop the active recording and save it to the device's local storage in a [WAV](https:\u002F\u002Fdocs.fileformat.com\u002Faudio\u002Fwav\u002F) file. The file path to the recording file is gotten using the `getURI` method and stored in the `uri` variable for later use.\n\nNext, the recording file is retrieved in a [UTF8 encoding](https:\u002F\u002Fwww.w3schools.com\u002Fcharsets\u002Fref_html_utf8.asp) format and stored in a variable. The User's recording stored in the `recordingFile` variable is then uploaded to the Strapi API in a GraphQL mutation containing the file. \n\nAfter the file has been uploaded, another GraphQL mutation containing the recording name, description, userId, and fileId is executed. The `fileId` used in this mutation is gotten from the response object returned after the `uploadFile` mutation was executed successfully. It relates the voice-recording file within Strapi to the recording details created by a user. \n\nThe image below shows the Home screen within the application running on an Android emulator;\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1626966515682_strapi-create-recording.png)\n\n\nAfter a recording has been taken and two GraphQL mutations within the CreateRecording component have been executed successfully, the User is programmatically navigated to the Home screen where the recording created is listed out.\n\nThe image below shows the recording created in the previous image listed out;\n\n\n![](https:\u002F\u002Fpaper-attachments.dropbox.com\u002Fs_4365E115CD84AFB4BFBD51BF21E2D6C7603FE3E69C5ED77A470AE6FF0B4CCBDF_1627018154405_strapi-recordings-list.png)\n\n\n \nWith the application fully functional, you can create more recordings and show them on the Home screen. \n\nGoing through the Strapi web admin dashboard, you will find the recordings in the voice-recording collection type and the uploaded files in the Media-library.\n\n\n## Conclusion\n\nHuge congrats to you. \n\nBy going through the various steps within this article, you have built a fully functional mobile application that allows users to create an account and record their voice input.\n\nFirst, we began the article by creating a new Strapi application. Then we built the data model for the application using the Content builder from the new application's admin dashboard. After that, you enabled GraphQL support for the API.\n\nNext, we bootstrapped a React Native application using the Expo CLI then we connected the mobile application to the Strapi GraphQL API. Lastly, we ended the article by building the application screens and making GraphQL queries and mutations from the components.\n\nThe source code for the React Native application has been pushed to this [GitHub repository](https:\u002F\u002Fgithub.com\u002Fvickywane\u002Fstrapi-react-native-voice-article). Feel free to clone it and use it as a boilerplate when building your mobile application using Strapi.\n",user:{name:"Shada ",username:"shadaw11",twitter_username:"ShadaWehbe",github_username:"ShadaW11",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5iB_awIe--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GbKWt7ow--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg"},organization:{name:"Strapi",username:d,slug:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W257cHqH--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Kk8EQZ5l--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fshadaw11\u002F787116",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-08-10T10:52:31Z",9,"strapi"));
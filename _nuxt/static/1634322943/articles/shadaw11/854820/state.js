window.__NUXT__=(function(a,b,c,d){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634322943",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:854820,title:"How to Build an Ecommerce Website with Jekyll, Strapi, Snipcart and Tailwind CSS",description:"Welcome to the first part of building an e-commerce website with Jekyll, Strapi, Snipcart, and...",readable_publish_date:"Oct 7",slug:"how-to-build-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-5379",path:"\u002Fstrapi\u002Fhow-to-build-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-5379",url:"https:\u002F\u002Fdev.to\u002Fstrapi\u002Fhow-to-build-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-5379",comments_count:0,public_reactions_count:c,collection_id:a,published_timestamp:b,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--NJtqjJCu--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fef7kn2373gn3siuo5d10.png",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--diaHd2F6--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fef7kn2373gn3siuo5d10.png",canonical_url:"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-1-of-5?utm_source=devto&utm_medium=post&utm_campaign=blog",created_at:b,edited_at:"2021-10-07T11:59:33Z",crossposted_at:a,published_at:b,last_comment_at:b,reading_time_minutes:7,tag_list:"snipcart, tailwindcss, jekyll, ecommerce",tags:["snipcart","tailwindcss","jekyll","ecommerce"],body_html:"\u003Cp\u003EWelcome to the first part of building an e-commerce website with Jekyll, Strapi, Snipcart, and Tailwind CSS series. In this tutorial series, we are going to build an Ecommerce store. After completing the tutorial series, you should have a website that looks like this.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBelow is a preview of the project we will be building in this article and here are the links to the final source code \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FQuadrisheriff\u002FStrapi-Eccomerce-website\"\u003EFrontend repository\u003C\u002Fa\u003E &amp; the \u003Ca href=\"https:\u002F\u002Fgithub.com\u002FQuadrisheriff\u002FStrapi-ecommerce-app\"\u003EBackend repository\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=ZhTA9kYibIs\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--i1ERvIuT--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F034en1cgkxl3xp88wm9c.png\" alt=\"Alt Text\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E \u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"introduction\" href=\"#introduction\"\u003E\n  \u003C\u002Fa\u003E\n  Introduction\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fstrapi.io\u002F\"\u003E\u003Cstrong\u003EStrapi:\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\n\u003Ca href=\"https:\u002F\u002Fstrapi.io\u002F\"\u003EStrapi\u003C\u002Fa\u003E is the world-leading node.js open-source headless CMS. Strapi simplifies our development process, making it easier to access our content by providing us fast and secure APIs built in an efficient and scalable manner.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fjekyllrb.com\u002F\"\u003E\u003Cstrong\u003EJekyll:\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\nJekyll is a simple blog-aware static site generator used for creating personal websites, blogs, documentation websites, corporate websites, etc. \u003Cbr\u003E\nJekyll was built with the Ruby programming language, and it uses the liquid templating engine as its templating engine. Jekyll is also the engine powering GitHub pages.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Ftailwindcss.com\u002F\"\u003E\u003Cstrong\u003ETailwindCSS:\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\nTailwind is a utility-first CSS framework for rapidly building custom user interfaces. By using Tailwind, we can write our css directly in our HTML classes. This leads to faster development time since writing CSS this way is much easier.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fsnipcart.com\u002F\"\u003E\u003Cstrong\u003ESnipcart:\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E \u003Cbr\u003E\nSnipcart is an easy-to-implement shopping cart platform. With Snipcart, you can create a seamless online buying experience no matter your web stack with just 2 lines of code. \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"prerequisites\" href=\"#prerequisites\"\u003E\n  \u003C\u002Fa\u003E\n  Prerequisites\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003ETo complete this tutorial series, you need to have:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003E\u003Cp\u003ERuby, RubyGem, and Bundler installed locally - Visit the \u003Ca href=\"https:\u002F\u002Fjekyllrb.com\u002Fdocs\u002Finstallation\u002F\"\u003Einstallation page\u003C\u002Fa\u003E for instructions on installing Ruby, RubyGem, and Bundler on your local machine.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003ENode.js and NPM installed locally - Visit this \u003Ca href=\"https:\u002F\u002Ftreehouse.github.io\u002Finstallation-guides\u002Fwindows\u002Fnode-windows.html\"\u003Earticle from Teamtreehouse\u003C\u002Fa\u003E for instructions on installing Node.js and NPM on your local machine.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003Cli\u003E\u003Cp\u003EGit installed locally and GitHub account - Follow the instructions \u003Ca href=\"https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fen\u002Fv2\u002FGetting-Started-Installing-Git\"\u003Ehere\u003C\u002Fa\u003E to install Git on your local machine. Create a GitHub account \u003Ca href=\"https:\u002F\u002Fgithub.com\u002F\"\u003Ehere\u003C\u002Fa\u003E.\u003C\u002Fp\u003E\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003E \u003C\u002Fp\u003E\n\u003Ch2\u003E\n  \u003Ca name=\"project-setup\" href=\"#project-setup\"\u003E\n  \u003C\u002Fa\u003E\n  Project Setup\n\u003C\u002Fh2\u003E\n\u003Ch3\u003E\n  \u003Ca name=\"strapi-installation\" href=\"#strapi-installation\"\u003E\n  \u003C\u002Fa\u003E\n  Strapi installation\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EThe first step in our tutorial will be to install and set up Strapi as our headless CMS. \u003Cbr\u003E\n\u003Cem\u003ENote - Make sure Node.js and NPM are fully installed before running this step.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ECreate a new project with the following command.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight shell\"\u003E\u003Ccode\u003E    npx create-strapi-app my-project\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EChange \u003Ccode\u003Emy-project\u003C\u002Fcode\u003E to the preferred name of your project. Select \u003Ccode\u003EQuickstart\u003C\u002Fcode\u003E and select \u003Ccode\u003En\u003C\u002Fcode\u003E when asked for a configuration template.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWait for the complete installation. You will be redirected to \u003Ca href=\"http:\u002F\u002Flocalhost:1337\u002Fadmin\"\u003E\u003Cstrong\u003Ehttp:\u002F\u002Flocalhost:1337\u002Fadmin\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E, where you will be prompted to register your details.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gDYg42S5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FdNye7UWiKpp1wyu2OcyH1lu0NTW3uYqr8eG10lOxqQbWx8pU2FXQ79bOEwYkLFXP3697O4nWGNkFKVgLwRvl9iznYE0uNQhVYPxsR3aF-Nb2-x3vWg5dO0N35asB5G8RuJf8tgyL%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--gDYg42S5--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FdNye7UWiKpp1wyu2OcyH1lu0NTW3uYqr8eG10lOxqQbWx8pU2FXQ79bOEwYkLFXP3697O4nWGNkFKVgLwRvl9iznYE0uNQhVYPxsR3aF-Nb2-x3vWg5dO0N35asB5G8RuJf8tgyL%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdd your details and click \u003Cstrong\u003ELET’S START\u003C\u002Fstrong\u003E access the Strapi dashboard.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--J28FtpX8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002Fw1867JqFhv1EgvoSMw87VLMFyR91iFGNZPl8crZYWtWxm9WKyERr36CK95e3vl0rPL4Nc6uIuOfxPq-KJ1J5ucXwe6jvj2b4UexbAR6bQraQtqIoDUGCv8YInebwkwrY0VQkmpHV%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--J28FtpX8--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002Fw1867JqFhv1EgvoSMw87VLMFyR91iFGNZPl8crZYWtWxm9WKyERr36CK95e3vl0rPL4Nc6uIuOfxPq-KJ1J5ucXwe6jvj2b4UexbAR6bQraQtqIoDUGCv8YInebwkwrY0VQkmpHV%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAlso, we will add a folder with the project name to the root directory of your computer. Open the folder in your preferred code editor to access the backend code and configurations.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"jekyll-and-tailwind-css-installation-and-setup\" href=\"#jekyll-and-tailwind-css-installation-and-setup\"\u003E\n  \u003C\u002Fa\u003E\n  Jekyll and Tailwind CSS installation and setup\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EWe will be using Jekyll as our preferred static site generator for this tutorial. Jekyll is a simple blog-aware static site generator used for building blogs, personal websites, corporate websites, documentation websites, etc.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003ENote - Make sure Ruby, Ruby gems, and Bundler are fully installed before running this step.\u003C\u002Fem\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EJekyll Installation\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe first step in the frontend setup will be to install Jekyll locally on your computer. \u003C\u002Fp\u003E\n\n\u003Cp\u003EFor mac installation, run.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    sudo gem install bundler jekyll\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EFor windows installation, run.\u003Cbr\u003E\n\u003C\u002Fp\u003E\n\n\u003Cdiv class=\"highlight js-code-highlight\"\u003E\n\u003Cpre class=\"highlight plaintext\"\u003E\u003Ccode\u003E    gem install jekyll bundler\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\n\u003Cdiv class=\"highlight__panel js-actions-panel\"\u003E\n\u003Cdiv class=\"highlight__panel-action js-fullscreen-code-action\"\u003E\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"\u003E\u003Ctitle\u003EEnter fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n    \u003Csvg xmlns=\"http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"\u003E\u003Ctitle\u003EExit fullscreen mode\u003C\u002Ftitle\u003E\n    \u003Cpath d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"\u003E\u003C\u002Fpath\u003E\n\u003C\u002Fsvg\u003E\n\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\u003C\u002Fdiv\u003E\n\n\n\n\u003Cp\u003EVisit the \u003Ca href=\"https:\u002F\u002Fjekyllrb.com\u002Fdocs\u002Finstallation\u002F\"\u003EJekyll installation page\u003C\u002Fa\u003E for more information on installing Jekyll on your local computer.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAdding Tailwind CSS to Jekyll\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EFor this guide, we will be using the Jekyll starter styled with Tailwind CSS template.\u003Cbr\u003E\nThis template has Tailwind CSS ultimately set up with Jekyll, making our development journey more accessible and faster. To set up the starter project, navigate to the Tailwind starter \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Ftaylorbryant\u002Fjekyll-starter-tailwind\"\u003EGitHub repository\u003C\u002Fa\u003E on your browser. \u003C\u002Fp\u003E\n\n\u003Cp\u003EClick \u003Cstrong\u003EUse this template\u003C\u002Fstrong\u003E on the top right part of the repository.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tsV3oBVz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FB8fpsvVEY5ETl7fpLngTiovH7c8zkN10I43jMgHyEKWqIOA3_DgD_2LX84kiSNVTXv-WJbTPKCiXCrgLHFIDHJM0okb4p7bGNn8oolBy4UbocumaVpR59EbUsLWYbX0X0LlstSu8%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--tsV3oBVz--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FB8fpsvVEY5ETl7fpLngTiovH7c8zkN10I43jMgHyEKWqIOA3_DgD_2LX84kiSNVTXv-WJbTPKCiXCrgLHFIDHJM0okb4p7bGNn8oolBy4UbocumaVpR59EbUsLWYbX0X0LlstSu8%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou will be directed to the Create a repository page. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--E_jiK61r--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FylRJtw_u-NosXqgQNKm1bC6vtHGiEKpR9kcNOikkrxsIIQig5uq-EKHRdNh_nOGLAExlf5jgbKNU5Z1jLrQT7aKBJ9vsfa7hK-oDHEP-9e-cLZqckzSj9BiuL9XMOD0OWKzVwnHe%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--E_jiK61r--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FylRJtw_u-NosXqgQNKm1bC6vtHGiEKpR9kcNOikkrxsIIQig5uq-EKHRdNh_nOGLAExlf5jgbKNU5Z1jLrQT7aKBJ9vsfa7hK-oDHEP-9e-cLZqckzSj9BiuL9XMOD0OWKzVwnHe%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAdd your project name as the \u003Cstrong\u003ERepository Name\u003C\u002Fstrong\u003E, and Click \u003Cstrong\u003ECreate repository from the template\u003C\u002Fstrong\u003E to create a new repository with the template.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--R1-U6tMh--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FAcZ-53l6FWpFwKJaRkal8P1TOSVtirFDI0FHpo9ltpZxl3fBHvmDq7ne6V_pTQwShdzPxkvMzEHxLPD1bJwl_NFtlIrEnO_QgKBnOc0M6ZBRTZqKy53KBokFqklfs5ldD1Rb5cw4%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--R1-U6tMh--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh3.googleusercontent.com\u002FAcZ-53l6FWpFwKJaRkal8P1TOSVtirFDI0FHpo9ltpZxl3fBHvmDq7ne6V_pTQwShdzPxkvMzEHxLPD1bJwl_NFtlIrEnO_QgKBnOc0M6ZBRTZqKy53KBokFqklfs5ldD1Rb5cw4%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EClone the newly created repository. Navigate to the cloned repository, and run \u003Ccode\u003Ebundle install\u003C\u002Fcode\u003E to install all the required gems. \u003C\u002Fp\u003E\n\n\u003Cp\u003ERun \u003Ccode\u003Enpm ci\u003C\u002Fcode\u003E to install the required NPM packages in the project’s \u003Ccode\u003Epackage.lock.json\u003C\u002Fcode\u003E file, and run \u003Ccode\u003Enpm run dev\u003C\u002Fcode\u003E to start the Jekyll development server.\u003C\u002Fp\u003E\n\n\u003Cp\u003EYou will be redirected to \u003Ca href=\"http:\u002F\u002Flocalhost:4000\u002F\"\u003Ehttp:\u002F\u002Flocalhost:4000\u002F\u003C\u002Fa\u003E, where the development server is hosted. The page should look like this - \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--86Ns3572--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FHYEECO71l9N75uoBw6G3DViOQRV_lQ3tFGrrjrp1xggwSgOimiyh_fWyQMcCbtOtDCHiaL5Ac_QIxmOxMkJXi95jEXA208Z5ITmsIGsq_nvjF8I95rZnf6QRciixKr1sAseTsR8n%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--86Ns3572--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FHYEECO71l9N75uoBw6G3DViOQRV_lQ3tFGrrjrp1xggwSgOimiyh_fWyQMcCbtOtDCHiaL5Ac_QIxmOxMkJXi95jEXA208Z5ITmsIGsq_nvjF8I95rZnf6QRciixKr1sAseTsR8n%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"backend-setup\" href=\"#backend-setup\"\u003E\n  \u003C\u002Fa\u003E\n  Backend Setup\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003E\u003Cstrong\u003ECreating the Product collection types\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe next thing to do is to add our products to the backend. Navigate to your backend repository and start the backend with \u003Ccode\u003Enpm run develop\u003C\u002Fcode\u003E. We are using \u003Ccode\u003Enpm run develop\u003C\u002Fcode\u003E instead of \u003Ccode\u003Enpm run start\u003C\u002Fcode\u003E because we will be making changes to the server collection types.\u003C\u002Fp\u003E\n\n\u003Cp\u003ELogin to your dashboard, navigate to \u003Cstrong\u003EContent-Types Builder\u003C\u002Fstrong\u003E and click \u003Cstrong\u003Ecreate new collection type\u003C\u002Fstrong\u003E. Set the display name to \u003Cstrong\u003EProduct\u003C\u002Fstrong\u003E and add the following fields to the collection type:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Ename(Text(Short text))\u003C\u002Fli\u003E\n\u003Cli\u003Eprice(Number(float))\u003C\u002Fli\u003E\n\u003Cli\u003Edescription(Text(Long text))\u003C\u002Fli\u003E\n\u003Cli\u003Eimage(Media(single media))\u003C\u002Fli\u003E\n\u003Cli\u003Eimages(Media(multiple media))\u003C\u002Fli\u003E\n\u003Cli\u003Evideos(Media(multiple media))\u003C\u002Fli\u003E\n\u003Cli\u003Eadditional_information(Text(Long text))\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EClick \u003Cstrong\u003ESave\u003C\u002Fstrong\u003E to register your changes and restart the server.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAdding Slug to the Product collection type\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENext, we will be adding a dynamic autogenerated slug system to the \u003Ccode\u003EProduct\u003C\u002Fcode\u003E collection type. Using a slug will make it easier to query for our products in the frontend.\u003C\u002Fp\u003E\n\n\u003Cp\u003EFirst, navigate to \u003Cstrong\u003EContent-Types Builder\u003C\u002Fstrong\u003E and click \u003Cstrong\u003EProduct\u003C\u002Fstrong\u003E, then click \u003Cstrong\u003EAdd another field\u003C\u002Fstrong\u003E. Select \u003Cstrong\u003EUID.\u003C\u002Fstrong\u003E Set the field \u003Ccode\u003Eslug\u003C\u002Fcode\u003E, and set the attached field to \u003Ccode\u003Ename\u003C\u002Fcode\u003E. Save your changes and click \u003Cstrong\u003EConfigure the view\u003C\u002Fstrong\u003E, and select the \u003Ccode\u003Eslug\u003C\u002Fcode\u003E field. Then, set \u003Cstrong\u003Ethe Editable field\u003C\u002Fstrong\u003E off in the window that appears. Click \u003Cstrong\u003ESave\u003C\u002Fstrong\u003E to register your changes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EWith the slug system fully set up, a new slug will be automatically generated in an uneditable slug field anytime you create a new product. The Slug will be created from the product name.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAdding products to our backend\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ENow that we are done creating our collection types, we need to add products to our \u003Ca href=\"https:\u002F\u002Fmasteringbackend.com\u002Fposts\u002Fbackend-development-the-ultimate-guide\u002F\"\u003Ebackend\u003C\u002Fa\u003E. On the Strapi dashboard, click \u003Cstrong\u003EProducts\u003C\u002Fstrong\u003E under \u003Cstrong\u003ECOLLECTION TYPES\u003C\u002Fstrong\u003E to navigate to the product page. \u003C\u002Fp\u003E\n\n\u003Cp\u003ESelect \u003Cstrong\u003EAdd New Products\u003C\u002Fstrong\u003E to create new products. You will be directed to the create an entry page. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mJjXuVeo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FqWxEEXz7HOaJDLcrjgX1fg-UugnyQp9wMcqC6uIhhePoTM_eVbrGpNsreZ4klDBxMFmyzjyw8LKONjBrziuOIjvH4bEMC_Ny4j1zk5jSMxsvJwCJkawflCzuXdLMfDIJ--dp9KWd%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mJjXuVeo--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh5.googleusercontent.com\u002FqWxEEXz7HOaJDLcrjgX1fg-UugnyQp9wMcqC6uIhhePoTM_eVbrGpNsreZ4klDBxMFmyzjyw8LKONjBrziuOIjvH4bEMC_Ny4j1zk5jSMxsvJwCJkawflCzuXdLMfDIJ--dp9KWd%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EMake sure to add many products to your backend before moving to the next step in this tutorial. After adding a product, click \u003Cstrong\u003Epublish\u003C\u002Fstrong\u003E to publish the product.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EStoring our products under different collections\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo create different product collections, we will be storing our products in different collection types. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cem\u003EWe won’t use single types because single type requests are not retrievable in\u003C\u002Fem\u003E \u003Ca href=\"https:\u002F\u002Fgithub.com\u002Fstrapi\u002Fjekyll-strapi\u002Fissues\u002F14\"\u003E\u003Cstrong\u003E\u003Cem\u003EJekyll with the Strapi-Jekyll plugin.\u003C\u002Fem\u003E\u003C\u002Fstrong\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo create the collection, navigate to \u003Cstrong\u003EContent-Types Builder\u003C\u002Fstrong\u003E and click \u003Cstrong\u003Ecreate new collection type\u003C\u002Fstrong\u003E. Add your collection name as the \u003Cstrong\u003EDisplay name\u003C\u002Fstrong\u003E, and add the following fields to the collection type:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003Eproducts(Text(Short text))\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003ETo connect products to a collection, select the collection and click \u003Cstrong\u003EAdd another field\u003C\u002Fstrong\u003E. Select \u003Cstrong\u003ERelation\u003C\u002Fstrong\u003E, select \u003Ccode\u003Eproduct\u003C\u002Fcode\u003E on the left menu, and set the \u003Cstrong\u003Erelation\u003C\u002Fstrong\u003E field to  \u003Ccode\u003EThe collection name has and belongs to many products\u003C\u002Fcode\u003E, ie. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TAmU-_Dw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FlaHL0ZGp9MsK2E_Z_6bNYeR8o6CE0mbWpMezA49VyAsYAZRy9uD89MKCUNroXn7JjG6yOj6e6xY_S_9H4yJypVTYmMS394UxEDVIyBlD6yjSP-6rebxkcC1NrnUjA1LSyUiWB-C-%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--TAmU-_Dw--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh4.googleusercontent.com\u002FlaHL0ZGp9MsK2E_Z_6bNYeR8o6CE0mbWpMezA49VyAsYAZRy9uD89MKCUNroXn7JjG6yOj6e6xY_S_9H4yJypVTYmMS394UxEDVIyBlD6yjSP-6rebxkcC1NrnUjA1LSyUiWB-C-%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EClick \u003Cstrong\u003ESave\u003C\u002Fstrong\u003E to register your changes. For this tutorial, I will be using four product collections:\u003C\u002Fp\u003E\n\n\u003Cul\u003E\n\u003Cli\u003EBestSellers\u003C\u002Fli\u003E\n\u003Cli\u003EGadgets\u003C\u002Fli\u003E\n\u003Cli\u003EFashion items\u003C\u002Fli\u003E\n\u003Cli\u003EWeekend deals\u003C\u002Fli\u003E\n\u003C\u002Ful\u003E\n\n\u003Cp\u003EPlease make sure to create these product collections as they will be needed going forward. \u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAdding products to your collections\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETo add your products to your collections, click the collection name under \u003Cstrong\u003ECOLLECTION TYPES\u003C\u002Fstrong\u003E to navigate to the collection’s page. Click \u003Cstrong\u003EAdd new\u003C\u002Fstrong\u003E \u003Ccode\u003ECollection name\u003C\u002Fcode\u003E.\u003Cbr\u003E\nClick the \u003Cstrong\u003EProduct\u003C\u002Fstrong\u003E dropdown menu on the left side of the page to reveal your products, and select the products you want to add to the collection.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--C5ou_i2p--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FoimBxJqam9FVABny8E8qmqESoMQdeQoHJWty-Jprbm7F9tq6hnu_miTdcBQfGQhb11ifUqiXnMw6WSJnB1oZby_xL_4Mi15813x-uIsPmlVB7y5Z1fPuBF8HEU5YDyB-lWsFzApz%3Ds0\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--C5ou_i2p--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Flh6.googleusercontent.com\u002FoimBxJqam9FVABny8E8qmqESoMQdeQoHJWty-Jprbm7F9tq6hnu_miTdcBQfGQhb11ifUqiXnMw6WSJnB1oZby_xL_4Mi15813x-uIsPmlVB7y5Z1fPuBF8HEU5YDyB-lWsFzApz%3Ds0\" alt=\"\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EClick \u003Cstrong\u003ESave\u003C\u002Fstrong\u003E to register your changes and \u003Cstrong\u003EPublish\u003C\u002Fstrong\u003E to publish the collection.\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Cstrong\u003EAllowing access to our backend\u003C\u002Fstrong\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EThe last step in our backend setup is to allow access to our backend by editing user roles and permissions. This is done to enable our frontend to access our backend without the need for a token. \u003C\u002Fp\u003E\n\n\u003Cp\u003ETo do this, navigate settings on the Strapi dashboard. Click \u003Cstrong\u003ERoles\u003C\u002Fstrong\u003E under \u003Cstrong\u003EUSERS AND PERMISSIONS PLUGIN\u003C\u002Fstrong\u003E and select \u003Cstrong\u003EPublic\u003C\u002Fstrong\u003E. Tick \u003Cstrong\u003Efinds\u003C\u002Fstrong\u003E and \u003Cstrong\u003Efindone\u003C\u002Fstrong\u003E for all collection types and click \u003Cstrong\u003ESave\u003C\u002Fstrong\u003E to register your changes.\u003C\u002Fp\u003E\n\n\u003Cp\u003EBy setting the \u003Ccode\u003Efind\u003C\u002Fcode\u003E and \u003Ccode\u003Efindone\u003C\u002Fcode\u003E permissions, a user will make GET requests for each collection type from any medium without the server asking for any authorization.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclusion\" href=\"#conclusion\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusion\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EThe backend setup for this part of our tutorial series is complete. You can now add products and categories to the backend. In the next part of this tutorial series, we will start implementing our frontend and create a layout for our eCommerce website.\u003C\u002Fp\u003E\n\n\u003Cp\u003EMake sure to add plenty of products to your backend before moving to the next part of the tutorial series.\u003C\u002Fp\u003E\n\n\u003Cp\u003EIn the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-1-of-5\"\u003Efirst part\u003C\u002Fa\u003E of the series, we completed our backend setup and our frontend installation. In the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-2-of-5\"\u003Esecond part\u003C\u002Fa\u003E, we created the default layout of our eCommerce website. We added the homepage in the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-3-of-5\"\u003Ethird part\u003C\u002Fa\u003E of the series, and we implemented the product catalog and single product views in the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fhow-to-build-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-4-of-5\"\u003Efourth part\u003C\u002Fa\u003E and final in the \u003Ca href=\"https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-5-of-5\"\u003Efifth part\u003C\u002Fa\u003E we will add a cart functionality to our website with Snipcart\u003C\u002Fp\u003E\n\n",body_markdown:"\nWelcome to the first part of building an e-commerce website with Jekyll, Strapi, Snipcart, and Tailwind CSS series. In this tutorial series, we are going to build an Ecommerce store. After completing the tutorial series, you should have a website that looks like this.\n\n\nBelow is a preview of the project we will be building in this article and here are the links to the final source code [Frontend repository](https:\u002F\u002Fgithub.com\u002FQuadrisheriff\u002FStrapi-Eccomerce-website) & the [Backend repository](https:\u002F\u002Fgithub.com\u002FQuadrisheriff\u002FStrapi-ecommerce-app)\n\n\n\n[![Alt Text](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F034en1cgkxl3xp88wm9c.png)](https:\u002F\u002Fwww.youtube.com\u002Fwatch?v=ZhTA9kYibIs)\n\n\n&nbsp;\n\n## Introduction\n\n[**Strapi:**](https:\u002F\u002Fstrapi.io\u002F) \n[Strapi](https:\u002F\u002Fstrapi.io\u002F) is the world-leading node.js open-source headless CMS. Strapi simplifies our development process, making it easier to access our content by providing us fast and secure APIs built in an efficient and scalable manner.\n\n[**Jekyll:**](https:\u002F\u002Fjekyllrb.com\u002F) \nJekyll is a simple blog-aware static site generator used for creating personal websites, blogs, documentation websites, corporate websites, etc. \nJekyll was built with the Ruby programming language, and it uses the liquid templating engine as its templating engine. Jekyll is also the engine powering GitHub pages.\n\n[**TailwindCSS:**](https:\u002F\u002Ftailwindcss.com\u002F) \nTailwind is a utility-first CSS framework for rapidly building custom user interfaces. By using Tailwind, we can write our css directly in our HTML classes. This leads to faster development time since writing CSS this way is much easier.\n\n[**Snipcart:**](https:\u002F\u002Fsnipcart.com\u002F) \nSnipcart is an easy-to-implement shopping cart platform. With Snipcart, you can create a seamless online buying experience no matter your web stack with just 2 lines of code. \n\n## Prerequisites \n\nTo complete this tutorial series, you need to have:\n\n\n- Ruby, RubyGem, and Bundler installed locally - Visit the [installation page](https:\u002F\u002Fjekyllrb.com\u002Fdocs\u002Finstallation\u002F) for instructions on installing Ruby, RubyGem, and Bundler on your local machine.\n\n\n- Node.js and NPM installed locally - Visit this [article from Teamtreehouse](https:\u002F\u002Ftreehouse.github.io\u002Finstallation-guides\u002Fwindows\u002Fnode-windows.html) for instructions on installing Node.js and NPM on your local machine.\n\n\n- Git installed locally and GitHub account - Follow the instructions [here](https:\u002F\u002Fgit-scm.com\u002Fbook\u002Fen\u002Fv2\u002FGetting-Started-Installing-Git) to install Git on your local machine. Create a GitHub account [here](https:\u002F\u002Fgithub.com\u002F).\n\n&nbsp;\n\n## Project Setup\n\n\n### Strapi installation\n\nThe first step in our tutorial will be to install and set up Strapi as our headless CMS. \n*Note - Make sure Node.js and NPM are fully installed before running this step.*\n\nCreate a new project with the following command.\n\n```bash\n    npx create-strapi-app my-project\n```\n\nChange `my-project` to the preferred name of your project. Select `Quickstart` and select `n` when asked for a configuration template.\n\nWait for the complete installation. You will be redirected to [**http:\u002F\u002Flocalhost:1337\u002Fadmin**](http:\u002F\u002Flocalhost:1337\u002Fadmin), where you will be prompted to register your details.\n\n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FdNye7UWiKpp1wyu2OcyH1lu0NTW3uYqr8eG10lOxqQbWx8pU2FXQ79bOEwYkLFXP3697O4nWGNkFKVgLwRvl9iznYE0uNQhVYPxsR3aF-Nb2-x3vWg5dO0N35asB5G8RuJf8tgyL=s0)\n\n\nAdd your details and click **LET’S START** access the Strapi dashboard.\n\n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002Fw1867JqFhv1EgvoSMw87VLMFyR91iFGNZPl8crZYWtWxm9WKyERr36CK95e3vl0rPL4Nc6uIuOfxPq-KJ1J5ucXwe6jvj2b4UexbAR6bQraQtqIoDUGCv8YInebwkwrY0VQkmpHV=s0)\n\n\nAlso, we will add a folder with the project name to the root directory of your computer. Open the folder in your preferred code editor to access the backend code and configurations.\n\n\n### Jekyll and Tailwind CSS installation and setup\n\nWe will be using Jekyll as our preferred static site generator for this tutorial. Jekyll is a simple blog-aware static site generator used for building blogs, personal websites, corporate websites, documentation websites, etc.\n\n*Note - Make sure Ruby, Ruby gems, and Bundler are fully installed before running this step.*\n\n**Jekyll Installation**\n\nThe first step in the frontend setup will be to install Jekyll locally on your computer. \n\nFor mac installation, run.\n\n```\n    sudo gem install bundler jekyll\n```\n\nFor windows installation, run. \n\n```\n    gem install jekyll bundler\n```\n\nVisit the [Jekyll installation page](https:\u002F\u002Fjekyllrb.com\u002Fdocs\u002Finstallation\u002F) for more information on installing Jekyll on your local computer.\n\n**Adding Tailwind CSS to Jekyll**\n\nFor this guide, we will be using the Jekyll starter styled with Tailwind CSS template.\nThis template has Tailwind CSS ultimately set up with Jekyll, making our development journey more accessible and faster. To set up the starter project, navigate to the Tailwind starter [GitHub repository](https:\u002F\u002Fgithub.com\u002Ftaylorbryant\u002Fjekyll-starter-tailwind) on your browser. \n\nClick **Use this template** on the top right part of the repository.\n\n![](https:\u002F\u002Flh6.googleusercontent.com\u002FB8fpsvVEY5ETl7fpLngTiovH7c8zkN10I43jMgHyEKWqIOA3_DgD_2LX84kiSNVTXv-WJbTPKCiXCrgLHFIDHJM0okb4p7bGNn8oolBy4UbocumaVpR59EbUsLWYbX0X0LlstSu8=s0)\n\n\nYou will be directed to the Create a repository page. \n\n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FylRJtw_u-NosXqgQNKm1bC6vtHGiEKpR9kcNOikkrxsIIQig5uq-EKHRdNh_nOGLAExlf5jgbKNU5Z1jLrQT7aKBJ9vsfa7hK-oDHEP-9e-cLZqckzSj9BiuL9XMOD0OWKzVwnHe=s0)\n\n\nAdd your project name as the **Repository Name**, and Click **Create repository from the template** to create a new repository with the template.\n\n![](https:\u002F\u002Flh3.googleusercontent.com\u002FAcZ-53l6FWpFwKJaRkal8P1TOSVtirFDI0FHpo9ltpZxl3fBHvmDq7ne6V_pTQwShdzPxkvMzEHxLPD1bJwl_NFtlIrEnO_QgKBnOc0M6ZBRTZqKy53KBokFqklfs5ldD1Rb5cw4=s0)\n\n\n\nClone the newly created repository. Navigate to the cloned repository, and run `bundle install` to install all the required gems. \n\nRun `npm ci` to install the required NPM packages in the project’s `package.lock.json` file, and run `npm run dev` to start the Jekyll development server.\n\nYou will be redirected to [http:\u002F\u002Flocalhost:4000\u002F](http:\u002F\u002Flocalhost:4000\u002F), where the development server is hosted. The page should look like this - \n\n\n![](https:\u002F\u002Flh6.googleusercontent.com\u002FHYEECO71l9N75uoBw6G3DViOQRV_lQ3tFGrrjrp1xggwSgOimiyh_fWyQMcCbtOtDCHiaL5Ac_QIxmOxMkJXi95jEXA208Z5ITmsIGsq_nvjF8I95rZnf6QRciixKr1sAseTsR8n=s0)\n\n### Backend Setup\n\n**Creating the Product collection types**\n\nThe next thing to do is to add our products to the backend. Navigate to your backend repository and start the backend with `npm run develop`. We are using `npm run develop` instead of `npm run start` because we will be making changes to the server collection types.\n\nLogin to your dashboard, navigate to **Content-Types Builder** and click **create new collection type**. Set the display name to **Product** and add the following fields to the collection type:\n\n\n- name(Text(Short text))\n- price(Number(float))\n- description(Text(Long text))\n- image(Media(single media))\n- images(Media(multiple media))\n- videos(Media(multiple media))\n- additional_information(Text(Long text))\n\nClick **Save** to register your changes and restart the server.\n\n**Adding Slug to the Product collection type**\n\nNext, we will be adding a dynamic autogenerated slug system to the `Product` collection type. Using a slug will make it easier to query for our products in the frontend.\n\nFirst, navigate to **Content-Types Builder** and click **Product**, then click **Add another field**. Select **UID.** Set the field `slug`, and set the attached field to `name`. Save your changes and click **Configure the view**, and select the `slug` field. Then, set **the Editable field** off in the window that appears. Click **Save** to register your changes.\n\nWith the slug system fully set up, a new slug will be automatically generated in an uneditable slug field anytime you create a new product. The Slug will be created from the product name.\n\n**Adding products to our backend**\n\nNow that we are done creating our collection types, we need to add products to our [backend](https:\u002F\u002Fmasteringbackend.com\u002Fposts\u002Fbackend-development-the-ultimate-guide\u002F). On the Strapi dashboard, click **Products** under **COLLECTION TYPES** to navigate to the product page. \n\nSelect **Add New Products** to create new products. You will be directed to the create an entry page. \n\n\n![](https:\u002F\u002Flh5.googleusercontent.com\u002FqWxEEXz7HOaJDLcrjgX1fg-UugnyQp9wMcqC6uIhhePoTM_eVbrGpNsreZ4klDBxMFmyzjyw8LKONjBrziuOIjvH4bEMC_Ny4j1zk5jSMxsvJwCJkawflCzuXdLMfDIJ--dp9KWd=s0)\n\n\nMake sure to add many products to your backend before moving to the next step in this tutorial. After adding a product, click **publish** to publish the product.\n\n**Storing our products under different collections**\n\nTo create different product collections, we will be storing our products in different collection types. \n\n*We won’t use single types because single type requests are not retrievable in* [***Jekyll with the Strapi-Jekyll plugin.***](https:\u002F\u002Fgithub.com\u002Fstrapi\u002Fjekyll-strapi\u002Fissues\u002F14)\n\nTo create the collection, navigate to **Content-Types Builder** and click **create new collection type**. Add your collection name as the **Display name**, and add the following fields to the collection type:\n\n\n- products(Text(Short text))\n\nTo connect products to a collection, select the collection and click **Add another field**. Select **Relation**, select `product` on the left menu, and set the **relation** field to  `The collection name has and belongs to many products`, ie. \n\n![](https:\u002F\u002Flh4.googleusercontent.com\u002FlaHL0ZGp9MsK2E_Z_6bNYeR8o6CE0mbWpMezA49VyAsYAZRy9uD89MKCUNroXn7JjG6yOj6e6xY_S_9H4yJypVTYmMS394UxEDVIyBlD6yjSP-6rebxkcC1NrnUjA1LSyUiWB-C-=s0)\n\n\nClick **Save** to register your changes. For this tutorial, I will be using four product collections:\n\n\n- BestSellers\n- Gadgets\n- Fashion items\n- Weekend deals\n\nPlease make sure to create these product collections as they will be needed going forward. \n\n**Adding products to your collections**\n\nTo add your products to your collections, click the collection name under **COLLECTION TYPES** to navigate to the collection’s page. Click **Add new** `Collection name`.\nClick the **Product** dropdown menu on the left side of the page to reveal your products, and select the products you want to add to the collection.\n\n![](https:\u002F\u002Flh6.googleusercontent.com\u002FoimBxJqam9FVABny8E8qmqESoMQdeQoHJWty-Jprbm7F9tq6hnu_miTdcBQfGQhb11ifUqiXnMw6WSJnB1oZby_xL_4Mi15813x-uIsPmlVB7y5Z1fPuBF8HEU5YDyB-lWsFzApz=s0)\n\n\nClick **Save** to register your changes and **Publish** to publish the collection.\n\n**Allowing access to our backend**\n\nThe last step in our backend setup is to allow access to our backend by editing user roles and permissions. This is done to enable our frontend to access our backend without the need for a token. \n\nTo do this, navigate settings on the Strapi dashboard. Click **Roles** under **USERS AND PERMISSIONS PLUGIN** and select **Public**. Tick **finds** and **findone** for all collection types and click **Save** to register your changes.\n\nBy setting the `find` and `findone` permissions, a user will make GET requests for each collection type from any medium without the server asking for any authorization.\n\n\n## Conclusion\n\nThe backend setup for this part of our tutorial series is complete. You can now add products and categories to the backend. In the next part of this tutorial series, we will start implementing our frontend and create a layout for our eCommerce website.\n\n\nMake sure to add plenty of products to your backend before moving to the next part of the tutorial series.\n\nIn the [first part](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-1-of-5) of the series, we completed our backend setup and our frontend installation. In the [second part](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-2-of-5), we created the default layout of our eCommerce website. We added the homepage in the [third part](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-3-of-5) of the series, and we implemented the product catalog and single product views in the [fourth part](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fhow-to-build-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-4-of-5) and final in the [fifth part](https:\u002F\u002Fstrapi.io\u002Fblog\u002Fbuilding-an-ecommerce-website-with-jekyll-strapi-snipcart-and-tailwind-css-5-of-5) we will add a cart functionality to our website with Snipcart\n\n",user:{name:"Shada ",username:"shadaw11",twitter_username:"ShadaWehbe",github_username:"ShadaW11",website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--5iB_awIe--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--GbKWt7ow--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F650629\u002F3afeff75-552d-4dae-a239-732ae8558f0c.jpeg"},organization:{name:"Strapi",username:d,slug:d,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--W257cHqH--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--Kk8EQZ5l--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Forganization\u002Fprofile_image\u002F763\u002F988af53b-5d7e-435a-98eb-dd4aff5299d2.png"}}},serverRendered:true,routePath:"\u002Farticles\u002Fshadaw11\u002F854820",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"2021-10-07T11:27:32Z",6,"strapi"));
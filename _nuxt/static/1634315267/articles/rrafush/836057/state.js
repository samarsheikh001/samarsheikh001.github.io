window.__NUXT__=(function(a,b,c,d,e){return {staticAssetsBase:"\u002F_nuxt\u002Fstatic\u002F1634315267",layout:"default",error:a,state:{currentArticle:{type_of:"article",id:836057,title:"Entendendo o null safety",description:"Olá pra você que está chegando de paraquedas nesse artigo, ou está seguindo um link que eu...",readable_publish_date:"Oct 12",slug:"entendendo-o-null-safety-437k",path:"\u002Frrafush\u002Fentendendo-o-null-safety-437k",url:b,comments_count:1,public_reactions_count:c,collection_id:a,published_timestamp:d,positive_reactions_count:c,cover_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--mpU6_rJE--\u002Fc_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frm0wpuaf0ofmf82upluk.jpg",social_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--rSeA3SjH--\u002Fc_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Frm0wpuaf0ofmf82upluk.jpg",canonical_url:b,created_at:"2021-09-22T00:39:31Z",edited_at:"2021-10-12T16:48:30Z",crossposted_at:a,published_at:d,last_comment_at:"2021-10-13T14:40:45Z",reading_time_minutes:6,tag_list:"dart, flutter, beginners, braziliandevs",tags:["dart","flutter","beginners","braziliandevs"],body_html:"\u003Cp\u003EOlá pra você que está chegando de paraquedas nesse artigo, ou está seguindo um link que eu provavelmente publiquei em alguma das minhas redes! Espero que esteja muito bem hidratado(a), por que nesse artigo vamos buscar entender de uma forma simplificada o null safety, que abalou muitos corações na atualização do flutter 2.0.\u003C\u002Fp\u003E\n\n\u003Cp\u003EEste é um artigo beginner friendly, então já fiquem avisados que não há o que temer e depois desse artigo espero que vocês olhem para essa feature de uma maneira mais simpática, pois ela veio para te ajudar.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAntes de começarmos, sugiro que você abra o DartPad (\u003Ca href=\"https:\u002F\u002Fdartpad.dev\u002F\"\u003Ehttps:\u002F\u002Fdartpad.dev\u002F\u003C\u002Fa\u003E) e vá testando códigos com e sem null safety pra você entender melhor e ver na prática as coisas acontecendo!\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"o-que-%C3%A9-null\" href=\"#o-que-%C3%A9-null\"\u003E\n  \u003C\u002Fa\u003E\n  O que é null\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAntes de falar propriamente sobre o null safety, precisamos primeiramente entender o conceito de null:\u003C\u002Fp\u003E\n\n\u003Cp\u003EUma variável tem o valor null quando nenhum valor foi atribuído à ela, ou seja, é literalmente nada. Por exemplo:\u003C\u002Fp\u003E\n\n\u003Cp\u003ESe eu inicializar uma variável sem passar um valor referente à ela:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ccode\u003EString nome;\u003Cbr\u003E\nprint(nome);\u003C\u002Fcode\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EEm um ambiente sem o null safety habilitado poderemos ver que imprimimos 'null' no console, justamente por não termos atribuído nenhum valor aquela variável.\u003C\u002Fp\u003E\n\n\u003Cp\u003EAssim, se quiséssemos tratar situações em que uma variável pode ser nula, poderíamos fazer da seguinte maneira:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2hj_wdGX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc4yiscbum32iutn7eyoa.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--2hj_wdGX--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc4yiscbum32iutn7eyoa.png\" alt=\"if(variavel == null){&lt;br&gt;\nprint('não temos um valor para essa variável');&lt;br&gt;\n} else {&lt;br&gt;\nprint(variavel);&lt;br&gt;\n}\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EAgora, se você for iniciante (como eu sou), você deve estar tendo alguma dificuldade em entender as implicações práticas disso, e é normal no início a gente não ter uma dimensão do que significa isso dentro de um sistema real, afinal, é só tratarmos como no exemplo acima que tá tudo certo né? Bom, na teoria sim, mas vou contar pra vocês que erros de null são os mais comuns em sistemas do mundo todo, são tão comuns que a primeira pessoa que criou o null, Tony Hoare, pediu publicamente desculpas por tê-lo criado e o chamou de \"billion dollar mistake\", o erro de um bilhão de dólares.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"tempo-de-compila%C3%A7%C3%A3o-vs-tempo-de-execu%C3%A7%C3%A3o\" href=\"#tempo-de-compila%C3%A7%C3%A3o-vs-tempo-de-execu%C3%A7%C3%A3o\"\u003E\n  \u003C\u002Fa\u003E\n  Tempo de compilação vs Tempo de execução\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EAté aqui conseguimos definir o que é null e entender que variáveis com valores null são a causa de um dos bugs mais comuns em programas no mundo. \u003Cbr\u003E\nVamos agora entender a diferença entre tempo de compilação e tempo de execução no processo de desenvolvimento de software, pois isso foi um conceito crucial para que eu entendesse a importância e praticidade que null safety traz para os nossos programas.\u003C\u002Fp\u003E\n\n\u003Cp\u003EQuando estamos escrevendo código em linguagens de alto nível, ou seja, que são mais próximas da linguagem humana e mais afastadas da linguagem de máquina (como por exemplo Java, JavaScript, Python e nosso querido Dart), necessitamos de um compilador, que é como se fosse um tradutor, um conversor que vai fazer com que a máquina o compreenda.\u003C\u002Fp\u003E\n\n\u003Cp\u003EO tempo em que estamos escrevendo esse código podemos chamar de tempo de compilação, nesse tempo o computador pode reconhecer erros de sintaxe e semântica sem que seja necessária a execução do programa.\u003C\u002Fp\u003E\n\n\u003Cp\u003EO tempo de execução é exatamente isso que o nome diz, é quando um programa entra em execução, e nesse estágio o programa consegue detectar comportamentos que durante o tempo de compilação não puderam ser previstos, podendo assim gerar erros que muitas vezes quebram o programa.\u003C\u002Fp\u003E\n\n\u003Cp\u003ESendo assim, eu posso escrever a seguinte função para definir o nome completo de um membro da família Martins:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4bU_GNm0--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F0pi2d9njocq9fo82q0k1.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--4bU_GNm0--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F0pi2d9njocq9fo82q0k1.png\" alt=\" String sobrenome = 'Martins';&lt;br&gt;\n  String nomeCompleto(String nome) {&lt;br&gt;\n    return nome + ' ' + sobrenome;&lt;br&gt;\n  } nomeCompleto(null)\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESem o null safety esse código compilaria, causando um erro somente em tempo de execução, porém quando habilitamos o null safety, já em tempo de compilação o computador nos avisa que um parâmetro do tipo null não pode ser atribuído a um parâmetro do tipo String, isso se deve ao fato de que com o null safety por padrão as variáveis nunca podem ter um valor null, evitando assim que nosso programa quebre.\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"null-safety\" href=\"#null-safety\"\u003E\n  \u003C\u002Fa\u003E\n  Null Safety\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EO nome já diz: segurança null. Essa feature chegou para fazer nossos códigos mais seguros e a prova de erros, e agora vamos entender o null safety de uma maneira que a gente poderá trabalhar com ou sem ele, assim não importa se você estiver vendo um tutorial ou artigo sobre dart e flutter que foi feito antes do null safety, você saberá exatamente o que fazer para adaptar o código para as versões mais atuais do flutter.\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"operador-\" href=\"#operador-\"\u003E\n  \u003C\u002Fa\u003E\n  Operador \"?\"\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EPor padrão, depois do null safety, todas as variáveis nunca poderão ser nulas, ou seja, elas são \"non nullable\". Mas aí vocês me perguntam: \"mas Rafa, como fazemos então quando a gente QUER que aquela variável seja nula pelo menos durante um determinado momento do programa?\" Isso é simples, basta sinalizar com um \"?\" logo após a tipagem dela, dessa maneira:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XlYHvnNS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fp5hxipfr9v4nl5h0ops6.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--XlYHvnNS--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fp5hxipfr9v4nl5h0ops6.png\" alt=\"final String? nome;\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EEsse padrão é muito utilizado na criação de classes:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LdnA8nZ---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhwk1wpifuosa0axmnjb7.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--LdnA8nZ---\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhwk1wpifuosa0axmnjb7.png\" alt=\"class Pessoa{&lt;br&gt;\n  Pessoa({required this.nome, required this.idade, &lt;br&gt;\n  this.pet});&lt;br&gt;\n  final String nome;&lt;br&gt;\n  final String idade;&lt;br&gt;\n  final String? pet;&lt;br&gt;\n}\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ETodas as pessoas tem um nome e idade, mas nem todo mundo tem um bichinho de estimação, assim eu sinalizei para o programa que o campo \"pet\" não é obrigatório, e coloquei a palavra reservada \u003Ccode\u003Erequired\u003C\u002Fcode\u003E para dizer que os campos \"nome\" e \"idade\" são obrigatórios na criação de uma variável do tipo Pessoa.\u003C\u002Fp\u003E\n\n\u003Cp\u003EOk, mas e se quiséssemos realizar operações com uma variável sem saber se ela é nula ou não?\u003C\u002Fp\u003E\n\n\u003Cp\u003ESe escrevêssemos o seguinte código:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--bszblnSy--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F64j3e0rm52zulci9an0p.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--bszblnSy--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F64j3e0rm52zulci9an0p.png\" alt=\"void main(){&lt;br&gt;\n  int num1;&lt;br&gt;\n  int num2 = 10;&lt;br&gt;\n  int soma(int a, int b){&lt;br&gt;\n   return a +b;}&lt;br&gt;\n print(soma(num1, num2));}\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ECom o null safety, em tempo de compilação já saberíamos que nosso código não está seguro e conseguiríamos consertar esse erro bem facilmente mesmo a variável \u003Ccode\u003Enum1\u003C\u002Fcode\u003E podendo ser nula, da seguinte forma:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OI7mYoZ1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Feou9xg6bracnuicyvtb4.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--OI7mYoZ1--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Feou9xg6bracnuicyvtb4.png\" alt=\"void main(){&lt;br&gt;\n  int? num1;&lt;br&gt;\n  int num2 = 10;&lt;br&gt;\n  int soma(int a, int b){&lt;br&gt;\n    return a +b;}&lt;br&gt;\n if(num1 != null){&lt;br&gt;\n  print(soma(num1, num2));}}\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003EE por incrível que pareça o Dart vai ficar feliz com esse código sim, pois ele é bem inteligente e já sabe que a função só será executada caso a variável \u003Ccode\u003Enum1\u003C\u002Fcode\u003E não seja nula!\u003C\u002Fp\u003E\n\n\u003Cp\u003ETambém podemos utilizar o operador \"??\" para executarmos alguma ação caso algum valor seja nulo:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_PQNOeYJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsunminudv11ba58ztgea.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--_PQNOeYJ--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsunminudv11ba58ztgea.png\" alt=\"int? x;&lt;br&gt;\n int y = x ?? 0;&lt;br&gt;\nprint(y);\u002F\u002F0\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Ch3\u003E\n  \u003Ca name=\"operador-\" href=\"#operador-\"\u003E\n  \u003C\u002Fa\u003E\n  Operador \"!\"\n\u003C\u002Fh3\u003E\n\n\u003Cp\u003EUsamos esse operador quando temos certeza de que uma variável que pode ser nula tem um valor naquele momento do programa, permitindo assim que a gente execute funções e atribuições envolvendo aquela variável:\u003C\u002Fp\u003E\n\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wVKZUb65--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzj2i571zvte700b3ntlf.png\" class=\"article-body-image-wrapper\"\u003E\u003Cimg src=\"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--wVKZUb65--\u002Fc_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzj2i571zvte700b3ntlf.png\" alt=\"  int banana = 10;&lt;br&gt;\n  int? abacaxi;&lt;br&gt;\n  if (banana &gt; 0) {&lt;br&gt;\n    abacaxi = 2;}&lt;br&gt;\n  int frutas = banana + abacaxi!;&lt;br&gt;\n  print(frutas);\" loading=\"lazy\"\u003E\u003C\u002Fa\u003E\u003C\u002Fp\u003E\n\n\u003Cp\u003ESem o \"!\" o Dart iria reclamar, mas esse sinal é como se a gente falasse pra ele \"fica sussa fiote, eu sei o que eu estou fazendo!\", e ele confia na gente fácil assim! Só cuidado pra não vacilar e ele mandar uma de \"eu avisei!\"...\u003C\u002Fp\u003E\n\n\u003Ch2\u003E\n  \u003Ca name=\"conclus%C3%A3o\" href=\"#conclus%C3%A3o\"\u003E\n  \u003C\u002Fa\u003E\n  Conclusão\n\u003C\u002Fh2\u003E\n\n\u003Cp\u003EVocê chegou até aqui?! Que maravilha, estou muito feliz e espero que você tenha conseguido compreender melhor o null safety e escrever códigos mais confiáveis e seguros!\u003C\u002Fp\u003E\n\n\u003Cp\u003EExistem várias outras situações que poderíamos nos deparar durante a criação dos nossos códigos com null safety e que eu não cobri nesse artigo, pelo fato de que iria ficar muito longo e cansativo, mas espero ter esclarecido o uso dos operadores, o porquê do null safety e como trabalhar com ele.\u003C\u002Fp\u003E\n\n\u003Cp\u003EHoje ouvi uma pessoa muito querida dizer num podcast que programar é como um super poder, eu achei a analogia fantástica, e é como se a cada coisa nova que aprendemos, adicionamos mais algo especial nesse super poder, algo que vai fazer a diferença pra alguém em contato com a tecnologia que criamos!\u003C\u002Fp\u003E\n\n\u003Cp\u003EVamos então salvar o dia com nossos super poderes :)\u003C\u002Fp\u003E\n\n\u003Cp\u003EHappy coding!\u003C\u002Fp\u003E\n\n\u003Cp\u003E*Esse artigo foi feito com muita ajuda das explicações do curso de Dart do Andrea Bizzotto na Udemy além de outras fontes diversas na internet. Pra quem entende inglês e quer um curso com explicações claras e projetinhos mão na massa, eu recomendo fortemente o curso do Andrea!\u003C\u002Fp\u003E\n\n",body_markdown:"Olá pra você que está chegando de paraquedas nesse artigo, ou está seguindo um link que eu provavelmente publiquei em alguma das minhas redes! Espero que esteja muito bem hidratado(a), por que nesse artigo vamos buscar entender de uma forma simplificada o null safety, que abalou muitos corações na atualização do flutter 2.0.\n\nEste é um artigo beginner friendly, então já fiquem avisados que não há o que temer e depois desse artigo espero que vocês olhem para essa feature de uma maneira mais simpática, pois ela veio para te ajudar.\n\nAntes de começarmos, sugiro que você abra o DartPad (https:\u002F\u002Fdartpad.dev\u002F) e vá testando códigos com e sem null safety pra você entender melhor e ver na prática as coisas acontecendo!\n\n##O que é null\n\nAntes de falar propriamente sobre o null safety, precisamos primeiramente entender o conceito de null:\n\nUma variável tem o valor null quando nenhum valor foi atribuído à ela, ou seja, é literalmente nada. Por exemplo:\n\nSe eu inicializar uma variável sem passar um valor referente à ela:\n\n`String nome;\nprint(nome);`\n\nEm um ambiente sem o null safety habilitado poderemos ver que imprimimos 'null' no console, justamente por não termos atribuído nenhum valor aquela variável.\n\nAssim, se quiséssemos tratar situações em que uma variável pode ser nula, poderíamos fazer da seguinte maneira:\n\n\n![if(variavel == null){\nprint('não temos um valor para essa variável');\n} else {\nprint(variavel);\n}](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fc4yiscbum32iutn7eyoa.png)\n\nAgora, se você for iniciante (como eu sou), você deve estar tendo alguma dificuldade em entender as implicações práticas disso, e é normal no início a gente não ter uma dimensão do que significa isso dentro de um sistema real, afinal, é só tratarmos como no exemplo acima que tá tudo certo né? Bom, na teoria sim, mas vou contar pra vocês que erros de null são os mais comuns em sistemas do mundo todo, são tão comuns que a primeira pessoa que criou o null, Tony Hoare, pediu publicamente desculpas por tê-lo criado e o chamou de \"billion dollar mistake\", o erro de um bilhão de dólares.\n\n##Tempo de compilação vs Tempo de execução\n\nAté aqui conseguimos definir o que é null e entender que variáveis com valores null são a causa de um dos bugs mais comuns em programas no mundo. \nVamos agora entender a diferença entre tempo de compilação e tempo de execução no processo de desenvolvimento de software, pois isso foi um conceito crucial para que eu entendesse a importância e praticidade que null safety traz para os nossos programas.\n\nQuando estamos escrevendo código em linguagens de alto nível, ou seja, que são mais próximas da linguagem humana e mais afastadas da linguagem de máquina (como por exemplo Java, JavaScript, Python e nosso querido Dart), necessitamos de um compilador, que é como se fosse um tradutor, um conversor que vai fazer com que a máquina o compreenda.\n\nO tempo em que estamos escrevendo esse código podemos chamar de tempo de compilação, nesse tempo o computador pode reconhecer erros de sintaxe e semântica sem que seja necessária a execução do programa.\n\nO tempo de execução é exatamente isso que o nome diz, é quando um programa entra em execução, e nesse estágio o programa consegue detectar comportamentos que durante o tempo de compilação não puderam ser previstos, podendo assim gerar erros que muitas vezes quebram o programa.\n\nSendo assim, eu posso escrever a seguinte função para definir o nome completo de um membro da família Martins:\n\n\n![ String sobrenome = 'Martins';\n  String nomeCompleto(String nome) {\n    return nome + ' ' + sobrenome;\n  } nomeCompleto(null)](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F0pi2d9njocq9fo82q0k1.png)\n\n\nSem o null safety esse código compilaria, causando um erro somente em tempo de execução, porém quando habilitamos o null safety, já em tempo de compilação o computador nos avisa que um parâmetro do tipo null não pode ser atribuído a um parâmetro do tipo String, isso se deve ao fato de que com o null safety por padrão as variáveis nunca podem ter um valor null, evitando assim que nosso programa quebre.\n\n##Null Safety\n\nO nome já diz: segurança null. Essa feature chegou para fazer nossos códigos mais seguros e a prova de erros, e agora vamos entender o null safety de uma maneira que a gente poderá trabalhar com ou sem ele, assim não importa se você estiver vendo um tutorial ou artigo sobre dart e flutter que foi feito antes do null safety, você saberá exatamente o que fazer para adaptar o código para as versões mais atuais do flutter.\n\n\n###Operador \"?\"\nPor padrão, depois do null safety, todas as variáveis nunca poderão ser nulas, ou seja, elas são \"non nullable\". Mas aí vocês me perguntam: \"mas Rafa, como fazemos então quando a gente QUER que aquela variável seja nula pelo menos durante um determinado momento do programa?\" Isso é simples, basta sinalizar com um \"?\" logo após a tipagem dela, dessa maneira:\n\n\n![final String? nome;](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fp5hxipfr9v4nl5h0ops6.png)\n\nEsse padrão é muito utilizado na criação de classes:\n\n\n![class Pessoa{\n  Pessoa({required this.nome, required this.idade, \n  this.pet});\n  final String nome;\n  final String idade;\n  final String? pet;\n}](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fhwk1wpifuosa0axmnjb7.png)\n\n\nTodas as pessoas tem um nome e idade, mas nem todo mundo tem um bichinho de estimação, assim eu sinalizei para o programa que o campo \"pet\" não é obrigatório, e coloquei a palavra reservada `required` para dizer que os campos \"nome\" e \"idade\" são obrigatórios na criação de uma variável do tipo Pessoa.\n\nOk, mas e se quiséssemos realizar operações com uma variável sem saber se ela é nula ou não?\n\nSe escrevêssemos o seguinte código:\n\n\n![void main(){\n  int num1;\n  int num2 = 10;\n  int soma(int a, int b){\n   return a +b;}\n print(soma(num1, num2));}](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002F64j3e0rm52zulci9an0p.png)\n\nCom o null safety, em tempo de compilação já saberíamos que nosso código não está seguro e conseguiríamos consertar esse erro bem facilmente mesmo a variável `num1` podendo ser nula, da seguinte forma:\n\n![void main(){\n  int? num1;\n  int num2 = 10;\n  int soma(int a, int b){\n    return a +b;}\n if(num1 != null){\n  print(soma(num1, num2));}}](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Feou9xg6bracnuicyvtb4.png)\n\nE por incrível que pareça o Dart vai ficar feliz com esse código sim, pois ele é bem inteligente e já sabe que a função só será executada caso a variável `num1` não seja nula!\n\nTambém podemos utilizar o operador \"??\" para executarmos alguma ação caso algum valor seja nulo:\n\n![int? x;\n int y = x ?? 0;\nprint(y);\u002F\u002F0](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fsunminudv11ba58ztgea.png)\n\n###Operador \"!\"\n\nUsamos esse operador quando temos certeza de que uma variável que pode ser nula tem um valor naquele momento do programa, permitindo assim que a gente execute funções e atribuições envolvendo aquela variável:\n\n\n![  int banana = 10;\n  int? abacaxi;\n  if (banana \u003E 0) {\n    abacaxi = 2;}\n  int frutas = banana + abacaxi!;\n  print(frutas);](https:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Farticles\u002Fzj2i571zvte700b3ntlf.png)\n\nSem o \"!\" o Dart iria reclamar, mas esse sinal é como se a gente falasse pra ele \"fica sussa fiote, eu sei o que eu estou fazendo!\", e ele confia na gente fácil assim! Só cuidado pra não vacilar e ele mandar uma de \"eu avisei!\"...\n\n##Conclusão\n\nVocê chegou até aqui?! Que maravilha, estou muito feliz e espero que você tenha conseguido compreender melhor o null safety e escrever códigos mais confiáveis e seguros!\n\nExistem várias outras situações que poderíamos nos deparar durante a criação dos nossos códigos com null safety e que eu não cobri nesse artigo, pelo fato de que iria ficar muito longo e cansativo, mas espero ter esclarecido o uso dos operadores, o porquê do null safety e como trabalhar com ele.\n\nHoje ouvi uma pessoa muito querida dizer num podcast que programar é como um super poder, eu achei a analogia fantástica, e é como se a cada coisa nova que aprendemos, adicionamos mais algo especial nesse super poder, algo que vai fazer a diferença pra alguém em contato com a tecnologia que criamos!\n\nVamos então salvar o dia com nossos super poderes :)\n\nHappy coding!\n\n\n*Esse artigo foi feito com muita ajuda das explicações do curso de Dart do Andrea Bizzotto na Udemy além de outras fontes diversas na internet. Pra quem entende inglês e quer um curso com explicações claras e projetinhos mão na massa, eu recomendo fortemente o curso do Andrea!\n\n\n",user:{name:"Rafaela Martins",username:e,twitter_username:a,github_username:e,website_url:a,profile_image:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs--t0O5dUHl--\u002Fc_fill,f_auto,fl_progressive,h_640,q_auto,w_640\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F595165\u002F3f2e7694-c7ac-4db6-bbc5-2c2db5eb1315.jpg",profile_image_90:"https:\u002F\u002Fres.cloudinary.com\u002Fpracticaldev\u002Fimage\u002Ffetch\u002Fs---q-l2bh2--\u002Fc_fill,f_auto,fl_progressive,h_90,q_auto,w_90\u002Fhttps:\u002F\u002Fdev-to-uploads.s3.amazonaws.com\u002Fuploads\u002Fuser\u002Fprofile_image\u002F595165\u002F3f2e7694-c7ac-4db6-bbc5-2c2db5eb1315.jpg"}}},serverRendered:true,routePath:"\u002Farticles\u002Frrafush\u002F836057",config:{_app:{basePath:"\u002F",assetsPath:"\u002F_nuxt\u002F",cdnURL:a}}}}(null,"https:\u002F\u002Fdev.to\u002Frrafush\u002Fentendendo-o-null-safety-437k",19,"2021-10-12T15:31:42Z","rrafush"));